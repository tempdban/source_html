<dec f='linux-4.18.y/include/linux/rhashtable.h' l='387' type='void rhashtable_walk_enter(struct rhashtable * ht, struct rhashtable_iter * iter)'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='1252' u='c' c='rhashtable_walk_init'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='1280' u='c' c='rhltable_walk_enter'/>
<def f='linux-4.18.y/lib/rhashtable.c' l='677' ll='690' type='void rhashtable_walk_enter(struct rhashtable * ht, struct rhashtable_iter * iter)'/>
<dec f='linux-4.18.y/lib/rhashtable.c' l='691' type='void rhashtable_walk_enter(struct rhashtable * , struct rhashtable_iter * )'/>
<use f='linux-4.18.y/lib/rhashtable.c' l='691' c='rhashtable_walk_enter'/>
<use f='linux-4.18.y/lib/rhashtable.c' l='691' u='a'/>
<use f='linux-4.18.y/lib/rhashtable.c' l='691' u='a'/>
<doc f='linux-4.18.y/lib/rhashtable.c' l='656'>/**
 * rhashtable_walk_enter - Initialise an iterator
 * @ht:		Table to walk over
 * @iter:	Hash table Iterator
 *
 * This function prepares a hash table walk.
 *
 * Note that if you restart a walk after rhashtable_walk_stop you
 * may see the same object twice.  Also, you may miss objects if
 * there are removals in between rhashtable_walk_stop and the next
 * call to rhashtable_walk_start.
 *
 * For a completely stable walk you should construct your own data
 * structure outside the hash table.
 *
 * This function may be called from any process context, including
 * non-preemptable context, but cannot be called from softirq or
 * hardirq context.
 *
 * You must call rhashtable_walk_exit after this function returns.
 */</doc>
