<dec f='linux-4.14.y/include/linux/zlib.h' l='555' type='int zlib_inflateReset(z_streamp strm)'/>
<def f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='23' ll='46' type='int zlib_inflateReset(z_streamp strm)'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='71' u='c' c='zlib_inflateInit2'/>
<doc f='linux-4.14.y/include/linux/zlib.h' l='513'>/*   
extern int inflateInit2 (z_streamp strm, int  windowBits);

     This is another version of inflateInit with an extra parameter. The
   fields next_in, avail_in, zalloc, zfree and opaque must be initialized
   before by the caller.

     The windowBits parameter is the base two logarithm of the maximum window
   size (the size of the history buffer).  It should be in the range 8..15 for
   this version of the library. The default value is 15 if inflateInit is used
   instead. windowBits must be greater than or equal to the windowBits value
   provided to deflateInit2() while compressing, or it must be equal to 15 if
   deflateInit2() was not used. If a compressed stream with a larger window
   size is given as input, inflate() will return with the error code
   Z_DATA_ERROR instead of trying to allocate a larger window.

     windowBits can also be -8..-15 for raw inflate. In this case, -windowBits
   determines the window size. inflate() will then process raw deflate data,
   not looking for a zlib or gzip header, not generating a check value, and not
   looking for any check values for comparison at the end of the stream. This
   is for use with other formats that use the deflate compressed data format
   such as zip.  Those formats provide their own check values. If a custom
   format is developed using the raw deflate format for compressed data, it is
   recommended that a check value such as an adler32 or a crc32 be applied to
   the uncompressed data as is done in the zlib, gzip, and zip formats.  For
   most applications, the zlib format should be used as is. Note that comments
   above on the use in deflateInit2() applies to the magnitude of windowBits.

     windowBits can also be greater than 15 for optional gzip decoding. Add
   32 to windowBits to enable zlib and gzip decoding with automatic header
   detection, or add 16 to decode only the gzip format (the zlib format will
   return a Z_DATA_ERROR).  If a gzip stream is being decoded, strm-&gt;adler is
   a crc32 instead of an adler32.

     inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough
   memory, Z_STREAM_ERROR if a parameter is invalid (such as a null strm). msg
   is set to null if there is no error message.  inflateInit2 does not perform
   any decompression apart from reading the zlib header if present: this will
   be done by inflate(). (So next_in and avail_in may be modified, but next_out
   and avail_out are unchanged.)
*/</doc>
<dec f='linux-4.14.y/lib/zlib_inflate/inflate_syms.c' l='17' type='int zlib_inflateReset(z_streamp )'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate_syms.c' l='17' c='zlib_inflateReset'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate_syms.c' l='17' u='a'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate_syms.c' l='17' u='a'/>
<dec f='linux-4.14.y/include/linux/zlib.h' l='555' type='int zlib_inflateReset(z_streamp strm)'/>
<def f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='23' ll='46' type='int zlib_inflateReset(z_streamp strm)'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='71' u='c' c='zlib_inflateInit2'/>
<doc f='linux-4.14.y/include/linux/zlib.h' l='513'>/*   
extern int inflateInit2 (z_streamp strm, int  windowBits);

     This is another version of inflateInit with an extra parameter. The
   fields next_in, avail_in, zalloc, zfree and opaque must be initialized
   before by the caller.

     The windowBits parameter is the base two logarithm of the maximum window
   size (the size of the history buffer).  It should be in the range 8..15 for
   this version of the library. The default value is 15 if inflateInit is used
   instead. windowBits must be greater than or equal to the windowBits value
   provided to deflateInit2() while compressing, or it must be equal to 15 if
   deflateInit2() was not used. If a compressed stream with a larger window
   size is given as input, inflate() will return with the error code
   Z_DATA_ERROR instead of trying to allocate a larger window.

     windowBits can also be -8..-15 for raw inflate. In this case, -windowBits
   determines the window size. inflate() will then process raw deflate data,
   not looking for a zlib or gzip header, not generating a check value, and not
   looking for any check values for comparison at the end of the stream. This
   is for use with other formats that use the deflate compressed data format
   such as zip.  Those formats provide their own check values. If a custom
   format is developed using the raw deflate format for compressed data, it is
   recommended that a check value such as an adler32 or a crc32 be applied to
   the uncompressed data as is done in the zlib, gzip, and zip formats.  For
   most applications, the zlib format should be used as is. Note that comments
   above on the use in deflateInit2() applies to the magnitude of windowBits.

     windowBits can also be greater than 15 for optional gzip decoding. Add
   32 to windowBits to enable zlib and gzip decoding with automatic header
   detection, or add 16 to decode only the gzip format (the zlib format will
   return a Z_DATA_ERROR).  If a gzip stream is being decoded, strm-&gt;adler is
   a crc32 instead of an adler32.

     inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough
   memory, Z_STREAM_ERROR if a parameter is invalid (such as a null strm). msg
   is set to null if there is no error message.  inflateInit2 does not perform
   any decompression apart from reading the zlib header if present: this will
   be done by inflate(). (So next_in and avail_in may be modified, but next_out
   and avail_out are unchanged.)
*/</doc>
<dec f='linux-4.14.y/lib/zlib_inflate/inflate_syms.c' l='17' type='int zlib_inflateReset(z_streamp )'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate_syms.c' l='17' c='zlib_inflateReset'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate_syms.c' l='17' u='a'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate_syms.c' l='17' u='a'/>
