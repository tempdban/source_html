<dec f='linux-4.18.y/include/linux/radix-tree.h' l='324' type='unsigned int radix_tree_gang_lookup(const struct radix_tree_root * , void ** results, unsigned long first_index, unsigned int max_items)'/>
<use f='linux-4.18.y/drivers/block/brd.c' l='145' u='c' c='brd_free_pages'/>
<use f='linux-4.18.y/fs/f2fs/node.c' l='192' u='c' c='__gang_lookup_nat_cache'/>
<use f='linux-4.18.y/fs/f2fs/node.c' l='266' u='c' c='__gang_lookup_nat_set'/>
<def f='linux-4.18.y/lib/radix-tree.c' l='1822' ll='1846' type='unsigned int radix_tree_gang_lookup(const struct radix_tree_root * root, void ** results, unsigned long first_index, unsigned int max_items)'/>
<dec f='linux-4.18.y/lib/radix-tree.c' l='1847' type='unsigned int radix_tree_gang_lookup(const struct radix_tree_root * , void ** , unsigned long , unsigned int )'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='1847' c='radix_tree_gang_lookup'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='1847' u='a'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='1847' u='a'/>
<doc f='linux-4.18.y/lib/radix-tree.c' l='1802'>/**
 *	radix_tree_gang_lookup - perform multiple lookup on a radix tree
 *	@root:		radix tree root
 *	@results:	where the results of the lookup are placed
 *	@first_index:	start the lookup from this key
 *	@max_items:	place up to this many items at *results
 *
 *	Performs an index-ascending scan of the tree for present items.  Places
 *	them at *@results and returns the number of items which were placed at
 *	*@results.
 *
 *	The implementation is naive.
 *
 *	Like radix_tree_lookup, radix_tree_gang_lookup may be called under
 *	rcu_read_lock. In this case, rather than the returned results being
 *	an atomic snapshot of the tree at a single point in time, the
 *	semantics of an RCU protected gang lookup are as though multiple
 *	radix_tree_lookups have been issued in individual locks, and results
 *	stored in &apos;results&apos;.
 */</doc>
