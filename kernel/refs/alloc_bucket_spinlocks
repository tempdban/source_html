<dec f='linux-4.18.y/include/linux/spinlock.h' l='435' type='int alloc_bucket_spinlocks(spinlock_t ** locks, unsigned int * lock_mask, size_t max_size, unsigned int cpu_mult, gfp_t gfp)'/>
<def f='linux-4.18.y/lib/bucket_locks.c' l='14' ll='44' type='int alloc_bucket_spinlocks(spinlock_t ** locks, unsigned int * locks_mask, size_t max_size, unsigned int cpu_mult, gfp_t gfp)'/>
<dec f='linux-4.18.y/lib/bucket_locks.c' l='45' type='int alloc_bucket_spinlocks(spinlock_t ** , unsigned int * , size_t , unsigned int , gfp_t )'/>
<use f='linux-4.18.y/lib/bucket_locks.c' l='45' c='alloc_bucket_spinlocks'/>
<use f='linux-4.18.y/lib/bucket_locks.c' l='45' u='a'/>
<use f='linux-4.18.y/lib/bucket_locks.c' l='45' u='a'/>
<doc f='linux-4.18.y/lib/bucket_locks.c' l='7'>/* Allocate an array of spinlocks to be accessed by a hash. Two arguments
 * indicate the number of elements to allocate in the array. max_size
 * gives the maximum number of elements to allocate. cpu_mult gives
 * the number of locks per CPU to allocate. The size is rounded up
 * to a power of 2 to be suitable as a hash table.
 */</doc>
<use f='linux-4.18.y/lib/rhashtable.c' l='198' u='c' c='bucket_table_alloc'/>
