<dec f='linux-4.18.y/include/linux/radix-tree.h' l='318' type='void radix_tree_iter_delete(struct radix_tree_root * , struct radix_tree_iter * iter, void ** slot)'/>
<use f='linux-4.18.y/lib/idr.c' l='514' u='c' c='ida_remove'/>
<use f='linux-4.18.y/lib/idr.c' l='517' u='c' c='ida_remove'/>
<use f='linux-4.18.y/lib/idr.c' l='543' u='c' c='ida_destroy'/>
<def f='linux-4.18.y/lib/radix-tree.c' l='2014' ll='2019' type='void radix_tree_iter_delete(struct radix_tree_root * root, struct radix_tree_iter * iter, void ** slot)'/>
<dec f='linux-4.18.y/lib/radix-tree.c' l='2020' type='void radix_tree_iter_delete(struct radix_tree_root * , struct radix_tree_iter * , void ** )'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='2020' c='radix_tree_iter_delete'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='2020' u='a'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='2020' u='a'/>
<doc f='linux-4.18.y/lib/radix-tree.c' l='2002'>/**
 * radix_tree_iter_delete - delete the entry at this iterator position
 * @root: radix tree root
 * @iter: iterator state
 * @slot: pointer to slot
 *
 * Delete the entry at the position currently pointed to by the iterator.
 * This may result in the current node being freed; if it is, the iterator
 * is advanced so that it will not reference the freed memory.  This
 * function may be called without any locking if there are no other threads
 * which can access this tree.
 */</doc>
