<dec f='linux-4.18.y/include/linux/clk-provider.h' l='745' type='void devm_clk_hw_unregister(struct device * dev, struct clk_hw * hw)'/>
<def f='linux-4.18.y/drivers/clk/clk.c' l='3293' ll='3297' type='void devm_clk_hw_unregister(struct device * dev, struct clk_hw * hw)'/>
<dec f='linux-4.18.y/drivers/clk/clk.c' l='3298' type='void devm_clk_hw_unregister(struct device * , struct clk_hw * )'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3298' c='devm_clk_hw_unregister'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3298' u='a'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3298' u='a'/>
<doc f='linux-4.18.y/drivers/clk/clk.c' l='3284'>/**
 * devm_clk_hw_unregister - resource managed clk_hw_unregister()
 * @dev: device that is unregistering the hardware-specific clock data
 * @hw: link to hardware-specific clock data
 *
 * Unregister a clk_hw registered with devm_clk_hw_register(). Normally
 * this function will not need to be called and the resource management
 * code will ensure that the resource is freed.
 */</doc>
