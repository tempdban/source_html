<dec f='linux-4.18.y/include/linux/device.h' l='648' type='void * devres_remove(struct device * dev, dr_release_t release, dr_match_t match, void * match_data)'/>
<def f='linux-4.18.y/drivers/base/devres.c' l='330' ll='347' type='void * devres_remove(struct device * dev, dr_release_t release, dr_match_t match, void * match_data)'/>
<dec f='linux-4.18.y/drivers/base/devres.c' l='348' type='void * devres_remove(struct device * , dr_release_t , dr_match_t , void * )'/>
<use f='linux-4.18.y/drivers/base/devres.c' l='348' c='devres_remove'/>
<use f='linux-4.18.y/drivers/base/devres.c' l='348' u='a'/>
<use f='linux-4.18.y/drivers/base/devres.c' l='348' u='a'/>
<use f='linux-4.18.y/drivers/base/devres.c' l='373' u='c' c='devres_destroy'/>
<use f='linux-4.18.y/drivers/base/devres.c' l='403' u='c' c='devres_release'/>
<doc f='linux-4.18.y/drivers/base/devres.c' l='315'>/**
 * devres_remove - Find a device resource and remove it
 * @dev: Device to find resource from
 * @release: Look for resources associated with this release function
 * @match: Match function (optional)
 * @match_data: Data for the match function
 *
 * Find the latest devres of @dev associated with @release and for
 * which @match returns 1.  If @match is NULL, it&apos;s considered to
 * match all.  If found, the resource is removed atomically and
 * returned.
 *
 * RETURNS:
 * Pointer to removed devres on success, NULL if not found.
 */</doc>
