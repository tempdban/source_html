<dec f='linux-4.14.y/include/linux/srcu.h' l='75' type='void synchronize_srcu(struct srcu_struct * sp)'/>
<use f='linux-4.14.y/block/blk-mq.c' l='242' u='c' c='blk_mq_quiesce_queue'/>
<use f='linux-4.14.y/drivers/dax/super.c' l='339' u='c' c='kill_dax'/>
<use f='linux-4.14.y/drivers/md/dm.c' l='590' u='c' c='dm_sync_table'/>
<use f='linux-4.14.y/drivers/md/dm.c' l='2389' u='c' c='__dm_suspend'/>
<use f='linux-4.14.y/drivers/md/dm.c' l='2415' u='c' c='__dm_suspend'/>
<use f='linux-4.14.y/drivers/md/dm.c' l='2626' u='c' c='dm_internal_suspend_fast'/>
<use f='linux-4.14.y/fs/debugfs/inode.c' l='664' u='c' c='debugfs_remove'/>
<use f='linux-4.14.y/fs/debugfs/inode.c' l='739' u='c' c='debugfs_remove_recursive'/>
<use f='linux-4.14.y/fs/notify/mark.c' l='156' u='c' c='fsnotify_connector_destroy_workfn'/>
<use f='linux-4.14.y/fs/notify/mark.c' l='757' u='c' c='fsnotify_mark_destroy_workfn'/>
<use f='linux-4.14.y/kernel/events/core.c' l='9282' u='c' c='perf_pmu_unregister'/>
<use f='linux-4.14.y/kernel/notifier.c' l='467' u='c' c='srcu_notifier_chain_unregister'/>
<def f='linux-4.14.y/kernel/rcu/srcutree.c' l='971' ll='977' type='void synchronize_srcu(struct srcu_struct * sp)'/>
<dec f='linux-4.14.y/kernel/rcu/srcutree.c' l='978' type='void synchronize_srcu(struct srcu_struct * )'/>
<use f='linux-4.14.y/kernel/rcu/srcutree.c' l='978' c='synchronize_srcu'/>
<use f='linux-4.14.y/kernel/rcu/srcutree.c' l='978' u='a'/>
<use f='linux-4.14.y/kernel/rcu/srcutree.c' l='978' u='a'/>
<doc f='linux-4.14.y/kernel/rcu/srcutree.c' l='927'>/**
 * synchronize_srcu - wait for prior SRCU read-side critical-section completion
 * @sp: srcu_struct with which to synchronize.
 *
 * Wait for the count to drain to zero of both indexes. To avoid the
 * possible starvation of synchronize_srcu(), it waits for the count of
 * the index=((-&gt;srcu_idx &amp; 1) ^ 1) to drain to zero at first,
 * and then flip the srcu_idx and wait for the count of the other index.
 *
 * Can block; must be called from process context.
 *
 * Note that it is illegal to call synchronize_srcu() from the corresponding
 * SRCU read-side critical section; doing so will result in deadlock.
 * However, it is perfectly legal to call synchronize_srcu() on one
 * srcu_struct from some other srcu_struct&apos;s read-side critical section,
 * as long as the resulting graph of srcu_structs is acyclic.
 *
 * There are memory-ordering constraints implied by synchronize_srcu().
 * On systems with more than one CPU, when synchronize_srcu() returns,
 * each CPU is guaranteed to have executed a full memory barrier since
 * the end of its last corresponding SRCU-sched read-side critical section
 * whose beginning preceded the call to synchronize_srcu().  In addition,
 * each CPU having an SRCU read-side critical section that extends beyond
 * the return from synchronize_srcu() is guaranteed to have executed a
 * full memory barrier after the beginning of synchronize_srcu() and before
 * the beginning of that SRCU read-side critical section.  Note that these
 * guarantees include CPUs that are offline, idle, or executing in user mode,
 * as well as CPUs that are executing in the kernel.
 *
 * Furthermore, if CPU A invoked synchronize_srcu(), which returned
 * to its caller on CPU B, then both CPU A and CPU B are guaranteed
 * to have executed a full memory barrier during the execution of
 * synchronize_srcu().  This guarantee applies even if CPU A and CPU B
 * are the same CPU, but again only if the system has more than one CPU.
 *
 * Of course, these memory-ordering guarantees apply only when
 * synchronize_srcu(), srcu_read_lock(), and srcu_read_unlock() are
 * passed the same srcu_struct structure.
 *
 * If SRCU is likely idle, expedite the first request.  This semantic
 * was provided by Classic SRCU, and is relied upon by its users, so TREE
 * SRCU must also provide it.  Note that detecting idleness is heuristic
 * and subject to both false positives and negatives.
 */</doc>
<use f='linux-4.14.y/mm/mmu_notifier.c' l='102' u='c' c='__mmu_notifier_release'/>
<use f='linux-4.14.y/mm/mmu_notifier.c' l='363' u='c' c='mmu_notifier_unregister'/>
<use f='linux-4.14.y/security/tomoyo/gc.c' l='386' u='c' c='tomoyo_try_to_gc'/>
