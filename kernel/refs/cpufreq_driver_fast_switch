<dec f='linux-4.14.y/include/linux/cpufreq.h' l='526' type='unsigned int cpufreq_driver_fast_switch(struct cpufreq_policy * policy, unsigned int target_freq)'/>
<doc f='linux-4.14.y/include/linux/cpufreq.h' l='525'>/* Pass a target to the cpufreq driver */</doc>
<def f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1853' ll='1859' type='unsigned int cpufreq_driver_fast_switch(struct cpufreq_policy * policy, unsigned int target_freq)'/>
<dec f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1860' type='unsigned int cpufreq_driver_fast_switch(struct cpufreq_policy * , unsigned int )'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1860' c='cpufreq_driver_fast_switch'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1860' u='a'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1860' u='a'/>
<doc f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1830'>/**
 * cpufreq_driver_fast_switch - Carry out a fast CPU frequency switch.
 * @policy: cpufreq policy to switch the frequency for.
 * @target_freq: New frequency to set (may be approximate).
 *
 * Carry out a fast frequency switch without sleeping.
 *
 * The driver&apos;s -&gt;fast_switch() callback invoked by this function must be
 * suitable for being called from within RCU-sched read-side critical sections
 * and it is expected to select the minimum available frequency greater than or
 * equal to @target_freq (CPUFREQ_RELATION_L).
 *
 * This function must not be called if policy-&gt;fast_switch_enabled is unset.
 *
 * Governors calling this function must guarantee that it will never be invoked
 * twice in parallel for the same policy and that it will never be called in
 * parallel with either -&gt;target() or -&gt;target_index() for the same policy.
 *
 * Returns the actual frequency set for the CPU.
 *
 * If 0 is returned by the driver&apos;s -&gt;fast_switch() callback to indicate an
 * error condition, the hardware configuration must be preserved.
 */</doc>
