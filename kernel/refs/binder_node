<def f='linux-4.14.y/drivers/android/binder.c' l='363' ll='398'/>
<size>128</size>
<doc f='linux-4.14.y/drivers/android/binder.c' l='305'>/**
 * struct binder_node - binder node bookkeeping
 * @debug_id:             unique ID for debugging
 *                        (invariant after initialized)
 * @lock:                 lock for node fields
 * @work:                 worklist element for node work
 *                        (protected by @proc-&gt;inner_lock)
 * @rb_node:              element for proc-&gt;nodes tree
 *                        (protected by @proc-&gt;inner_lock)
 * @dead_node:            element for binder_dead_nodes list
 *                        (protected by binder_dead_nodes_lock)
 * @proc:                 binder_proc that owns this node
 *                        (invariant after initialized)
 * @refs:                 list of references on this node
 *                        (protected by @lock)
 * @internal_strong_refs: used to take strong references when
 *                        initiating a transaction
 *                        (protected by @proc-&gt;inner_lock if @proc
 *                        and by @lock)
 * @local_weak_refs:      weak user refs from local process
 *                        (protected by @proc-&gt;inner_lock if @proc
 *                        and by @lock)
 * @local_strong_refs:    strong user refs from local process
 *                        (protected by @proc-&gt;inner_lock if @proc
 *                        and by @lock)
 * @tmp_refs:             temporary kernel refs
 *                        (protected by @proc-&gt;inner_lock while @proc
 *                        is valid, and by binder_dead_nodes_lock
 *                        if @proc is NULL. During inc/dec and node release
 *                        it is also protected by @lock to provide safety
 *                        as the node dies and @proc becomes NULL)
 * @ptr:                  userspace pointer for node
 *                        (invariant, no lock needed)
 * @cookie:               userspace cookie for node
 *                        (invariant, no lock needed)
 * @has_strong_ref:       userspace notified of strong ref
 *                        (protected by @proc-&gt;inner_lock if @proc
 *                        and by @lock)
 * @pending_strong_ref:   userspace has acked notification of strong ref
 *                        (protected by @proc-&gt;inner_lock if @proc
 *                        and by @lock)
 * @has_weak_ref:         userspace notified of weak ref
 *                        (protected by @proc-&gt;inner_lock if @proc
 *                        and by @lock)
 * @pending_weak_ref:     userspace has acked notification of weak ref
 *                        (protected by @proc-&gt;inner_lock if @proc
 *                        and by @lock)
 * @has_async_transaction: async transaction to node in progress
 *                        (protected by @lock)
 * @accept_fds:           file descriptor operations supported for node
 *                        (invariant after initialized)
 * @min_priority:         minimum scheduling priority
 *                        (invariant after initialized)
 * @async_todo:           list of async work items
 *                        (protected by @proc-&gt;inner_lock)
 *
 * Bookkeeping structure for binder nodes.
 */</doc>
<mbr r='binder_node::debug_id' o='0' t='int'/>
<mbr r='binder_node::lock' o='32' t='spinlock_t'/>
<mbr r='binder_node::work' o='64' t='struct binder_work'/>
<mbr r='binder_node::proc' o='448' t='struct binder_proc *'/>
<mbr r='binder_node::refs' o='512' t='struct hlist_head'/>
<mbr r='binder_node::internal_strong_refs' o='576' t='int'/>
<mbr r='binder_node::local_weak_refs' o='608' t='int'/>
<mbr r='binder_node::local_strong_refs' o='640' t='int'/>
<mbr r='binder_node::tmp_refs' o='672' t='int'/>
<mbr r='binder_node::ptr' o='704' t='binder_uintptr_t'/>
<mbr r='binder_node::cookie' o='768' t='binder_uintptr_t'/>
<mbr r='binder_node::has_async_transaction' o='856' t='bool'/>
<mbr r='binder_node::async_todo' o='896' t='struct list_head'/>
