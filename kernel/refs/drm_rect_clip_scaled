<dec f='linux-4.18.y/include/drm/drm_rect.h' l='177' type='bool drm_rect_clip_scaled(struct drm_rect * src, struct drm_rect * dst, const struct drm_rect * clip)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='769' u='c' c='drm_atomic_helper_check_plane_state'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='80' ll='119' type='bool drm_rect_clip_scaled(struct drm_rect * src, struct drm_rect * dst, const struct drm_rect * clip)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='120' type='bool drm_rect_clip_scaled(struct drm_rect * , struct drm_rect * , const struct drm_rect * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='120' c='drm_rect_clip_scaled'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='120' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='120' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='67'>/**
 * drm_rect_clip_scaled - perform a scaled clip operation
 * @src: source window rectangle
 * @dst: destination window rectangle
 * @clip: clip rectangle
 *
 * Clip rectangle @dst by rectangle @clip. Clip rectangle @src by the
 * same amounts multiplied by @hscale and @vscale.
 *
 * RETURNS:
 * %true if rectangle @dst is still visible after being clipped,
 * %false otherwise
 */</doc>
