<dec f='linux-4.14.y/include/drm/drm_crtc_helper.h' l='49' type='bool drm_crtc_helper_set_mode(struct drm_crtc * crtc, struct drm_display_mode * mode, int x, int y, struct drm_framebuffer * old_fb)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='269' ll='435' type='bool drm_crtc_helper_set_mode(struct drm_crtc * crtc, struct drm_display_mode * mode, int x, int y, struct drm_framebuffer * old_fb)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='436' type='bool drm_crtc_helper_set_mode(struct drm_crtc * , struct drm_display_mode * , int , int , struct drm_framebuffer * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='436' c='drm_crtc_helper_set_mode'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='436' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='436' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='723' u='c' c='drm_crtc_helper_set_config'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='782' u='c' c='drm_crtc_helper_set_config'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='954' u='c' c='drm_helper_resume_force_mode'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='249'>/**
 * drm_crtc_helper_set_mode - internal helper to set a mode
 * @crtc: CRTC to program
 * @mode: mode to use
 * @x: horizontal offset into the surface
 * @y: vertical offset into the surface
 * @old_fb: old framebuffer, for cleanup
 *
 * Try to set @mode on @crtc.  Give @crtc and its associated connectors a chance
 * to fixup or reject the mode prior to trying to set it. This is an internal
 * helper that drivers could e.g. use to update properties that require the
 * entire output pipe to be disabled and re-enabled in a new configuration. For
 * example for changing whether audio is enabled on a hdmi link or for changing
 * panel fitter or dither attributes. It is also called by the
 * drm_crtc_helper_set_config() helper function to drive the mode setting
 * sequence.
 *
 * Returns:
 * True if the mode was set successfully, false otherwise.
 */</doc>
<dec f='linux-4.14.y/include/drm/drm_crtc_helper.h' l='49' type='bool drm_crtc_helper_set_mode(struct drm_crtc * crtc, struct drm_display_mode * mode, int x, int y, struct drm_framebuffer * old_fb)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='269' ll='435' type='bool drm_crtc_helper_set_mode(struct drm_crtc * crtc, struct drm_display_mode * mode, int x, int y, struct drm_framebuffer * old_fb)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='436' type='bool drm_crtc_helper_set_mode(struct drm_crtc * , struct drm_display_mode * , int , int , struct drm_framebuffer * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='436' c='drm_crtc_helper_set_mode'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='436' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='436' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='723' u='c' c='drm_crtc_helper_set_config'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='782' u='c' c='drm_crtc_helper_set_config'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='954' u='c' c='drm_helper_resume_force_mode'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='249'>/**
 * drm_crtc_helper_set_mode - internal helper to set a mode
 * @crtc: CRTC to program
 * @mode: mode to use
 * @x: horizontal offset into the surface
 * @y: vertical offset into the surface
 * @old_fb: old framebuffer, for cleanup
 *
 * Try to set @mode on @crtc.  Give @crtc and its associated connectors a chance
 * to fixup or reject the mode prior to trying to set it. This is an internal
 * helper that drivers could e.g. use to update properties that require the
 * entire output pipe to be disabled and re-enabled in a new configuration. For
 * example for changing whether audio is enabled on a hdmi link or for changing
 * panel fitter or dither attributes. It is also called by the
 * drm_crtc_helper_set_config() helper function to drive the mode setting
 * sequence.
 *
 * Returns:
 * True if the mode was set successfully, false otherwise.
 */</doc>
