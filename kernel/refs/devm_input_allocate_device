<dec f='linux-4.18.y/include/linux/input.h' l='338' type='struct input_dev * devm_input_allocate_device(struct device * )'/>
<def f='linux-4.18.y/drivers/input/input.c' l='1848' ll='1871' type='struct input_dev * devm_input_allocate_device(struct device * dev)'/>
<dec f='linux-4.18.y/drivers/input/input.c' l='1872' type='struct input_dev * devm_input_allocate_device(struct device * )'/>
<use f='linux-4.18.y/drivers/input/input.c' l='1872' c='devm_input_allocate_device'/>
<use f='linux-4.18.y/drivers/input/input.c' l='1872' u='a'/>
<use f='linux-4.18.y/drivers/input/input.c' l='1872' u='a'/>
<doc f='linux-4.18.y/drivers/input/input.c' l='1830'>/**
 * devm_input_allocate_device - allocate managed input device
 * @dev: device owning the input device being created
 *
 * Returns prepared struct input_dev or %NULL.
 *
 * Managed input devices do not need to be explicitly unregistered or
 * freed as it will be done automatically when owner device unbinds from
 * its driver (or binding fails). Once managed input device is allocated,
 * it is ready to be set up and registered in the same fashion as regular
 * input device. There are no special devm_input_device_[un]register()
 * variants, regular ones work with both managed and unmanaged devices,
 * should you need them. In most cases however, managed input device need
 * not be explicitly unregistered or freed.
 *
 * NOTE: the owner device is set up as parent of input device and users
 * should not override it.
 */</doc>
<use f='linux-4.18.y/drivers/virt/vboxguest/vboxguest_linux.c' l='214' u='c' c='vbg_create_input_device'/>
