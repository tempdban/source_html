<dec f='linux-4.18.y/include/linux/blkdev.h' l='1189' type='void blk_abort_request(struct request * )'/>
<def f='linux-4.18.y/block/blk-timeout.c' l='154' ll='170' type='void blk_abort_request(struct request * req)'/>
<dec f='linux-4.18.y/block/blk-timeout.c' l='171' type='void blk_abort_request(struct request * )'/>
<use f='linux-4.18.y/block/blk-timeout.c' l='171' c='blk_abort_request'/>
<use f='linux-4.18.y/block/blk-timeout.c' l='171' u='a'/>
<use f='linux-4.18.y/block/blk-timeout.c' l='171' u='a'/>
<doc f='linux-4.18.y/block/blk-timeout.c' l='145'>/**
 * blk_abort_request -- Request request recovery for the specified command
 * @req:	pointer to the request of interest
 *
 * This function requests that the block layer start recovery for the
 * request by deleting the timer and calling the q&apos;s timeout function.
 * LLDDs who implement their own error recovery MAY ignore the timeout
 * event if they generated blk_abort_req. Must hold queue lock.
 */</doc>
<use f='linux-4.18.y/drivers/ata/libata-eh.c' l='936' u='c' c='ata_qc_schedule_eh'/>
<use f='linux-4.18.y/drivers/scsi/libsas/sas_ata.c' l='613' u='c' c='sas_ata_task_abort'/>
<use f='linux-4.18.y/drivers/scsi/libsas/sas_scsi_host.c' l='940' u='c' c='sas_task_abort'/>
