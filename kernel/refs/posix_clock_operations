<def f='linux-4.18.y/include/linux/posix-clock.h' l='51' ll='78'/>
<size>80</size>
<doc f='linux-4.18.y/include/linux/posix-clock.h' l='31'>/**
 * struct posix_clock_operations - functional interface to the clock
 *
 * Every posix clock is represented by a character device. Drivers may
 * optionally offer extended capabilities by implementing the
 * character device methods. The character device file operations are
 * first handled by the clock device layer, then passed on to the
 * driver by calling these functions.
 *
 * @owner:          The clock driver should set to THIS_MODULE
 * @clock_adjtime:  Adjust the clock
 * @clock_gettime:  Read the current time
 * @clock_getres:   Get the clock resolution
 * @clock_settime:  Set the current time value
 * @open:           Optional character device open method
 * @release:        Optional character device release method
 * @ioctl:          Optional character device ioctl method
 * @read:           Optional character device read method
 * @poll:           Optional character device poll method
 */</doc>
<mbr r='posix_clock_operations::owner' o='0' t='struct module *'/>
<mbr r='posix_clock_operations::clock_adjtime' o='64' t='int (*)(struct posix_clock *, struct timex *)'/>
<mbr r='posix_clock_operations::clock_gettime' o='128' t='int (*)(struct posix_clock *, struct timespec64 *)'/>
<mbr r='posix_clock_operations::clock_getres' o='192' t='int (*)(struct posix_clock *, struct timespec64 *)'/>
<mbr r='posix_clock_operations::clock_settime' o='256' t='int (*)(struct posix_clock *, const struct timespec64 *)'/>
<mbr r='posix_clock_operations::ioctl' o='320' t='long (*)(struct posix_clock *, unsigned int, unsigned long)'/>
<mbr r='posix_clock_operations::open' o='384' t='int (*)(struct posix_clock *, fmode_t)'/>
<mbr r='posix_clock_operations::poll' o='448' t='__poll_t (*)(struct posix_clock *, struct file *, poll_table *)'/>
<mbr r='posix_clock_operations::release' o='512' t='int (*)(struct posix_clock *)'/>
<mbr r='posix_clock_operations::read' o='576' t='ssize_t (*)(struct posix_clock *, uint, char *, size_t)'/>
