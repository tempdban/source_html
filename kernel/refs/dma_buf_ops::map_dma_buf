<dec f='linux-4.18.y/include/linux/dma-buf.h' l='132' type='struct sg_table *(*)(struct dma_buf_attachment *, enum dma_data_direction)'/>
<use f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='405' u='r' c='dma_buf_export'/>
<use f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='635' u='r' c='dma_buf_map_attachment'/>
<offset>128</offset>
<doc f='linux-4.18.y/include/linux/dma-buf.h' l='94'>/**
	 * @map_dma_buf:
	 *
	 * This is called by dma_buf_map_attachment() and is used to map a
	 * shared &amp;dma_buf into device address space, and it is mandatory. It
	 * can only be called if @attach has been called successfully. This
	 * essentially pins the DMA buffer into place, and it cannot be moved
	 * any more
	 *
	 * This call may sleep, e.g. when the backing storage first needs to be
	 * allocated, or moved to a location suitable for all currently attached
	 * devices.
	 *
	 * Note that any specific buffer attributes required for this function
	 * should get added to device_dma_parameters accessible via
	 * &amp;device.dma_params from the &amp;dma_buf_attachment. The @attach callback
	 * should also check these constraints.
	 *
	 * If this is being called for the first time, the exporter can now
	 * choose to scan through the list of attachments for this buffer,
	 * collate the requirements of the attached devices, and choose an
	 * appropriate backing storage for the buffer.
	 *
	 * Based on enum dma_data_direction, it might be possible to have
	 * multiple users accessing at the same time (for reading, maybe), or
	 * any other kind of sharing that the exporter might wish to make
	 * available to buffer-users.
	 *
	 * Returns:
	 *
	 * A &amp;sg_table scatter list of or the backing storage of the DMA buffer,
	 * already mapped into the device address space of the &amp;device attached
	 * with the provided &amp;dma_buf_attachment.
	 *
	 * On failure, returns a negative error value wrapped into a pointer.
	 * May also return -EINTR when a signal was received while being
	 * blocked.
	 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='519' u='w'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_prime.c' l='108' u='w'/>
