<dec f='linux-4.18.y/lib/librte_ethdev/rte_mtr.h' l='663' type='int rte_mtr_policer_actions_update(uint16_t port_id, uint32_t mtr_id, uint32_t action_mask, enum rte_mtr_policer_action * actions, struct rte_mtr_error * error)'/>
<use f='linux-4.18.y/app/test-pmd/cmdline_mtr.c' l='1262' u='c' c='cmd_set_port_meter_policer_action_parsed'/>
<doc f='linux-4.18.y/lib/librte_ethdev/rte_mtr.h' l='642'>/**
 * MTR object policer actions update
 *
 * @param[in] port_id
 *   The port identifier of the Ethernet device.
 * @param[in] mtr_id
 *   MTR object ID. Needs to be valid.
 * @param[in] action_mask
 *   Bit mask indicating which policer actions need to be updated. One or more
 *   policer actions can be updated in a single function invocation. To update
 *   the policer action associated with color C, bit (1 &lt;&lt; C) needs to be set in
 *   *action_mask* and element at position C in the *actions* array needs to be
 *   valid.
 * @param[in] actions
 *   Pre-allocated and pre-populated array of policer actions.
 * @param[out] error
 *   Error details. Filled in only on error, when not NULL.
 * @return
 *   0 on success, non-zero error code otherwise.
 */</doc>
<def f='linux-4.18.y/lib/librte_ethdev/rte_mtr.c' l='165' ll='175' type='int rte_mtr_policer_actions_update(uint16_t port_id, uint32_t mtr_id, uint32_t action_mask, enum rte_mtr_policer_action * actions, struct rte_mtr_error * error)'/>
<doc f='linux-4.18.y/lib/librte_ethdev/rte_mtr.c' l='164'>/** MTR object policer action update */</doc>
