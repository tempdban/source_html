<dec f='linux-4.14.y/include/net/ip.h' l='133' type='int ip_do_fragment(struct net * net, struct sock * sk, struct sk_buff * skb, int (*)(struct net *, struct sock *, struct sk_buff *) output)'/>
<use f='linux-4.14.y/net/bridge/br_netfilter_hooks.c' l='697' u='c' c='br_nf_ip_fragment'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='548' u='c' c='ip_fragment'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='560' u='c' c='ip_fragment'/>
<def f='linux-4.14.y/net/ipv4/ip_output.c' l='570' ll='826' type='int ip_do_fragment(struct net * net, struct sock * sk, struct sk_buff * skb, int (*)(struct net *, struct sock *, struct sk_buff *) output)'/>
<dec f='linux-4.14.y/net/ipv4/ip_output.c' l='827' type='int ip_do_fragment(struct net * , struct sock * , struct sk_buff * , int (*)(struct net *, struct sock *, struct sk_buff *) )'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='827' c='ip_do_fragment'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='827' u='a'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='827' u='a'/>
<doc f='linux-4.14.y/net/ipv4/ip_output.c' l='563'>/*
 *	This IP datagram is too large to be sent in one piece.  Break it up into
 *	smaller pieces (each of size equal to IP header plus
 *	a block of the data of the original IP data part) that will yet fit in a
 *	single device frame, and queue such a frame for sending.
 */</doc>
<use f='linux-4.14.y/net/openvswitch/actions.c' l='814' u='c' c='ovs_fragment'/>
