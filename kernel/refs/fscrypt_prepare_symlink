<def f='linux-4.18.y/include/linux/fscrypt.h' l='213' ll='227' type='int fscrypt_prepare_symlink(struct inode * dir, const char * target, unsigned int len, unsigned int max_len, struct fscrypt_str * disk_link)'/>
<doc f='linux-4.18.y/include/linux/fscrypt.h' l='190'>/**
 * fscrypt_prepare_symlink - prepare to create a possibly-encrypted symlink
 * @dir: directory in which the symlink is being created
 * @target: plaintext symlink target
 * @len: length of @target excluding null terminator
 * @max_len: space the filesystem has available to store the symlink target
 * @disk_link: (out) the on-disk symlink target being prepared
 *
 * This function computes the size the symlink target will require on-disk,
 * stores it in @disk_link-&gt;len, and validates it against @max_len.  An
 * encrypted symlink may be longer than the original.
 *
 * Additionally, @disk_link-&gt;name is set to @target if the symlink will be
 * unencrypted, but left NULL if the symlink will be encrypted.  For encrypted
 * symlinks, the filesystem must call fscrypt_encrypt_symlink() to create the
 * on-disk target later.  (The reason for the two-step process is that some
 * filesystems need to know the size of the symlink target before creating the
 * inode, e.g. to determine whether it will be a &quot;fast&quot; or &quot;slow&quot; symlink.)
 *
 * Return: 0 on success, -ENAMETOOLONG if the symlink target is too long,
 * -ENOKEY if the encryption key is missing, or another -errno code if a problem
 * occurred while setting up the encryption key.
 */</doc>
<use f='linux-4.18.y/fs/ext4/namei.c' l='3064' u='c' c='ext4_symlink'/>
<use f='linux-4.18.y/fs/f2fs/namei.c' l='568' u='c' c='f2fs_symlink'/>
