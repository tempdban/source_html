<def f='linux-4.14.y/include/linux/key-type.h' l='41' ll='48'/>
<size>72</size>
<doc f='linux-4.14.y/include/linux/key-type.h' l='29'>/*
 * Pre-parsed payload, used by key add, update and instantiate.
 *
 * This struct will be cleared and data and datalen will be set with the data
 * and length parameters from the caller and quotalen will be set from
 * def_datalen from the key type.  Then if the preparse() op is provided by the
 * key type, that will be called.  Then the struct will be passed to the
 * instantiate() or the update() op.
 *
 * If the preparse() op is given, the free_preparse() op will be called to
 * clear the contents.
 */</doc>
<mbr r='key_preparsed_payload::description' o='0' t='char *'/>
<mbr r='key_preparsed_payload::payload' o='64' t='union key_payload'/>
<mbr r='key_preparsed_payload::data' o='320' t='const void *'/>
<mbr r='key_preparsed_payload::datalen' o='384' t='size_t'/>
<mbr r='key_preparsed_payload::quotalen' o='448' t='size_t'/>
<mbr r='key_preparsed_payload::expiry' o='512' t='time_t'/>
