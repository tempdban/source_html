<def f='linux-4.18.y/include/linux/dma-fence.h' l='73' ll='84'/>
<size>96</size>
<doc f='linux-4.18.y/include/linux/dma-fence.h' l='37'>/**
 * struct dma_fence - software synchronization primitive
 * @refcount: refcount for this fence
 * @ops: dma_fence_ops associated with this fence
 * @rcu: used for releasing fence with kfree_rcu
 * @cb_list: list of all callbacks to call
 * @lock: spin_lock_irqsave used for locking
 * @context: execution context this fence belongs to, returned by
 *           dma_fence_context_alloc()
 * @seqno: the sequence number of this fence inside the execution context,
 * can be compared to decide which fence would be signaled later.
 * @flags: A mask of DMA_FENCE_FLAG_* defined below
 * @timestamp: Timestamp when the fence was signaled.
 * @error: Optional, only valid if &lt; 0, must be set before calling
 * dma_fence_signal, indicates that the fence has completed with an error.
 *
 * the flags member must be manipulated and read using the appropriate
 * atomic ops (bit_*), so taking the spinlock will not be needed most
 * of the time.
 *
 * DMA_FENCE_FLAG_SIGNALED_BIT - fence is already signaled
 * DMA_FENCE_FLAG_TIMESTAMP_BIT - timestamp recorded for fence signaling
 * DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT - enable_signaling might have been called
 * DMA_FENCE_FLAG_USER_BITS - start of the unused bits, can be used by the
 * implementer of the fence for its own purposes. Can be used in different
 * ways by different fence implementers, so do not rely on this.
 *
 * Since atomic bitops are used, this is not guaranteed to be the case.
 * Particularly, if the bit was set, but dma_fence_signal was called right
 * before this bit was set, it would have been able to set the
 * DMA_FENCE_FLAG_SIGNALED_BIT, before enable_signaling was called.
 * Adding a check for DMA_FENCE_FLAG_SIGNALED_BIT after setting
 * DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT closes this race, and makes sure that
 * after dma_fence_signal was called, any enable_signaling call will have either
 * been completed, or never called at all.
 */</doc>
<mbr r='dma_fence::refcount' o='0' t='struct kref'/>
<mbr r='dma_fence::ops' o='64' t='const struct dma_fence_ops *'/>
<mbr r='dma_fence::rcu' o='128' t='struct callback_head'/>
<mbr r='dma_fence::cb_list' o='256' t='struct list_head'/>
<mbr r='dma_fence::lock' o='384' t='spinlock_t *'/>
<mbr r='dma_fence::context' o='448' t='u64'/>
<mbr r='dma_fence::seqno' o='512' t='unsigned int'/>
<mbr r='dma_fence::flags' o='576' t='unsigned long'/>
<mbr r='dma_fence::timestamp' o='640' t='ktime_t'/>
<mbr r='dma_fence::error' o='704' t='int'/>
