<dec f='linux-4.18.y/include/linux/jbd2.h' l='1452' type='int jbd2_journal_revoke(handle_t * , unsigned long long , struct buffer_head * )'/>
<use f='linux-4.18.y/fs/ext4/ext4_jbd2.c' l='233' u='c' c='__ext4_forget'/>
<dec f='linux-4.18.y/fs/jbd2/journal.c' l='73' type='int jbd2_journal_revoke(handle_t * , unsigned long long , struct buffer_head * )'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='73' c='jbd2_journal_revoke'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='73' u='a'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='73' u='a'/>
<def f='linux-4.18.y/fs/jbd2/revoke.c' l='318' ll='392' type='int jbd2_journal_revoke(handle_t * handle, unsigned long long blocknr, struct buffer_head * bh_in)'/>
<doc f='linux-4.18.y/fs/jbd2/revoke.c' l='294'>/*
 * jbd2_journal_revoke: revoke a given buffer_head from the journal.  This
 * prevents the block from being replayed during recovery if we take a
 * crash after this current transaction commits.  Any subsequent
 * metadata writes of the buffer in this transaction cancel the
 * revoke.
 *
 * Note that this call may block --- it is up to the caller to make
 * sure that there are no further calls to journal_write_metadata
 * before the revoke is complete.  In ext3, this implies calling the
 * revoke before clearing the block bitmap when we are deleting
 * metadata.
 *
 * Revoke performs a jbd2_journal_forget on any buffer_head passed in as a
 * parameter, but does _not_ forget the buffer_head if the bh was only
 * found implicitly.
 *
 * bh_in may not be a journalled buffer - it may have come off
 * the hash tables without an attached journal_head.
 *
 * If bh_in is non-zero, jbd2_journal_revoke() will decrement its b_count
 * by one.
 */</doc>
