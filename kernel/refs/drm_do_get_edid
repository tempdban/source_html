<dec f='linux-4.18.y/include/drm/drm_edid.h' l='459' type='struct edid * drm_do_get_edid(struct drm_connector * connector, int (*)(void *, u8 *, unsigned int, size_t) get_edid_block, void * data)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_edid.c' l='1572' ll='1667' type='struct edid * drm_do_get_edid(struct drm_connector * connector, int (*)(void *, u8 *, unsigned int, size_t) get_edid_block, void * data)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_edid.c' l='1668' type='struct edid * drm_do_get_edid(struct drm_connector * , int (*)(void *, u8 *, unsigned int, size_t) , void * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_edid.c' l='1668' c='drm_do_get_edid'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_edid.c' l='1668' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_edid.c' l='1668' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_edid.c' l='1706' u='c' c='drm_get_edid'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_edid.c' l='1552'>/**
 * drm_do_get_edid - get EDID data using a custom EDID block read function
 * @connector: connector we&apos;re probing
 * @get_edid_block: EDID block read function
 * @data: private data passed to the block read function
 *
 * When the I2C adapter connected to the DDC bus is hidden behind a device that
 * exposes a different interface to read EDID blocks this function can be used
 * to get EDID data using a custom block read function.
 *
 * As in the general case the DDC bus is accessible by the kernel at the I2C
 * level, drivers must make all reasonable efforts to expose it as an I2C
 * adapter and use drm_get_edid() instead of abusing this function.
 *
 * The EDID may be overridden using debugfs override_edid or firmare EDID
 * (drm_load_edid_firmware() and drm.edid_firmware parameter), in this priority
 * order. Having either of them bypasses actual EDID reads.
 *
 * Return: Pointer to valid EDID or NULL if we couldn&apos;t find any.
 */</doc>
