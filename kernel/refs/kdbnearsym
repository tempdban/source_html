<dec f='linux-4.14.y/kernel/debug/kdb/kdb_private.h' l='111' type='int kdbnearsym(unsigned long , kdb_symtab_t * )'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_main.c' l='566' u='c' c='kdbgetaddrarg'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_main.c' l='1501' u='c' c='kdb_md_line'/>
<def f='linux-4.14.y/kernel/debug/kdb/kdb_support.c' l='82' ll='159' type='int kdbnearsym(unsigned long addr, kdb_symtab_t * symtab)'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_support.c' l='266' u='c' c='kdb_symbol_print'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_support.c' l='678' u='c' c='kdb_print_nameval'/>
<doc f='linux-4.14.y/kernel/debug/kdb/kdb_support.c' l='62'>/*
 * kdbnearsym -	Return the name of the symbol with the nearest address
 *	less than &apos;addr&apos;.
 *
 * Parameters:
 *	addr	Address to check for symbol near
 *	symtab  Structure to receive results
 * Returns:
 *	0	No sections contain this address, symtab zero filled
 *	1	Address mapped to module/symbol/section, data in symtab
 * Remarks:
 *	2.6 kallsyms has a &quot;feature&quot; where it unpacks the name into a
 *	string.  If that string is reused before the caller expects it
 *	then the caller sees its string change without warning.  To
 *	avoid cluttering up the main kdb code with lots of kdb_strdup,
 *	tests and kfree calls, kdbnearsym maintains an LRU list of the
 *	last few unique strings.  The list is sized large enough to
 *	hold active strings, no kdb caller of kdbnearsym makes more
 *	than ~20 later calls before using a saved value.
 */</doc>
