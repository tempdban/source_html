<dec f='linux-4.14.y/include/linux/assoc_array.h' l='82' type='struct assoc_array_edit * assoc_array_clear(struct assoc_array * array, const struct assoc_array_ops * ops)'/>
<def f='linux-4.14.y/lib/assoc_array.c' l='1289' ll='1310' type='struct assoc_array_edit * assoc_array_clear(struct assoc_array * array, const struct assoc_array_ops * ops)'/>
<doc f='linux-4.14.y/lib/assoc_array.c' l='1271'>/**
 * assoc_array_clear - Script deletion of all objects from an associative array
 * @array: The array to clear.
 * @ops: The operations to use.
 *
 * Precalculate and preallocate a script for the deletion of all the objects
 * from an associative array.  This results in an edit script that can either
 * be applied or cancelled.
 *
 * The function returns a pointer to an edit script if there are objects to be
 * deleted, NULL if there are no objects in the array or -ENOMEM.
 *
 * The caller should lock against other modifications and must continue to hold
 * the lock until assoc_array_apply_edit() has been called.
 *
 * Accesses to the tree may take place concurrently with this function,
 * provided they hold the RCU read lock.
 */</doc>
<use f='linux-4.14.y/security/keys/keyring.c' l='1457' u='c' c='keyring_clear'/>
<use f='linux-4.14.y/security/keys/keyring.c' l='1481' u='c' c='keyring_revoke'/>
