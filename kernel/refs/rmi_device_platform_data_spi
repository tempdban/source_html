<def f='linux-4.18.y/include/linux/rmi.h' l='192' ll='205'/>
<size>48</size>
<doc f='linux-4.18.y/include/linux/rmi.h' l='158'>/**
 * struct rmi_device_platform_data_spi - provides parameters used in SPI
 * communications.  All Synaptics SPI products support a standard SPI
 * interface; some also support what is called SPI V2 mode, depending on
 * firmware and/or ASIC limitations.  In V2 mode, the touch sensor can
 * support shorter delays during certain operations, and these are specified
 * separately from the standard mode delays.
 *
 * @block_delay - for standard SPI transactions consisting of both a read and
 * write operation, the delay (in microseconds) between the read and write
 * operations.
 * @split_read_block_delay_us - for V2 SPI transactions consisting of both a
 * read and write operation, the delay (in microseconds) between the read and
 * write operations.
 * @read_delay_us - the delay between each byte of a read operation in normal
 * SPI mode.
 * @write_delay_us - the delay between each byte of a write operation in normal
 * SPI mode.
 * @split_read_byte_delay_us - the delay between each byte of a read operation
 * in V2 mode.
 * @pre_delay_us - the delay before the start of a SPI transaction.  This is
 * typically useful in conjunction with custom chip select assertions (see
 * below).
 * @post_delay_us - the delay after the completion of an SPI transaction.  This
 * is typically useful in conjunction with custom chip select assertions (see
 * below).
 * @cs_assert - For systems where the SPI subsystem does not control the CS/SSB
 * line, or where such control is broken, you can provide a custom routine to
 * handle a GPIO as CS/SSB.  This routine will be called at the beginning and
 * end of each SPI transaction.  The RMI SPI implementation will wait
 * pre_delay_us after this routine returns before starting the SPI transfer;
 * and post_delay_us after completion of the SPI transfer(s) before calling it
 * with assert==FALSE.
 */</doc>
<mbr r='rmi_device_platform_data_spi::block_delay_us' o='0' t='u32'/>
<mbr r='rmi_device_platform_data_spi::split_read_block_delay_us' o='32' t='u32'/>
<mbr r='rmi_device_platform_data_spi::read_delay_us' o='64' t='u32'/>
<mbr r='rmi_device_platform_data_spi::write_delay_us' o='96' t='u32'/>
<mbr r='rmi_device_platform_data_spi::split_read_byte_delay_us' o='128' t='u32'/>
<mbr r='rmi_device_platform_data_spi::pre_delay_us' o='160' t='u32'/>
<mbr r='rmi_device_platform_data_spi::post_delay_us' o='192' t='u32'/>
<mbr r='rmi_device_platform_data_spi::bits_per_word' o='224' t='u8'/>
<mbr r='rmi_device_platform_data_spi::mode' o='240' t='u16'/>
<mbr r='rmi_device_platform_data_spi::cs_assert_data' o='256' t='void *'/>
<mbr r='rmi_device_platform_data_spi::cs_assert' o='320' t='int (*)(const void *, const bool)'/>
