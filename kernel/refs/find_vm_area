<dec f='linux-4.18.y/include/linux/vmalloc.h' l='136' type='struct vm_struct * find_vm_area(const void * addr)'/>
<use f='linux-4.18.y/arch/x86/mm/ioremap.c' l='417' u='c' c='iounmap'/>
<use f='linux-4.18.y/kernel/dma/mapping.c' l='319' u='c' c='dma_common_free_remap'/>
<use f='linux-4.18.y/kernel/fork.c' l='238' u='c' c='alloc_thread_stack_node'/>
<def f='linux-4.18.y/mm/vmalloc.c' l='1454' ll='1463' type='struct vm_struct * find_vm_area(const void * addr)'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='1866' u='c' c='vmalloc_user'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='1973' u='c' c='vmalloc_32_user'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='2244' u='c' c='remap_vmalloc_range_partial'/>
<doc f='linux-4.18.y/mm/vmalloc.c' l='1446'>/**
 *	find_vm_area  -  find a continuous kernel virtual area
 *	@addr:		base address
 *
 *	Search for the kernel VM area starting at @addr, and return it.
 *	It is up to the caller to do all required locking to keep the returned
 *	pointer valid.
 */</doc>
