<dec f='linux-4.18.y/include/linux/acpi.h' l='415' type='bool acpi_dev_resource_address_space(struct acpi_resource * ares, struct resource_win * win)'/>
<use f='linux-4.18.y/drivers/acpi/ioapic.c' l='59' u='c' c='setup_res'/>
<def f='linux-4.18.y/drivers/acpi/resource.c' l='296' ll='307' type='bool acpi_dev_resource_address_space(struct acpi_resource * ares, struct resource_win * win)'/>
<dec f='linux-4.18.y/drivers/acpi/resource.c' l='308' type='bool acpi_dev_resource_address_space(struct acpi_resource * , struct resource_win * )'/>
<use f='linux-4.18.y/drivers/acpi/resource.c' l='308' c='acpi_dev_resource_address_space'/>
<use f='linux-4.18.y/drivers/acpi/resource.c' l='308' u='a'/>
<use f='linux-4.18.y/drivers/acpi/resource.c' l='308' u='a'/>
<use f='linux-4.18.y/drivers/acpi/resource.c' l='562' u='c' c='acpi_dev_process_resource'/>
<use f='linux-4.18.y/drivers/acpi/resource.c' l='647' u='c' c='is_memory'/>
<doc f='linux-4.18.y/drivers/acpi/resource.c' l='281'>/**
 * acpi_dev_resource_address_space - Extract ACPI address space information.
 * @ares: Input ACPI resource object.
 * @win: Output generic resource object.
 *
 * Check if the given ACPI resource object represents an address space resource
 * and if that&apos;s the case, use the information in it to populate the generic
 * resource object pointed to by @win.
 *
 * Return:
 * 1) false with win-&gt;res.flags setting to zero: not the expected resource type
 * 2) false with IORESOURCE_DISABLED in win-&gt;res.flags: valid unassigned
 *    resource
 * 3) true: valid assigned resource
 */</doc>
<use f='linux-4.18.y/drivers/pnp/pnpacpi/rsparser.c' l='184' u='c' c='pnpacpi_allocated_resource'/>
