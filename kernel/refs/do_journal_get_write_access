<dec f='linux-4.14.y/fs/ext4/ext4.h' l='2477' type='int do_journal_get_write_access(handle_t * handle, struct buffer_head * bh)'/>
<use f='linux-4.14.y/fs/ext4/inline.c' l='604' u='r' c='ext4_convert_inline_data_to_extent'/>
<def f='linux-4.14.y/fs/ext4/inode.c' l='1127' ll='1150' type='int do_journal_get_write_access(handle_t * handle, struct buffer_head * bh)'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='1322' u='r' c='ext4_write_begin'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='2037' u='r' c='__ext4_journalled_writepage'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='6102' u='r' c='ext4_page_mkwrite'/>
<doc f='linux-4.14.y/fs/ext4/inode.c' l='1103'>/*
 * To preserve ordering, it is essential that the hole instantiation and
 * the data write be encapsulated in a single transaction.  We cannot
 * close off a transaction and start a new one between the ext4_get_block()
 * and the commit_write().  So doing the jbd2_journal_start at the start of
 * prepare_write() is the right place.
 *
 * Also, this function can nest inside ext4_writepage().  In that case, we
 * *know* that ext4_writepage() has generated enough buffer credits to do the
 * whole page.  So we won&apos;t block on the journal in that case, which is good,
 * because the caller may be PF_MEMALLOC.
 *
 * By accident, ext4 can be reentered when a transaction is open via
 * quota file writes.  If we were to commit the transaction while thus
 * reentered, there can be a deadlock - we would be holding a quota
 * lock, and the commit would never complete if another thread had a
 * transaction open and was blocking on the quota lock - a ranking
 * violation.
 *
 * So what we do is to rely on the fact that jbd2_journal_stop/journal_start
 * will _not_ run commit under these circumstances because handle-&gt;h_ref
 * is elevated.  We&apos;ll still have enough credits for the tiny quotafile
 * write.
 */</doc>
