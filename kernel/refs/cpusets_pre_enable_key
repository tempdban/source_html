<dec f='linux-4.14.y/include/linux/cpuset.h' l='34' type='struct static_key_false'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='43' u='a' c='cpuset_inc'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='50' u='a' c='cpuset_dec'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='130' u='a' c='read_mems_allowed_begin'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='130' u='a' c='read_mems_allowed_begin'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='130' u='a' c='read_mems_allowed_begin'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='130' u='a' c='read_mems_allowed_begin'/>
<doc f='linux-4.14.y/include/linux/cpuset.h' l='22'>/*
 * Static branch rewrites can happen in an arbitrary order for a given
 * key. In code paths where we need to loop with read_mems_allowed_begin() and
 * read_mems_allowed_retry() to get a consistent view of mems_allowed, we need
 * to ensure that begin() always gets rewritten before retry() in the
 * disabled -&gt; enabled transition. If not, then if local irqs are disabled
 * around the loop, we can deadlock since retry() would always be
 * comparing the latest value of the mems_allowed seqcount against 0 as
 * begin() still would see cpusets_enabled() as false. The enabled -&gt; disabled
 * transition should happen in reverse order for the same reasons (want to stop
 * looking at real value of mems_allowed.sequence in retry() first).
 */</doc>
<def f='linux-4.14.y/kernel/cgroup/cpuset.c' l='67' macro='1' type='struct static_key_false'/>
<dec f='linux-4.14.y/include/linux/cpuset.h' l='34' type='struct static_key_false'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='43' u='a' c='cpuset_inc'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='50' u='a' c='cpuset_dec'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='130' u='a' c='read_mems_allowed_begin'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='130' u='a' c='read_mems_allowed_begin'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='130' u='a' c='read_mems_allowed_begin'/>
<use f='linux-4.14.y/include/linux/cpuset.h' l='130' u='a' c='read_mems_allowed_begin'/>
<doc f='linux-4.14.y/include/linux/cpuset.h' l='22'>/*
 * Static branch rewrites can happen in an arbitrary order for a given
 * key. In code paths where we need to loop with read_mems_allowed_begin() and
 * read_mems_allowed_retry() to get a consistent view of mems_allowed, we need
 * to ensure that begin() always gets rewritten before retry() in the
 * disabled -&gt; enabled transition. If not, then if local irqs are disabled
 * around the loop, we can deadlock since retry() would always be
 * comparing the latest value of the mems_allowed seqcount against 0 as
 * begin() still would see cpusets_enabled() as false. The enabled -&gt; disabled
 * transition should happen in reverse order for the same reasons (want to stop
 * looking at real value of mems_allowed.sequence in retry() first).
 */</doc>
<def f='linux-4.14.y/kernel/cgroup/cpuset.c' l='67' macro='1' type='struct static_key_false'/>
