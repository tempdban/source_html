<dec f='linux-4.18.y/include/linux/srcu.h' l='70' type='void call_srcu(struct srcu_struct * sp, struct callback_head * head, void (*)(struct callback_head *) func)'/>
<use f='linux-4.18.y/drivers/base/core.c' l='337' u='c' c='__device_link_del'/>
<def f='linux-4.18.y/kernel/rcu/srcutree.c' l='901' ll='905' type='void call_srcu(struct srcu_struct * sp, struct callback_head * rhp, rcu_callback_t func)'/>
<dec f='linux-4.18.y/kernel/rcu/srcutree.c' l='906' type='void call_srcu(struct srcu_struct * , struct callback_head * , void (*)(struct callback_head *) )'/>
<use f='linux-4.18.y/kernel/rcu/srcutree.c' l='906' c='call_srcu'/>
<use f='linux-4.18.y/kernel/rcu/srcutree.c' l='906' u='a'/>
<use f='linux-4.18.y/kernel/rcu/srcutree.c' l='906' u='a'/>
<doc f='linux-4.18.y/kernel/rcu/srcutree.c' l='884'>/**
 * call_srcu() - Queue a callback for invocation after an SRCU grace period
 * @sp: srcu_struct in queue the callback
 * @rhp: structure to be used for queueing the SRCU callback.
 * @func: function to be invoked after the SRCU grace period
 *
 * The callback function will be invoked some time after a full SRCU
 * grace period elapses, in other words after all pre-existing SRCU
 * read-side critical sections have completed.  However, the callback
 * function might well execute concurrently with other SRCU read-side
 * critical sections that started after call_srcu() was invoked.  SRCU
 * read-side critical sections are delimited by srcu_read_lock() and
 * srcu_read_unlock(), and may be nested.
 *
 * The callback will be invoked from process context, but must nevertheless
 * be fast and must not block.
 */</doc>
<use f='linux-4.18.y/mm/mmu_notifier.c' l='34' u='c' c='mmu_notifier_call_srcu'/>
