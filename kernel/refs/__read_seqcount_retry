<def f='linux-4.14.y/include/linux/seqlock.h' l='203' ll='206' type='int __read_seqcount_retry(const seqcount_t * s, unsigned int start)'/>
<use f='linux-4.14.y/include/linux/seqlock.h' l='221' u='c' c='read_seqcount_retry'/>
<doc f='linux-4.14.y/include/linux/seqlock.h' l='189'>/**
 * __read_seqcount_retry - end a seq-read critical section (without barrier)
 * @s: pointer to seqcount_t
 * @start: count, from read_seqcount_begin
 * Returns: 1 if retry is required, else 0
 *
 * __read_seqcount_retry is like read_seqcount_retry, but has no smp_rmb()
 * barrier. Callers should ensure that smp_rmb() or equivalent ordering is
 * provided before actually loading any of the variables that are to be
 * protected in this critical section.
 *
 * Use carefully, only in critical code, and comment how the barrier is
 * provided.
 */</doc>
<use f='linux-4.14.y/fs/namei.c' l='1576' u='c' c='lookup_fast'/>
