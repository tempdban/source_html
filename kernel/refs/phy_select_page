<dec f='linux-4.18.y/include/linux/phy.h' l='894' type='int phy_select_page(struct phy_device * phydev, int page)'/>
<def f='linux-4.18.y/drivers/net/phy/phy-core.c' l='410' ll='425' type='int phy_select_page(struct phy_device * phydev, int page)'/>
<dec f='linux-4.18.y/drivers/net/phy/phy-core.c' l='426' type='int phy_select_page(struct phy_device * , int )'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='426' c='phy_select_page'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='426' u='a'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='426' u='a'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='479' u='c' c='phy_read_paged'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='500' u='c' c='phy_write_paged'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='523' u='c' c='phy_modify_paged'/>
<doc f='linux-4.18.y/drivers/net/phy/phy-core.c' l='399'>/**
 * phy_select_page() - take the bus lock, save the current page, and set a page
 * @phydev: a pointer to a &amp;struct phy_device
 * @page: desired page
 *
 * Take the MDIO bus lock to protect against concurrent access, save the
 * current PHY page, and set the current page.  On error, returns a
 * negative errno, otherwise returns the previous page number.
 * phy_restore_page() must always be called after this, irrespective
 * of success or failure of this call.
 */</doc>
