<dec f='linux-4.14.y/fs/internal.h' l='55' type='int user_path_mountpoint_at(int , const char * , unsigned int , struct path * )'/>
<doc f='linux-4.14.y/fs/internal.h' l='52'>/*
 * namei.c
 */</doc>
<def f='linux-4.14.y/fs/namei.c' l='2729' ll='2734' type='int user_path_mountpoint_at(int dfd, const char * name, unsigned int flags, struct path * path)'/>
<doc f='linux-4.14.y/fs/namei.c' l='2715'>/**
 * user_path_mountpoint_at - lookup a path from userland in order to umount it
 * @dfd:	directory file descriptor
 * @name:	pathname from userland
 * @flags:	lookup flags
 * @path:	pointer to container to hold result
 *
 * A umount is a special case for path walking. We&apos;re not actually interested
 * in the inode in this situation, and ESTALE errors can be a problem. We
 * simply want track down the dentry and vfsmount attached at the mountpoint
 * and avoid revalidating the last component.
 *
 * Returns 0 and populates &quot;path&quot; on success.
 */</doc>
<use f='linux-4.14.y/fs/namespace.c' l='1700' u='c' c='SYSC_umount'/>
