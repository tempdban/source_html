<dec f='linux-4.18.y/include/linux/virtio.h' l='80' type='bool virtqueue_enable_cb_delayed(struct virtqueue * vq)'/>
<use f='linux-4.18.y/drivers/net/virtio_net.c' l='1466' u='c' c='start_xmit'/>
<use f='linux-4.18.y/drivers/net/virtio_net.c' l='1504' u='c' c='start_xmit'/>
<def f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='867' ll='898' type='bool virtqueue_enable_cb_delayed(struct virtqueue * _vq)'/>
<dec f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='899' type='bool virtqueue_enable_cb_delayed(struct virtqueue * )'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='899' c='virtqueue_enable_cb_delayed'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='899' u='a'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='899' u='a'/>
<doc f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='854'>/**
 * virtqueue_enable_cb_delayed - restart callbacks after disable_cb.
 * @vq: the struct virtqueue we&apos;re talking about.
 *
 * This re-enables callbacks but hints to the other side to delay
 * interrupts until most of the available buffers have been processed;
 * it returns &quot;false&quot; if there are many pending buffers in the queue,
 * to detect a possible race between the driver checking for more work,
 * and enabling callbacks.
 *
 * Caller must ensure we don&apos;t call this with other virtqueue
 * operations at the same time (except where noted).
 */</doc>
