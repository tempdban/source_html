<def f='linux-4.14.y/include/linux/kprobes.h' l='167' ll='170'/>
<size>120</size>
<doc f='linux-4.14.y/include/linux/kprobes.h' l='157'>/*
 * Special probe type that uses setjmp-longjmp type tricks to resume
 * execution at a specified entry with a matching prototype corresponding
 * to the probed function - a trick to enable arguments to become
 * accessible seamlessly by probe handling logic.
 * Note:
 * Because of the way compilers allocate stack space for local variables
 * etc upfront, regardless of sub-scopes within a function, this mirroring
 * principle currently works only for probes placed on function entry points.
 */</doc>
<mbr r='jprobe::kp' o='0' t='struct kprobe'/>
<mbr r='jprobe::entry' o='896' t='void *'/>
<def f='linux-4.14.y/include/linux/kprobes.h' l='167' ll='170'/>
<size>120</size>
<doc f='linux-4.14.y/include/linux/kprobes.h' l='157'>/*
 * Special probe type that uses setjmp-longjmp type tricks to resume
 * execution at a specified entry with a matching prototype corresponding
 * to the probed function - a trick to enable arguments to become
 * accessible seamlessly by probe handling logic.
 * Note:
 * Because of the way compilers allocate stack space for local variables
 * etc upfront, regardless of sub-scopes within a function, this mirroring
 * principle currently works only for probes placed on function entry points.
 */</doc>
<mbr r='jprobe::kp' o='0' t='struct kprobe'/>
<mbr r='jprobe::entry' o='896' t='void *'/>
