<dec f='linux-4.14.y/drivers/acpi/acpica/acevents.h' l='246' type='acpi_status acpi_ev_initialize_region(union acpi_operand_object * region_obj)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/dsopcode.c' l='87' u='c' c='acpi_ds_initialize_region'/>
<use f='linux-4.14.y/drivers/acpi/acpica/dswload2.c' l='627' u='c' c='acpi_ds_load2_end_op'/>
<def f='linux-4.14.y/drivers/acpi/acpica/evrgnini.c' l='513' ll='622' type='acpi_status acpi_ev_initialize_region(union acpi_operand_object * region_obj)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/evrgnini.c' l='477'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ev_initialize_region
 *
 * PARAMETERS:  region_obj      - Region we are initializing
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Initializes the region, finds any _REG methods and saves them
 *              for execution at a later time
 *
 *              Get the appropriate address space handler for a newly
 *              created region.
 *
 *              This also performs address space specific initialization. For
 *              example, PCI regions must have an _ADR object that contains
 *              a PCI address in the scope of the definition. This address is
 *              required to perform an access to PCI config space.
 *
 * MUTEX:       Interpreter should be unlocked, because we may run the _REG
 *              method for this region.
 *
 * NOTE:        Possible incompliance:
 *              There is a behavior conflict in automatic _REG execution:
 *              1. When the interpreter is evaluating a method, we can only
 *                 automatically run _REG for the following case:
 *                   operation_region (OPR1, 0x80, 0x1000010, 0x4)
 *              2. When the interpreter is loading a table, we can also
 *                 automatically run _REG for the following case:
 *                   operation_region (OPR1, 0x80, 0x1000010, 0x4)
 *              Though this may not be compliant to the de-facto standard, the
 *              logic is kept in order not to trigger regressions. And keeping
 *              this logic should be taken care by the caller of this function.
 *
 ******************************************************************************/</doc>
<dec f='linux-4.14.y/drivers/acpi/acpica/acevents.h' l='246' type='acpi_status acpi_ev_initialize_region(union acpi_operand_object * region_obj)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/dsopcode.c' l='87' u='c' c='acpi_ds_initialize_region'/>
<use f='linux-4.14.y/drivers/acpi/acpica/dswload2.c' l='627' u='c' c='acpi_ds_load2_end_op'/>
<def f='linux-4.14.y/drivers/acpi/acpica/evrgnini.c' l='513' ll='622' type='acpi_status acpi_ev_initialize_region(union acpi_operand_object * region_obj)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/evrgnini.c' l='477'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ev_initialize_region
 *
 * PARAMETERS:  region_obj      - Region we are initializing
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Initializes the region, finds any _REG methods and saves them
 *              for execution at a later time
 *
 *              Get the appropriate address space handler for a newly
 *              created region.
 *
 *              This also performs address space specific initialization. For
 *              example, PCI regions must have an _ADR object that contains
 *              a PCI address in the scope of the definition. This address is
 *              required to perform an access to PCI config space.
 *
 * MUTEX:       Interpreter should be unlocked, because we may run the _REG
 *              method for this region.
 *
 * NOTE:        Possible incompliance:
 *              There is a behavior conflict in automatic _REG execution:
 *              1. When the interpreter is evaluating a method, we can only
 *                 automatically run _REG for the following case:
 *                   operation_region (OPR1, 0x80, 0x1000010, 0x4)
 *              2. When the interpreter is loading a table, we can also
 *                 automatically run _REG for the following case:
 *                   operation_region (OPR1, 0x80, 0x1000010, 0x4)
 *              Though this may not be compliant to the de-facto standard, the
 *              logic is kept in order not to trigger regressions. And keeping
 *              this logic should be taken care by the caller of this function.
 *
 ******************************************************************************/</doc>
