<dec f='linux-4.14.y/include/drm/drm_crtc_helper.h' l='58' type='void drm_helper_resume_force_mode(struct drm_device * dev)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='940' ll='984' type='void drm_helper_resume_force_mode(struct drm_device * dev)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='985' type='void drm_helper_resume_force_mode(struct drm_device * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='985' c='drm_helper_resume_force_mode'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='985' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='985' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='914'>/**
 * drm_helper_resume_force_mode - force-restore mode setting configuration
 * @dev: drm_device which should be restored
 *
 * Drivers which use the mode setting helpers can use this function to
 * force-restore the mode setting configuration e.g. on resume or when something
 * else might have trampled over the hw state (like some overzealous old BIOSen
 * tended to do).
 *
 * This helper doesn&apos;t provide a error return value since restoring the old
 * config should never fail due to resource allocation issues since the driver
 * has successfully set the restored configuration already. Hence this should
 * boil down to the equivalent of a few dpms on calls, which also don&apos;t provide
 * an error code.
 *
 * Drivers where simply restoring an old configuration again might fail (e.g.
 * due to slight differences in allocating shared resources when the
 * configuration is restored in a different order than when userspace set it up)
 * need to use their own restore logic.
 *
 * This function is deprecated. New drivers should implement atomic mode-
 * setting and use the atomic suspend/resume helpers.
 *
 * See also:
 * drm_atomic_helper_suspend(), drm_atomic_helper_resume()
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='178' u='c' c='qxl_drm_resume'/>
<dec f='linux-4.14.y/include/drm/drm_crtc_helper.h' l='58' type='void drm_helper_resume_force_mode(struct drm_device * dev)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='940' ll='984' type='void drm_helper_resume_force_mode(struct drm_device * dev)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='985' type='void drm_helper_resume_force_mode(struct drm_device * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='985' c='drm_helper_resume_force_mode'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='985' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='985' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='914'>/**
 * drm_helper_resume_force_mode - force-restore mode setting configuration
 * @dev: drm_device which should be restored
 *
 * Drivers which use the mode setting helpers can use this function to
 * force-restore the mode setting configuration e.g. on resume or when something
 * else might have trampled over the hw state (like some overzealous old BIOSen
 * tended to do).
 *
 * This helper doesn&apos;t provide a error return value since restoring the old
 * config should never fail due to resource allocation issues since the driver
 * has successfully set the restored configuration already. Hence this should
 * boil down to the equivalent of a few dpms on calls, which also don&apos;t provide
 * an error code.
 *
 * Drivers where simply restoring an old configuration again might fail (e.g.
 * due to slight differences in allocating shared resources when the
 * configuration is restored in a different order than when userspace set it up)
 * need to use their own restore logic.
 *
 * This function is deprecated. New drivers should implement atomic mode-
 * setting and use the atomic suspend/resume helpers.
 *
 * See also:
 * drm_atomic_helper_suspend(), drm_atomic_helper_resume()
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='178' u='c' c='qxl_drm_resume'/>
