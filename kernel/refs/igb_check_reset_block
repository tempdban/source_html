<dec f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_phy.h' l='21' type='s32 igb_check_reset_block(struct e1000_hw * hw)'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1884' u='c' c='igb_power_down_phy_copper_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_mac.c' l='653' u='c' c='igb_setup_link'/>
<def f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_phy.c' l='38' ll='45' type='s32 igb_check_reset_block(struct e1000_hw * hw)'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_phy.c' l='2085' u='c' c='igb_phy_hw_reset'/>
<doc f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_phy.c' l='30'>/**
 *  igb_check_reset_block - Check if PHY reset is blocked
 *  @hw: pointer to the HW structure
 *
 *  Read the PHY management control register and check whether a PHY reset
 *  is blocked.  If a reset is not blocked return 0, otherwise
 *  return E1000_BLK_PHY_RESET (12).
 **/</doc>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/igb_ethtool.c' l='269' u='c' c='igb_set_link_ksettings'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/igb_ethtool.c' l='1934' u='c' c='igb_loopback_test'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/igb_main.c' l='3034' u='c' c='igb_probe'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/igb_main.c' l='3377' u='c' c='igb_probe'/>
