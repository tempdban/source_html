<dec f='linux-4.18.y/include/linux/skbuff.h' l='3294' type='bool skb_gso_validate_network_len(const struct sk_buff * skb, unsigned int mtu)'/>
<def f='linux-4.18.y/net/core/skbuff.c' l='5035' ll='5038' type='bool skb_gso_validate_network_len(const struct sk_buff * skb, unsigned int mtu)'/>
<dec f='linux-4.18.y/net/core/skbuff.c' l='5039' type='bool skb_gso_validate_network_len(const struct sk_buff * , unsigned int )'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='5039' c='skb_gso_validate_network_len'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='5039' u='a'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='5039' u='a'/>
<doc f='linux-4.18.y/net/core/skbuff.c' l='5025'>/**
 * skb_gso_validate_network_len - Will a split GSO skb fit into a given MTU?
 *
 * @skb: GSO skb
 * @mtu: MTU to validate against
 *
 * skb_gso_validate_network_len validates if a given skb will fit a
 * wanted MTU once split. It considers L3 headers, L4 headers, and the
 * payload.
 */</doc>
<use f='linux-4.18.y/net/ipv4/ip_forward.c' l='58' u='c' c='ip_exceeds_mtu'/>
<use f='linux-4.18.y/net/ipv4/ip_output.c' l='251' u='c' c='ip_finish_output_gso'/>
