<dec f='linux-4.14.y/include/net/tcp.h' l='551' type='void tcp_xmit_retransmit_queue(struct sock * )'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='2660' u='c' c='tcp_simple_retransmit'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='3553' u='c' c='tcp_xmit_recovery'/>
<use f='linux-4.14.y/net/ipv4/tcp_output.c' l='749' u='c' c='tcp_tsq_handler'/>
<def f='linux-4.14.y/net/ipv4/tcp_output.c' l='2940' ll='3016' type='void tcp_xmit_retransmit_queue(struct sock * sk)'/>
<doc f='linux-4.14.y/net/ipv4/tcp_output.c' l='2932'>/* This gets called after a retransmit timeout, and the initially
 * retransmitted data is acknowledged.  It tries to continue
 * resending the rest of the retransmit queue, until either
 * we&apos;ve sent it all or the congestion window limit is reached.
 * If doing SACK, the first ACK which comes back for a timeout
 * based retransmit packet might feed us FACK information again.
 * If so, we use it to avoid unnecessarily retransmissions.
 */</doc>
<use f='linux-4.14.y/net/ipv4/tcp_recovery.c' l='174' u='c' c='tcp_rack_reo_timeout'/>
