<dec f='linux-4.14.y/include/linux/ring_buffer.h' l='115' type='int ring_buffer_write(struct ring_buffer * buffer, unsigned long length, void * data)'/>
<def f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2956' ll='3008' type='int ring_buffer_write(struct ring_buffer * buffer, unsigned long length, void * data)'/>
<dec f='linux-4.14.y/kernel/trace/ring_buffer.c' l='3009' type='int ring_buffer_write(struct ring_buffer * , unsigned long , void * )'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='3009' c='ring_buffer_write'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='3009' u='a'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='3009' u='a'/>
<doc f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2943'>/**
 * ring_buffer_write - write data to the buffer without reserving
 * @buffer: The ring buffer to write to.
 * @length: The length of the data being written (excluding the event header)
 * @data: The data to write to the buffer.
 *
 * This is like ring_buffer_lock_reserve and ring_buffer_unlock_commit as
 * one function. If you already have the data to write to the buffer, it
 * may be easier to simply call this function.
 *
 * Note, like ring_buffer_lock_reserve, the length is the length of the data
 * and not the length of the event which would hold the header.
 */</doc>
<use f='linux-4.14.y/kernel/trace/trace.c' l='798' u='c' c='__buffer_unlock_commit'/>
<dec f='linux-4.14.y/include/linux/ring_buffer.h' l='115' type='int ring_buffer_write(struct ring_buffer * buffer, unsigned long length, void * data)'/>
<def f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2956' ll='3008' type='int ring_buffer_write(struct ring_buffer * buffer, unsigned long length, void * data)'/>
<dec f='linux-4.14.y/kernel/trace/ring_buffer.c' l='3009' type='int ring_buffer_write(struct ring_buffer * , unsigned long , void * )'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='3009' c='ring_buffer_write'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='3009' u='a'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='3009' u='a'/>
<doc f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2943'>/**
 * ring_buffer_write - write data to the buffer without reserving
 * @buffer: The ring buffer to write to.
 * @length: The length of the data being written (excluding the event header)
 * @data: The data to write to the buffer.
 *
 * This is like ring_buffer_lock_reserve and ring_buffer_unlock_commit as
 * one function. If you already have the data to write to the buffer, it
 * may be easier to simply call this function.
 *
 * Note, like ring_buffer_lock_reserve, the length is the length of the data
 * and not the length of the event which would hold the header.
 */</doc>
<use f='linux-4.14.y/kernel/trace/trace.c' l='798' u='c' c='__buffer_unlock_commit'/>
