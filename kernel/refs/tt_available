<def f='linux-4.14.y/drivers/usb/host/ehci-sched.c' l='379' ll='431' type='int tt_available(struct ehci_hcd * ehci, struct ehci_per_sched * ps, struct ehci_tt * tt, unsigned int frame, unsigned int uframe)'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-sched.c' l='817' u='c' c='check_intr_schedule'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-sched.c' l='1435' u='c' c='sitd_slot_ok'/>
<doc f='linux-4.14.y/drivers/usb/host/ehci-sched.c' l='358'>/*
 * Return true if the device&apos;s tt&apos;s downstream bus is available for a
 * periodic transfer of the specified length (usecs), starting at the
 * specified frame/uframe.  Note that (as summarized in section 11.19
 * of the usb 2.0 spec) TTs can buffer multiple transactions for each
 * uframe.
 *
 * The uframe parameter is when the fullspeed/lowspeed transfer
 * should be executed in &quot;B-frame&quot; terms, which is the same as the
 * highspeed ssplit&apos;s uframe (which is in &quot;H-frame&quot; terms).  For example
 * a ssplit in &quot;H-frame&quot; 0 causes a transfer in &quot;B-frame&quot; 0.
 * See the EHCI spec sec 4.5 and fig 4.7.
 *
 * This checks if the full/lowspeed bus, at the specified starting uframe,
 * has the specified bandwidth available, according to rules listed
 * in USB 2.0 spec section 11.18.1 fig 11-60.
 *
 * This does not check if the transfer would exceed the max ssplit
 * limit of 16, specified in USB 2.0 spec section 11.18.4 requirement #4,
 * since proper scheduling limits ssplits to less than 16 per uframe.
 */</doc>
