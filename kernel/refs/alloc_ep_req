<dec f='linux-4.14.y/drivers/usb/gadget/u_f.h' l='62' type='struct usb_request * alloc_ep_req(struct usb_ep * ep, size_t len)'/>
<doc f='linux-4.14.y/drivers/usb/gadget/u_f.h' l='50'>/**
 * alloc_ep_req - returns a usb_request allocated by the gadget driver and
 * allocates the request&apos;s buffer.
 *
 * @ep: the endpoint to allocate a usb_request
 * @len: usb_requests&apos;s buffer suggested size
 *
 * In case @ep direction is OUT, the @len will be aligned to ep&apos;s
 * wMaxPacketSize. In order to avoid memory leaks or drops, *always* use
 * usb_requests&apos;s length (req-&gt;length) to refer to the allocated buffer size.
 * Requests allocated via alloc_ep_req() *must* be freed by free_ep_req().
 */</doc>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_hid.c' l='462' u='c' c='hidg_alloc_ep_req'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_loopback.c' l='311' u='c' c='lb_alloc_ep_req'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_sourcesink.c' l='296' u='c' c='ss_alloc_ep_req'/>
<def f='linux-4.14.y/drivers/usb/gadget/u_f.c' l='17' ll='32' type='struct usb_request * alloc_ep_req(struct usb_ep * ep, size_t len)'/>
<dec f='linux-4.14.y/drivers/usb/gadget/u_f.c' l='33' type='struct usb_request * alloc_ep_req(struct usb_ep * , size_t )'/>
<use f='linux-4.14.y/drivers/usb/gadget/u_f.c' l='33' c='alloc_ep_req'/>
<use f='linux-4.14.y/drivers/usb/gadget/u_f.c' l='33' u='a'/>
<use f='linux-4.14.y/drivers/usb/gadget/u_f.c' l='33' u='a'/>
