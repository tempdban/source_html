<dec f='linux-4.14.y/include/linux/backing-dev.h' l='46' type='void wb_wakeup_delayed(struct bdi_writeback * wb)'/>
<use f='linux-4.14.y/fs/fs-writeback.c' l='1945' u='c' c='wb_workfn'/>
<use f='linux-4.14.y/fs/fs-writeback.c' l='2186' u='c' c='__mark_inode_dirty'/>
<def f='linux-4.14.y/mm/backing-dev.c' l='274' ll='283' type='void wb_wakeup_delayed(struct bdi_writeback * wb)'/>
<doc f='linux-4.14.y/mm/backing-dev.c' l='260'>/*
 * This function is used when the first inode for this wb is marked dirty. It
 * wakes-up the corresponding bdi thread which should then take care of the
 * periodic background write-out of dirty inodes. Since the write-out would
 * starts only &apos;dirty_writeback_interval&apos; centisecs from now anyway, we just
 * set up a timer which wakes the bdi thread up later.
 *
 * Note, we wouldn&apos;t bother setting up the timer, but this function is on the
 * fast-path (used by &apos;__mark_inode_dirty()&apos;), so we save few context switches
 * by delaying the wake-up.
 *
 * We have to be careful not to postpone flush work if it is scheduled for
 * earlier. Thus we use queue_delayed_work().
 */</doc>
<dec f='linux-4.14.y/include/linux/backing-dev.h' l='46' type='void wb_wakeup_delayed(struct bdi_writeback * wb)'/>
<use f='linux-4.14.y/fs/fs-writeback.c' l='1945' u='c' c='wb_workfn'/>
<use f='linux-4.14.y/fs/fs-writeback.c' l='2186' u='c' c='__mark_inode_dirty'/>
<def f='linux-4.14.y/mm/backing-dev.c' l='274' ll='283' type='void wb_wakeup_delayed(struct bdi_writeback * wb)'/>
<doc f='linux-4.14.y/mm/backing-dev.c' l='260'>/*
 * This function is used when the first inode for this wb is marked dirty. It
 * wakes-up the corresponding bdi thread which should then take care of the
 * periodic background write-out of dirty inodes. Since the write-out would
 * starts only &apos;dirty_writeback_interval&apos; centisecs from now anyway, we just
 * set up a timer which wakes the bdi thread up later.
 *
 * Note, we wouldn&apos;t bother setting up the timer, but this function is on the
 * fast-path (used by &apos;__mark_inode_dirty()&apos;), so we save few context switches
 * by delaying the wake-up.
 *
 * We have to be careful not to postpone flush work if it is scheduled for
 * earlier. Thus we use queue_delayed_work().
 */</doc>
