<def f='linux-4.18.y/include/drm/drm_mode_object.h' l='55' ll='61'/>
<size>32</size>
<doc f='linux-4.18.y/include/drm/drm_mode_object.h' l='33'>/**
 * struct drm_mode_object - base structure for modeset objects
 * @id: userspace visible identifier
 * @type: type of the object, one of DRM_MODE_OBJECT\_\*
 * @properties: properties attached to this object, including values
 * @refcount: reference count for objects which with dynamic lifetime
 * @free_cb: free function callback, only set for objects with dynamic lifetime
 *
 * Base structure for modeset objects visible to userspace. Objects can be
 * looked up using drm_mode_object_find(). Besides basic uapi interface
 * properties like @id and @type it provides two services:
 *
 * - It tracks attached properties and their values. This is used by &amp;drm_crtc,
 *   &amp;drm_plane and &amp;drm_connector. Properties are attached by calling
 *   drm_object_attach_property() before the object is visible to userspace.
 *
 * - For objects with dynamic lifetimes (as indicated by a non-NULL @free_cb) it
 *   provides reference counting through drm_mode_object_get() and
 *   drm_mode_object_put(). This is used by &amp;drm_framebuffer, &amp;drm_connector
 *   and &amp;drm_property_blob. These objects provide specialized reference
 *   counting wrappers.
 */</doc>
<mbr r='drm_mode_object::id' o='0' t='uint32_t'/>
<mbr r='drm_mode_object::type' o='32' t='uint32_t'/>
<mbr r='drm_mode_object::properties' o='64' t='struct drm_object_properties *'/>
<mbr r='drm_mode_object::refcount' o='128' t='struct kref'/>
<mbr r='drm_mode_object::free_cb' o='192' t='void (*)(struct kref *)'/>
