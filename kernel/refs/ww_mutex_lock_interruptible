<dec f='linux-4.18.y/include/linux/ww_mutex.h' l='251' type='int ww_mutex_lock_interruptible(struct ww_mutex * lock, struct ww_acquire_ctx * ctx)'/>
<use f='linux-4.18.y/include/linux/ww_mutex.h' l='320' u='c' c='ww_mutex_lock_slow_interruptible'/>
<use f='linux-4.18.y/include/linux/reservation.h' l='188' u='c' c='reservation_object_lock_interruptible'/>
<doc f='linux-4.18.y/include/linux/ww_mutex.h' l='221'>/**
 * ww_mutex_lock_interruptible - acquire the w/w mutex, interruptible
 * @lock: the mutex to be acquired
 * @ctx: w/w acquire context
 *
 * Lock the w/w mutex exclusively for this task.
 *
 * Deadlocks within a given w/w class of locks are detected and handled with the
 * wait/wound algorithm. If the lock isn&apos;t immediately avaiable this function
 * will either sleep until it is (wait case). Or it selects the current context
 * for backing off by returning -EDEADLK (wound case). Trying to acquire the
 * same lock with the same context twice is also detected and signalled by
 * returning -EALREADY. Returns 0 if the mutex was successfully acquired. If a
 * signal arrives while waiting for the lock then this function returns -EINTR.
 *
 * In the wound case the caller must release all currently held w/w mutexes for
 * the given context and then wait for this contending lock to be available by
 * calling ww_mutex_lock_slow_interruptible. Alternatively callers can opt to
 * not acquire this lock and proceed with trying to acquire further w/w mutexes
 * (e.g. when scanning through lru lists trying to free resources).
 *
 * The mutex must later on be released by the same task that
 * acquired it. The task may not exit without first unlocking the mutex. Also,
 * kernel memory where the mutex resides must not be freed with the mutex still
 * locked. The mutex must first be initialized (or statically defined) before it
 * can be locked. memset()-ing the mutex to 0 is not allowed. The mutex must be
 * of the same w/w lock class as was used to initialize the acquire context.
 *
 * A mutex acquired with this function must be released with ww_mutex_unlock.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='253' u='c' c='modeset_lock'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='355' u='c' c='drm_modeset_lock_single_interruptible'/>
<def f='linux-4.18.y/kernel/locking/mutex.c' l='1228' ll='1240' type='int ww_mutex_lock_interruptible(struct ww_mutex * lock, struct ww_acquire_ctx * ctx)'/>
<dec f='linux-4.18.y/kernel/locking/mutex.c' l='1241' type='int ww_mutex_lock_interruptible(struct ww_mutex * , struct ww_acquire_ctx * )'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1241' c='ww_mutex_lock_interruptible'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1241' u='a'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1241' u='a'/>
