<dec f='linux-4.14.y/include/linux/flex_array.h' l='73' type='struct flex_array * flex_array_alloc(int element_size, unsigned int total, gfp_t flags)'/>
<doc f='linux-4.14.y/include/linux/flex_array.h' l='65'>/**
 * flex_array_alloc() - Creates a flexible array.
 * @element_size:	individual object size.
 * @total:		maximum number of objects which can be stored.
 * @flags:		GFP flags
 *
 * Return:		Returns an object of structure flex_array.
 */</doc>
<use f='linux-4.14.y/drivers/md/raid5.c' l='2245' u='c' c='scribble_alloc'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2191' u='c' c='proc_map_files_readdir'/>
<def f='linux-4.14.y/lib/flex_array.c' l='88' ll='116' type='struct flex_array * flex_array_alloc(int element_size, unsigned int total, gfp_t flags)'/>
<dec f='linux-4.14.y/lib/flex_array.c' l='117' type='struct flex_array * flex_array_alloc(int , unsigned int , gfp_t )'/>
<use f='linux-4.14.y/lib/flex_array.c' l='117' c='flex_array_alloc'/>
<use f='linux-4.14.y/lib/flex_array.c' l='117' u='a'/>
<use f='linux-4.14.y/lib/flex_array.c' l='117' u='a'/>
<doc f='linux-4.14.y/lib/flex_array.c' l='47'>/**
 * flex_array_alloc - allocate a new flexible array
 * @element_size:	the size of individual elements in the array
 * @total:		total number of elements that this should hold
 * @flags:		page allocation flags to use for base array
 *
 * Note: all locking must be provided by the caller.
 *
 * @total is used to size internal structures.  If the user ever
 * accesses any array indexes &gt;=@total, it will produce errors.
 *
 * The maximum number of elements is defined as: the number of
 * elements that can be stored in a page times the number of
 * page pointers that we can fit in the base structure or (using
 * integer math):
 *
 * 	(PAGE_SIZE/element_size) * (PAGE_SIZE-8)/sizeof(void *)
 *
 * Here&apos;s a table showing example capacities.  Note that the maximum
 * index that the get/put() functions is just nr_objects-1.   This
 * basically means that you get 4MB of storage on 32-bit and 2MB on
 * 64-bit.
 *
 *
 * Element size | Objects | Objects |
 * PAGE_SIZE=4k |  32-bit |  64-bit |
 * ---------------------------------|
 *      1 bytes | 4177920 | 2088960 |
 *      2 bytes | 2088960 | 1044480 |
 *      3 bytes | 1392300 |  696150 |
 *      4 bytes | 1044480 |  522240 |
 *     32 bytes |  130560 |   65408 |
 *     33 bytes |  126480 |   63240 |
 *   2048 bytes |    2040 |    1020 |
 *   2049 bytes |    1020 |     510 |
 *       void * | 1044480 |  261120 |
 *
 * Since 64-bit pointers are twice the size, we lose half the
 * capacity in the base structure.  Also note that no effort is made
 * to efficiently pack objects across page boundaries.
 */</doc>
<use f='linux-4.14.y/net/openvswitch/flow_table.c' l='119' u='c' c='alloc_buckets'/>
<use f='linux-4.14.y/security/selinux/ss/avtab.c' l='332' u='c' c='avtab_alloc'/>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='570' u='c' c='policydb_index'/>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='586' u='c' c='policydb_index'/>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='2522' u='c' c='policydb_read'/>
