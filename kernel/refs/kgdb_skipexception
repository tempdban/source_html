<dec f='linux-4.18.y/include/linux/kgdb.h' l='35' type='int kgdb_skipexception(int exception, struct pt_regs * regs)'/>
<doc f='linux-4.18.y/include/linux/kgdb.h' l='26'>/**
 *	kgdb_skipexception - (optional) exit kgdb_handle_exception early
 *	@exception: Exception vector number
 *	@regs: Current &amp;struct pt_regs.
 *
 *	On some architectures it is required to skip a breakpoint
 *	exception when it occurs after a breakpoint has been removed.
 *	This can be implemented in the architecture specific portion of kgdb.
 */</doc>
<def f='linux-4.18.y/arch/x86/kernel/kgdb.c' l='730' ll='737' type='int kgdb_skipexception(int exception, struct pt_regs * regs)'/>
<doc f='linux-4.18.y/arch/x86/kernel/kgdb.c' l='717'>/**
 *
 *	kgdb_skipexception - Bail out of KGDB when we&apos;ve been triggered.
 *	@exception: Exception vector number
 *	@regs: Current &amp;struct pt_regs.
 *
 *	On some architectures we need to skip a breakpoint exception when
 *	it occurs after a breakpoint has been removed.
 *
 * Skip an int3 exception when it occurs after a breakpoint has been
 * removed. Backtrack eip by 1 since the int3 would have caused it to
 * increment by 1.
 */</doc>
<def f='linux-4.18.y/kernel/debug/debug_core.c' l='218' ll='221' type='int kgdb_skipexception(int exception, struct pt_regs * regs)'/>
<use f='linux-4.18.y/kernel/debug/debug_core.c' l='435' u='c' c='kgdb_reenter_check'/>
<use f='linux-4.18.y/kernel/debug/debug_core.c' l='443' u='c' c='kgdb_reenter_check'/>
<use f='linux-4.18.y/kernel/debug/debug_core.c' l='575' u='c' c='kgdb_cpu_enter'/>
