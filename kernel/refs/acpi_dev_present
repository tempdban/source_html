<dec f='linux-4.14.y/include/acpi/acpi_bus.h' l='92' type='bool acpi_dev_present(const char * hid, const char * uid, s64 hrv)'/>
<use f='linux-4.14.y/drivers/acpi/ac.c' l='445' u='c' c='acpi_ac_init'/>
<use f='linux-4.14.y/drivers/acpi/battery.c' l='1328' u='c' c='acpi_battery_init_async'/>
<def f='linux-4.14.y/drivers/acpi/utils.c' l='789' ll='802' type='bool acpi_dev_present(const char * hid, const char * uid, s64 hrv)'/>
<dec f='linux-4.14.y/drivers/acpi/utils.c' l='803' type='bool acpi_dev_present(const char * , const char * , s64 )'/>
<use f='linux-4.14.y/drivers/acpi/utils.c' l='803' c='acpi_dev_present'/>
<use f='linux-4.14.y/drivers/acpi/utils.c' l='803' u='a'/>
<use f='linux-4.14.y/drivers/acpi/utils.c' l='803' u='a'/>
<doc f='linux-4.14.y/drivers/acpi/utils.c' l='769'>/**
 * acpi_dev_present - Detect that a given ACPI device is present
 * @hid: Hardware ID of the device.
 * @uid: Unique ID of the device, pass NULL to not check _UID
 * @hrv: Hardware Revision of the device, pass -1 to not check _HRV
 *
 * Return %true if a matching device was present at the moment of invocation.
 * Note that if the device is pluggable, it may since have disappeared.
 *
 * Note that unlike acpi_dev_found() this function checks the status
 * of the device. So for devices which are present in the dsdt, but
 * which are disabled (their _STA callback returns 0) this function
 * will return false.
 *
 * For this function to work, acpi_bus_scan() must have been executed
 * which happens in the subsys_initcall() subsection. Hence, do not
 * call from a subsys_initcall() or earlier (use acpi_get_devices()
 * instead). Calling from module_init() is fine (which is synonymous
 * with device_initcall()).
 */</doc>
<dec f='linux-4.14.y/include/acpi/acpi_bus.h' l='92' type='bool acpi_dev_present(const char * hid, const char * uid, s64 hrv)'/>
<use f='linux-4.14.y/drivers/acpi/ac.c' l='445' u='c' c='acpi_ac_init'/>
<use f='linux-4.14.y/drivers/acpi/battery.c' l='1328' u='c' c='acpi_battery_init_async'/>
<def f='linux-4.14.y/drivers/acpi/utils.c' l='789' ll='802' type='bool acpi_dev_present(const char * hid, const char * uid, s64 hrv)'/>
<dec f='linux-4.14.y/drivers/acpi/utils.c' l='803' type='bool acpi_dev_present(const char * , const char * , s64 )'/>
<use f='linux-4.14.y/drivers/acpi/utils.c' l='803' c='acpi_dev_present'/>
<use f='linux-4.14.y/drivers/acpi/utils.c' l='803' u='a'/>
<use f='linux-4.14.y/drivers/acpi/utils.c' l='803' u='a'/>
<doc f='linux-4.14.y/drivers/acpi/utils.c' l='769'>/**
 * acpi_dev_present - Detect that a given ACPI device is present
 * @hid: Hardware ID of the device.
 * @uid: Unique ID of the device, pass NULL to not check _UID
 * @hrv: Hardware Revision of the device, pass -1 to not check _HRV
 *
 * Return %true if a matching device was present at the moment of invocation.
 * Note that if the device is pluggable, it may since have disappeared.
 *
 * Note that unlike acpi_dev_found() this function checks the status
 * of the device. So for devices which are present in the dsdt, but
 * which are disabled (their _STA callback returns 0) this function
 * will return false.
 *
 * For this function to work, acpi_bus_scan() must have been executed
 * which happens in the subsys_initcall() subsection. Hence, do not
 * call from a subsys_initcall() or earlier (use acpi_get_devices()
 * instead). Calling from module_init() is fine (which is synonymous
 * with device_initcall()).
 */</doc>
