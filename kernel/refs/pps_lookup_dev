<dec f='linux-4.14.y/include/linux/pps_kernel.h' l='104' type='struct pps_device * pps_lookup_dev(const void * cookie)'/>
<doc f='linux-4.14.y/include/linux/pps_kernel.h' l='103'>/* Look up a pps_device by magic cookie */</doc>
<def f='linux-4.14.y/drivers/pps/pps.c' l='437' ll='448' type='struct pps_device * pps_lookup_dev(const void * cookie)'/>
<dec f='linux-4.14.y/drivers/pps/pps.c' l='449' type='struct pps_device * pps_lookup_dev(const void * )'/>
<use f='linux-4.14.y/drivers/pps/pps.c' l='449' c='pps_lookup_dev'/>
<use f='linux-4.14.y/drivers/pps/pps.c' l='449' u='a'/>
<use f='linux-4.14.y/drivers/pps/pps.c' l='449' u='a'/>
<doc f='linux-4.14.y/drivers/pps/pps.c' l='419'>/*
 * Look up a pps device by magic cookie.
 * The cookie is usually a pointer to some enclosing device, but this
 * code doesn&apos;t care; you should never be dereferencing it.
 *
 * This is a bit of a kludge that is currently used only by the PPS
 * serial line discipline.  It may need to be tweaked when a second user
 * is found.
 *
 * There is no function interface for setting the lookup_cookie field.
 * It&apos;s initialized to NULL when the pps device is created, and if a
 * client wants to use it, just fill it in afterward.
 *
 * The cookie is automatically set to NULL in pps_unregister_source()
 * so that it will not be used again, even if the pps device cannot
 * be removed from the idr due to pending references holding the minor
 * number in use.
 */</doc>
