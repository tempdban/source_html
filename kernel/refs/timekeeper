<def f='linux-4.14.y/include/linux/timekeeper_internal.h' l='84' ll='128'/>
<size>240</size>
<doc f='linux-4.14.y/include/linux/timekeeper_internal.h' l='41'>/**
 * struct timekeeper - Structure holding internal timekeeping values.
 * @tkr_mono:		The readout base structure for CLOCK_MONOTONIC
 * @tkr_raw:		The readout base structure for CLOCK_MONOTONIC_RAW
 * @xtime_sec:		Current CLOCK_REALTIME time in seconds
 * @ktime_sec:		Current CLOCK_MONOTONIC time in seconds
 * @wall_to_monotonic:	CLOCK_REALTIME to CLOCK_MONOTONIC offset
 * @offs_real:		Offset clock monotonic -&gt; clock realtime
 * @offs_boot:		Offset clock monotonic -&gt; clock boottime
 * @offs_tai:		Offset clock monotonic -&gt; clock tai
 * @tai_offset:		The current UTC to TAI offset in seconds
 * @clock_was_set_seq:	The sequence number of clock was set events
 * @cs_was_changed_seq:	The sequence number of clocksource change events
 * @next_leap_ktime:	CLOCK_MONOTONIC time value of a pending leap-second
 * @raw_sec:		CLOCK_MONOTONIC_RAW  time in seconds
 * @cycle_interval:	Number of clock cycles in one NTP interval
 * @xtime_interval:	Number of clock shifted nano seconds in one NTP
 *			interval.
 * @xtime_remainder:	Shifted nano seconds left over when rounding
 *			@cycle_interval
 * @raw_interval:	Shifted raw nano seconds accumulated per NTP interval.
 * @ntp_error:		Difference between accumulated time and NTP time in ntp
 *			shifted nano seconds.
 * @ntp_error_shift:	Shift conversion between clock shifted nano seconds and
 *			ntp shifted nano seconds.
 * @last_warning:	Warning ratelimiter (DEBUG_TIMEKEEPING)
 * @underflow_seen:	Underflow warning flag (DEBUG_TIMEKEEPING)
 * @overflow_seen:	Overflow warning flag (DEBUG_TIMEKEEPING)
 *
 * Note: For timespec(64) based interfaces wall_to_monotonic is what
 * we need to add to xtime (or xtime corrected for sub jiffie times)
 * to get to monotonic time.  Monotonic is pegged at zero at system
 * boot time, so wall_to_monotonic will be negative, however, we will
 * ALWAYS keep the tv_nsec part positive so we can use the usual
 * normalization.
 *
 * wall_to_monotonic is moved after resume from suspend for the
 * monotonic time not to jump. We need to add total_sleep_time to
 * wall_to_monotonic to get the real boot based time offset.
 *
 * wall_to_monotonic is no longer the boot time, getboottime must be
 * used instead.
 */</doc>
<mbr r='timekeeper::tkr_mono' o='0' t='struct tk_read_base'/>
<mbr r='timekeeper::tkr_raw' o='384' t='struct tk_read_base'/>
<mbr r='timekeeper::xtime_sec' o='768' t='u64'/>
<mbr r='timekeeper::ktime_sec' o='832' t='unsigned long'/>
<mbr r='timekeeper::wall_to_monotonic' o='896' t='struct timespec'/>
<mbr r='timekeeper::offs_real' o='1024' t='ktime_t'/>
<mbr r='timekeeper::offs_boot' o='1088' t='ktime_t'/>
<mbr r='timekeeper::offs_tai' o='1152' t='ktime_t'/>
<mbr r='timekeeper::tai_offset' o='1216' t='s32'/>
<mbr r='timekeeper::clock_was_set_seq' o='1248' t='unsigned int'/>
<mbr r='timekeeper::cs_was_changed_seq' o='1280' t='u8'/>
<mbr r='timekeeper::next_leap_ktime' o='1344' t='ktime_t'/>
<mbr r='timekeeper::raw_sec' o='1408' t='u64'/>
<mbr r='timekeeper::cycle_interval' o='1472' t='u64'/>
<mbr r='timekeeper::xtime_interval' o='1536' t='u64'/>
<mbr r='timekeeper::xtime_remainder' o='1600' t='s64'/>
<mbr r='timekeeper::raw_interval' o='1664' t='u64'/>
<mbr r='timekeeper::ntp_tick' o='1728' t='u64'/>
<mbr r='timekeeper::ntp_error' o='1792' t='s64'/>
<mbr r='timekeeper::ntp_error_shift' o='1856' t='u32'/>
<mbr r='timekeeper::ntp_err_mult' o='1888' t='u32'/>
