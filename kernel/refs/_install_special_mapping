<dec f='linux-4.18.y/include/linux/mm.h' l='2279' type='struct vm_area_struct * _install_special_mapping(struct mm_struct * mm, unsigned long addr, unsigned long len, unsigned long flags, const struct vm_special_mapping * spec)'/>
<use f='linux-4.18.y/arch/x86/entry/vdso/vma.c' l='174' u='c' c='map_vdso'/>
<use f='linux-4.18.y/arch/x86/entry/vdso/vma.c' l='186' u='c' c='map_vdso'/>
<use f='linux-4.18.y/kernel/events/uprobes.c' l='1160' u='c' c='xol_add_vma'/>
<def f='linux-4.18.y/mm/mmap.c' l='3390' ll='3397' type='struct vm_area_struct * _install_special_mapping(struct mm_struct * mm, unsigned long addr, unsigned long len, unsigned long vm_flags, const struct vm_special_mapping * spec)'/>
<doc f='linux-4.18.y/mm/mmap.c' l='3381'>/*
 * Called with mm-&gt;mmap_sem held for writing.
 * Insert a new vma covering the given region, with the given flags.
 * Its pages are supplied by the given array of struct page *.
 * The array can be shorter than len &gt;&gt; PAGE_SHIFT if it&apos;s null-terminated.
 * The region past the last page supplied will always produce SIGBUS.
 * The array pointer and the pages it points to are assumed to stay alive
 * for as long as this mapping might exist.
 */</doc>
