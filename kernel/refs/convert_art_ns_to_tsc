<dec f='linux-4.18.y/arch/x86/include/asm/tsc.h' l='34' type='struct system_counterval_t convert_art_ns_to_tsc(u64 art_ns)'/>
<def f='linux-4.18.y/arch/x86/kernel/tsc.c' l='1201' ll='1215' type='struct system_counterval_t convert_art_ns_to_tsc(u64 art_ns)'/>
<dec f='linux-4.18.y/arch/x86/kernel/tsc.c' l='1216' type='struct system_counterval_t convert_art_ns_to_tsc(u64 )'/>
<use f='linux-4.18.y/arch/x86/kernel/tsc.c' l='1216' c='convert_art_ns_to_tsc'/>
<use f='linux-4.18.y/arch/x86/kernel/tsc.c' l='1216' u='a'/>
<use f='linux-4.18.y/arch/x86/kernel/tsc.c' l='1216' u='a'/>
<doc f='linux-4.18.y/arch/x86/kernel/tsc.c' l='1180'>/**
 * convert_art_ns_to_tsc() - Convert ART in nanoseconds to TSC.
 * @art_ns: ART (Always Running Timer) in unit of nanoseconds
 *
 * PTM requires all timestamps to be in units of nanoseconds. When user
 * software requests a cross-timestamp, this function converts system timestamp
 * to TSC.
 *
 * This is valid when CPU feature flag X86_FEATURE_TSC_KNOWN_FREQ is set
 * indicating the tsc_khz is derived from CPUID[15H]. Drivers should check
 * that this flag is set before conversion to TSC is attempted.
 *
 * Return:
 * struct system_counterval_t - system counter value with the pointer to the
 *	corresponding clocksource
 *	@cycles:	System counter value
 *	@cs:		Clocksource corresponding to system counter value. Used
 *			by timekeeping code to verify comparibility of two cycle
 *			values.
 */</doc>
