<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='1031' type='void vmw_dx_context_scrub_cotables(struct vmw_resource * ctx, bool readback)'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='559' ll='582' type='void vmw_dx_context_scrub_cotables(struct vmw_resource * ctx, bool readback)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='609' u='c' c='vmw_dx_context_unbind'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='545'>/**
 * vmw_dx_context_scrub_cotables - Scrub all bindings and
 * cotables from a context
 *
 * @ctx: Pointer to the context resource
 * @readback: Whether to save the otable contents on scrubbing.
 *
 * COtables must be unbound before their context, but unbinding requires
 * the backup buffer being reserved, whereas scrubbing does not.
 * This function scrubs all cotables of a context, potentially reading back
 * the contents into their backup buffers. However, scrubbing cotables
 * also makes the device context invalid, so scrub all bindings first so
 * that doesn&apos;t have to be done later with an invalid context.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cotable.c' l='324' u='c' c='vmw_cotable_unbind'/>
<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='1031' type='void vmw_dx_context_scrub_cotables(struct vmw_resource * ctx, bool readback)'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='559' ll='582' type='void vmw_dx_context_scrub_cotables(struct vmw_resource * ctx, bool readback)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='609' u='c' c='vmw_dx_context_unbind'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='545'>/**
 * vmw_dx_context_scrub_cotables - Scrub all bindings and
 * cotables from a context
 *
 * @ctx: Pointer to the context resource
 * @readback: Whether to save the otable contents on scrubbing.
 *
 * COtables must be unbound before their context, but unbinding requires
 * the backup buffer being reserved, whereas scrubbing does not.
 * This function scrubs all cotables of a context, potentially reading back
 * the contents into their backup buffers. However, scrubbing cotables
 * also makes the device context invalid, so scrub all bindings first so
 * that doesn&apos;t have to be done later with an invalid context.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cotable.c' l='324' u='c' c='vmw_cotable_unbind'/>
