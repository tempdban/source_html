<dec f='linux-4.14.y/drivers/gpu/drm/drm_legacy.h' l='106' type='int drm_legacy_lock(struct drm_device * d, void * v, struct drm_file * f)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_legacy.h' l='105'>/* drm_lock.c */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='578'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='578'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='578'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='578'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='160' ll='240' type='int drm_legacy_lock(struct drm_device * dev, void * data, struct drm_file * file_priv)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='149'>/**
 * Lock ioctl.
 *
 * \param inode device inode.
 * \param file_priv DRM file private.
 * \param cmd command.
 * \param arg user argument, pointing to a drm_lock structure.
 * \return zero on success or negative number on failure.
 *
 * Add the current task to the lock wait queue, and attempt to take to lock.
 */</doc>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_legacy.h' l='106' type='int drm_legacy_lock(struct drm_device * d, void * v, struct drm_file * f)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_legacy.h' l='105'>/* drm_lock.c */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='578'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='578'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='578'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='578'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='160' ll='240' type='int drm_legacy_lock(struct drm_device * dev, void * data, struct drm_file * file_priv)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='149'>/**
 * Lock ioctl.
 *
 * \param inode device inode.
 * \param file_priv DRM file private.
 * \param cmd command.
 * \param arg user argument, pointing to a drm_lock structure.
 * \return zero on success or negative number on failure.
 *
 * Add the current task to the lock wait queue, and attempt to take to lock.
 */</doc>
