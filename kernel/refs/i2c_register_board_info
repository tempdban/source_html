<dec f='linux-4.18.y/include/linux/i2c.h' l='486' type='int i2c_register_board_info(int busnum, const struct i2c_board_info * info, unsigned int n)'/>
<def f='linux-4.18.y/drivers/i2c/i2c-boardinfo.c' l='61' ll='113' type='int i2c_register_board_info(int busnum, const struct i2c_board_info * info, unsigned int len)'/>
<doc f='linux-4.18.y/drivers/i2c/i2c-boardinfo.c' l='38'>/**
 * i2c_register_board_info - statically declare I2C devices
 * @busnum: identifies the bus to which these devices belong
 * @info: vector of i2c device descriptors
 * @len: how many descriptors in the vector; may be zero to reserve
 *	the specified bus number.
 *
 * Systems using the Linux I2C driver stack can declare tables of board info
 * while they initialize.  This should be done in board-specific init code
 * near arch_initcall() time, or equivalent, before any I2C adapter driver is
 * registered.  For example, mainboard init code could define several devices,
 * as could the init code for each daughtercard in a board stack.
 *
 * The I2C devices will be created later, after the adapter for the relevant
 * bus has been registered.  After that moment, standard driver model tools
 * are used to bind &quot;new style&quot; I2C drivers to the devices.  The bus number
 * for any device declared using this routine is not available for dynamic
 * allocation.
 *
 * The board info passed can safely be __initdata, but be careful of embedded
 * pointers (for platform_data, functions, etc) since that won&apos;t be copied.
 * Device properties are deep-copied though.
 */</doc>
