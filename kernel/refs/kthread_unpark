<dec f='linux-4.14.y/include/linux/kthread.h' l='62' type='void kthread_unpark(struct task_struct * k)'/>
<use f='linux-4.14.y/drivers/md/raid5-cache.c' l='1606' u='c' c='r5l_quiesce'/>
<use f='linux-4.14.y/kernel/cpu.c' l='427' u='c' c='bringup_wait_for_ap'/>
<use f='linux-4.14.y/kernel/cpu.c' l='674' u='c' c='cpuhp_threads_init'/>
<def f='linux-4.14.y/kernel/kthread.c' l='443' ll='463' type='void kthread_unpark(struct task_struct * k)'/>
<dec f='linux-4.14.y/kernel/kthread.c' l='464' type='void kthread_unpark(struct task_struct * )'/>
<use f='linux-4.14.y/kernel/kthread.c' l='464' c='kthread_unpark'/>
<use f='linux-4.14.y/kernel/kthread.c' l='464' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='464' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='522' u='c' c='kthread_stop'/>
<doc f='linux-4.14.y/kernel/kthread.c' l='435'>/**
 * kthread_unpark - unpark a thread created by kthread_create().
 * @k:		thread created by kthread_create().
 *
 * Sets kthread_should_park() for @k to return false, wakes it, and
 * waits for it to return. If the thread is marked percpu then its
 * bound to the cpu again.
 */</doc>
<use f='linux-4.14.y/kernel/smpboot.c' l='232' u='c' c='smpboot_unpark_thread'/>
<use f='linux-4.14.y/kernel/stop_machine.c' l='537' u='c' c='stop_machine_unpark'/>
