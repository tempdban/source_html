<def f='linux-4.14.y/include/linux/platform_data/dma-dw.h' l='53' ll='68'/>
<size>32</size>
<doc f='linux-4.14.y/include/linux/platform_data/dma-dw.h' l='38'>/**
 * struct dw_dma_platform_data - Controller configuration parameters
 * @nr_channels: Number of channels supported by hardware (max 8)
 * @is_private: The device channels should be marked as private and not for
 *	by the general purpose DMA channel allocator.
 * @is_memcpy: The device channels do support memory-to-memory transfers.
 * @is_idma32: The type of the DMA controller is iDMA32
 * @chan_allocation_order: Allocate channels starting from 0 or 7
 * @chan_priority: Set channel priority increasing from 0 to 7 or 7 to 0.
 * @block_size: Maximum block size supported by the controller
 * @nr_masters: Number of AHB masters supported by the controller
 * @data_width: Maximum data width supported by hardware per AHB master
 *		(in bytes, power of 2)
 * @multi_block: Multi block transfers supported by hardware per channel.
 */</doc>
<mbr r='dw_dma_platform_data::nr_channels' o='0' t='unsigned int'/>
<mbr r='dw_dma_platform_data::is_private' o='32' t='bool'/>
<mbr r='dw_dma_platform_data::is_memcpy' o='40' t='bool'/>
<mbr r='dw_dma_platform_data::is_idma32' o='48' t='bool'/>
<mbr r='dw_dma_platform_data::chan_allocation_order' o='56' t='unsigned char'/>
<mbr r='dw_dma_platform_data::chan_priority' o='64' t='unsigned char'/>
<mbr r='dw_dma_platform_data::block_size' o='96' t='unsigned int'/>
<mbr r='dw_dma_platform_data::nr_masters' o='128' t='unsigned char'/>
<mbr r='dw_dma_platform_data::data_width' o='136' t='unsigned char [4]'/>
<mbr r='dw_dma_platform_data::multi_block' o='168' t='unsigned char [8]'/>
<def f='linux-4.14.y/include/linux/platform_data/dma-dw.h' l='53' ll='68'/>
<size>32</size>
<doc f='linux-4.14.y/include/linux/platform_data/dma-dw.h' l='38'>/**
 * struct dw_dma_platform_data - Controller configuration parameters
 * @nr_channels: Number of channels supported by hardware (max 8)
 * @is_private: The device channels should be marked as private and not for
 *	by the general purpose DMA channel allocator.
 * @is_memcpy: The device channels do support memory-to-memory transfers.
 * @is_idma32: The type of the DMA controller is iDMA32
 * @chan_allocation_order: Allocate channels starting from 0 or 7
 * @chan_priority: Set channel priority increasing from 0 to 7 or 7 to 0.
 * @block_size: Maximum block size supported by the controller
 * @nr_masters: Number of AHB masters supported by the controller
 * @data_width: Maximum data width supported by hardware per AHB master
 *		(in bytes, power of 2)
 * @multi_block: Multi block transfers supported by hardware per channel.
 */</doc>
<mbr r='dw_dma_platform_data::nr_channels' o='0' t='unsigned int'/>
<mbr r='dw_dma_platform_data::is_private' o='32' t='bool'/>
<mbr r='dw_dma_platform_data::is_memcpy' o='40' t='bool'/>
<mbr r='dw_dma_platform_data::is_idma32' o='48' t='bool'/>
<mbr r='dw_dma_platform_data::chan_allocation_order' o='56' t='unsigned char'/>
<mbr r='dw_dma_platform_data::chan_priority' o='64' t='unsigned char'/>
<mbr r='dw_dma_platform_data::block_size' o='96' t='unsigned int'/>
<mbr r='dw_dma_platform_data::nr_masters' o='128' t='unsigned char'/>
<mbr r='dw_dma_platform_data::data_width' o='136' t='unsigned char [4]'/>
<mbr r='dw_dma_platform_data::multi_block' o='168' t='unsigned char [8]'/>
