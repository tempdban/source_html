<dec f='linux-4.18.y/include/net/bonding.h' l='609' type='void bond_change_active_slave(struct bonding * bond, struct slave * new_active)'/>
<def f='linux-4.18.y/drivers/net/bonding/bond_main.c' l='810' ll='903' type='void bond_change_active_slave(struct bonding * bond, struct slave * new_active)'/>
<use f='linux-4.18.y/drivers/net/bonding/bond_main.c' l='925' u='c' c='bond_select_active_slave'/>
<use f='linux-4.18.y/drivers/net/bonding/bond_main.c' l='1795' u='c' c='bond_enslave'/>
<use f='linux-4.18.y/drivers/net/bonding/bond_main.c' l='1924' u='c' c='__bond_release_one'/>
<doc f='linux-4.18.y/drivers/net/bonding/bond_main.c' l='795'>/**
 * change_active_interface - change the active slave into the specified one
 * @bond: our bonding struct
 * @new: the new slave to make the active one
 *
 * Set the new slave to the bond&apos;s settings and unset them on the old
 * curr_active_slave.
 * Setting include flags, mc-list, promiscuity, allmulti, etc.
 *
 * If @new&apos;s link state is %BOND_LINK_BACK we&apos;ll set it to %BOND_LINK_UP,
 * because it is apparently the best available slave we have, even though its
 * updelay hasn&apos;t timed out yet.
 *
 * Caller must hold RTNL.
 */</doc>
<use f='linux-4.18.y/drivers/net/bonding/bond_options.c' l='823' u='c' c='bond_option_active_slave_set'/>
