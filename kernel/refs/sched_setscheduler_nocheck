<dec f='linux-4.14.y/include/linux/sched.h' l='1486' type='int sched_setscheduler_nocheck(struct task_struct * , int , const struct sched_param * )'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='1095' u='c' c='setup_irq_thread'/>
<use f='linux-4.14.y/kernel/kthread.c' l='320' u='c' c='__kthread_create_on_node'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3967' u='c' c='rcu_spawn_gp_kthread'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='1602' u='c' c='sched_set_stop_task'/>
<def f='linux-4.14.y/kernel/sched/core.c' l='4302' ll='4306' type='int sched_setscheduler_nocheck(struct task_struct * p, int policy, const struct sched_param * param)'/>
<dec f='linux-4.14.y/kernel/sched/core.c' l='4307' type='int sched_setscheduler_nocheck(struct task_struct * , int , const struct sched_param * )'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='4307' c='sched_setscheduler_nocheck'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='4307' u='a'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='4307' u='a'/>
<doc f='linux-4.14.y/kernel/sched/core.c' l='4289'>/**
 * sched_setscheduler_nocheck - change the scheduling policy and/or RT priority of a thread from kernelspace.
 * @p: the task in question.
 * @policy: new policy.
 * @param: structure containing the new RT priority.
 *
 * Just like sched_setscheduler, only don&apos;t bother checking if the
 * current context has permission.  For example, this is needed in
 * stop_machine(): we create temporary high priority worker threads,
 * but our caller might not have that capability.
 *
 * Return: 0 on success. An error code otherwise.
 */</doc>
