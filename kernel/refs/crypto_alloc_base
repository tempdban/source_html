<dec f='linux-4.18.y/include/linux/crypto.h' l='657' type='struct crypto_tfm * crypto_alloc_base(const char * alg_name, u32 type, u32 mask)'/>
<use f='linux-4.18.y/include/linux/crypto.h' l='1148' u='c' c='crypto_alloc_blkcipher'/>
<use f='linux-4.18.y/include/linux/crypto.h' l='1468' u='c' c='crypto_alloc_cipher'/>
<use f='linux-4.18.y/include/linux/crypto.h' l='1620' u='c' c='crypto_alloc_comp'/>
<doc f='linux-4.18.y/include/linux/crypto.h' l='653'>/* 
 * Transform user interface.
 */</doc>
<def f='linux-4.18.y/crypto/api.c' l='418' ll='449' type='struct crypto_tfm * crypto_alloc_base(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-4.18.y/crypto/api.c' l='450' type='struct crypto_tfm * crypto_alloc_base(const char * , u32 , u32 )'/>
<use f='linux-4.18.y/crypto/api.c' l='450' c='crypto_alloc_base'/>
<use f='linux-4.18.y/crypto/api.c' l='450' u='a'/>
<use f='linux-4.18.y/crypto/api.c' l='450' u='a'/>
<doc f='linux-4.18.y/crypto/api.c' l='396'>/*
 *	crypto_alloc_base - Locate algorithm and allocate transform
 *	@alg_name: Name of algorithm
 *	@type: Type of algorithm
 *	@mask: Mask for type comparison
 *
 *	This function should not be used by new algorithm types.
 *	Please use crypto_alloc_tfm instead.
 *
 *	crypto_alloc_base() will first attempt to locate an already loaded
 *	algorithm.  If that fails and the kernel supports dynamically loadable
 *	modules, it will then attempt to load a module of the same name or
 *	alias.  If that fails it will send a query to any loaded crypto manager
 *	to construct an algorithm on the fly.  A refcount is grabbed on the
 *	algorithm which is then associated with the new transform.
 *
 *	The returned transform is of a non-determinate type.  Most people
 *	should use one of the more specific allocation functions such as
 *	crypto_alloc_blkcipher.
 *
 *	In case of error the return value is an error pointer.
 */</doc>
