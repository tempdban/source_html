<dec f='linux-4.18.y/include/linux/usb.h' l='1813' type='void usb_reset_endpoint(struct usb_device * dev, unsigned int epaddr)'/>
<use f='linux-4.18.y/drivers/usb/core/devio.c' l='1251' u='c' c='proc_resetep'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='1079' u='c' c='usb_clear_halt'/>
<def f='linux-4.18.y/drivers/usb/core/message.c' l='1160' ll='1171' type='void usb_reset_endpoint(struct usb_device * dev, unsigned int epaddr)'/>
<dec f='linux-4.18.y/drivers/usb/core/message.c' l='1172' type='void usb_reset_endpoint(struct usb_device * , unsigned int )'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='1172' c='usb_reset_endpoint'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='1172' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='1172' u='a'/>
<doc f='linux-4.18.y/drivers/usb/core/message.c' l='1151'>/**
 * usb_reset_endpoint - Reset an endpoint&apos;s state.
 * @dev: the device whose endpoint is to be reset
 * @epaddr: the endpoint&apos;s address.  Endpoint number for output,
 *	endpoint number + USB_DIR_IN for input
 *
 * Resets any host-side endpoint state such as the toggle bit,
 * sequence number or current window.
 */</doc>
<use f='linux-4.18.y/drivers/usb/storage/transport.c' l='241' u='c' c='usb_stor_clear_halt'/>
