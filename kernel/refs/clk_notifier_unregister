<dec f='linux-4.18.y/include/linux/clk.h' l='113' type='int clk_notifier_unregister(struct clk * clk, struct notifier_block * nb)'/>
<doc f='linux-4.18.y/include/linux/clk.h' l='108'>/**
 * clk_notifier_unregister: unregister a clock rate-change notifier callback
 * @clk: clock whose rate we are no longer interested in
 * @nb: notifier block which will be unregistered
 */</doc>
<def f='linux-4.18.y/drivers/clk/clk.c' l='3425' ll='3458' type='int clk_notifier_unregister(struct clk * clk, struct notifier_block * nb)'/>
<dec f='linux-4.18.y/drivers/clk/clk.c' l='3459' type='int clk_notifier_unregister(struct clk * , struct notifier_block * )'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3459' c='clk_notifier_unregister'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3459' u='a'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3459' u='a'/>
<doc f='linux-4.18.y/drivers/clk/clk.c' l='3414'>/**
 * clk_notifier_unregister - remove a clk rate change notifier
 * @clk: struct clk *
 * @nb: struct notifier_block * with callback info
 *
 * Request no further notification for changes to &apos;clk&apos; and frees memory
 * allocated in clk_notifier_register.
 *
 * Returns -EINVAL if called with null arguments; otherwise, passes
 * along the return value of srcu_notifier_chain_unregister().
 */</doc>
