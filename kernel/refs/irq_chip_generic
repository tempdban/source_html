<def f='linux-4.14.y/include/linux/irq.h' l='955' ll='976'/>
<size>128</size>
<doc f='linux-4.14.y/include/linux/irq.h' l='922'>/**
 * struct irq_chip_generic - Generic irq chip data structure
 * @lock:		Lock to protect register and cache data access
 * @reg_base:		Register base address (virtual)
 * @reg_readl:		Alternate I/O accessor (defaults to readl if NULL)
 * @reg_writel:		Alternate I/O accessor (defaults to writel if NULL)
 * @suspend:		Function called from core code on suspend once per
 *			chip; can be useful instead of irq_chip::suspend to
 *			handle chip details even when no interrupts are in use
 * @resume:		Function called from core code on resume once per chip;
 *			can be useful instead of irq_chip::suspend to handle
 *			chip details even when no interrupts are in use
 * @irq_base:		Interrupt base nr for this chip
 * @irq_cnt:		Number of interrupts handled by this chip
 * @mask_cache:		Cached mask register shared between all chip types
 * @type_cache:		Cached type register
 * @polarity_cache:	Cached polarity register
 * @wake_enabled:	Interrupt can wakeup from suspend
 * @wake_active:	Interrupt is marked as an wakeup from suspend source
 * @num_ct:		Number of available irq_chip_type instances (usually 1)
 * @private:		Private data for non generic chip callbacks
 * @installed:		bitfield to denote installed interrupts
 * @unused:		bitfield to denote unused interrupts
 * @domain:		irq domain pointer
 * @list:		List head for keeping track of instances
 * @chip_types:		Array of interrupt irq_chip_types
 *
 * Note, that irq_chip_generic can have multiple irq_chip_type
 * implementations which can be associated to a particular irq line of
 * an irq_chip_generic instance. That allows to share and protect
 * state in an irq_chip_generic instance when we need to implement
 * different flow mechanisms (level/edge) for it.
 */</doc>
<mbr r='irq_chip_generic::lock' o='0' t='raw_spinlock_t'/>
<mbr r='irq_chip_generic::reg_base' o='64' t='void *'/>
<mbr r='irq_chip_generic::reg_readl' o='128' t='u32 (*)(void *)'/>
<mbr r='irq_chip_generic::reg_writel' o='192' t='void (*)(u32, void *)'/>
<mbr r='irq_chip_generic::suspend' o='256' t='void (*)(struct irq_chip_generic *)'/>
<mbr r='irq_chip_generic::resume' o='320' t='void (*)(struct irq_chip_generic *)'/>
<mbr r='irq_chip_generic::irq_base' o='384' t='unsigned int'/>
<mbr r='irq_chip_generic::irq_cnt' o='416' t='unsigned int'/>
<mbr r='irq_chip_generic::mask_cache' o='448' t='u32'/>
<mbr r='irq_chip_generic::type_cache' o='480' t='u32'/>
<mbr r='irq_chip_generic::polarity_cache' o='512' t='u32'/>
<mbr r='irq_chip_generic::wake_enabled' o='544' t='u32'/>
<mbr r='irq_chip_generic::wake_active' o='576' t='u32'/>
<mbr r='irq_chip_generic::num_ct' o='608' t='unsigned int'/>
<mbr r='irq_chip_generic::private' o='640' t='void *'/>
<mbr r='irq_chip_generic::installed' o='704' t='unsigned long'/>
<mbr r='irq_chip_generic::unused' o='768' t='unsigned long'/>
<mbr r='irq_chip_generic::domain' o='832' t='struct irq_domain *'/>
<mbr r='irq_chip_generic::list' o='896' t='struct list_head'/>
<mbr r='irq_chip_generic::chip_types' o='1024' t='struct irq_chip_type [0]'/>
<def f='linux-4.14.y/include/linux/irq.h' l='955' ll='976'/>
<size>128</size>
<doc f='linux-4.14.y/include/linux/irq.h' l='922'>/**
 * struct irq_chip_generic - Generic irq chip data structure
 * @lock:		Lock to protect register and cache data access
 * @reg_base:		Register base address (virtual)
 * @reg_readl:		Alternate I/O accessor (defaults to readl if NULL)
 * @reg_writel:		Alternate I/O accessor (defaults to writel if NULL)
 * @suspend:		Function called from core code on suspend once per
 *			chip; can be useful instead of irq_chip::suspend to
 *			handle chip details even when no interrupts are in use
 * @resume:		Function called from core code on resume once per chip;
 *			can be useful instead of irq_chip::suspend to handle
 *			chip details even when no interrupts are in use
 * @irq_base:		Interrupt base nr for this chip
 * @irq_cnt:		Number of interrupts handled by this chip
 * @mask_cache:		Cached mask register shared between all chip types
 * @type_cache:		Cached type register
 * @polarity_cache:	Cached polarity register
 * @wake_enabled:	Interrupt can wakeup from suspend
 * @wake_active:	Interrupt is marked as an wakeup from suspend source
 * @num_ct:		Number of available irq_chip_type instances (usually 1)
 * @private:		Private data for non generic chip callbacks
 * @installed:		bitfield to denote installed interrupts
 * @unused:		bitfield to denote unused interrupts
 * @domain:		irq domain pointer
 * @list:		List head for keeping track of instances
 * @chip_types:		Array of interrupt irq_chip_types
 *
 * Note, that irq_chip_generic can have multiple irq_chip_type
 * implementations which can be associated to a particular irq line of
 * an irq_chip_generic instance. That allows to share and protect
 * state in an irq_chip_generic instance when we need to implement
 * different flow mechanisms (level/edge) for it.
 */</doc>
<mbr r='irq_chip_generic::lock' o='0' t='raw_spinlock_t'/>
<mbr r='irq_chip_generic::reg_base' o='64' t='void *'/>
<mbr r='irq_chip_generic::reg_readl' o='128' t='u32 (*)(void *)'/>
<mbr r='irq_chip_generic::reg_writel' o='192' t='void (*)(u32, void *)'/>
<mbr r='irq_chip_generic::suspend' o='256' t='void (*)(struct irq_chip_generic *)'/>
<mbr r='irq_chip_generic::resume' o='320' t='void (*)(struct irq_chip_generic *)'/>
<mbr r='irq_chip_generic::irq_base' o='384' t='unsigned int'/>
<mbr r='irq_chip_generic::irq_cnt' o='416' t='unsigned int'/>
<mbr r='irq_chip_generic::mask_cache' o='448' t='u32'/>
<mbr r='irq_chip_generic::type_cache' o='480' t='u32'/>
<mbr r='irq_chip_generic::polarity_cache' o='512' t='u32'/>
<mbr r='irq_chip_generic::wake_enabled' o='544' t='u32'/>
<mbr r='irq_chip_generic::wake_active' o='576' t='u32'/>
<mbr r='irq_chip_generic::num_ct' o='608' t='unsigned int'/>
<mbr r='irq_chip_generic::private' o='640' t='void *'/>
<mbr r='irq_chip_generic::installed' o='704' t='unsigned long'/>
<mbr r='irq_chip_generic::unused' o='768' t='unsigned long'/>
<mbr r='irq_chip_generic::domain' o='832' t='struct irq_domain *'/>
<mbr r='irq_chip_generic::list' o='896' t='struct list_head'/>
<mbr r='irq_chip_generic::chip_types' o='1024' t='struct irq_chip_type [0]'/>
