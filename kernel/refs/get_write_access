<def f='linux-4.14.y/include/linux/fs.h' l='2744' ll='2747' type='int get_write_access(struct inode * inode)'/>
<doc f='linux-4.14.y/include/linux/fs.h' l='2728'>/*
 * get_write_access() gets write permission for a file.
 * put_write_access() releases this write permission.
 * This is used for regular files.
 * We cannot support write (and maybe mmap read-write shared) accesses and
 * MAP_DENYWRITE mmappings simultaneously. The i_writecount field of an inode
 * can have the following values:
 * 0: no writers, no VM_DENYWRITE mappings
 * &lt; 0: (-i_writecount) vm_area_structs with VM_DENYWRITE set exist
 * &gt; 0: (i_writecount) users are writing to the file.
 *
 * Normally we operate on that counter with atomic_{inc,dec} and it&apos;s safe
 * except for the cases where we don&apos;t hold i_writecount yet. Then we need to
 * use {get,deny}_write_access() - these functions check the sign and refuse
 * to do the change if sign is wrong.
 */</doc>
<use f='linux-4.14.y/fs/namei.c' l='2958' u='c' c='handle_truncate'/>
<use f='linux-4.14.y/fs/open.c' l='104' u='c' c='vfs_truncate'/>
<use f='linux-4.14.y/fs/open.c' l='720' u='c' c='do_dentry_open'/>
