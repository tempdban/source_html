<dec f='linux-4.18.y/include/drm/ttm/ttm_bo_driver.h' l='544' type='int ttm_bo_mem_space(struct ttm_buffer_object * bo, struct ttm_placement * placement, struct ttm_mem_reg * mem, struct ttm_operation_ctx * ctx)'/>
<doc f='linux-4.18.y/include/drm/ttm/ttm_bo_driver.h' l='525'>/**
 * ttm_bo_mem_space
 *
 * @bo: Pointer to a struct ttm_buffer_object. the data of which
 * we want to allocate space for.
 * @proposed_placement: Proposed new placement for the buffer object.
 * @mem: A struct ttm_mem_reg.
 * @interruptible: Sleep interruptible when sliping.
 * @no_wait_gpu: Return immediately if the GPU is busy.
 *
 * Allocate memory space for the buffer object pointed to by @bo, using
 * the placement flags in @mem, potentially evicting other idle buffer objects.
 * This function may sleep while waiting for space to become available.
 * Returns:
 * -EBUSY: No space available (only if no_wait == 1).
 * -ENOMEM: Could not allocate memory for the buffer object, either due to
 * fragmentation or concurrent allocators.
 * -ERESTARTSYS: An interruptible sleep was interrupted by a signal.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='643' u='c' c='ttm_bo_evict'/>
<def f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='889' ll='1001' type='int ttm_bo_mem_space(struct ttm_buffer_object * bo, struct ttm_placement * placement, struct ttm_mem_reg * mem, struct ttm_operation_ctx * ctx)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1002' type='int ttm_bo_mem_space(struct ttm_buffer_object * , struct ttm_placement * , struct ttm_mem_reg * , struct ttm_operation_ctx * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1002' c='ttm_bo_mem_space'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1002' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1002' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1021' u='c' c='ttm_bo_move_buffer'/>
<doc f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='881'>/**
 * Creates space for memory region @mem according to its type.
 *
 * This function first searches for free space in compatible memory types in
 * the priority order defined by the driver.  If free space isn&apos;t found, then
 * ttm_bo_mem_force_space is attempted in priority order to evict and find
 * space.
 */</doc>
