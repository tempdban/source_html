<def f='linux-4.14.y/include/linux/net.h' l='110' ll='122'/>
<size>48</size>
<doc f='linux-4.14.y/include/linux/net.h' l='100'>/**
 *  struct socket - general BSD socket
 *  @state: socket state (%SS_CONNECTED, etc)
 *  @type: socket type (%SOCK_STREAM, etc)
 *  @flags: socket flags (%SOCK_NOSPACE, etc)
 *  @ops: protocol specific socket operations
 *  @file: File back pointer for gc
 *  @sk: internal networking protocol agnostic socket representation
 *  @wq: wait queue for several uses
 */</doc>
<mbr r='socket::state' o='0' t='socket_state'/>
<mbr r='socket::type' o='32' t='short'/>
<mbr r='socket::flags' o='64' t='unsigned long'/>
<mbr r='socket::wq' o='128' t='struct socket_wq *'/>
<mbr r='socket::file' o='192' t='struct file *'/>
<mbr r='socket::sk' o='256' t='struct sock *'/>
<mbr r='socket::ops' o='320' t='const struct proto_ops *'/>
<dec f='include/sys/socket.h' l='114' type='int socket(int __domain, int __type, int __protocol)'/>
<doc f='include/sys/socket.h' l='111'>/* Create a new socket of type TYPE in domain DOMAIN, using
   protocol PROTOCOL.  If PROTOCOL is zero, one is chosen automatically.
   Returns a file descriptor for the new socket, or -1 for errors.  */</doc>
