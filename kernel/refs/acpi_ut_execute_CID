<dec f='linux-4.14.y/drivers/acpi/acpica/acutils.h' l='408' type='acpi_status acpi_ut_execute_CID(struct acpi_namespace_node * device_node, struct acpi_pnp_device_id_list ** return_cid_list)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evrgnini.c' l='374' u='c' c='acpi_ev_is_pci_root_bridge'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsxfeval.c' l='729' u='c' c='acpi_ns_get_device_callback'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsxfname.c' l='337' u='c' c='acpi_get_object_info'/>
<def f='linux-4.14.y/drivers/acpi/acpica/utids.c' l='229' ll='350' type='acpi_status acpi_ut_execute_CID(struct acpi_namespace_node * device_node, struct acpi_pnp_device_id_list ** return_cid_list)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/utids.c' l='206'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ut_execute_CID
 *
 * PARAMETERS:  device_node         - Node for the device
 *              return_cid_list     - Where the CID list is returned
 *
 * RETURN:      Status, list of CID strings
 *
 * DESCRIPTION: Executes the _CID control method that returns one or more
 *              compatible hardware IDs for the device.
 *
 *              NOTE: Internal function, no parameter validation
 *
 * A _CID method can return either a single compatible ID or a package of
 * compatible IDs. Each compatible ID can be one of the following:
 * 1) Integer (32 bit compressed EISA ID) or
 * 2) String (PCI ID format, e.g. &quot;PCI\VEN_vvvv&amp;DEV_dddd&amp;SUBSYS_ssssssss&quot;)
 *
 * The Integer CIDs are converted to string format by this function.
 *
 ******************************************************************************/</doc>
