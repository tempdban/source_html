<dec f='linux-4.14.y/include/linux/sched/mm.h' l='96' type='struct mm_struct * get_task_mm(struct task_struct * task)'/>
<doc f='linux-4.14.y/include/linux/sched/mm.h' l='95'>/* Grab a reference to a task&apos;s mm, if it is not already going away */</doc>
<use f='linux-4.14.y/drivers/iommu/amd_iommu_v2.c' l='668' u='c' c='amd_iommu_bind_pasid'/>
<use f='linux-4.14.y/drivers/iommu/intel-svm.c' l='312' u='c' c='intel_svm_bind_mm'/>
<use f='linux-4.14.y/drivers/vfio/vfio_iommu_type1.c' l='260' u='c' c='vfio_lock_acct'/>
<use f='linux-4.14.y/drivers/vfio/vfio_iommu_type1.c' l='498' u='c' c='vfio_pin_page_external'/>
<use f='linux-4.14.y/fs/proc/array.c' l='397' u='c' c='proc_pid_status'/>
<use f='linux-4.14.y/fs/proc/array.c' l='439' u='c' c='do_task_stat'/>
<use f='linux-4.14.y/fs/proc/array.c' l='623' u='c' c='proc_pid_statm'/>
<use f='linux-4.14.y/fs/proc/base.c' l='228' u='c' c='proc_pid_cmdline_read'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2011' u='c' c='map_files_get_link'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2115' u='c' c='proc_map_files_lookup'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2168' u='c' c='proc_map_files_readdir'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2646' u='c' c='proc_coredump_filter_read'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2681' u='c' c='proc_coredump_filter_write'/>
<use f='linux-4.14.y/fs/proc/task_mmu.c' l='1117' u='c' c='clear_refs_write'/>
<use f='linux-4.14.y/kernel/cgroup/cpuset.c' l='1118' u='c' c='update_tasks_nodemask'/>
<use f='linux-4.14.y/kernel/cgroup/cpuset.c' l='1562' u='c' c='cpuset_attach'/>
<use f='linux-4.14.y/kernel/events/core.c' l='8383' u='c' c='perf_event_addr_filters_apply'/>
<def f='linux-4.14.y/kernel/fork.c' l='1050' ll='1064' type='struct mm_struct * get_task_mm(struct task_struct * task)'/>
<dec f='linux-4.14.y/kernel/fork.c' l='1065' type='struct mm_struct * get_task_mm(struct task_struct * )'/>
<use f='linux-4.14.y/kernel/fork.c' l='1065' c='get_task_mm'/>
<use f='linux-4.14.y/kernel/fork.c' l='1065' u='a'/>
<use f='linux-4.14.y/kernel/fork.c' l='1065' u='a'/>
<use f='linux-4.14.y/kernel/fork.c' l='1076' u='c' c='mm_access'/>
<doc f='linux-4.14.y/kernel/fork.c' l='1041'>/**
 * get_task_mm - acquire a reference to the task&apos;s mm
 *
 * Returns %NULL if the task has no mm.  Checks PF_KTHREAD (meaning
 * this kernel workthread has transiently adopted a user mm with use_mm,
 * to do its AIO) is not set and if so returns a reference to it, after
 * bumping up the use count.  User must release the mm via mmput()
 * after use.  Typically used by /proc and ptrace.
 */</doc>
<use f='linux-4.14.y/kernel/ptrace.c' l='44' u='c' c='ptrace_access_vm'/>
<use f='linux-4.14.y/kernel/sys.c' l='1722' u='c' c='getrusage'/>
<use f='linux-4.14.y/kernel/trace/trace_output.c' l='1126' u='c' c='trace_user_stack_print'/>
<use f='linux-4.14.y/mm/memory.c' l='4439' u='c' c='access_process_vm'/>
<use f='linux-4.14.y/mm/util.c' l='694' u='c' c='get_cmdline'/>
<dec f='linux-4.14.y/include/linux/sched/mm.h' l='96' type='struct mm_struct * get_task_mm(struct task_struct * task)'/>
<doc f='linux-4.14.y/include/linux/sched/mm.h' l='95'>/* Grab a reference to a task&apos;s mm, if it is not already going away */</doc>
<use f='linux-4.14.y/drivers/iommu/amd_iommu_v2.c' l='668' u='c' c='amd_iommu_bind_pasid'/>
<use f='linux-4.14.y/drivers/iommu/intel-svm.c' l='312' u='c' c='intel_svm_bind_mm'/>
<use f='linux-4.14.y/drivers/vfio/vfio_iommu_type1.c' l='260' u='c' c='vfio_lock_acct'/>
<use f='linux-4.14.y/drivers/vfio/vfio_iommu_type1.c' l='498' u='c' c='vfio_pin_page_external'/>
<use f='linux-4.14.y/fs/proc/array.c' l='397' u='c' c='proc_pid_status'/>
<use f='linux-4.14.y/fs/proc/array.c' l='439' u='c' c='do_task_stat'/>
<use f='linux-4.14.y/fs/proc/array.c' l='623' u='c' c='proc_pid_statm'/>
<use f='linux-4.14.y/fs/proc/base.c' l='228' u='c' c='proc_pid_cmdline_read'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2011' u='c' c='map_files_get_link'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2115' u='c' c='proc_map_files_lookup'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2168' u='c' c='proc_map_files_readdir'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2646' u='c' c='proc_coredump_filter_read'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2681' u='c' c='proc_coredump_filter_write'/>
<use f='linux-4.14.y/fs/proc/task_mmu.c' l='1117' u='c' c='clear_refs_write'/>
<use f='linux-4.14.y/kernel/cgroup/cpuset.c' l='1118' u='c' c='update_tasks_nodemask'/>
<use f='linux-4.14.y/kernel/cgroup/cpuset.c' l='1562' u='c' c='cpuset_attach'/>
<use f='linux-4.14.y/kernel/events/core.c' l='8383' u='c' c='perf_event_addr_filters_apply'/>
<def f='linux-4.14.y/kernel/fork.c' l='1050' ll='1064' type='struct mm_struct * get_task_mm(struct task_struct * task)'/>
<dec f='linux-4.14.y/kernel/fork.c' l='1065' type='struct mm_struct * get_task_mm(struct task_struct * )'/>
<use f='linux-4.14.y/kernel/fork.c' l='1065' c='get_task_mm'/>
<use f='linux-4.14.y/kernel/fork.c' l='1065' u='a'/>
<use f='linux-4.14.y/kernel/fork.c' l='1065' u='a'/>
<use f='linux-4.14.y/kernel/fork.c' l='1076' u='c' c='mm_access'/>
<doc f='linux-4.14.y/kernel/fork.c' l='1041'>/**
 * get_task_mm - acquire a reference to the task&apos;s mm
 *
 * Returns %NULL if the task has no mm.  Checks PF_KTHREAD (meaning
 * this kernel workthread has transiently adopted a user mm with use_mm,
 * to do its AIO) is not set and if so returns a reference to it, after
 * bumping up the use count.  User must release the mm via mmput()
 * after use.  Typically used by /proc and ptrace.
 */</doc>
<use f='linux-4.14.y/kernel/ptrace.c' l='44' u='c' c='ptrace_access_vm'/>
<use f='linux-4.14.y/kernel/sys.c' l='1722' u='c' c='getrusage'/>
<use f='linux-4.14.y/kernel/trace/trace_output.c' l='1126' u='c' c='trace_user_stack_print'/>
<use f='linux-4.14.y/mm/memory.c' l='4439' u='c' c='access_process_vm'/>
<use f='linux-4.14.y/mm/util.c' l='694' u='c' c='get_cmdline'/>
