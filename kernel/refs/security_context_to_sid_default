<dec f='linux-4.18.y/security/selinux/include/security.h' l='265' type='int security_context_to_sid_default(struct selinux_state * state, const char * scontext, u32 scontext_len, u32 * out_sid, u32 def_sid, gfp_t gfp_flags)'/>
<use f='linux-4.18.y/security/selinux/hooks.c' l='1636' u='c' c='inode_doinit_with_dentry'/>
<def f='linux-4.18.y/security/selinux/ss/services.c' l='1556' ll='1562' type='int security_context_to_sid_default(struct selinux_state * state, const char * scontext, u32 scontext_len, u32 * sid, u32 def_sid, gfp_t gfp_flags)'/>
<doc f='linux-4.18.y/security/selinux/ss/services.c' l='1538'>/**
 * security_context_to_sid_default - Obtain a SID for a given security context,
 * falling back to specified default if needed.
 *
 * @scontext: security context
 * @scontext_len: length in bytes
 * @sid: security identifier, SID
 * @def_sid: default SID to assign on error
 *
 * Obtains a SID associated with the security context that
 * has the string representation specified by @scontext.
 * The default SID is passed to the MLS layer to be used to allow
 * kernel labeling of the MLS field if the MLS field is not present
 * (for upgrading to MLS without full relabel).
 * Implicitly forces adding of the context even if it cannot be mapped yet.
 * Returns -%EINVAL if the context is invalid, -%ENOMEM if insufficient
 * memory is available, or 0 on success.
 */</doc>
