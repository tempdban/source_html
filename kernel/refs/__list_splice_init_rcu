<def f='linux-4.18.y/include/linux/rculist.h' l='199' ll='236' type='void __list_splice_init_rcu(struct list_head * list, struct list_head * prev, struct list_head * next, void (*)(void) sync)'/>
<use f='linux-4.18.y/include/linux/rculist.h' l='250' u='c' c='list_splice_init_rcu'/>
<use f='linux-4.18.y/include/linux/rculist.h' l='265' u='c' c='list_splice_tail_init_rcu'/>
<doc f='linux-4.18.y/include/linux/rculist.h' l='180'>/**
 * __list_splice_init_rcu - join an RCU-protected list into an existing list.
 * @list:	the RCU-protected list to splice
 * @prev:	points to the last element of the existing list
 * @next:	points to the first element of the existing list
 * @sync:	function to sync: synchronize_rcu(), synchronize_sched(), ...
 *
 * The list pointed to by @prev and @next can be RCU-read traversed
 * concurrently with this function.
 *
 * Note that this function blocks.
 *
 * Important note: the caller must take whatever action is necessary to prevent
 * any other updates to the existing list.  In principle, it is possible to
 * modify the list as soon as sync() begins execution. If this sort of thing
 * becomes necessary, an alternative version based on call_rcu() could be
 * created.  But only if -really- needed -- there is no shortage of RCU API
 * members.
 */</doc>
