<dec f='linux-4.14.y/include/drm/drm_rect.h' l='189' type='int drm_rect_calc_vscale_relaxed(struct drm_rect * src, struct drm_rect * dst, int min_vscale, int max_vscale)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_rect.c' l='245' ll='273' type='int drm_rect_calc_vscale_relaxed(struct drm_rect * src, struct drm_rect * dst, int min_vscale, int max_vscale)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_rect.c' l='274' type='int drm_rect_calc_vscale_relaxed(struct drm_rect * , struct drm_rect * , int , int )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_rect.c' l='274' c='drm_rect_calc_vscale_relaxed'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_rect.c' l='274' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_rect.c' l='274' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_rect.c' l='226'>/**
 * drm_rect_calc_vscale_relaxed - calculate the vertical scaling factor
 * @src: source window rectangle
 * @dst: destination window rectangle
 * @min_vscale: minimum allowed vertical scaling factor
 * @max_vscale: maximum allowed vertical scaling factor
 *
 * Calculate the vertical scaling factor as
 * (@src height) / (@dst height).
 *
 * If the calculated scaling factor is below @min_vscale,
 * decrease the height of rectangle @dst to compensate.
 *
 * If the calculated scaling factor is above @max_vscale,
 * decrease the height of rectangle @src to compensate.
 *
 * RETURNS:
 * The vertical scaling factor.
 */</doc>
