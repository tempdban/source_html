<dec f='linux-4.14.y/include/linux/swait.h' l='149' type='void swake_up_locked(struct swait_queue_head * q)'/>
<def f='linux-4.14.y/kernel/sched/swait.c' l='20' ll='30' type='void swake_up_locked(struct swait_queue_head * q)'/>
<dec f='linux-4.14.y/kernel/sched/swait.c' l='31' type='void swake_up_locked(struct swait_queue_head * )'/>
<use f='linux-4.14.y/kernel/sched/swait.c' l='31' c='swake_up_locked'/>
<use f='linux-4.14.y/kernel/sched/swait.c' l='31' u='a'/>
<use f='linux-4.14.y/kernel/sched/swait.c' l='31' u='a'/>
<use f='linux-4.14.y/kernel/sched/swait.c' l='38' u='c' c='swake_up'/>
<doc f='linux-4.14.y/kernel/sched/swait.c' l='14'>/*
 * The thing about the wake_up_state() return value; I think we can ignore it.
 *
 * If for some reason it would return 0, that means the previously waiting
 * task is already running, so it will observe condition true (or has already).
 */</doc>
<dec f='linux-4.14.y/include/linux/swait.h' l='149' type='void swake_up_locked(struct swait_queue_head * q)'/>
<def f='linux-4.14.y/kernel/sched/swait.c' l='20' ll='30' type='void swake_up_locked(struct swait_queue_head * q)'/>
<dec f='linux-4.14.y/kernel/sched/swait.c' l='31' type='void swake_up_locked(struct swait_queue_head * )'/>
<use f='linux-4.14.y/kernel/sched/swait.c' l='31' c='swake_up_locked'/>
<use f='linux-4.14.y/kernel/sched/swait.c' l='31' u='a'/>
<use f='linux-4.14.y/kernel/sched/swait.c' l='31' u='a'/>
<use f='linux-4.14.y/kernel/sched/swait.c' l='38' u='c' c='swake_up'/>
<doc f='linux-4.14.y/kernel/sched/swait.c' l='14'>/*
 * The thing about the wake_up_state() return value; I think we can ignore it.
 *
 * If for some reason it would return 0, that means the previously waiting
 * task is already running, so it will observe condition true (or has already).
 */</doc>
