<dec f='linux-4.14.y/include/scsi/scsi_device.h' l='392' type='int scsi_mode_select(struct scsi_device * sdev, int pf, int sp, int modepage, unsigned char * buffer, int len, int timeout, int retries, struct scsi_mode_data * data, struct scsi_sense_hdr * )'/>
<def f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2401' ll='2457' type='int scsi_mode_select(struct scsi_device * sdev, int pf, int sp, int modepage, unsigned char * buffer, int len, int timeout, int retries, struct scsi_mode_data * data, struct scsi_sense_hdr * sshdr)'/>
<dec f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2458' type='int scsi_mode_select(struct scsi_device * , int , int , int , unsigned char * , int , int , int , struct scsi_mode_data * , struct scsi_sense_hdr * )'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2458' c='scsi_mode_select'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2458' u='a'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2458' u='a'/>
<doc f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2383'>/**
 *	scsi_mode_select - issue a mode select
 *	@sdev:	SCSI device to be queried
 *	@pf:	Page format bit (1 == standard, 0 == vendor specific)
 *	@sp:	Save page bit (0 == don&apos;t save, 1 == save)
 *	@modepage: mode page being requested
 *	@buffer: request buffer (may not be smaller than eight bytes)
 *	@len:	length of request buffer.
 *	@timeout: command timeout
 *	@retries: number of retries before failing
 *	@data: returns a structure abstracting the mode header data
 *	@sshdr: place to put sense data (or NULL if no sense to be collected).
 *		must be SCSI_SENSE_BUFFERSIZE big.
 *
 *	Returns zero if successful; negative error number or scsi
 *	status on error
 *
 */</doc>
<use f='linux-4.14.y/drivers/scsi/sd.c' l='208' u='c' c='cache_type_store'/>
<dec f='linux-4.14.y/include/scsi/scsi_device.h' l='392' type='int scsi_mode_select(struct scsi_device * sdev, int pf, int sp, int modepage, unsigned char * buffer, int len, int timeout, int retries, struct scsi_mode_data * data, struct scsi_sense_hdr * )'/>
<def f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2401' ll='2457' type='int scsi_mode_select(struct scsi_device * sdev, int pf, int sp, int modepage, unsigned char * buffer, int len, int timeout, int retries, struct scsi_mode_data * data, struct scsi_sense_hdr * sshdr)'/>
<dec f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2458' type='int scsi_mode_select(struct scsi_device * , int , int , int , unsigned char * , int , int , int , struct scsi_mode_data * , struct scsi_sense_hdr * )'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2458' c='scsi_mode_select'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2458' u='a'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2458' u='a'/>
<doc f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='2383'>/**
 *	scsi_mode_select - issue a mode select
 *	@sdev:	SCSI device to be queried
 *	@pf:	Page format bit (1 == standard, 0 == vendor specific)
 *	@sp:	Save page bit (0 == don&apos;t save, 1 == save)
 *	@modepage: mode page being requested
 *	@buffer: request buffer (may not be smaller than eight bytes)
 *	@len:	length of request buffer.
 *	@timeout: command timeout
 *	@retries: number of retries before failing
 *	@data: returns a structure abstracting the mode header data
 *	@sshdr: place to put sense data (or NULL if no sense to be collected).
 *		must be SCSI_SENSE_BUFFERSIZE big.
 *
 *	Returns zero if successful; negative error number or scsi
 *	status on error
 *
 */</doc>
<use f='linux-4.14.y/drivers/scsi/sd.c' l='208' u='c' c='cache_type_store'/>
