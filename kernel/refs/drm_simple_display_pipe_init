<dec f='linux-4.14.y/include/drm/drm_simple_kms_helper.h' l='121' type='int drm_simple_display_pipe_init(struct drm_device * dev, struct drm_simple_display_pipe * pipe, const struct drm_simple_display_pipe_funcs * funcs, const uint32_t * formats, unsigned int format_count, const uint64_t * format_modifiers, struct drm_connector * connector)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='219' ll='256' type='int drm_simple_display_pipe_init(struct drm_device * dev, struct drm_simple_display_pipe * pipe, const struct drm_simple_display_pipe_funcs * funcs, const uint32_t * formats, unsigned int format_count, const uint64_t * format_modifiers, struct drm_connector * connector)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='257' type='int drm_simple_display_pipe_init(struct drm_device * , struct drm_simple_display_pipe * , const struct drm_simple_display_pipe_funcs * , const uint32_t * , unsigned int , const uint64_t * , struct drm_connector * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='257' c='drm_simple_display_pipe_init'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='257' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='257' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='195'>/**
 * drm_simple_display_pipe_init - Initialize a simple display pipeline
 * @dev: DRM device
 * @pipe: simple display pipe object to initialize
 * @funcs: callbacks for the display pipe (optional)
 * @formats: array of supported formats (DRM_FORMAT\_\*)
 * @format_count: number of elements in @formats
 * @format_modifiers: array of formats modifiers
 * @connector: connector to attach and register (optional)
 *
 * Sets up a display pipeline which consist of a really simple
 * plane-crtc-encoder pipe.
 *
 * If a connector is supplied, the pipe will be coupled with the provided
 * connector. You may supply a NULL connector when using drm bridges, that
 * handle connectors themselves (see drm_simple_display_pipe_attach_bridge()).
 *
 * Teardown of a simple display pipe is all handled automatically by the drm
 * core through calling drm_mode_config_cleanup(). Drivers afterwards need to
 * release the memory for the structure themselves.
 *
 * Returns:
 * Zero on success, negative error code on failure.
 */</doc>
