<def f='linux-4.14.y/include/linux/dmaengine.h' l='968' ll='974' type='void dmaengine_synchronize(struct dma_chan * chan)'/>
<use f='linux-4.14.y/include/linux/dmaengine.h' l='998' u='c' c='dmaengine_terminate_sync'/>
<doc f='linux-4.14.y/include/linux/dmaengine.h' l='950'>/**
 * dmaengine_synchronize() - Synchronize DMA channel termination
 * @chan: The channel to synchronize
 *
 * Synchronizes to the DMA channel termination to the current context. When this
 * function returns it is guaranteed that all transfers for previously issued
 * descriptors have stopped and and it is safe to free the memory assoicated
 * with them. Furthermore it is guaranteed that all complete callback functions
 * for a previously submitted descriptor have finished running and it is safe to
 * free resources accessed from within the complete callbacks.
 *
 * The behavior of this function is undefined if dma_async_issue_pending() has
 * been called between dmaengine_terminate_async() and this function.
 *
 * This function must only be called from non-atomic context and must not be
 * called from within a complete callback of a descriptor submitted on the same
 * channel.
 */</doc>
<use f='linux-4.14.y/drivers/dma/dmaengine.c' l='271' u='c' c='dma_chan_put'/>
