<dec f='linux-4.18.y/include/linux/string.h' l='32' type='ssize_t strscpy(char * , const char * , size_t )'/>
<use f='linux-4.18.y/fs/proc/array.c' l='118' u='c' c='proc_task_name'/>
<use f='linux-4.18.y/kernel/cgroup/cgroup.c' l='1403' u='c' c='cgroup_file_name'/>
<use f='linux-4.18.y/kernel/cgroup/cgroup.c' l='1885' u='c' c='init_cgroup_root'/>
<use f='linux-4.18.y/kernel/cgroup/cgroup.c' l='1887' u='c' c='init_cgroup_root'/>
<use f='linux-4.18.y/kernel/seccomp.c' l='1157' u='c' c='seccomp_names_from_actions_logged'/>
<use f='linux-4.18.y/kernel/seccomp.c' l='1166' u='c' c='seccomp_names_from_actions_logged'/>
<use f='linux-4.18.y/kernel/workqueue.c' l='2095' u='c' c='process_one_work'/>
<use f='linux-4.18.y/kernel/workqueue.c' l='4611' u='c' c='wq_worker_comm'/>
<def f='linux-4.18.y/lib/string.c' l='178' ll='235' type='ssize_t strscpy(char * dest, const char * src, size_t count)'/>
<dec f='linux-4.18.y/lib/string.c' l='236' type='ssize_t strscpy(char * , const char * , size_t )'/>
<use f='linux-4.18.y/lib/string.c' l='236' c='strscpy'/>
<use f='linux-4.18.y/lib/string.c' l='236' u='a'/>
<use f='linux-4.18.y/lib/string.c' l='236' u='a'/>
<doc f='linux-4.18.y/lib/string.c' l='155'>/**
 * strscpy - Copy a C-string into a sized buffer
 * @dest: Where to copy the string to
 * @src: Where to copy the string from
 * @count: Size of destination buffer
 *
 * Copy the string, or as much of it as fits, into the dest buffer.
 * The routine returns the number of characters copied (not including
 * the trailing NUL) or -E2BIG if the destination buffer wasn&apos;t big enough.
 * The behavior is undefined if the string buffers overlap.
 * The destination buffer is always NUL terminated, unless it&apos;s zero-sized.
 *
 * Preferred to strlcpy() since the API doesn&apos;t require reading memory
 * from the src string beyond the specified &quot;count&quot; bytes, and since
 * the return value is easier to error-check than strlcpy()&apos;s.
 * In addition, the implementation is robust to the string changing out
 * from underneath it, unlike the current strlcpy() implementation.
 *
 * Preferred to strncpy() since it always returns a valid string, and
 * doesn&apos;t unnecessarily force the tail of the destination buffer to be
 * zeroed.  If the zeroing is desired, it&apos;s likely cleaner to use strscpy()
 * with an overflow test, then just memset() the tail of the dest buffer.
 */</doc>
