<dec f='linux-4.18.y/include/linux/rhashtable.h' l='401' type='void rhashtable_free_and_destroy(struct rhashtable * ht, void (*)(void *, void *) free_fn, void * arg)'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='1296' u='c' c='rhltable_free_and_destroy'/>
<def f='linux-4.18.y/lib/rhashtable.c' l='1147' ll='1182' type='void rhashtable_free_and_destroy(struct rhashtable * ht, void (*)(void *, void *) free_fn, void * arg)'/>
<dec f='linux-4.18.y/lib/rhashtable.c' l='1183' type='void rhashtable_free_and_destroy(struct rhashtable * , void (*)(void *, void *) , void * )'/>
<use f='linux-4.18.y/lib/rhashtable.c' l='1183' c='rhashtable_free_and_destroy'/>
<use f='linux-4.18.y/lib/rhashtable.c' l='1183' u='a'/>
<use f='linux-4.18.y/lib/rhashtable.c' l='1183' u='a'/>
<use f='linux-4.18.y/lib/rhashtable.c' l='1187' u='c' c='rhashtable_destroy'/>
<doc f='linux-4.18.y/lib/rhashtable.c' l='1132'>/**
 * rhashtable_free_and_destroy - free elements and destroy hash table
 * @ht:		the hash table to destroy
 * @free_fn:	callback to release resources of element
 * @arg:	pointer passed to free_fn
 *
 * Stops an eventual async resize. If defined, invokes free_fn for each
 * element to releasal resources. Please note that RCU protected
 * readers may still be accessing the elements. Releasing of resources
 * must occur in a compatible manner. Then frees the bucket array.
 *
 * This function will eventually sleep to wait for an async resize
 * to complete. The caller is responsible that no further write operations
 * occurs in parallel.
 */</doc>
<use f='linux-4.18.y/net/ipv4/inet_fragment.c' l='95' u='c' c='inet_frags_exit_net'/>
<use f='linux-4.18.y/security/apparmor/policy.c' l='241' u='c' c='aa_free_profile'/>
