<dec f='linux-4.18.y/security/selinux/include/security.h' l='258' type='int security_context_to_sid(struct selinux_state * state, const char * scontext, u32 scontext_len, u32 * out_sid, gfp_t gfp)'/>
<use f='linux-4.18.y/security/selinux/hooks.c' l='3291' u='c' c='selinux_inode_setxattr'/>
<use f='linux-4.18.y/security/selinux/hooks.c' l='3464' u='c' c='selinux_inode_setsecurity'/>
<use f='linux-4.18.y/security/selinux/hooks.c' l='6453' u='c' c='selinux_setprocattr'/>
<use f='linux-4.18.y/security/selinux/hooks.c' l='6566' u='c' c='selinux_secctx_to_secid'/>
<use f='linux-4.18.y/security/selinux/selinuxfs.c' l='607' u='c' c='sel_write_context'/>
<def f='linux-4.18.y/security/selinux/ss/services.c' l='1523' ll='1529' type='int security_context_to_sid(struct selinux_state * state, const char * scontext, u32 scontext_len, u32 * sid, gfp_t gfp)'/>
<use f='linux-4.18.y/security/selinux/ss/services.c' l='1534' u='c' c='security_context_str_to_sid'/>
<doc f='linux-4.18.y/security/selinux/ss/services.c' l='1511'>/**
 * security_context_to_sid - Obtain a SID for a given security context.
 * @scontext: security context
 * @scontext_len: length in bytes
 * @sid: security identifier, SID
 * @gfp: context for the allocation
 *
 * Obtains a SID associated with the security context that
 * has the string representation specified by @scontext.
 * Returns -%EINVAL if the context is invalid, -%ENOMEM if insufficient
 * memory is available, or 0 on success.
 */</doc>
