<dec f='linux-4.14.y/include/net/tcp.h' l='620' type='void tcp_initialize_rcv_mss(struct sock * sk)'/>
<def f='linux-4.14.y/net/ipv4/tcp_input.c' l='496' ll='506' type='void tcp_initialize_rcv_mss(struct sock * sk)'/>
<dec f='linux-4.14.y/net/ipv4/tcp_input.c' l='507' type='void tcp_initialize_rcv_mss(struct sock * )'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='507' c='tcp_initialize_rcv_mss'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='507' u='a'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='507' u='a'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='5765' u='c' c='tcp_rcv_synsent_state_process'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='5857' u='c' c='tcp_rcv_synsent_state_process'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='6036' u='c' c='tcp_rcv_state_process'/>
<doc f='linux-4.14.y/net/ipv4/tcp_input.c' l='489'>/* Initialize RCV_MSS value.
 * RCV_MSS is an our guess about MSS used by the peer.
 * We haven&apos;t any direct information about the MSS.
 * It&apos;s better to underestimate the RCV_MSS rather than overestimate.
 * Overestimations make us ACKing less frequently than needed.
 * Underestimations are more easy to detect and fix by tcp_measure_rcv_mss().
 */</doc>
<use f='linux-4.14.y/net/ipv4/tcp_ipv4.c' l='1384' u='c' c='tcp_v4_syn_recv_sock'/>
<use f='linux-4.14.y/net/ipv4/tcp_output.c' l='3303' u='c' c='tcp_connect_init'/>
