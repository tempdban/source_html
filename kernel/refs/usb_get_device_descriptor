<dec f='linux-4.14.y/drivers/usb/core/usb.h' l='41' type='int usb_get_device_descriptor(struct usb_device * dev, unsigned int size)'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='1094' u='c' c='register_root_hub'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='2550' u='c' c='usb_authorize_device'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='4594' u='c' c='hub_port_init'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='4646' u='c' c='hub_port_init'/>
<def f='linux-4.14.y/drivers/usb/core/message.c' l='904' ll='920' type='int usb_get_device_descriptor(struct usb_device * dev, unsigned int size)'/>
<doc f='linux-4.14.y/drivers/usb/core/message.c' l='886'>/*
 * usb_get_device_descriptor - (re)reads the device descriptor (usbcore)
 * @dev: the device whose device descriptor is being updated
 * @size: how much of the descriptor to read
 * Context: !in_interrupt ()
 *
 * Updates the copy of the device descriptor stored in the device structure,
 * which dedicates space for this purpose.
 *
 * Not exported, only for use by the core.  If drivers really want to read
 * the device descriptor directly, they can call usb_get_descriptor() with
 * type = USB_DT_DEVICE and index = 0.
 *
 * This call is synchronous, and may not be used in an interrupt context.
 *
 * Return: The number of bytes received on success, or else the status code
 * returned by the underlying usb_control_msg() call.
 */</doc>
