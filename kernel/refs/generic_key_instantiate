<dec f='linux-4.18.y/include/linux/key-type.h' l='189' type='int generic_key_instantiate(struct key * key, struct key_preparsed_payload * prep)'/>
<def f='linux-4.18.y/security/keys/key.c' l='1082' ll='1101' type='int generic_key_instantiate(struct key * key, struct key_preparsed_payload * prep)'/>
<dec f='linux-4.18.y/security/keys/key.c' l='1102' type='int generic_key_instantiate(struct key * , struct key_preparsed_payload * )'/>
<use f='linux-4.18.y/security/keys/key.c' l='1102' c='generic_key_instantiate'/>
<use f='linux-4.18.y/security/keys/key.c' l='1102' u='a'/>
<use f='linux-4.18.y/security/keys/key.c' l='1102' u='a'/>
<doc f='linux-4.18.y/security/keys/key.c' l='1072'>/**
 * generic_key_instantiate - Simple instantiation of a key from preparsed data
 * @key: The key to be instantiated
 * @prep: The preparsed data to load.
 *
 * Instantiate a key from preparsed data.  We assume we can just copy the data
 * in directly and clear the old pointers.
 *
 * This can be pointed to directly by the key type instantiate op pointer.
 */</doc>
<use f='linux-4.18.y/security/keys/user_defined.c' l='31'/>
<use f='linux-4.18.y/security/keys/user_defined.c' l='31'/>
<use f='linux-4.18.y/security/keys/user_defined.c' l='51'/>
<use f='linux-4.18.y/security/keys/user_defined.c' l='51'/>
