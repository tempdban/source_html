<dec f='linux-4.18.y/include/linux/firmware.h' l='51' type='int request_firmware_direct(const struct firmware ** fw, const char * name, struct device * device)'/>
<use f='linux-4.18.y/arch/x86/kernel/cpu/microcode/intel.c' l='991' u='c' c='request_microcode_fw'/>
<def f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='672' ll='683' type='int request_firmware_direct(const struct firmware ** firmware_p, const char * name, struct device * device)'/>
<dec f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='684' type='int request_firmware_direct(const struct firmware ** , const char * , struct device * )'/>
<use f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='684' c='request_firmware_direct'/>
<use f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='684' u='a'/>
<use f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='684' u='a'/>
<doc f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='661'>/**
 * request_firmware_direct() - load firmware directly without usermode helper
 * @firmware_p: pointer to firmware image
 * @name: name of firmware file
 * @device: device for which firmware is being loaded
 *
 * This function works pretty much like request_firmware(), but this doesn&apos;t
 * fall back to usermode helper even if the firmware couldn&apos;t be loaded
 * directly from fs.  Hence it&apos;s useful for loading optional firmwares, which
 * aren&apos;t always present, without extra long timeouts of udev.
 **/</doc>
