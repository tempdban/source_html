<dec f='linux-4.18.y/security/apparmor/include/policy.h' l='181' type='struct aa_profile * aa_new_null_profile(struct aa_profile * parent, bool hat, const char * base, gfp_t gfp)'/>
<use f='linux-4.18.y/security/apparmor/domain.c' l='699' u='c' c='profile_transition'/>
<use f='linux-4.18.y/security/apparmor/domain.c' l='1026' u='c' c='build_change_hat'/>
<use f='linux-4.18.y/security/apparmor/domain.c' l='1377' u='c' c='aa_change_profile'/>
<def f='linux-4.18.y/security/apparmor/policy.c' l='504' ll='572' type='struct aa_profile * aa_new_null_profile(struct aa_profile * parent, bool hat, const char * base, gfp_t gfp)'/>
<doc f='linux-4.18.y/security/apparmor/policy.c' l='486'>/**
 * aa_new_null_profile - create or find a null-X learning profile
 * @parent: profile that caused this profile to be created (NOT NULL)
 * @hat: true if the null- learning profile is a hat
 * @base: name to base the null profile off of
 * @gfp: type of allocation
 *
 * Find/Create a null- complain mode profile used in learning mode.  The
 * name of the profile is unique and follows the format of parent//null-XXX.
 * where XXX is based on the @name or if that fails or is not supplied
 * a unique number
 *
 * null profiles are added to the profile list but the list does not
 * hold a count on them so that they are automatically released when
 * not in use.
 *
 * Returns: new refcounted profile else NULL on failure
 */</doc>
