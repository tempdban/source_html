<dec f='linux-4.14.y/include/linux/iocontext.h' l='150' type='struct io_context * get_task_io_context(struct task_struct * task, gfp_t gfp_flags, int node)'/>
<def f='linux-4.14.y/block/blk-ioc.c' l='319' ll='338' type='struct io_context * get_task_io_context(struct task_struct * task, gfp_t gfp_flags, int node)'/>
<dec f='linux-4.14.y/block/blk-ioc.c' l='339' type='struct io_context * get_task_io_context(struct task_struct * , gfp_t , int )'/>
<use f='linux-4.14.y/block/blk-ioc.c' l='339' c='get_task_io_context'/>
<use f='linux-4.14.y/block/blk-ioc.c' l='339' u='a'/>
<use f='linux-4.14.y/block/blk-ioc.c' l='339' u='a'/>
<doc f='linux-4.14.y/block/blk-ioc.c' l='306'>/**
 * get_task_io_context - get io_context of a task
 * @task: task of interest
 * @gfp_flags: allocation flags, used if allocation is necessary
 * @node: allocation node, used if allocation is necessary
 *
 * Return io_context of @task.  If it doesn&apos;t exist, it is created with
 * @gfp_flags and @node.  The returned io_context has its reference count
 * incremented.
 *
 * This function always goes through task_lock() and it&apos;s better to use
 * %current-&gt;io_context + get_io_context() for %current.
 */</doc>
<use f='linux-4.14.y/block/ioprio.c' l='54' u='c' c='set_task_ioprio'/>
<use f='linux-4.14.y/kernel/fork.c' l='1329' u='c' c='copy_io'/>
<dec f='linux-4.14.y/include/linux/iocontext.h' l='150' type='struct io_context * get_task_io_context(struct task_struct * task, gfp_t gfp_flags, int node)'/>
<def f='linux-4.14.y/block/blk-ioc.c' l='319' ll='338' type='struct io_context * get_task_io_context(struct task_struct * task, gfp_t gfp_flags, int node)'/>
<dec f='linux-4.14.y/block/blk-ioc.c' l='339' type='struct io_context * get_task_io_context(struct task_struct * , gfp_t , int )'/>
<use f='linux-4.14.y/block/blk-ioc.c' l='339' c='get_task_io_context'/>
<use f='linux-4.14.y/block/blk-ioc.c' l='339' u='a'/>
<use f='linux-4.14.y/block/blk-ioc.c' l='339' u='a'/>
<doc f='linux-4.14.y/block/blk-ioc.c' l='306'>/**
 * get_task_io_context - get io_context of a task
 * @task: task of interest
 * @gfp_flags: allocation flags, used if allocation is necessary
 * @node: allocation node, used if allocation is necessary
 *
 * Return io_context of @task.  If it doesn&apos;t exist, it is created with
 * @gfp_flags and @node.  The returned io_context has its reference count
 * incremented.
 *
 * This function always goes through task_lock() and it&apos;s better to use
 * %current-&gt;io_context + get_io_context() for %current.
 */</doc>
<use f='linux-4.14.y/block/ioprio.c' l='54' u='c' c='set_task_ioprio'/>
<use f='linux-4.14.y/kernel/fork.c' l='1329' u='c' c='copy_io'/>
