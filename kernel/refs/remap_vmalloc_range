<dec f='linux-4.18.y/include/linux/vmalloc.h' l='108' type='int remap_vmalloc_range(struct vm_area_struct * vma, void * addr, unsigned long pgoff)'/>
<def f='linux-4.18.y/mm/vmalloc.c' l='2287' ll='2293' type='int remap_vmalloc_range(struct vm_area_struct * vma, void * addr, unsigned long pgoff)'/>
<dec f='linux-4.18.y/mm/vmalloc.c' l='2294' type='int remap_vmalloc_range(struct vm_area_struct * , void * , unsigned long )'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='2294' c='remap_vmalloc_range'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='2294' u='a'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='2294' u='a'/>
<doc f='linux-4.18.y/mm/vmalloc.c' l='2273'>/**
 *	remap_vmalloc_range  -  map vmalloc pages to userspace
 *	@vma:		vma to cover (map full range of vma)
 *	@addr:		vmalloc memory
 *	@pgoff:		number of pages into addr before first page to map
 *
 *	Returns:	0 for success, -Exxx on failure
 *
 *	This function checks that addr is a valid vmalloc&apos;ed area, and
 *	that it is big enough to cover the vma. Will return failure if
 *	that criteria isn&apos;t met.
 *
 *	Similar to remap_pfn_range() (see mm/memory.c)
 */</doc>
