<dec f='linux-4.18.y/include/linux/mutex.h' l='181' type='void mutex_lock_io(struct mutex * lock)'/>
<use f='linux-4.18.y/fs/jbd2/commit.c' l='385' u='c' c='jbd2_journal_commit_transaction'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='983' u='c' c='jbd2_update_log_tail'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='1343' u='c' c='journal_reset'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='1736' u='c' c='jbd2_journal_destroy'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='1758' u='c' c='jbd2_journal_destroy'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='2000' u='c' c='jbd2_journal_flush'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='2010' u='c' c='jbd2_journal_flush'/>
<def f='linux-4.18.y/kernel/locking/mutex.c' l='1142' ll='1149' type='void mutex_lock_io(struct mutex * lock)'/>
<dec f='linux-4.18.y/kernel/locking/mutex.c' l='1150' type='void mutex_lock_io(struct mutex * )'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1150' c='mutex_lock_io'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1150' u='a'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1150' u='a'/>
<doc f='linux-4.18.y/kernel/locking/mutex.c' l='1132'>/**
 * mutex_lock_io() - Acquire the mutex and mark the process as waiting for I/O
 * @lock: The mutex to be acquired.
 *
 * Lock the mutex like mutex_lock().  While the task is waiting for this
 * mutex, it will be accounted as being in the IO wait state by the
 * scheduler.
 *
 * Context: Process context.
 */</doc>
