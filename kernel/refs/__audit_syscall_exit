<dec f='linux-4.14.y/include/linux/audit.h' l='233' type='void __audit_syscall_exit(int ret_success, long ret_value)'/>
<use f='linux-4.14.y/include/linux/audit.h' l='271' u='c' c='audit_syscall_exit'/>
<def f='linux-4.14.y/kernel/auditsc.c' l='1556' ll='1594' type='void __audit_syscall_exit(int success, long return_code)'/>
<doc f='linux-4.14.y/kernel/auditsc.c' l='1545'>/**
 * __audit_syscall_exit - deallocate audit context after a system call
 * @success: success value of the syscall
 * @return_code: return value of the syscall
 *
 * Tear down after system call.  If the audit context has been marked as
 * auditable (either because of the AUDIT_RECORD_CONTEXT state from
 * filtering, or because some other part of the kernel wrote an audit
 * message), then write out the syscall information.  In call cases,
 * free the names stored from getname().
 */</doc>
<dec f='linux-4.14.y/include/linux/audit.h' l='233' type='void __audit_syscall_exit(int ret_success, long ret_value)'/>
<use f='linux-4.14.y/include/linux/audit.h' l='271' u='c' c='audit_syscall_exit'/>
<def f='linux-4.14.y/kernel/auditsc.c' l='1556' ll='1594' type='void __audit_syscall_exit(int success, long return_code)'/>
<doc f='linux-4.14.y/kernel/auditsc.c' l='1545'>/**
 * __audit_syscall_exit - deallocate audit context after a system call
 * @success: success value of the syscall
 * @return_code: return value of the syscall
 *
 * Tear down after system call.  If the audit context has been marked as
 * auditable (either because of the AUDIT_RECORD_CONTEXT state from
 * filtering, or because some other part of the kernel wrote an audit
 * message), then write out the syscall information.  In call cases,
 * free the names stored from getname().
 */</doc>
