<def f='linux-4.18.y/include/linux/device.h' l='397' ll='419'/>
<size>112</size>
<doc f='linux-4.18.y/include/linux/device.h' l='371'>/**
 * struct class - device classes
 * @name:	Name of the class.
 * @owner:	The module owner.
 * @class_groups: Default attributes of this class.
 * @dev_groups:	Default attributes of the devices that belong to the class.
 * @dev_kobj:	The kobject that represents this class and links it into the hierarchy.
 * @dev_uevent:	Called when a device is added, removed from this class, or a
 *		few other things that generate uevents to add the environment
 *		variables.
 * @devnode:	Callback to provide the devtmpfs.
 * @class_release: Called to release this class.
 * @dev_release: Called to release the device.
 * @shutdown_pre: Called at shut-down time before driver shutdown.
 * @ns_type:	Callbacks so sysfs can detemine namespaces.
 * @namespace:	Namespace of the device belongs to this class.
 * @pm:		The default device power management operations of this class.
 * @p:		The private data of the driver core, no one other than the
 *		driver core can touch this.
 *
 * A class is a higher-level view of a device that abstracts out low-level
 * implementation details. Drivers may see a SCSI disk or an ATA disk, but,
 * at the class level, they are all simply disks. Classes allow user space
 * to work with devices based on what they do, rather than how they are
 * connected or how they work.
 */</doc>
<mbr r='class::name' o='0' t='const char *'/>
<mbr r='class::owner' o='64' t='struct module *'/>
<mbr r='class::class_groups' o='128' t='const struct attribute_group **'/>
<mbr r='class::dev_groups' o='192' t='const struct attribute_group **'/>
<mbr r='class::dev_kobj' o='256' t='struct kobject *'/>
<mbr r='class::dev_uevent' o='320' t='int (*)(struct device *, struct kobj_uevent_env *)'/>
<mbr r='class::devnode' o='384' t='char *(*)(struct device *, umode_t *)'/>
<mbr r='class::class_release' o='448' t='void (*)(struct class *)'/>
<mbr r='class::dev_release' o='512' t='void (*)(struct device *)'/>
<mbr r='class::shutdown_pre' o='576' t='int (*)(struct device *)'/>
<mbr r='class::ns_type' o='640' t='const struct kobj_ns_type_operations *'/>
<mbr r='class::namespace' o='704' t='const void *(*)(struct device *)'/>
<mbr r='class::pm' o='768' t='const struct dev_pm_ops *'/>
<mbr r='class::p' o='832' t='struct subsys_private *'/>
