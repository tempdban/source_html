<dec f='linux-4.14.y/include/linux/device.h' l='1126' type='int device_rename(struct device * dev, const char * new_name)'/>
<def f='linux-4.14.y/drivers/base/core.c' l='2637' ll='2673' type='int device_rename(struct device * dev, const char * new_name)'/>
<dec f='linux-4.14.y/drivers/base/core.c' l='2674' type='int device_rename(struct device * , const char * )'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2674' c='device_rename'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2674' u='a'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2674' u='a'/>
<doc f='linux-4.14.y/drivers/base/core.c' l='2598'>/**
 * device_rename - renames a device
 * @dev: the pointer to the struct device to be renamed
 * @new_name: the new name of the device
 *
 * It is the responsibility of the caller to provide mutual
 * exclusion between two different calls of device_rename
 * on the same device to ensure that new_name is valid and
 * won&apos;t conflict with other devices.
 *
 * Note: Don&apos;t call this function.  Currently, the networking layer calls this
 * function, but that will change.  The following text from Kay Sievers offers
 * some insight:
 *
 * Renaming devices is racy at many levels, symlinks and other stuff are not
 * replaced atomically, and you get a &quot;move&quot; uevent, but it&apos;s not easy to
 * connect the event to the old and new device. Device nodes are not renamed at
 * all, there isn&apos;t even support for that in the kernel now.
 *
 * In the meantime, during renaming, your target name might be taken by another
 * driver, creating conflicts. Or the old name is taken directly after you
 * renamed it -- then you get events for the same DEVPATH, before you even see
 * the &quot;move&quot; event. It&apos;s just a mess, and nothing new should ever rely on
 * kernel device renaming. Besides that, it&apos;s not even implemented now for
 * other things than (driver-core wise very simple) network devices.
 *
 * We are currently about to change network renaming in udev to completely
 * disallow renaming of devices in the same namespace as the kernel uses,
 * because we can&apos;t solve the problems properly, that arise with swapping names
 * of multiple interfaces without races. Means, renaming of eth[0-9]* will only
 * be allowed to some other name than eth[0-9]*, for the aforementioned
 * reasons.
 *
 * Make up a &quot;real&quot; name in the driver before you register anything, or add
 * some other attributes for userspace to find the device, or use udev to add
 * symlinks -- but never rename kernel devices later, it&apos;s a complete mess. We
 * don&apos;t even want to get into that and try to implement the missing pieces in
 * the core. We really have other pieces to fix in the driver core mess. :)
 */</doc>
<use f='linux-4.14.y/net/core/dev.c' l='1214' u='c' c='dev_change_name'/>
<use f='linux-4.14.y/net/core/dev.c' l='8354' u='c' c='dev_change_net_namespace'/>
<dec f='linux-4.14.y/include/linux/device.h' l='1126' type='int device_rename(struct device * dev, const char * new_name)'/>
<def f='linux-4.14.y/drivers/base/core.c' l='2637' ll='2673' type='int device_rename(struct device * dev, const char * new_name)'/>
<dec f='linux-4.14.y/drivers/base/core.c' l='2674' type='int device_rename(struct device * , const char * )'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2674' c='device_rename'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2674' u='a'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2674' u='a'/>
<doc f='linux-4.14.y/drivers/base/core.c' l='2598'>/**
 * device_rename - renames a device
 * @dev: the pointer to the struct device to be renamed
 * @new_name: the new name of the device
 *
 * It is the responsibility of the caller to provide mutual
 * exclusion between two different calls of device_rename
 * on the same device to ensure that new_name is valid and
 * won&apos;t conflict with other devices.
 *
 * Note: Don&apos;t call this function.  Currently, the networking layer calls this
 * function, but that will change.  The following text from Kay Sievers offers
 * some insight:
 *
 * Renaming devices is racy at many levels, symlinks and other stuff are not
 * replaced atomically, and you get a &quot;move&quot; uevent, but it&apos;s not easy to
 * connect the event to the old and new device. Device nodes are not renamed at
 * all, there isn&apos;t even support for that in the kernel now.
 *
 * In the meantime, during renaming, your target name might be taken by another
 * driver, creating conflicts. Or the old name is taken directly after you
 * renamed it -- then you get events for the same DEVPATH, before you even see
 * the &quot;move&quot; event. It&apos;s just a mess, and nothing new should ever rely on
 * kernel device renaming. Besides that, it&apos;s not even implemented now for
 * other things than (driver-core wise very simple) network devices.
 *
 * We are currently about to change network renaming in udev to completely
 * disallow renaming of devices in the same namespace as the kernel uses,
 * because we can&apos;t solve the problems properly, that arise with swapping names
 * of multiple interfaces without races. Means, renaming of eth[0-9]* will only
 * be allowed to some other name than eth[0-9]*, for the aforementioned
 * reasons.
 *
 * Make up a &quot;real&quot; name in the driver before you register anything, or add
 * some other attributes for userspace to find the device, or use udev to add
 * symlinks -- but never rename kernel devices later, it&apos;s a complete mess. We
 * don&apos;t even want to get into that and try to implement the missing pieces in
 * the core. We really have other pieces to fix in the driver core mess. :)
 */</doc>
<use f='linux-4.14.y/net/core/dev.c' l='1214' u='c' c='dev_change_name'/>
<use f='linux-4.14.y/net/core/dev.c' l='8354' u='c' c='dev_change_net_namespace'/>
