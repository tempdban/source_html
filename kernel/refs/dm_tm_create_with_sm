<dec f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.h' l='128' type='int dm_tm_create_with_sm(struct dm_block_manager * bm, dm_block_t sb_location, struct dm_transaction_manager ** tm, struct dm_space_map ** sm)'/>
<doc f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.h' l='118'>/*
 * A little utility that ties the knot by producing a transaction manager
 * that has a space map managed by the transaction manager...
 *
 * Returns a tm that has an open transaction to write the new disk sm.
 * Caller should store the new sm root and commit.
 *
 * The superblock location is passed so the metadata space map knows it
 * shouldn&apos;t be used.
 */</doc>
<use f='linux-4.14.y/drivers/md/dm-cache-metadata.c' l='393' u='c' c='__format_metadata'/>
<use f='linux-4.14.y/drivers/md/dm-thin-metadata.c' l='527' u='c' c='__format_metadata'/>
<def f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='438' ll='443' type='int dm_tm_create_with_sm(struct dm_block_manager * bm, dm_block_t sb_location, struct dm_transaction_manager ** tm, struct dm_space_map ** sm)'/>
<dec f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='444' type='int dm_tm_create_with_sm(struct dm_block_manager * , dm_block_t , struct dm_transaction_manager ** , struct dm_space_map ** )'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='444' c='dm_tm_create_with_sm'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='444' u='a'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='444' u='a'/>
<dec f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.h' l='128' type='int dm_tm_create_with_sm(struct dm_block_manager * bm, dm_block_t sb_location, struct dm_transaction_manager ** tm, struct dm_space_map ** sm)'/>
<doc f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.h' l='118'>/*
 * A little utility that ties the knot by producing a transaction manager
 * that has a space map managed by the transaction manager...
 *
 * Returns a tm that has an open transaction to write the new disk sm.
 * Caller should store the new sm root and commit.
 *
 * The superblock location is passed so the metadata space map knows it
 * shouldn&apos;t be used.
 */</doc>
<use f='linux-4.14.y/drivers/md/dm-cache-metadata.c' l='393' u='c' c='__format_metadata'/>
<use f='linux-4.14.y/drivers/md/dm-thin-metadata.c' l='527' u='c' c='__format_metadata'/>
<def f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='438' ll='443' type='int dm_tm_create_with_sm(struct dm_block_manager * bm, dm_block_t sb_location, struct dm_transaction_manager ** tm, struct dm_space_map ** sm)'/>
<dec f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='444' type='int dm_tm_create_with_sm(struct dm_block_manager * , dm_block_t , struct dm_transaction_manager ** , struct dm_space_map ** )'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='444' c='dm_tm_create_with_sm'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='444' u='a'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='444' u='a'/>
