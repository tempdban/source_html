<dec f='linux-4.14.y/fs/ext4/ext4.h' l='2422' type='void ext4_free_inode(handle_t * , struct inode * )'/>
<def f='linux-4.14.y/fs/ext4/ialloc.c' l='231' ll='361' type='void ext4_free_inode(handle_t * handle, struct inode * inode)'/>
<doc f='linux-4.14.y/fs/ext4/ialloc.c' l='215'>/*
 * NOTE! When we get the inode, we&apos;re the only people
 * that have access to it, and as such there are no
 * race conditions we have to worry about. The inode
 * is not on the hash-lists, and it cannot be reached
 * through the filesystem because the directory entry
 * has been deleted earlier.
 *
 * HOWEVER: we must make sure that we get no aliases,
 * which means that we have to call &quot;clear_inode()&quot;
 * _before_ we mark the inode not in use in the inode
 * bitmaps. Otherwise a newly created file might use
 * the same inode number (not actually the same pointer
 * though), and then we&apos;d have two inodes sharing the
 * same inode number and space on the harddisk.
 */</doc>
<use f='linux-4.14.y/fs/ext4/inode.c' l='332' u='c' c='ext4_evict_inode'/>
