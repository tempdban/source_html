<def f='linux-4.18.y/drivers/usb/host/ohci-q.c' l='317' ll='392' type='void ed_deschedule(struct ohci_hcd * ohci, struct ed * ed)'/>
<use f='linux-4.18.y/drivers/usb/host/ohci-q.c' l='487' u='c' c='start_ed_unlink'/>
<use f='linux-4.18.y/drivers/usb/host/ohci-hcd.c' l='1027' u='c' c='ohci_restart'/>
<doc f='linux-4.18.y/drivers/usb/host/ohci-q.c' l='296'>/* unlink an ed from one of the HC chains.
 * just the link to the ed is unlinked.
 * the link from the ed still points to another operational ed or 0
 * so the HC can eventually finish the processing of the unlinked ed
 * (assuming it already started that, which needn&apos;t be true).
 *
 * ED_UNLINK is a transient state: the HC may still see this ED, but soon
 * it won&apos;t.  ED_SKIP means the HC will finish its current transaction,
 * but won&apos;t start anything new.  The TD queue may still grow; device
 * drivers don&apos;t know about this HCD-internal state.
 *
 * When the HC can&apos;t see the ED, something changes ED_UNLINK to one of:
 *
 *  - ED_OPER: when there&apos;s any request queued, the ED gets rescheduled
 *    immediately.  HC should be working on them.
 *
 *  - ED_IDLE: when there&apos;s no TD queue or the HC isn&apos;t running.
 *
 * When finish_unlinks() runs later, after SOF interrupt, it will often
 * complete one or more URB unlinks before making that state change.
 */</doc>
