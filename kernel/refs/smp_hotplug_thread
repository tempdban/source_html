<def f='linux-4.14.y/include/linux/smpboot.h' l='33' ll='46'/>
<size>104</size>
<doc f='linux-4.14.y/include/linux/smpboot.h' l='11'>/**
 * struct smp_hotplug_thread - CPU hotplug related thread descriptor
 * @store:		Pointer to per cpu storage for the task pointers
 * @list:		List head for core management
 * @thread_should_run:	Check whether the thread should run or not. Called with
 *			preemption disabled.
 * @thread_fn:		The associated thread function
 * @create:		Optional setup function, called when the thread gets
 *			created (Not called from the thread context)
 * @setup:		Optional setup function, called when the thread gets
 *			operational the first time
 * @cleanup:		Optional cleanup function, called when the thread
 *			should stop (module exit)
 * @park:		Optional park function, called when the thread is
 *			parked (cpu offline)
 * @unpark:		Optional unpark function, called when the thread is
 *			unparked (cpu online)
 * @cpumask:		Internal state.  To update which threads are unparked,
 *			call smpboot_update_cpumask_percpu_thread().
 * @selfparking:	Thread is not parked by the park function.
 * @thread_comm:	The base name of the thread
 */</doc>
<mbr r='smp_hotplug_thread::store' o='0' t='struct task_struct **'/>
<mbr r='smp_hotplug_thread::list' o='64' t='struct list_head'/>
<mbr r='smp_hotplug_thread::thread_should_run' o='192' t='int (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::thread_fn' o='256' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::create' o='320' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::setup' o='384' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::cleanup' o='448' t='void (*)(unsigned int, bool)'/>
<mbr r='smp_hotplug_thread::park' o='512' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::unpark' o='576' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::cpumask' o='640' t='cpumask_var_t'/>
<mbr r='smp_hotplug_thread::selfparking' o='704' t='bool'/>
<mbr r='smp_hotplug_thread::thread_comm' o='768' t='const char *'/>
<def f='linux-4.14.y/include/linux/smpboot.h' l='33' ll='46'/>
<size>104</size>
<doc f='linux-4.14.y/include/linux/smpboot.h' l='11'>/**
 * struct smp_hotplug_thread - CPU hotplug related thread descriptor
 * @store:		Pointer to per cpu storage for the task pointers
 * @list:		List head for core management
 * @thread_should_run:	Check whether the thread should run or not. Called with
 *			preemption disabled.
 * @thread_fn:		The associated thread function
 * @create:		Optional setup function, called when the thread gets
 *			created (Not called from the thread context)
 * @setup:		Optional setup function, called when the thread gets
 *			operational the first time
 * @cleanup:		Optional cleanup function, called when the thread
 *			should stop (module exit)
 * @park:		Optional park function, called when the thread is
 *			parked (cpu offline)
 * @unpark:		Optional unpark function, called when the thread is
 *			unparked (cpu online)
 * @cpumask:		Internal state.  To update which threads are unparked,
 *			call smpboot_update_cpumask_percpu_thread().
 * @selfparking:	Thread is not parked by the park function.
 * @thread_comm:	The base name of the thread
 */</doc>
<mbr r='smp_hotplug_thread::store' o='0' t='struct task_struct **'/>
<mbr r='smp_hotplug_thread::list' o='64' t='struct list_head'/>
<mbr r='smp_hotplug_thread::thread_should_run' o='192' t='int (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::thread_fn' o='256' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::create' o='320' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::setup' o='384' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::cleanup' o='448' t='void (*)(unsigned int, bool)'/>
<mbr r='smp_hotplug_thread::park' o='512' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::unpark' o='576' t='void (*)(unsigned int)'/>
<mbr r='smp_hotplug_thread::cpumask' o='640' t='cpumask_var_t'/>
<mbr r='smp_hotplug_thread::selfparking' o='704' t='bool'/>
<mbr r='smp_hotplug_thread::thread_comm' o='768' t='const char *'/>
