<dec f='linux-4.18.y/include/linux/kthread.h' l='62' type='int kthread_park(struct task_struct * k)'/>
<use f='linux-4.18.y/drivers/md/raid5-cache.c' l='1597' u='c' c='r5l_quiesce'/>
<def f='linux-4.18.y/kernel/kthread.c' l='495' ll='518' type='int kthread_park(struct task_struct * k)'/>
<dec f='linux-4.18.y/kernel/kthread.c' l='519' type='int kthread_park(struct task_struct * )'/>
<use f='linux-4.18.y/kernel/kthread.c' l='519' c='kthread_park'/>
<use f='linux-4.18.y/kernel/kthread.c' l='519' u='a'/>
<use f='linux-4.18.y/kernel/kthread.c' l='519' u='a'/>
<doc f='linux-4.18.y/kernel/kthread.c' l='483'>/**
 * kthread_park - park a thread created by kthread_create().
 * @k: thread created by kthread_create().
 *
 * Sets kthread_should_park() for @k to return true, wakes it, and
 * waits for it to return. This can also be called after kthread_create()
 * instead of calling wake_up_process(): the thread will park without
 * calling threadfn().
 *
 * Returns 0 if the thread is parked, -ENOSYS if the thread exited.
 * If called by the kthread itself just the park bit is set.
 */</doc>
<use f='linux-4.18.y/kernel/smpboot.c' l='194' u='c' c='__smpboot_create_thread'/>
<use f='linux-4.18.y/kernel/smpboot.c' l='252' u='c' c='smpboot_park_thread'/>
<use f='linux-4.18.y/kernel/stop_machine.c' l='530' u='c' c='stop_machine_park'/>
