<dec f='linux-4.14.y/arch/x86/include/asm/alternative.h' l='64' type='void apply_alternatives(struct alt_instr * start, struct alt_instr * end)'/>
<use f='linux-4.14.y/arch/x86/entry/vdso/vma.c' l='35' u='c' c='init_vdso_image'/>
<def f='linux-4.14.y/arch/x86/kernel/alternative.c' l='361' ll='429' type='void apply_alternatives(struct alt_instr * start, struct alt_instr * end)'/>
<use f='linux-4.14.y/arch/x86/kernel/alternative.c' l='629' u='c' c='alternative_instructions'/>
<doc f='linux-4.14.y/arch/x86/kernel/alternative.c' l='351'>/*
 * Replace instructions with better alternatives for this CPU type. This runs
 * before SMP is initialized to avoid SMP problems with self modifying code.
 * This implies that asymmetric systems where APs have less capabilities than
 * the boot processor are not handled. Tough. Make sure you disable such
 * features by hand.
 *
 * Marked &quot;noinline&quot; to cause control flow change and thus insn cache
 * to refetch changed I$ lines.
 */</doc>
<use f='linux-4.14.y/arch/x86/kernel/module.c' l='252' u='c' c='module_finalize'/>
