<def f='linux-4.18.y/include/drm/drm_encoder_slave.h' l='96' ll='102'/>
<size>136</size>
<doc f='linux-4.18.y/include/drm/drm_encoder_slave.h' l='79'>/**
 * struct drm_encoder_slave - Slave encoder struct
 * @base: DRM encoder object.
 * @slave_funcs: Slave encoder callbacks.
 * @slave_priv: Slave encoder private data.
 * @bus_priv: Bus specific data.
 *
 * A &amp;drm_encoder_slave has two sets of callbacks, @slave_funcs and the
 * ones in @base. The former are never actually called by the common
 * CRTC code, it&apos;s just a convenience for splitting the encoder
 * functions in an upper, GPU-specific layer and a (hopefully)
 * GPU-agnostic lower layer: It&apos;s the GPU driver responsibility to
 * call the slave methods when appropriate.
 *
 * drm_i2c_encoder_init() provides a way to get an implementation of
 * this.
 */</doc>
<mbr r='drm_encoder_slave::base' o='0' t='struct drm_encoder'/>
<mbr r='drm_encoder_slave::slave_funcs' o='896' t='const struct drm_encoder_slave_funcs *'/>
<mbr r='drm_encoder_slave::slave_priv' o='960' t='void *'/>
<mbr r='drm_encoder_slave::bus_priv' o='1024' t='void *'/>
