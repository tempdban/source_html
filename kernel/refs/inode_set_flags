<dec f='linux-4.18.y/include/linux/fs.h' l='3061' type='void inode_set_flags(struct inode * inode, unsigned int flags, unsigned int mask)'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='4681' u='c' c='ext4_set_inode_flags'/>
<use f='linux-4.18.y/fs/f2fs/inode.c' l='51' u='c' c='f2fs_set_inode_flags'/>
<def f='linux-4.18.y/fs/inode.c' l='2086' ll='2097' type='void inode_set_flags(struct inode * inode, unsigned int flags, unsigned int mask)'/>
<dec f='linux-4.18.y/fs/inode.c' l='2098' type='void inode_set_flags(struct inode * , unsigned int , unsigned int )'/>
<use f='linux-4.18.y/fs/inode.c' l='2098' c='inode_set_flags'/>
<use f='linux-4.18.y/fs/inode.c' l='2098' u='a'/>
<use f='linux-4.18.y/fs/inode.c' l='2098' u='a'/>
<doc f='linux-4.18.y/fs/inode.c' l='2070'>/*
 * inode_set_flags - atomically set some inode flags
 *
 * Note: the caller should be holding i_mutex, or else be sure that
 * they have exclusive access to the inode structure (i.e., while the
 * inode is being instantiated).  The reason for the cmpxchg() loop
 * --- which wouldn&apos;t be necessary if all code paths which modify
 * i_flags actually followed this rule, is that there is at least one
 * code path which doesn&apos;t today so we use cmpxchg() out of an abundance
 * of caution.
 *
 * In the long run, i_mutex is overkill, and we should probably look
 * at using the i_lock spinlock to protect i_flags, and then make sure
 * it is so documented in include/linux/fs.h and that all code follows
 * the locking convention!!
 */</doc>
