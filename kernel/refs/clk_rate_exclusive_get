<dec f='linux-4.18.y/include/linux/clk.h' l='350' type='int clk_rate_exclusive_get(struct clk * clk)'/>
<doc f='linux-4.18.y/include/linux/clk.h' l='334'>/**
 * clk_rate_exclusive_get - get exclusivity over the rate control of a
 *                          producer
 * @clk: clock source
 *
 * This function allows drivers to get exclusive control over the rate of a
 * provider. It prevents any other consumer to execute, even indirectly,
 * opereation which could alter the rate of the provider or cause glitches
 *
 * If exlusivity is claimed more than once on clock, even by the same driver,
 * the rate effectively gets locked as exclusivity can&apos;t be preempted.
 *
 * Must not be called from within atomic context.
 *
 * Returns success (0) or negative errno.
 */</doc>
<def f='linux-4.18.y/drivers/clk/clk.c' l='664' ll='675' type='int clk_rate_exclusive_get(struct clk * clk)'/>
<dec f='linux-4.18.y/drivers/clk/clk.c' l='676' type='int clk_rate_exclusive_get(struct clk * )'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='676' c='clk_rate_exclusive_get'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='676' u='a'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='676' u='a'/>
<doc f='linux-4.18.y/drivers/clk/clk.c' l='646'>/**
 * clk_rate_exclusive_get - get exclusivity over the clk rate control
 * @clk: the clk over which the exclusity of rate control is requested
 *
 * clk_rate_exlusive_get() begins a critical section during which a clock
 * consumer cannot tolerate any other consumer making any operation on the
 * clock which could result in a rate change or rate glitch. Exclusive clocks
 * cannot have their rate changed, either directly or indirectly due to changes
 * further up the parent chain of clocks. As a result, clocks up parent chain
 * also get under exclusive control of the calling consumer.
 *
 * If exlusivity is claimed more than once on clock, even by the same consumer,
 * the rate effectively gets locked as exclusivity can&apos;t be preempted.
 *
 * Calls to clk_rate_exclusive_get() should be balanced with calls to
 * clk_rate_exclusive_put(). Calls to this function may sleep.
 * Returns 0 on success, -EERROR otherwise
 */</doc>
