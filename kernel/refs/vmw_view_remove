<dec f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.h' l='146' type='int vmw_view_remove(struct vmw_cmdbuf_res_manager * man, u32 user_key, enum vmw_view_type view_type, struct list_head * list, struct vmw_resource ** res_p)'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='2926' u='c' c='vmw_cmd_dx_view_remove'/>
<def f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.c' l='409' ll='422' type='int vmw_view_remove(struct vmw_cmdbuf_res_manager * man, u32 user_key, enum vmw_view_type view_type, struct list_head * list, struct vmw_resource ** res_p)'/>
<doc f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.c' l='397'>/**
 * vmw_view_remove - Stage a view for removal.
 *
 * @man: Pointer to the view manager identifying the shader namespace.
 * @user_key: The key that is used to identify the view. The key is
 * unique to the view type.
 * @view_type: View type
 * @list: Caller&apos;s list of staged command buffer resource actions.
 * @res_p: If the resource is in an already committed state, points to the
 * struct vmw_resource on successful return. The pointer will be
 * non ref-counted.
 */</doc>
