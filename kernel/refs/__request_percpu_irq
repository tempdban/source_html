<dec f='linux-4.18.y/include/linux/interrupt.h' l='155' type='int __request_percpu_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char * devname, void * percpu_dev_id)'/>
<use f='linux-4.18.y/include/linux/interrupt.h' l='163' u='c' c='request_percpu_irq'/>
<def f='linux-4.18.y/kernel/irq/manage.c' l='2113' ll='2155' type='int __request_percpu_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char * devname, void * dev_id)'/>
<dec f='linux-4.18.y/kernel/irq/manage.c' l='2156' type='int __request_percpu_irq(unsigned int , irq_handler_t , unsigned long , const char * , void * )'/>
<use f='linux-4.18.y/kernel/irq/manage.c' l='2156' c='__request_percpu_irq'/>
<use f='linux-4.18.y/kernel/irq/manage.c' l='2156' u='a'/>
<use f='linux-4.18.y/kernel/irq/manage.c' l='2156' u='a'/>
<doc f='linux-4.18.y/kernel/irq/manage.c' l='2096'>/**
 *	__request_percpu_irq - allocate a percpu interrupt line
 *	@irq: Interrupt line to allocate
 *	@handler: Function to be called when the IRQ occurs.
 *	@flags: Interrupt type flags (IRQF_TIMER only)
 *	@devname: An ascii name for the claiming device
 *	@dev_id: A percpu cookie passed back to the handler function
 *
 *	This call allocates interrupt resources and enables the
 *	interrupt on the local CPU. If the interrupt is supposed to be
 *	enabled on other CPUs, it has to be done on each CPU using
 *	enable_percpu_irq().
 *
 *	Dev_id must be globally unique. It is a per-cpu variable, and
 *	the handler gets called with the interrupted CPU&apos;s instance of
 *	that variable.
 */</doc>
