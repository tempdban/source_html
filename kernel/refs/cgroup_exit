<dec f='linux-4.14.y/include/linux/cgroup.h' l='120' type='void cgroup_exit(struct task_struct * p)'/>
<def f='linux-4.14.y/kernel/cgroup/cgroup.c' l='5507' ll='5532' type='void cgroup_exit(struct task_struct * tsk)'/>
<doc f='linux-4.14.y/kernel/cgroup/cgroup.c' l='5488'>/**
 * cgroup_exit - detach cgroup from exiting task
 * @tsk: pointer to task_struct of exiting process
 *
 * Description: Detach cgroup from @tsk and release it.
 *
 * Note that cgroups marked notify_on_release force every task in
 * them to take the global cgroup_mutex mutex when exiting.
 * This could impact scaling on very large systems.  Be reluctant to
 * use notify_on_release cgroups where very high task exit scaling
 * is required on large systems.
 *
 * We set the exiting tasks cgroup to the root cgroup (top_cgroup).  We
 * call cgroup_exit() while the task is still competent to handle
 * notify_on_release(), then leave the task attached to the root cgroup in
 * each hierarchy for the remainder of its exit.  No need to bother with
 * init_css_set refcnting.  init_css_set never goes away and we can&apos;t race
 * with migration path - PF_EXITING is visible to migration path.
 */</doc>
<use f='linux-4.14.y/kernel/exit.c' l='877' u='c' c='do_exit'/>
<dec f='linux-4.14.y/include/linux/cgroup.h' l='120' type='void cgroup_exit(struct task_struct * p)'/>
<def f='linux-4.14.y/kernel/cgroup/cgroup.c' l='5507' ll='5532' type='void cgroup_exit(struct task_struct * tsk)'/>
<doc f='linux-4.14.y/kernel/cgroup/cgroup.c' l='5488'>/**
 * cgroup_exit - detach cgroup from exiting task
 * @tsk: pointer to task_struct of exiting process
 *
 * Description: Detach cgroup from @tsk and release it.
 *
 * Note that cgroups marked notify_on_release force every task in
 * them to take the global cgroup_mutex mutex when exiting.
 * This could impact scaling on very large systems.  Be reluctant to
 * use notify_on_release cgroups where very high task exit scaling
 * is required on large systems.
 *
 * We set the exiting tasks cgroup to the root cgroup (top_cgroup).  We
 * call cgroup_exit() while the task is still competent to handle
 * notify_on_release(), then leave the task attached to the root cgroup in
 * each hierarchy for the remainder of its exit.  No need to bother with
 * init_css_set refcnting.  init_css_set never goes away and we can&apos;t race
 * with migration path - PF_EXITING is visible to migration path.
 */</doc>
<use f='linux-4.14.y/kernel/exit.c' l='877' u='c' c='do_exit'/>
