<def f='linux-4.18.y/include/linux/rhashtable.h' l='1137' ll='1142' type='int rhashtable_remove_fast(struct rhashtable * ht, struct rhash_head * obj, const struct rhashtable_params params)'/>
<doc f='linux-4.18.y/include/linux/rhashtable.h' l='1122'>/**
 * rhashtable_remove_fast - remove object from hash table
 * @ht:		hash table
 * @obj:	pointer to hash head inside object
 * @params:	hash table parameters
 *
 * Since the hash chain is single linked, the removal operation needs to
 * walk the bucket chain upon removal. The removal operation is thus
 * considerable slow if the hash table is not correctly sized.
 *
 * Will automatically shrink the table if permitted when residency drops
 * below 30%.
 *
 * Returns zero on success, -ENOENT if the entry could not be found.
 */</doc>
<use f='linux-4.18.y/ipc/util.c' l='420' u='c' c='ipc_kht_remove'/>
<use f='linux-4.18.y/net/bridge/br_fdb.c' l='209' u='c' c='fdb_delete'/>
<use f='linux-4.18.y/net/core/xdp.c' l='105' u='c' c='__xdp_rxq_info_unreg_mem_model'/>
<use f='linux-4.18.y/net/ipv4/inet_fragment.c' l='108' u='c' c='inet_frag_kill'/>
<use f='linux-4.18.y/net/netlink/af_netlink.c' l='612' u='c' c='netlink_remove'/>
