<dec f='linux-4.18.y/include/drm/ttm/ttm_bo_driver.h' l='831' type='int ttm_bo_move_accel_cleanup(struct ttm_buffer_object * bo, struct dma_fence * fence, bool evict, struct ttm_mem_reg * new_mem)'/>
<doc f='linux-4.18.y/include/drm/ttm/ttm_bo_driver.h' l='816'>/**
 * ttm_bo_move_accel_cleanup.
 *
 * @bo: A pointer to a struct ttm_buffer_object.
 * @fence: A fence object that signals when moving is complete.
 * @evict: This is an evict move. Don&apos;t return until the buffer is idle.
 * @new_mem: struct ttm_mem_reg indicating where to move.
 *
 * Accelerated move function to be called when an accelerated move
 * has been scheduled. The function will create a new temporary buffer object
 * representing the old placement, and put the sync object on both buffer
 * objects. After that the newly created buffer object is unref&apos;d to be
 * destroyed when the move is complete. This will help pipeline
 * buffer moves.
 */</doc>
<def f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='681' ll='740' type='int ttm_bo_move_accel_cleanup(struct ttm_buffer_object * bo, struct dma_fence * fence, bool evict, struct ttm_mem_reg * new_mem)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='741' type='int ttm_bo_move_accel_cleanup(struct ttm_buffer_object * , struct dma_fence * , bool , struct ttm_mem_reg * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='741' c='ttm_bo_move_accel_cleanup'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='741' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='741' u='a'/>
