<def f='linux-4.14.y/include/linux/etherdevice.h' l='489' ll='512' type='unsigned long compare_ether_header(const void * a, const void * b)'/>
<doc f='linux-4.14.y/include/linux/etherdevice.h' l='477'>/**
 * compare_ether_header - Compare two Ethernet headers
 * @a: Pointer to Ethernet header
 * @b: Pointer to Ethernet header
 *
 * Compare two Ethernet headers, returns 0 if equal.
 * This assumes that the network header (i.e., IP header) is 4-byte
 * aligned OR the platform can handle unaligned access.  This is the
 * case for all packets coming into netif_receive_skb or similar
 * entry points.
 */</doc>
<use f='linux-4.14.y/net/core/dev.c' l='4726' u='c' c='gro_list_prepare'/>
<use f='linux-4.14.y/net/ethernet/eth.c' l='456' u='c' c='eth_gro_receive'/>
<def f='linux-4.14.y/include/linux/etherdevice.h' l='489' ll='512' type='unsigned long compare_ether_header(const void * a, const void * b)'/>
<doc f='linux-4.14.y/include/linux/etherdevice.h' l='477'>/**
 * compare_ether_header - Compare two Ethernet headers
 * @a: Pointer to Ethernet header
 * @b: Pointer to Ethernet header
 *
 * Compare two Ethernet headers, returns 0 if equal.
 * This assumes that the network header (i.e., IP header) is 4-byte
 * aligned OR the platform can handle unaligned access.  This is the
 * case for all packets coming into netif_receive_skb or similar
 * entry points.
 */</doc>
<use f='linux-4.14.y/net/core/dev.c' l='4726' u='c' c='gro_list_prepare'/>
<use f='linux-4.14.y/net/ethernet/eth.c' l='456' u='c' c='eth_gro_receive'/>
