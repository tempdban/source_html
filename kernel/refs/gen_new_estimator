<dec f='linux-4.14.y/include/net/gen_stats.h' l='56' type='int gen_new_estimator(struct gnet_stats_basic_packed * bstats, struct gnet_stats_basic_cpu * cpu_bstats, struct net_rate_estimator ** rate_est, spinlock_t * stats_lock, seqcount_t * running, struct nlattr * opt)'/>
<def f='linux-4.14.y/net/core/gen_estimator.c' l='128' ll='185' type='int gen_new_estimator(struct gnet_stats_basic_packed * bstats, struct gnet_stats_basic_cpu * cpu_bstats, struct net_rate_estimator ** rate_est, spinlock_t * stats_lock, seqcount_t * running, struct nlattr * opt)'/>
<dec f='linux-4.14.y/net/core/gen_estimator.c' l='186' type='int gen_new_estimator(struct gnet_stats_basic_packed * , struct gnet_stats_basic_cpu * , struct net_rate_estimator ** , spinlock_t * , seqcount_t * , struct nlattr * )'/>
<use f='linux-4.14.y/net/core/gen_estimator.c' l='186' c='gen_new_estimator'/>
<use f='linux-4.14.y/net/core/gen_estimator.c' l='186' u='a'/>
<use f='linux-4.14.y/net/core/gen_estimator.c' l='186' u='a'/>
<use f='linux-4.14.y/net/core/gen_estimator.c' l='227' u='c' c='gen_replace_estimator'/>
<doc f='linux-4.14.y/net/core/gen_estimator.c' l='110'>/**
 * gen_new_estimator - create a new rate estimator
 * @bstats: basic statistics
 * @cpu_bstats: bstats per cpu
 * @rate_est: rate estimator statistics
 * @stats_lock: statistics lock
 * @running: qdisc running seqcount
 * @opt: rate estimator configuration TLV
 *
 * Creates a new rate estimator with &amp;bstats as source and &amp;rate_est
 * as destination. A new timer with the interval specified in the
 * configuration TLV is created. Upon each interval, the latest statistics
 * will be read from &amp;bstats and the estimated rate will be stored in
 * &amp;rate_est with the statistics lock grabbed during this period.
 *
 * Returns 0 on success or a negative error code.
 *
 */</doc>
<use f='linux-4.14.y/net/netfilter/xt_RATEEST.c' l='145' u='c' c='xt_rateest_tg_checkentry'/>
