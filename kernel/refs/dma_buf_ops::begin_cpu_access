<dec f='linux-4.18.y/include/linux/dma-buf.h' l='189' type='int (*)(struct dma_buf *, enum dma_data_direction)'/>
<use f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='822' u='r' c='dma_buf_begin_cpu_access'/>
<use f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='823' u='r' c='dma_buf_begin_cpu_access'/>
<offset>320</offset>
<doc f='linux-4.18.y/include/linux/dma-buf.h' l='159'>/**
	 * @begin_cpu_access:
	 *
	 * This is called from dma_buf_begin_cpu_access() and allows the
	 * exporter to ensure that the memory is actually available for cpu
	 * access - the exporter might need to allocate or swap-in and pin the
	 * backing storage. The exporter also needs to ensure that cpu access is
	 * coherent for the access direction. The direction can be used by the
	 * exporter to optimize the cache flushing, i.e. access with a different
	 * direction (read instead of write) might return stale or even bogus
	 * data (e.g. when the exporter needs to copy the data to temporary
	 * storage).
	 *
	 * This callback is optional.
	 *
	 * FIXME: This is both called through the DMA_BUF_IOCTL_SYNC command
	 * from userspace (where storage shouldn&apos;t be pinned to avoid handing
	 * de-factor mlock rights to userspace) and for the kernel-internal
	 * users of the various kmap interfaces, where the backing storage must
	 * be pinned to guarantee that the atomic kmap calls can succeed. Since
	 * there&apos;s no in-kernel users of the kmap interfaces yet this isn&apos;t a
	 * real problem.
	 *
	 * Returns:
	 *
	 * 0 on success or a negative error code on failure. This can for
	 * example fail when the backing storage can&apos;t be allocated. Can also
	 * return -ERESTARTSYS or -EINTR when the call has been interrupted and
	 * needs to be restarted.
	 */</doc>
