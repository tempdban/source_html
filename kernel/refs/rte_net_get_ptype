<dec f='linux-4.18.y/lib/librte_net/rte_net.h' l='89' type='uint32_t rte_net_get_ptype(const struct rte_mbuf * m, struct rte_net_hdr_lens * hdr_lens, uint32_t layers)'/>
<use f='linux-4.18.y/app/test-pmd/rxonly.c' l='142' u='c' c='pkt_burst_receive'/>
<doc f='linux-4.18.y/lib/librte_net/rte_net.h' l='58'>/**
 * Parse an Ethernet packet to get its packet type.
 *
 * This function parses the network headers in mbuf data and return its
 * packet type.
 *
 * If it is provided by the user, it also fills a rte_net_hdr_lens
 * structure that contains the lengths of the parsed network
 * headers. Each length field is valid only if the associated packet
 * type is set. For instance, hdr_lens-&gt;l2_len is valid only if
 * (retval &amp; RTE_PTYPE_L2_MASK) != RTE_PTYPE_UNKNOWN.
 *
 * Supported packet types are:
 *   L2: Ether, Vlan, QinQ
 *   L3: IPv4, IPv6
 *   L4: TCP, UDP, SCTP
 *   Tunnels: IPv4, IPv6, Gre, Nvgre
 *
 * @param m
 *   The packet mbuf to be parsed.
 * @param hdr_lens
 *   A pointer to a structure where the header lengths will be returned,
 *   or NULL.
 * @param layers
 *   List of layers to parse. The function will stop at the first
 *   empty layer. Examples:
 *   - To parse all known layers, use RTE_PTYPE_ALL_MASK.
 *   - To parse only L2 and L3, use RTE_PTYPE_L2_MASK | RTE_PTYPE_L3_MASK
 * @return
 *   The packet type of the packet.
 */</doc>
<use f='linux-4.18.y/drivers/net/dpaa/dpaa_rxtx.c' l='281' u='c' c='dpaa_unsegmented_checksum'/>
<use f='linux-4.18.y/drivers/net/dpaa/dpaa_rxtx.c' l='717' u='c' c='dpaa_eth_mbuf_to_sg_fd'/>
<use f='linux-4.18.y/drivers/net/netvsc/hn_rxtx.c' l='496' u='c' c='hn_rxpkt'/>
<use f='linux-4.18.y/drivers/net/tap/rte_eth_tap.c' l='390' u='c' c='pmd_rx_burst'/>
<use f='linux-4.18.y/drivers/net/virtio/virtio_rxtx.c' l='827' u='c' c='virtio_rx_offload'/>
<def f='linux-4.18.y/lib/librte_net/rte_net.c' l='227' ll='496' type='uint32_t rte_net_get_ptype(const struct rte_mbuf * m, struct rte_net_hdr_lens * hdr_lens, uint32_t layers)'/>
<doc f='linux-4.18.y/lib/librte_net/rte_net.c' l='226'>/* parse mbuf data to get packet type */</doc>
