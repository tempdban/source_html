<dec f='linux-4.18.y/include/linux/phy.h' l='895' type='int phy_restore_page(struct phy_device * phydev, int oldpage, int ret)'/>
<def f='linux-4.18.y/drivers/net/phy/phy-core.c' l='444' ll='464' type='int phy_restore_page(struct phy_device * phydev, int oldpage, int ret)'/>
<dec f='linux-4.18.y/drivers/net/phy/phy-core.c' l='465' type='int phy_restore_page(struct phy_device * , int , int )'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='465' c='phy_restore_page'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='465' u='a'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='465' u='a'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='483' u='c' c='phy_read_paged'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='504' u='c' c='phy_write_paged'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='527' u='c' c='phy_modify_paged'/>
<doc f='linux-4.18.y/drivers/net/phy/phy-core.c' l='428'>/**
 * phy_restore_page() - restore the page register and release the bus lock
 * @phydev: a pointer to a &amp;struct phy_device
 * @oldpage: the old page, return value from phy_save_page() or phy_select_page()
 * @ret: operation&apos;s return code
 *
 * Release the MDIO bus lock, restoring @oldpage if it is a valid page.
 * This function propagates the earliest error code from the group of
 * operations.
 *
 * Returns:
 *   @oldpage if it was a negative value, otherwise
 *   @ret if it was a negative errno value, otherwise
 *   phy_write_page()&apos;s negative value if it were in error, otherwise
 *   @ret.
 */</doc>
