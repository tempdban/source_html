<def f='linux-4.18.y/arch/x86/include/asm/atomic64_64.h' l='152' ll='155' type='long arch_atomic64_add_return(long i, atomic64_t * v)'/>
<use f='linux-4.18.y/arch/x86/include/asm/atomic64_64.h' l='159' u='c' c='arch_atomic64_sub_return'/>
<use f='linux-4.18.y/include/asm-generic/atomic-instrumented.h' l='193' macro='1' u='c'/>
<use f='linux-4.18.y/include/asm-generic/atomic-instrumented.h' l='253' u='c' c='atomic64_add_return'/>
<doc f='linux-4.18.y/arch/x86/include/asm/atomic64_64.h' l='145'>/**
 * arch_atomic64_add_return - add and return
 * @i: integer value to add
 * @v: pointer to type atomic64_t
 *
 * Atomically adds @i to @v and returns @i + @v
 */</doc>
<def f='linux-4.18.y/arch/x86/include/asm/atomic64_32.h' l='135' ll='141' type='long long arch_atomic64_add_return(long long i, atomic64_t * v)'/>
<use f='linux-4.18.y/arch/x86/include/asm/atomic64_32.h' l='275' u='c' c='arch_atomic64_add_negative'/>
<doc f='linux-4.18.y/arch/x86/include/asm/atomic64_32.h' l='128'>/**
 * arch_atomic64_add_return - add and return
 * @i: integer value to add
 * @v: pointer to type atomic64_t
 *
 * Atomically adds @i to @v and returns @i + *@v
 */</doc>
