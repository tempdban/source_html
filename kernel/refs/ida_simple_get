<dec f='linux-4.18.y/include/linux/idr.h' l='233' type='int ida_simple_get(struct ida * ida, unsigned int start, unsigned int end, gfp_t gfp_mask)'/>
<use f='linux-4.18.y/block/blk-core.c' l='1013' u='c' c='blk_alloc_queue_node'/>
<use f='linux-4.18.y/drivers/base/platform-msi.c' l='222' u='c' c='platform_msi_alloc_priv_data'/>
<use f='linux-4.18.y/drivers/base/platform.c' l='384' u='c' c='platform_device_add'/>
<use f='linux-4.18.y/drivers/block/virtio_blk.c' l='643' u='c' c='virtblk_probe'/>
<use f='linux-4.18.y/drivers/dax/super.c' l='503' u='c' c='alloc_dax'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_connector.c' l='209' u='c' c='drm_connector_init'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_connector.c' l='221' u='c' c='drm_connector_init'/>
<use f='linux-4.18.y/drivers/input/input.c' l='2395' u='c' c='input_get_new_minor'/>
<use f='linux-4.18.y/drivers/input/input.c' l='2403' u='c' c='input_get_new_minor'/>
<use f='linux-4.18.y/drivers/iommu/iommu.c' l='350' u='c' c='iommu_group_alloc'/>
<use f='linux-4.18.y/drivers/media/rc/rc-main.c' l='1833' u='c' c='rc_register_device'/>
<use f='linux-4.18.y/drivers/net/ipvlan/ipvlan_main.c' l='650' u='c' c='ipvlan_link_new'/>
<use f='linux-4.18.y/drivers/net/ipvlan/ipvlan_main.c' l='653' u='c' c='ipvlan_link_new'/>
<use f='linux-4.18.y/drivers/nvmem/core.c' l='466' u='c' c='nvmem_register'/>
<use f='linux-4.18.y/drivers/ptp/ptp_clock.c' l='218' u='c' c='ptp_clock_register'/>
<use f='linux-4.18.y/drivers/rtc/class.c' l='203' u='c' c='rtc_device_get_id'/>
<use f='linux-4.18.y/drivers/rtc/class.c' l='209' u='c' c='rtc_device_get_id'/>
<use f='linux-4.18.y/drivers/scsi/hosts.c' l='405' u='c' c='scsi_host_alloc'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_iscsi.c' l='2073' u='c' c='iscsi_add_session'/>
<use f='linux-4.18.y/drivers/thermal/thermal_core.c' l='721' u='c' c='thermal_zone_bind_cooling_device'/>
<use f='linux-4.18.y/drivers/thermal/thermal_core.c' l='958' u='c' c='__thermal_cooling_device_register'/>
<use f='linux-4.18.y/drivers/thermal/thermal_core.c' l='1209' u='c' c='thermal_zone_device_register'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_hid.c' l='854' u='c' c='hidg_get_minor'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_printer.c' l='1270' u='c' c='gprinter_get_minor'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/rndis.c' l='868' u='c' c='rndis_get_nr'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='1336' u='c' c='typec_register_port'/>
<use f='linux-4.18.y/drivers/virtio/virtio.c' l='323' u='c' c='register_virtio_device'/>
<use f='linux-4.18.y/fs/proc/generic.c' l='208' u='c' c='proc_alloc_inum'/>
<use f='linux-4.18.y/kernel/workqueue.c' l='1797' u='c' c='create_worker'/>
<def f='linux-4.18.y/lib/idr.c' l='563' ll='600' type='int ida_simple_get(struct ida * ida, unsigned int start, unsigned int end, gfp_t gfp_mask)'/>
<dec f='linux-4.18.y/lib/idr.c' l='601' type='int ida_simple_get(struct ida * , unsigned int , unsigned int , gfp_t )'/>
<use f='linux-4.18.y/lib/idr.c' l='601' c='ida_simple_get'/>
<use f='linux-4.18.y/lib/idr.c' l='601' u='a'/>
<use f='linux-4.18.y/lib/idr.c' l='601' u='a'/>
<doc f='linux-4.18.y/lib/idr.c' l='548'>/**
 * ida_simple_get - get a new id.
 * @ida: the (initialized) ida.
 * @start: the minimum id (inclusive, &lt; 0x8000000)
 * @end: the maximum id (exclusive, &lt; 0x8000000 or 0)
 * @gfp_mask: memory allocation flags
 *
 * Allocates an id in the range start &lt;= id &lt; end, or returns -ENOSPC.
 * On memory allocation failure, returns -ENOMEM.
 *
 * Compared to ida_get_new_above() this function does its own locking, and
 * should be used unless there are special requirements.
 *
 * Use ida_simple_remove() to get rid of an id.
 */</doc>
<use f='linux-4.18.y/net/core/xdp.c' l='211' u='c' c='__mem_id_cyclic_get'/>
