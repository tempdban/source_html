<dec f='linux-4.18.y/include/linux/mmu_notifier.h' l='216' type='void mmu_notifier_unregister(struct mmu_notifier * mn, struct mm_struct * mm)'/>
<use f='linux-4.18.y/drivers/iommu/amd_iommu_v2.c' l='347' u='c' c='free_pasid_states'/>
<use f='linux-4.18.y/drivers/iommu/amd_iommu_v2.c' l='708' u='c' c='amd_iommu_bind_pasid'/>
<use f='linux-4.18.y/drivers/iommu/amd_iommu_v2.c' l='756' u='c' c='amd_iommu_unbind_pasid'/>
<use f='linux-4.18.y/drivers/iommu/intel-svm.c' l='486' u='c' c='intel_svm_unbind_mm'/>
<def f='linux-4.18.y/mm/mmu_notifier.c' l='368' ll='406' type='void mmu_notifier_unregister(struct mmu_notifier * mn, struct mm_struct * mm)'/>
<dec f='linux-4.18.y/mm/mmu_notifier.c' l='407' type='void mmu_notifier_unregister(struct mmu_notifier * , struct mm_struct * )'/>
<use f='linux-4.18.y/mm/mmu_notifier.c' l='407' c='mmu_notifier_unregister'/>
<use f='linux-4.18.y/mm/mmu_notifier.c' l='407' u='a'/>
<use f='linux-4.18.y/mm/mmu_notifier.c' l='407' u='a'/>
<doc f='linux-4.18.y/mm/mmu_notifier.c' l='358'>/*
 * This releases the mm_count pin automatically and frees the mm
 * structure if it was the last user of it. It serializes against
 * running mmu notifiers with SRCU and against mmu_notifier_unregister
 * with the unregister lock + SRCU. All sptes must be dropped before
 * calling mmu_notifier_unregister. -&gt;release or any other notifier
 * method may be invoked concurrently with mmu_notifier_unregister,
 * and only after mmu_notifier_unregister returned we&apos;re guaranteed
 * that -&gt;release or any other method can&apos;t run anymore.
 */</doc>
<use f='linux-4.18.y/virt/kvm/kvm_main.c' l='742' u='c' c='kvm_destroy_vm'/>
