<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='1161' type='void * vmw_cmdbuf_alloc(struct vmw_cmdbuf_man * man, size_t size, bool interruptible, struct vmw_cmdbuf_header ** p_header)'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf.c' l='955' ll='984' type='void * vmw_cmdbuf_alloc(struct vmw_cmdbuf_man * man, size_t size, bool interruptible, struct vmw_cmdbuf_header ** p_header)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf.c' l='1016' u='c' c='vmw_cmdbuf_reserve_cur'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf.c' l='1137' u='c' c='vmw_cmdbuf_send_device_command'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf.c' l='942'>/**
 * vmw_cmdbuf_alloc - Allocate a command buffer header complete with
 * command buffer space.
 *
 * @man: The command buffer manager.
 * @size: The requested size of the buffer space.
 * @interruptible: Whether to sleep interruptible while waiting for space.
 * @p_header: points to a header pointer to populate on successful return.
 *
 * Returns a pointer to command buffer space if successful. Otherwise
 * returns an error pointer. The header pointer returned in @p_header should
 * be used for upcoming calls to vmw_cmdbuf_reserve() and vmw_cmdbuf_commit().
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4014' u='c' c='vmw_execbuf_cmdbuf'/>
