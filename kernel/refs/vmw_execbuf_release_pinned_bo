<dec f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='842' type='void vmw_execbuf_release_pinned_bo(struct vmw_private * dev_priv)'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='158' u='c' c='vmw_hw_context_destroy'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_dmabuf.c' l='59' u='c' c='vmw_dmabuf_pin_in_placement'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_dmabuf.c' l='108' u='c' c='vmw_dmabuf_pin_in_vram_or_gmr'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_dmabuf.c' l='192' u='c' c='vmw_dmabuf_pin_in_start_of_vram'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1467' u='c' c='vmw_pm_freeze'/>
<def f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4456' ll='4462' type='void vmw_execbuf_release_pinned_bo(struct vmw_private * dev_priv)'/>
<doc f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4438'>/**
 * vmw_execbuf_release_pinned_bo - Flush queries and unpin the pinned
 * query bo.
 *
 * @dev_priv: The device private structure.
 *
 * This function should be used to unpin the pinned query bo, or
 * as a query barrier when we need to make sure that all queries have
 * finished before the next fifo command. (For example on hardware
 * context destructions where the hardware may otherwise leak unfinished
 * queries).
 *
 * This function does not return any failure codes, but make attempts
 * to do safe unpinning in case of errors.
 *
 * The function will synchronize on the previous query barrier, and will
 * thus not finish until that barrier has executed.
 */</doc>
