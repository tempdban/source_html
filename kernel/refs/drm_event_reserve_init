<dec f='linux-4.14.y/include/drm/drm_file.h' l='372' type='int drm_event_reserve_init(struct drm_device * dev, struct drm_file * file_priv, struct drm_pending_event * p, struct drm_event * e)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='2106' u='c' c='prepare_crtc_signaling'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='643' ll='656' type='int drm_event_reserve_init(struct drm_device * dev, struct drm_file * file_priv, struct drm_pending_event * p, struct drm_event * e)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='657' type='int drm_event_reserve_init(struct drm_device * , struct drm_file * , struct drm_pending_event * , struct drm_event * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='657' c='drm_event_reserve_init'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='657' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='657' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='619'>/**
 * drm_event_reserve_init - init a DRM event and reserve space for it
 * @dev: DRM device
 * @file_priv: DRM file private data
 * @p: tracking structure for the pending event
 * @e: actual event data to deliver to userspace
 *
 * This function prepares the passed in event for eventual delivery. If the event
 * doesn&apos;t get delivered (because the IOCTL fails later on, before queuing up
 * anything) then the even must be cancelled and freed using
 * drm_event_cancel_free(). Successfully initialized events should be sent out
 * using drm_send_event() or drm_send_event_locked() to signal completion of the
 * asynchronous event to userspace.
 *
 * If callers embedded @p into a larger structure it must be allocated with
 * kmalloc and @p must be the first member element.
 *
 * Callers which already hold &amp;drm_device.event_lock should use
 * drm_event_reserve_init_locked() instead.
 *
 * RETURNS:
 *
 * 0 on success or a negative error code on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane.c' l='1041' u='c' c='drm_mode_page_flip_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_fence.c' l='1051' u='c' c='vmw_event_fence_action_create'/>
