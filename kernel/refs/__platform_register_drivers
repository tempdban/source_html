<dec f='linux-4.18.y/include/linux/platform_device.h' l='279' type='int __platform_register_drivers(struct platform_driver *const * drivers, unsigned int count, struct module * owner)'/>
<def f='linux-4.18.y/drivers/base/platform.c' l='788' ll='814' type='int __platform_register_drivers(struct platform_driver *const * drivers, unsigned int count, struct module * owner)'/>
<dec f='linux-4.18.y/drivers/base/platform.c' l='815' type='int __platform_register_drivers(struct platform_driver *const * , unsigned int , struct module * )'/>
<use f='linux-4.18.y/drivers/base/platform.c' l='815' c='__platform_register_drivers'/>
<use f='linux-4.18.y/drivers/base/platform.c' l='815' u='a'/>
<use f='linux-4.18.y/drivers/base/platform.c' l='815' u='a'/>
<doc f='linux-4.18.y/drivers/base/platform.c' l='775'>/**
 * __platform_register_drivers - register an array of platform drivers
 * @drivers: an array of drivers to register
 * @count: the number of drivers to register
 * @owner: module owning the drivers
 *
 * Registers platform drivers specified by an array. On failure to register a
 * driver, all previously registered drivers will be unregistered. Callers of
 * this API should use platform_unregister_drivers() to unregister drivers in
 * the reverse order.
 *
 * Returns: 0 on success or a negative error code on failure.
 */</doc>
