<dec f='linux-4.18.y/lib/librte_ip_frag/ip_frag_common.h' l='39' type='struct ip_frag_pkt * ip_frag_find(struct rte_ip_frag_tbl * tbl, struct rte_ip_frag_death_row * dr, const struct ip_frag_key * key, uint64_t tms)'/>
<def f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='222' ll='282' type='struct ip_frag_pkt * ip_frag_find(struct rte_ip_frag_tbl * tbl, struct rte_ip_frag_death_row * dr, const struct ip_frag_key * key, uint64_t tms)'/>
<doc f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='217'>/*
 * Find an entry in the table for the corresponding fragment.
 * If such entry is not present, then allocate a new one.
 * If the entry is stale, then free and reuse it.
 */</doc>
<use f='linux-4.18.y/lib/librte_ip_frag/rte_ipv4_reassembly.c' l='133' u='c' c='rte_ipv4_frag_reassemble_packet'/>
<use f='linux-4.18.y/lib/librte_ip_frag/rte_ipv6_reassembly.c' l='172' u='c' c='rte_ipv6_frag_reassemble_packet'/>
