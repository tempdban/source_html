<dec f='linux-4.18.y/include/linux/fscrypt_supp.h' l='100' type='int fscrypt_fname_disk_to_usr(struct inode * , u32 , u32 , const struct fscrypt_str * , struct fscrypt_str * )'/>
<def f='linux-4.18.y/fs/crypto/fname.c' l='252' ll='292' type='int fscrypt_fname_disk_to_usr(struct inode * inode, u32 hash, u32 minor_hash, const struct fscrypt_str * iname, struct fscrypt_str * oname)'/>
<dec f='linux-4.18.y/fs/crypto/fname.c' l='293' type='int fscrypt_fname_disk_to_usr(struct inode * , u32 , u32 , const struct fscrypt_str * , struct fscrypt_str * )'/>
<use f='linux-4.18.y/fs/crypto/fname.c' l='293' c='fscrypt_fname_disk_to_usr'/>
<use f='linux-4.18.y/fs/crypto/fname.c' l='293' u='a'/>
<use f='linux-4.18.y/fs/crypto/fname.c' l='293' u='a'/>
<doc f='linux-4.18.y/fs/crypto/fname.c' l='240'>/**
 * fscrypt_fname_disk_to_usr() - converts a filename from disk space to user
 * space
 *
 * The caller must have allocated sufficient memory for the @oname string.
 *
 * If the key is available, we&apos;ll decrypt the disk name; otherwise, we&apos;ll encode
 * it for presentation.  Short names are directly base64-encoded, while long
 * names are encoded in fscrypt_digested_name format.
 *
 * Return: 0 on success, -errno on failure
 */</doc>
<use f='linux-4.18.y/fs/crypto/hooks.c' l='255' u='c' c='fscrypt_get_symlink'/>
<use f='linux-4.18.y/fs/ext4/dir.c' l='261' u='c' c='ext4_readdir'/>
<use f='linux-4.18.y/fs/ext4/namei.c' l='1029' u='c' c='htree_dirblock_to_tree'/>
<use f='linux-4.18.y/fs/f2fs/dir.c' l='812' u='c' c='f2fs_fill_dentries'/>
