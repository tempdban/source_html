<dec f='linux-4.14.y/include/linux/usb.h' l='1771' type='int usb_get_status(struct usb_device * dev, int type, int target, void * data)'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='1494' u='c' c='hub_configure'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='4870' u='c' c='hub_port_connect'/>
<def f='linux-4.14.y/drivers/usb/core/message.c' l='944' ll='964' type='int usb_get_status(struct usb_device * dev, int type, int target, void * data)'/>
<dec f='linux-4.14.y/drivers/usb/core/message.c' l='965' type='int usb_get_status(struct usb_device * , int , int , void * )'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='965' c='usb_get_status'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='965' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='965' u='a'/>
<doc f='linux-4.14.y/drivers/usb/core/message.c' l='922'>/**
 * usb_get_status - issues a GET_STATUS call
 * @dev: the device whose status is being checked
 * @type: USB_RECIP_*; for device, interface, or endpoint
 * @target: zero (for device), else interface or endpoint number
 * @data: pointer to two bytes of bitmap data
 * Context: !in_interrupt ()
 *
 * Returns device, interface, or endpoint status.  Normally only of
 * interest to see if the device is self powered, or has enabled the
 * remote wakeup facility; or whether a bulk or interrupt endpoint
 * is halted (&quot;stalled&quot;).
 *
 * Bits in these status bitmaps are set using the SET_FEATURE request,
 * and cleared using the CLEAR_FEATURE request.  The usb_clear_halt()
 * function should be used to clear halt (&quot;stall&quot;) status.
 *
 * This call is synchronous, and may not be used in an interrupt context.
 *
 * Returns 0 and the status value in *@data (in host byte order) on success,
 * or else the status code from the underlying usb_control_msg() call.
 */</doc>
