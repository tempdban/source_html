<dec f='linux-4.18.y/include/drm/drm_drv.h' l='626' type='void drm_put_dev(struct drm_device * dev)'/>
<use f='linux-4.18.y/drivers/gpu/drm/bochs/bochs_drv.c' l='185' u='c' c='bochs_pci_remove'/>
<use f='linux-4.18.y/drivers/gpu/drm/cirrus/cirrus_drv.c' l='82' u='c' c='cirrus_pci_remove'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='308' ll='319' type='void drm_put_dev(struct drm_device * dev)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='320' type='void drm_put_dev(struct drm_device * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='320' c='drm_put_dev'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='320' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='320' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='294'>/**
 * drm_put_dev - Unregister and release a DRM device
 * @dev: DRM device
 *
 * Called at module unload time or when a PCI device is unplugged.
 *
 * Cleans up all DRM device, calling drm_lastclose().
 *
 * Note: Use of this function is deprecated. It will eventually go away
 * completely.  Please use drm_dev_unregister() and drm_dev_put() explicitly
 * instead to make sure that the device isn&apos;t userspace accessible any more
 * while teardown is in progress, ensuring that userspace can&apos;t access an
 * inconsistent state.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_file.c' l='441' u='c' c='drm_release'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_pci.c' l='417' u='c' c='drm_legacy_pci_exit'/>
<use f='linux-4.18.y/drivers/gpu/drm/virtio/virtgpu_drv.c' l='58' u='c' c='virtio_gpu_remove'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1372' u='c' c='vmw_remove'/>
