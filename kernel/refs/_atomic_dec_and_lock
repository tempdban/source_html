<dec f='linux-4.14.y/include/linux/spinlock.h' l='420' type='int _atomic_dec_and_lock(atomic_t * atomic, spinlock_t * lock)'/>
<doc f='linux-4.14.y/include/linux/spinlock.h' l='412'>/**
 * atomic_dec_and_lock - lock on reaching reference count zero
 * @atomic: the atomic counter
 * @lock: the spinlock in question
 *
 * Decrements @atomic by 1.  If the result is 0, returns true and locks
 * @lock.  Returns false for all other cases.
 */</doc>
<use f='linux-4.14.y/drivers/md/md.c' l='515' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='415' macro='1' u='c'/>
<use f='linux-4.14.y/fs/inode.c' l='1534' macro='1' u='c'/>
<use f='linux-4.14.y/fs/notify/mark.c' l='213' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/user.c' l='166' macro='1' u='c'/>
<def f='linux-4.14.y/lib/dec_and_lock.c' l='21' ll='33' type='int _atomic_dec_and_lock(atomic_t * atomic, spinlock_t * lock)'/>
<dec f='linux-4.14.y/lib/dec_and_lock.c' l='35' type='int _atomic_dec_and_lock(atomic_t * , spinlock_t * )'/>
<use f='linux-4.14.y/lib/dec_and_lock.c' l='35' c='_atomic_dec_and_lock'/>
<use f='linux-4.14.y/lib/dec_and_lock.c' l='35' u='a'/>
<use f='linux-4.14.y/lib/dec_and_lock.c' l='35' u='a'/>
<doc f='linux-4.14.y/lib/dec_and_lock.c' l='6'>/*
 * This is an implementation of the notion of &quot;decrement a
 * reference count, and return locked if it decremented to zero&quot;.
 *
 * NOTE NOTE NOTE! This is _not_ equivalent to
 *
 *	if (atomic_dec_and_test(&amp;atomic)) {
 *		spin_lock(&amp;lock);
 *		return 1;
 *	}
 *	return 0;
 *
 * because the spin-lock and the decrement must be
 * &quot;atomic&quot;.
 */</doc>
