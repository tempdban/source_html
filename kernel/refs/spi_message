<def f='linux-4.14.y/include/linux/spi/spi.h' l='834' ll='868'/>
<size>104</size>
<doc f='linux-4.14.y/include/linux/spi/spi.h' l='804'>/**
 * struct spi_message - one multi-segment SPI transaction
 * @transfers: list of transfer segments in this transaction
 * @spi: SPI device to which the transaction is queued
 * @is_dma_mapped: if true, the caller provided both dma and cpu virtual
 *	addresses for each transfer buffer
 * @complete: called to report transaction completions
 * @context: the argument to complete() when it&apos;s called
 * @frame_length: the total number of bytes in the message
 * @actual_length: the total number of bytes that were transferred in all
 *	successful segments
 * @status: zero for success, else negative errno
 * @queue: for use by whichever driver currently owns the message
 * @state: for use by whichever driver currently owns the message
 * @resources: for resource management when the spi message is processed
 *
 * A @spi_message is used to execute an atomic sequence of data transfers,
 * each represented by a struct spi_transfer.  The sequence is &quot;atomic&quot;
 * in the sense that no other spi_message may use that SPI bus until that
 * sequence completes.  On some systems, many such sequences can execute as
 * as single programmed DMA transfer.  On all systems, these messages are
 * queued, and might complete after transactions to other devices.  Messages
 * sent to a given spi_device are always executed in FIFO order.
 *
 * The code that submits an spi_message (and its spi_transfers)
 * to the lower layers is responsible for managing its memory.
 * Zero-initialize every field you don&apos;t set up explicitly, to
 * insulate against future API updates.  After you submit a message
 * and its transfers, ignore them until its completion callback.
 */</doc>
<mbr r='spi_message::transfers' o='0' t='struct list_head'/>
<mbr r='spi_message::spi' o='128' t='struct spi_device *'/>
<mbr r='spi_message::is_dma_mapped' o='192' t='unsigned int'/>
<mbr r='spi_message::complete' o='256' t='void (*)(void *)'/>
<mbr r='spi_message::context' o='320' t='void *'/>
<mbr r='spi_message::frame_length' o='384' t='unsigned int'/>
<mbr r='spi_message::actual_length' o='416' t='unsigned int'/>
<mbr r='spi_message::status' o='448' t='int'/>
<mbr r='spi_message::queue' o='512' t='struct list_head'/>
<mbr r='spi_message::state' o='640' t='void *'/>
<mbr r='spi_message::resources' o='704' t='struct list_head'/>
