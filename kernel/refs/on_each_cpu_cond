<dec f='linux-4.14.y/include/linux/smp.h' l='52' type='void on_each_cpu_cond(bool (*)(int, void *) cond_func, smp_call_func_t func, void * info, bool wait, gfp_t gfp_flags)'/>
<doc f='linux-4.14.y/include/linux/smp.h' l='47'>/*
 * Call a function on each processor for which the supplied function
 * cond_func returns a positive value. This may include the local
 * processor.
 */</doc>
<use f='linux-4.14.y/fs/buffer.c' l='1456' u='c' c='invalidate_bh_lrus'/>
<def f='linux-4.14.y/kernel/smp.c' l='670' ll='701' type='void on_each_cpu_cond(bool (*)(int, void *) cond_func, smp_call_func_t func, void * info, bool wait, gfp_t gfp_flags)'/>
<dec f='linux-4.14.y/kernel/smp.c' l='702' type='void on_each_cpu_cond(bool (*)(int, void *) , smp_call_func_t , void * , bool , gfp_t )'/>
<use f='linux-4.14.y/kernel/smp.c' l='702' c='on_each_cpu_cond'/>
<use f='linux-4.14.y/kernel/smp.c' l='702' u='a'/>
<use f='linux-4.14.y/kernel/smp.c' l='702' u='a'/>
<doc f='linux-4.14.y/kernel/smp.c' l='643'>/*
 * on_each_cpu_cond(): Call a function on each processor for which
 * the supplied function cond_func returns true, optionally waiting
 * for all the required CPUs to finish. This may include the local
 * processor.
 * @cond_func:	A callback function that is passed a cpu id and
 *		the the info parameter. The function is called
 *		with preemption disabled. The function should
 *		return a blooean value indicating whether to IPI
 *		the specified CPU.
 * @func:	The function to run on all applicable CPUs.
 *		This must be fast and non-blocking.
 * @info:	An arbitrary pointer to pass to both functions.
 * @wait:	If true, wait (atomically) until function has
 *		completed on other CPUs.
 * @gfp_flags:	GFP flags to use when allocating the cpumask
 *		used internally by the function.
 *
 * The function might sleep if the GFP flags indicates a non
 * atomic allocation is allowed.
 *
 * Preemption is disabled to protect against CPUs going offline but not online.
 * CPUs going online during the call will not be seen or sent an IPI.
 *
 * You must not call this function with disabled interrupts or
 * from a hardware interrupt handler or from a bottom half handler.
 */</doc>
<dec f='linux-4.14.y/include/linux/smp.h' l='52' type='void on_each_cpu_cond(bool (*)(int, void *) cond_func, smp_call_func_t func, void * info, bool wait, gfp_t gfp_flags)'/>
<doc f='linux-4.14.y/include/linux/smp.h' l='47'>/*
 * Call a function on each processor for which the supplied function
 * cond_func returns a positive value. This may include the local
 * processor.
 */</doc>
<use f='linux-4.14.y/fs/buffer.c' l='1456' u='c' c='invalidate_bh_lrus'/>
<def f='linux-4.14.y/kernel/smp.c' l='670' ll='701' type='void on_each_cpu_cond(bool (*)(int, void *) cond_func, smp_call_func_t func, void * info, bool wait, gfp_t gfp_flags)'/>
<dec f='linux-4.14.y/kernel/smp.c' l='702' type='void on_each_cpu_cond(bool (*)(int, void *) , smp_call_func_t , void * , bool , gfp_t )'/>
<use f='linux-4.14.y/kernel/smp.c' l='702' c='on_each_cpu_cond'/>
<use f='linux-4.14.y/kernel/smp.c' l='702' u='a'/>
<use f='linux-4.14.y/kernel/smp.c' l='702' u='a'/>
<doc f='linux-4.14.y/kernel/smp.c' l='643'>/*
 * on_each_cpu_cond(): Call a function on each processor for which
 * the supplied function cond_func returns true, optionally waiting
 * for all the required CPUs to finish. This may include the local
 * processor.
 * @cond_func:	A callback function that is passed a cpu id and
 *		the the info parameter. The function is called
 *		with preemption disabled. The function should
 *		return a blooean value indicating whether to IPI
 *		the specified CPU.
 * @func:	The function to run on all applicable CPUs.
 *		This must be fast and non-blocking.
 * @info:	An arbitrary pointer to pass to both functions.
 * @wait:	If true, wait (atomically) until function has
 *		completed on other CPUs.
 * @gfp_flags:	GFP flags to use when allocating the cpumask
 *		used internally by the function.
 *
 * The function might sleep if the GFP flags indicates a non
 * atomic allocation is allowed.
 *
 * Preemption is disabled to protect against CPUs going offline but not online.
 * CPUs going online during the call will not be seen or sent an IPI.
 *
 * You must not call this function with disabled interrupts or
 * from a hardware interrupt handler or from a bottom half handler.
 */</doc>
