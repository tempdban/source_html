<def f='linux-4.14.y/include/linux/dma-fence.h' l='431' ll='438' type='void dma_fence_set_error(struct dma_fence * fence, int error)'/>
<doc f='linux-4.14.y/include/linux/dma-fence.h' l='420'>/**
 * dma_fence_set_error - flag an error condition on the fence
 * @fence: [in]	the dma_fence
 * @error: [in]	the error to store
 *
 * Drivers can supply an optional error status condition before they signal
 * the fence, to indicate that the fence was completed due to an error
 * rather than success. This must be set before signaling (so that the value
 * is visible before any waiters on the signal callback are woken). This
 * helper exists to help catching erroneous setting of #dma_fence.error.
 */</doc>
<def f='linux-4.14.y/include/linux/dma-fence.h' l='431' ll='438' type='void dma_fence_set_error(struct dma_fence * fence, int error)'/>
<doc f='linux-4.14.y/include/linux/dma-fence.h' l='420'>/**
 * dma_fence_set_error - flag an error condition on the fence
 * @fence: [in]	the dma_fence
 * @error: [in]	the error to store
 *
 * Drivers can supply an optional error status condition before they signal
 * the fence, to indicate that the fence was completed due to an error
 * rather than success. This must be set before signaling (so that the value
 * is visible before any waiters on the signal callback are woken). This
 * helper exists to help catching erroneous setting of #dma_fence.error.
 */</doc>
