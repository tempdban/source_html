<dec f='linux-4.14.y/include/linux/kthread.h' l='9' type='struct task_struct * kthread_create_on_node(int (*)(void *) threadfn, void * data, int node, const char * namefmt)'/>
<use f='linux-4.14.y/crypto/algboss.c' l='193' macro='1' u='c'/>
<use f='linux-4.14.y/crypto/algboss.c' l='256' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/base/devtmpfs.c' l='429' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/block/loop.c' l='867' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='2841' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/md/dm-rq.c' l='708' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/md/md.c' l='7529' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/media/rc/rc-ir-raw.c' l='533' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/message/fusion/mptbase.c' l='387' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/scsi/hosts.c' l='489' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='205' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='1304' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/tty/hvc/hvc_console.c' l='978' macro='1' u='c'/>
<use f='linux-4.14.y/fs/ext4/mmp.c' l='382' macro='1' u='c'/>
<use f='linux-4.14.y/fs/ext4/super.c' l='3071' macro='1' u='c'/>
<use f='linux-4.14.y/fs/jbd2/journal.c' l='300' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/audit.c' l='949' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/audit.c' l='1558' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/audit_tree.c' l='739' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/auditfilter.c' l='1154' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='1084' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='1087' macro='1' u='c'/>
<def f='linux-4.14.y/kernel/kthread.c' l='350' ll='363' type='struct task_struct * kthread_create_on_node(int (*)(void *) threadfn, void * data, int node, const char * namefmt)'/>
<dec f='linux-4.14.y/kernel/kthread.c' l='364' type='struct task_struct * kthread_create_on_node(int (*)(void *) , void * , int , const char * )'/>
<use f='linux-4.14.y/kernel/kthread.c' l='364' c='kthread_create_on_node'/>
<use f='linux-4.14.y/kernel/kthread.c' l='364' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='364' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='424' u='c' c='kthread_create_on_cpu'/>
<doc f='linux-4.14.y/kernel/kthread.c' l='327'>/**
 * kthread_create_on_node - create a kthread.
 * @threadfn: the function to run until signal_pending(current).
 * @data: data ptr for @threadfn.
 * @node: task and thread structures for the thread are allocated on this node
 * @namefmt: printf-style name for the thread.
 *
 * Description: This helper function creates and names a kernel
 * thread.  The thread will be stopped: use wake_up_process() to start
 * it.  See also kthread_run().  The new thread has SCHED_NORMAL policy and
 * is affine to all CPUs.
 *
 * If thread is going to be bound on a particular cpu, give its node
 * in @node, to get NUMA affinity for kthread stack, or else give NUMA_NO_NODE.
 * When woken, the thread will run @threadfn() with @data as its
 * argument. @threadfn() can either call do_exit() directly if it is a
 * standalone thread for which no one will call kthread_stop(), or
 * return when &apos;kthread_should_stop()&apos; is true (which means
 * kthread_stop() has been called).  The return value should be zero
 * or a negative error number; it will be passed to kthread_stop().
 *
 * Returns a task_struct or ERR_PTR(-ENOMEM) or ERR_PTR(-EINTR).
 */</doc>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3960' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/time/clocksource.c' l='137' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='1780' u='c' c='create_worker'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4033' macro='1' u='c'/>
<use f='linux-4.14.y/mm/oom_kill.c' l='647' macro='1' u='c'/>
<use f='linux-4.14.y/mm/vmscan.c' l='3738' macro='1' u='c'/>
<use f='linux-4.14.y/security/tomoyo/gc.c' l='650' macro='1' u='c'/>
<dec f='linux-4.14.y/include/linux/kthread.h' l='9' type='struct task_struct * kthread_create_on_node(int (*)(void *) threadfn, void * data, int node, const char * namefmt)'/>
<use f='linux-4.14.y/crypto/algboss.c' l='193' macro='1' u='c'/>
<use f='linux-4.14.y/crypto/algboss.c' l='256' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/base/devtmpfs.c' l='429' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/block/loop.c' l='867' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='2841' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/md/dm-rq.c' l='708' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/md/md.c' l='7529' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/media/rc/rc-ir-raw.c' l='533' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/message/fusion/mptbase.c' l='387' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/scsi/hosts.c' l='489' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='205' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='1304' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/tty/hvc/hvc_console.c' l='978' macro='1' u='c'/>
<use f='linux-4.14.y/fs/ext4/mmp.c' l='382' macro='1' u='c'/>
<use f='linux-4.14.y/fs/ext4/super.c' l='3071' macro='1' u='c'/>
<use f='linux-4.14.y/fs/f2fs/gc.c' l='139' macro='1' u='c'/>
<use f='linux-4.14.y/fs/f2fs/segment.c' l='628' macro='1' u='c'/>
<use f='linux-4.14.y/fs/f2fs/segment.c' l='1584' macro='1' u='c'/>
<use f='linux-4.14.y/fs/jbd2/journal.c' l='300' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/audit.c' l='949' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/audit.c' l='1558' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/audit_tree.c' l='739' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/auditfilter.c' l='1154' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='1084' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='1087' macro='1' u='c'/>
<def f='linux-4.14.y/kernel/kthread.c' l='350' ll='363' type='struct task_struct * kthread_create_on_node(int (*)(void *) threadfn, void * data, int node, const char * namefmt)'/>
<dec f='linux-4.14.y/kernel/kthread.c' l='364' type='struct task_struct * kthread_create_on_node(int (*)(void *) , void * , int , const char * )'/>
<use f='linux-4.14.y/kernel/kthread.c' l='364' c='kthread_create_on_node'/>
<use f='linux-4.14.y/kernel/kthread.c' l='364' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='364' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='424' u='c' c='kthread_create_on_cpu'/>
<doc f='linux-4.14.y/kernel/kthread.c' l='327'>/**
 * kthread_create_on_node - create a kthread.
 * @threadfn: the function to run until signal_pending(current).
 * @data: data ptr for @threadfn.
 * @node: task and thread structures for the thread are allocated on this node
 * @namefmt: printf-style name for the thread.
 *
 * Description: This helper function creates and names a kernel
 * thread.  The thread will be stopped: use wake_up_process() to start
 * it.  See also kthread_run().  The new thread has SCHED_NORMAL policy and
 * is affine to all CPUs.
 *
 * If thread is going to be bound on a particular cpu, give its node
 * in @node, to get NUMA affinity for kthread stack, or else give NUMA_NO_NODE.
 * When woken, the thread will run @threadfn() with @data as its
 * argument. @threadfn() can either call do_exit() directly if it is a
 * standalone thread for which no one will call kthread_stop(), or
 * return when &apos;kthread_should_stop()&apos; is true (which means
 * kthread_stop() has been called).  The return value should be zero
 * or a negative error number; it will be passed to kthread_stop().
 *
 * Returns a task_struct or ERR_PTR(-ENOMEM) or ERR_PTR(-EINTR).
 */</doc>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3960' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/time/clocksource.c' l='137' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='1780' u='c' c='create_worker'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4033' macro='1' u='c'/>
<use f='linux-4.14.y/mm/oom_kill.c' l='647' macro='1' u='c'/>
<use f='linux-4.14.y/mm/vmscan.c' l='3738' macro='1' u='c'/>
<use f='linux-4.14.y/security/tomoyo/gc.c' l='650' macro='1' u='c'/>
