<dec f='linux-4.14.y/fs/ext4/ext4.h' l='2491' type='void ext4_dirty_inode(struct inode * , int )'/>
<def f='linux-4.14.y/fs/ext4/inode.c' l='5881' ll='5896' type='void ext4_dirty_inode(struct inode * inode, int flags)'/>
<doc f='linux-4.14.y/fs/ext4/inode.c' l='5863'>/*
 * ext4_dirty_inode() is called from __mark_inode_dirty()
 *
 * We&apos;re really interested in the case where a file is being extended.
 * i_size has been changed by generic_commit_write() and we thus need
 * to include the updated inode in the current transaction.
 *
 * Also, dquot_alloc_block() will always dirty the inode when blocks
 * are allocated to the file.
 *
 * If the inode is marked synchronous, we don&apos;t honour that here - doing
 * so would cause a commit on atime updates, which we don&apos;t bother doing.
 * We handle synchronous inodes at the highest possible level.
 *
 * If only the I_DIRTY_TIME flag is set, we can skip everything.  If
 * I_DIRTY_TIME and I_DIRTY_SYNC is set, the only inode fields we need
 * to copy into the on-disk inode structure are the timestamp files.
 */</doc>
<use f='linux-4.14.y/fs/ext4/super.c' l='1307'/>
<use f='linux-4.14.y/fs/ext4/super.c' l='1307'/>
