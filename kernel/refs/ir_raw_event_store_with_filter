<dec f='linux-4.18.y/include/media/rc-core.h' l='336' type='int ir_raw_event_store_with_filter(struct rc_dev * dev, struct ir_raw_event * ev)'/>
<def f='linux-4.18.y/drivers/media/rc/rc-ir-raw.c' l='169' ll='195' type='int ir_raw_event_store_with_filter(struct rc_dev * dev, struct ir_raw_event * ev)'/>
<dec f='linux-4.18.y/drivers/media/rc/rc-ir-raw.c' l='196' type='int ir_raw_event_store_with_filter(struct rc_dev * , struct ir_raw_event * )'/>
<use f='linux-4.18.y/drivers/media/rc/rc-ir-raw.c' l='196' c='ir_raw_event_store_with_filter'/>
<use f='linux-4.18.y/drivers/media/rc/rc-ir-raw.c' l='196' u='a'/>
<use f='linux-4.18.y/drivers/media/rc/rc-ir-raw.c' l='196' u='a'/>
<doc f='linux-4.18.y/drivers/media/rc/rc-ir-raw.c' l='157'>/**
 * ir_raw_event_store_with_filter() - pass next pulse/space to decoders with some processing
 * @dev:	the struct rc_dev device descriptor
 * @ev:		the event that has occurred
 *
 * This routine (which may be called from an interrupt context) works
 * in similar manner to ir_raw_event_store_edge.
 * This routine is intended for devices with limited internal buffer
 * It automerges samples of same type, and handles timeouts. Returns non-zero
 * if the event was added, and zero if the event was ignored due to idle
 * processing.
 */</doc>
