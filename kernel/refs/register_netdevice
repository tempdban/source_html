<dec f='linux-4.14.y/include/linux/netdevice.h' l='2422' type='int register_netdevice(struct net_device * dev)'/>
<use f='linux-4.14.y/drivers/net/bonding/bond_main.c' l='4738' u='c' c='bond_create'/>
<use f='linux-4.14.y/drivers/net/bonding/bond_netlink.c' l='453' u='c' c='bond_newlink'/>
<use f='linux-4.14.y/drivers/net/macvlan.c' l='1428' u='c' c='macvlan_common_newlink'/>
<use f='linux-4.14.y/drivers/net/tun.c' l='2112' u='c' c='tun_set_iff'/>
<use f='linux-4.14.y/drivers/net/veth.c' l='416' u='c' c='veth_newlink'/>
<use f='linux-4.14.y/drivers/net/veth.c' l='443' u='c' c='veth_newlink'/>
<use f='linux-4.14.y/net/bridge/br_netlink.c' l='1226' u='c' c='br_dev_newlink'/>
<def f='linux-4.14.y/net/core/dev.c' l='7544' ll='7689' type='int register_netdevice(struct net_device * dev)'/>
<dec f='linux-4.14.y/net/core/dev.c' l='7690' type='int register_netdevice(struct net_device * )'/>
<use f='linux-4.14.y/net/core/dev.c' l='7690' c='register_netdevice'/>
<use f='linux-4.14.y/net/core/dev.c' l='7690' u='a'/>
<use f='linux-4.14.y/net/core/dev.c' l='7690' u='a'/>
<use f='linux-4.14.y/net/core/dev.c' l='7751' u='c' c='register_netdev'/>
<doc f='linux-4.14.y/net/core/dev.c' l='7527'>/**
 *	register_netdevice	- register a network device
 *	@dev: device to register
 *
 *	Take a completed network device structure and add it to the kernel
 *	interfaces. A %NETDEV_REGISTER message is sent to the netdev notifier
 *	chain. 0 is returned on success. A negative errno code is returned
 *	on a failure to set up the device, or if the name is a duplicate.
 *
 *	Callers must hold the rtnl semaphore. You may want
 *	register_netdev() instead of this.
 *
 *	BUGS:
 *	The locking appears insufficient to guarantee two parallel registers
 *	will not get the same name.
 */</doc>
<use f='linux-4.14.y/net/core/rtnetlink.c' l='2705' u='c' c='rtnl_newlink'/>
<use f='linux-4.14.y/net/openvswitch/vport-internal_dev.c' l='209' u='c' c='internal_dev_create'/>
