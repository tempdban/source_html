<dec f='linux-4.18.y/kernel/trace/trace.h' l='1432' type='enum regex_type filter_parse_regex(char * buff, int len, char ** search, int * not)'/>
<use f='linux-4.18.y/kernel/trace/ftrace.c' l='3797' u='c' c='match_records'/>
<use f='linux-4.18.y/kernel/trace/ftrace.c' l='3803' u='c' c='match_records'/>
<use f='linux-4.18.y/kernel/trace/ftrace.c' l='4444' u='c' c='unregister_ftrace_function_probe_func'/>
<use f='linux-4.18.y/kernel/trace/ftrace.c' l='5368' u='c' c='ftrace_graph_set_hash'/>
<def f='linux-4.18.y/kernel/trace/trace_events_filter.c' l='823' ll='859' type='enum regex_type filter_parse_regex(char * buff, int len, char ** search, int * not)'/>
<use f='linux-4.18.y/kernel/trace/trace_events_filter.c' l='868' u='c' c='filter_build_regex'/>
<doc f='linux-4.18.y/kernel/trace/trace_events_filter.c' l='806'>/**
 * filter_parse_regex - parse a basic regex
 * @buff:   the raw regex
 * @len:    length of the regex
 * @search: will point to the beginning of the string to compare
 * @not:    tell whether the match will have to be inverted
 *
 * This passes in a buffer containing a regex and this function will
 * set search to point to the search part of the buffer and
 * return the type of search it is (see enum above).
 * This does modify buff.
 *
 * Returns enum type.
 *  search returns the pointer to use for comparison.
 *  not returns 1 if buff started with a &apos;!&apos;
 *     0 otherwise.
 */</doc>
