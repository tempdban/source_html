<dec f='linux-4.14.y/include/linux/uprobes.h' l='143' type='int arch_uprobe_post_xol(struct arch_uprobe * aup, struct pt_regs * regs)'/>
<def f='linux-4.14.y/arch/x86/kernel/uprobes.c' l='866' ll='901' type='int arch_uprobe_post_xol(struct arch_uprobe * auprobe, struct pt_regs * regs)'/>
<doc f='linux-4.14.y/arch/x86/kernel/uprobes.c' l='859'>/*
 * Called after single-stepping. To avoid the SMP problems that can
 * occur when we temporarily put back the original opcode to
 * single-step, we single-stepped a copy of the instruction.
 *
 * This function prepares to resume execution after the single-step.
 */</doc>
<use f='linux-4.14.y/kernel/events/uprobes.c' l='1948' u='c' c='handle_singlestep'/>
<dec f='linux-4.14.y/include/linux/uprobes.h' l='143' type='int arch_uprobe_post_xol(struct arch_uprobe * aup, struct pt_regs * regs)'/>
<def f='linux-4.14.y/arch/x86/kernel/uprobes.c' l='866' ll='901' type='int arch_uprobe_post_xol(struct arch_uprobe * auprobe, struct pt_regs * regs)'/>
<doc f='linux-4.14.y/arch/x86/kernel/uprobes.c' l='859'>/*
 * Called after single-stepping. To avoid the SMP problems that can
 * occur when we temporarily put back the original opcode to
 * single-step, we single-stepped a copy of the instruction.
 *
 * This function prepares to resume execution after the single-step.
 */</doc>
<use f='linux-4.14.y/kernel/events/uprobes.c' l='1948' u='c' c='handle_singlestep'/>
