<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='1137' type='int vmw_cotable_scrub(struct vmw_resource * res, bool readback)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='579' u='c' c='vmw_dx_context_scrub_cotables'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cotable.c' l='239' ll='295' type='int vmw_cotable_scrub(struct vmw_resource * res, bool readback)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cotable.c' l='221'>/**
 * vmw_cotable_scrub - Scrub the cotable from the device.
 *
 * @res: Pointer to the cotable resource.
 * @readback: Whether initiate a readback of the cotable data to the backup
 * buffer.
 *
 * In some situations (context swapouts) it might be desirable to make the
 * device forget about the cotable without performing a full unbind. A full
 * unbind requires reserved backup buffers and it might not be possible to
 * reserve them due to locking order violation issues. The vmw_cotable_scrub
 * function implements a partial unbind() without that requirement but with the
 * following restrictions.
 * 1) Before the cotable is again used by the GPU, vmw_cotable_unscrub() must
 *    be called.
 * 2) Before the cotable backing buffer is used by the CPU, or during the
 *    resource destruction, vmw_cotable_unbind() must be called.
 */</doc>
