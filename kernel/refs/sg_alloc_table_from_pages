<dec f='linux-4.14.y/include/linux/scatterlist.h' l='265' type='int sg_alloc_table_from_pages(struct sg_table * sgt, struct page ** pages, unsigned int n_pages, unsigned long offset, unsigned long size, gfp_t gfp_mask)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_prime.c' l='811' u='c' c='drm_prime_pages_to_sg'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_object.c' l='138' u='c' c='virtio_gpu_object_get_sg_table'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_buffer.c' l='425' u='c' c='vmw_ttm_map_dma'/>
<def f='linux-4.14.y/lib/scatterlist.c' l='392' ll='433' type='int sg_alloc_table_from_pages(struct sg_table * sgt, struct page ** pages, unsigned int n_pages, unsigned long offset, unsigned long size, gfp_t gfp_mask)'/>
<dec f='linux-4.14.y/lib/scatterlist.c' l='434' type='int sg_alloc_table_from_pages(struct sg_table * , struct page ** , unsigned int , unsigned long , unsigned long , gfp_t )'/>
<use f='linux-4.14.y/lib/scatterlist.c' l='434' c='sg_alloc_table_from_pages'/>
<use f='linux-4.14.y/lib/scatterlist.c' l='434' u='a'/>
<use f='linux-4.14.y/lib/scatterlist.c' l='434' u='a'/>
<doc f='linux-4.14.y/lib/scatterlist.c' l='372'>/**
 * sg_alloc_table_from_pages - Allocate and initialize an sg table from
 *			       an array of pages
 * @sgt:	The sg table header to use
 * @pages:	Pointer to an array of page pointers
 * @n_pages:	Number of pages in the pages array
 * @offset:     Offset from start of the first page to the start of a buffer
 * @size:       Number of valid bytes in the buffer (after offset)
 * @gfp_mask:	GFP allocation mask
 *
 *  Description:
 *    Allocate and initialize an sg table from a list of pages. Contiguous
 *    ranges of the pages are squashed into a single scatterlist node. A user
 *    may provide an offset at a start and a size of valid data in a buffer
 *    specified by the page array. The returned sg table is released by
 *    sg_free_table.
 *
 * Returns:
 *   0 on success, negative error on failure
 */</doc>
<dec f='linux-4.14.y/include/linux/scatterlist.h' l='265' type='int sg_alloc_table_from_pages(struct sg_table * sgt, struct page ** pages, unsigned int n_pages, unsigned long offset, unsigned long size, gfp_t gfp_mask)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_prime.c' l='811' u='c' c='drm_prime_pages_to_sg'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_object.c' l='138' u='c' c='virtio_gpu_object_get_sg_table'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_buffer.c' l='425' u='c' c='vmw_ttm_map_dma'/>
<def f='linux-4.14.y/lib/scatterlist.c' l='392' ll='433' type='int sg_alloc_table_from_pages(struct sg_table * sgt, struct page ** pages, unsigned int n_pages, unsigned long offset, unsigned long size, gfp_t gfp_mask)'/>
<dec f='linux-4.14.y/lib/scatterlist.c' l='434' type='int sg_alloc_table_from_pages(struct sg_table * , struct page ** , unsigned int , unsigned long , unsigned long , gfp_t )'/>
<use f='linux-4.14.y/lib/scatterlist.c' l='434' c='sg_alloc_table_from_pages'/>
<use f='linux-4.14.y/lib/scatterlist.c' l='434' u='a'/>
<use f='linux-4.14.y/lib/scatterlist.c' l='434' u='a'/>
<doc f='linux-4.14.y/lib/scatterlist.c' l='372'>/**
 * sg_alloc_table_from_pages - Allocate and initialize an sg table from
 *			       an array of pages
 * @sgt:	The sg table header to use
 * @pages:	Pointer to an array of page pointers
 * @n_pages:	Number of pages in the pages array
 * @offset:     Offset from start of the first page to the start of a buffer
 * @size:       Number of valid bytes in the buffer (after offset)
 * @gfp_mask:	GFP allocation mask
 *
 *  Description:
 *    Allocate and initialize an sg table from a list of pages. Contiguous
 *    ranges of the pages are squashed into a single scatterlist node. A user
 *    may provide an offset at a start and a size of valid data in a buffer
 *    specified by the page array. The returned sg table is released by
 *    sg_free_table.
 *
 * Returns:
 *   0 on success, negative error on failure
 */</doc>
