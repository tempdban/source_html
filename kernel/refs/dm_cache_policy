<def f='linux-4.14.y/drivers/md/dm-cache-policy.h' l='39' ll='141'/>
<size>128</size>
<doc f='linux-4.14.y/drivers/md/dm-cache-policy.h' l='35'>/*
 * The cache policy object.  It is envisaged that this structure will be
 * embedded in a bigger, policy specific structure (ie. use container_of()).
 */</doc>
<mbr r='dm_cache_policy::destroy' o='0' t='void (*)(struct dm_cache_policy *)'/>
<mbr r='dm_cache_policy::lookup' o='64' t='int (*)(struct dm_cache_policy *, dm_oblock_t, dm_cblock_t *, int, bool, bool *)'/>
<mbr r='dm_cache_policy::lookup_with_work' o='128' t='int (*)(struct dm_cache_policy *, dm_oblock_t, dm_cblock_t *, int, bool, struct policy_work **)'/>
<mbr r='dm_cache_policy::get_background_work' o='192' t='int (*)(struct dm_cache_policy *, bool, struct policy_work **)'/>
<mbr r='dm_cache_policy::complete_background_work' o='256' t='void (*)(struct dm_cache_policy *, struct policy_work *, bool)'/>
<mbr r='dm_cache_policy::set_dirty' o='320' t='void (*)(struct dm_cache_policy *, dm_cblock_t)'/>
<mbr r='dm_cache_policy::clear_dirty' o='384' t='void (*)(struct dm_cache_policy *, dm_cblock_t)'/>
<mbr r='dm_cache_policy::load_mapping' o='448' t='int (*)(struct dm_cache_policy *, dm_oblock_t, dm_cblock_t, bool, uint32_t, bool)'/>
<mbr r='dm_cache_policy::invalidate_mapping' o='512' t='int (*)(struct dm_cache_policy *, dm_cblock_t)'/>
<mbr r='dm_cache_policy::get_hint' o='576' t='uint32_t (*)(struct dm_cache_policy *, dm_cblock_t)'/>
<mbr r='dm_cache_policy::residency' o='640' t='dm_cblock_t (*)(struct dm_cache_policy *)'/>
<mbr r='dm_cache_policy::tick' o='704' t='void (*)(struct dm_cache_policy *, bool)'/>
<mbr r='dm_cache_policy::emit_config_values' o='768' t='int (*)(struct dm_cache_policy *, char *, unsigned int, ssize_t *)'/>
<mbr r='dm_cache_policy::set_config_value' o='832' t='int (*)(struct dm_cache_policy *, const char *, const char *)'/>
<mbr r='dm_cache_policy::allow_migrations' o='896' t='void (*)(struct dm_cache_policy *, bool)'/>
<mbr r='dm_cache_policy::private' o='960' t='void *'/>
<def f='linux-4.14.y/drivers/md/dm-cache-policy.h' l='39' ll='141'/>
<size>128</size>
<doc f='linux-4.14.y/drivers/md/dm-cache-policy.h' l='35'>/*
 * The cache policy object.  It is envisaged that this structure will be
 * embedded in a bigger, policy specific structure (ie. use container_of()).
 */</doc>
<mbr r='dm_cache_policy::destroy' o='0' t='void (*)(struct dm_cache_policy *)'/>
<mbr r='dm_cache_policy::lookup' o='64' t='int (*)(struct dm_cache_policy *, dm_oblock_t, dm_cblock_t *, int, bool, bool *)'/>
<mbr r='dm_cache_policy::lookup_with_work' o='128' t='int (*)(struct dm_cache_policy *, dm_oblock_t, dm_cblock_t *, int, bool, struct policy_work **)'/>
<mbr r='dm_cache_policy::get_background_work' o='192' t='int (*)(struct dm_cache_policy *, bool, struct policy_work **)'/>
<mbr r='dm_cache_policy::complete_background_work' o='256' t='void (*)(struct dm_cache_policy *, struct policy_work *, bool)'/>
<mbr r='dm_cache_policy::set_dirty' o='320' t='void (*)(struct dm_cache_policy *, dm_cblock_t)'/>
<mbr r='dm_cache_policy::clear_dirty' o='384' t='void (*)(struct dm_cache_policy *, dm_cblock_t)'/>
<mbr r='dm_cache_policy::load_mapping' o='448' t='int (*)(struct dm_cache_policy *, dm_oblock_t, dm_cblock_t, bool, uint32_t, bool)'/>
<mbr r='dm_cache_policy::invalidate_mapping' o='512' t='int (*)(struct dm_cache_policy *, dm_cblock_t)'/>
<mbr r='dm_cache_policy::get_hint' o='576' t='uint32_t (*)(struct dm_cache_policy *, dm_cblock_t)'/>
<mbr r='dm_cache_policy::residency' o='640' t='dm_cblock_t (*)(struct dm_cache_policy *)'/>
<mbr r='dm_cache_policy::tick' o='704' t='void (*)(struct dm_cache_policy *, bool)'/>
<mbr r='dm_cache_policy::emit_config_values' o='768' t='int (*)(struct dm_cache_policy *, char *, unsigned int, ssize_t *)'/>
<mbr r='dm_cache_policy::set_config_value' o='832' t='int (*)(struct dm_cache_policy *, const char *, const char *)'/>
<mbr r='dm_cache_policy::allow_migrations' o='896' t='void (*)(struct dm_cache_policy *, bool)'/>
<mbr r='dm_cache_policy::private' o='960' t='void *'/>
