<dec f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_mac.h' l='47' type='s32 igb_check_alt_mac_addr(struct e1000_hw * hw)'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1516' u='c' c='igb_reset_hw_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1864' u='c' c='igb_read_mac_addr_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='2338' u='c' c='igb_reset_hw_82580'/>
<def f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_mac.c' l='286' ll='344' type='s32 igb_check_alt_mac_addr(struct e1000_hw * hw)'/>
<doc f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_mac.c' l='275'>/**
 *  igb_check_alt_mac_addr - Check for alternate MAC addr
 *  @hw: pointer to the HW structure
 *
 *  Checks the nvm for an alternate MAC address.  An alternate MAC address
 *  can be setup by pre-boot software and must be treated like a permanent
 *  address and must override the actual permanent MAC address.  If an
 *  alternate MAC address is found it is saved in the hw struct and
 *  programmed into RAR0 and the function returns success, otherwise the
 *  function returns an error.
 **/</doc>
