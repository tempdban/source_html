<dec f='linux-4.18.y/include/linux/ptrace.h' l='13' type='int ptrace_access_vm(struct task_struct * tsk, unsigned long addr, void * buf, int len, unsigned int gup_flags)'/>
<def f='linux-4.18.y/kernel/ptrace.c' l='38' ll='60' type='int ptrace_access_vm(struct task_struct * tsk, unsigned long addr, void * buf, int len, unsigned int gup_flags)'/>
<use f='linux-4.18.y/kernel/ptrace.c' l='582' u='c' c='ptrace_readdata'/>
<use f='linux-4.18.y/kernel/ptrace.c' l='610' u='c' c='ptrace_writedata'/>
<use f='linux-4.18.y/kernel/ptrace.c' l='1161' u='c' c='generic_ptrace_peekdata'/>
<use f='linux-4.18.y/kernel/ptrace.c' l='1172' u='c' c='generic_ptrace_pokedata'/>
<use f='linux-4.18.y/kernel/ptrace.c' l='1190' u='c' c='compat_ptrace_request'/>
<use f='linux-4.18.y/kernel/ptrace.c' l='1200' u='c' c='compat_ptrace_request'/>
<doc f='linux-4.18.y/kernel/ptrace.c' l='33'>/*
 * Access another process&apos; address space via ptrace.
 * Source/target buffer must be kernel space,
 * Do not walk the page table directly, use get_user_pages
 */</doc>
