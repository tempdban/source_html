<def f='linux-4.14.y/include/linux/seqlock.h' l='108' ll='119' type='unsigned int __read_seqcount_begin(const seqcount_t * s)'/>
<use f='linux-4.14.y/include/linux/seqlock.h' l='148' u='c' c='raw_read_seqcount_begin'/>
<doc f='linux-4.14.y/include/linux/seqlock.h' l='95'>/**
 * __read_seqcount_begin - begin a seq-read critical section (without barrier)
 * @s: pointer to seqcount_t
 * Returns: count to be passed to read_seqcount_retry
 *
 * __read_seqcount_begin is like read_seqcount_begin, but has no smp_rmb()
 * barrier. Callers should ensure that smp_rmb() or equivalent ordering is
 * provided before actually loading any of the variables that are to be
 * protected in this critical section.
 *
 * Use carefully, only in critical code, and comment how the barrier is
 * provided.
 */</doc>
<use f='linux-4.14.y/fs/namei.c' l='837' u='c' c='set_root'/>
<use f='linux-4.14.y/fs/namei.c' l='2161' u='c' c='path_init'/>
<use f='linux-4.14.y/fs/namei.c' l='2195' u='c' c='path_init'/>
