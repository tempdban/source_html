<def f='linux-4.18.y/include/linux/rhashtable.h' l='725' ll='825' type='void * __rhashtable_insert_fast(struct rhashtable * ht, const void * key, struct rhash_head * obj, const struct rhashtable_params params, bool rhlist)'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='848' u='c' c='rhashtable_insert_fast'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='875' u='c' c='rhltable_insert_key'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='934' u='c' c='rhashtable_lookup_insert_fast'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='960' u='c' c='rhashtable_lookup_get_insert_fast'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='993' u='c' c='rhashtable_lookup_insert_key'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='1017' u='c' c='rhashtable_lookup_get_insert_key'/>
<doc f='linux-4.18.y/include/linux/rhashtable.h' l='721'>/* Internal function, please use rhashtable_insert_fast() instead. This
 * function returns the existing element already in hashes in there is a clash,
 * otherwise it returns an error via ERR_PTR().
 */</doc>
