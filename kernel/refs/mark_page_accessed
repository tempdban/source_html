<dec f='linux-4.14.y/include/linux/swap.h' l='319' type='void mark_page_accessed(struct page * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='615' u='c' c='drm_gem_put_pages'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_tt.c' l='362' u='c' c='ttm_tt_swapout'/>
<use f='linux-4.14.y/fs/buffer.c' l='66' u='c' c='touch_buffer'/>
<use f='linux-4.14.y/mm/filemap.c' l='1468' u='c' c='pagecache_get_page'/>
<use f='linux-4.14.y/mm/filemap.c' l='2065' u='c' c='generic_file_buffered_read'/>
<use f='linux-4.14.y/mm/filemap.c' l='2757' u='c' c='do_read_cache_page'/>
<use f='linux-4.14.y/mm/gup.c' l='173' u='c' c='follow_page_pte'/>
<use f='linux-4.14.y/mm/memory.c' l='1330' u='c' c='zap_pte_range'/>
<use f='linux-4.14.y/mm/shmem.c' l='1638' u='c' c='shmem_getpage_gfp'/>
<use f='linux-4.14.y/mm/shmem.c' l='1730' u='c' c='shmem_getpage_gfp'/>
<use f='linux-4.14.y/mm/shmem.c' l='2497' u='c' c='shmem_file_read_iter'/>
<use f='linux-4.14.y/mm/shmem.c' l='3267' u='c' c='shmem_put_link'/>
<def f='linux-4.14.y/mm/swap.c' l='376' ll='400' type='void mark_page_accessed(struct page * page)'/>
<dec f='linux-4.14.y/mm/swap.c' l='401' type='void mark_page_accessed(struct page * )'/>
<use f='linux-4.14.y/mm/swap.c' l='401' c='mark_page_accessed'/>
<use f='linux-4.14.y/mm/swap.c' l='401' u='a'/>
<use f='linux-4.14.y/mm/swap.c' l='401' u='a'/>
<doc f='linux-4.14.y/mm/swap.c' l='366'>/*
 * Mark a page as having seen activity.
 *
 * inactive,unreferenced	-&gt;	inactive,referenced
 * inactive,referenced		-&gt;	active,unreferenced
 * active,unreferenced		-&gt;	active,referenced
 *
 * When a newly allocated page is not yet visible, so safe for non-atomic ops,
 * __SetPageReferenced(page) may be substituted for mark_page_accessed(page).
 */</doc>
<dec f='linux-4.14.y/include/linux/swap.h' l='319' type='void mark_page_accessed(struct page * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='615' u='c' c='drm_gem_put_pages'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_tt.c' l='362' u='c' c='ttm_tt_swapout'/>
<use f='linux-4.14.y/fs/buffer.c' l='66' u='c' c='touch_buffer'/>
<use f='linux-4.14.y/mm/filemap.c' l='1468' u='c' c='pagecache_get_page'/>
<use f='linux-4.14.y/mm/filemap.c' l='2065' u='c' c='generic_file_buffered_read'/>
<use f='linux-4.14.y/mm/filemap.c' l='2757' u='c' c='do_read_cache_page'/>
<use f='linux-4.14.y/mm/gup.c' l='173' u='c' c='follow_page_pte'/>
<use f='linux-4.14.y/mm/memory.c' l='1330' u='c' c='zap_pte_range'/>
<use f='linux-4.14.y/mm/shmem.c' l='1638' u='c' c='shmem_getpage_gfp'/>
<use f='linux-4.14.y/mm/shmem.c' l='1730' u='c' c='shmem_getpage_gfp'/>
<use f='linux-4.14.y/mm/shmem.c' l='2497' u='c' c='shmem_file_read_iter'/>
<use f='linux-4.14.y/mm/shmem.c' l='3267' u='c' c='shmem_put_link'/>
<def f='linux-4.14.y/mm/swap.c' l='376' ll='400' type='void mark_page_accessed(struct page * page)'/>
<dec f='linux-4.14.y/mm/swap.c' l='401' type='void mark_page_accessed(struct page * )'/>
<use f='linux-4.14.y/mm/swap.c' l='401' c='mark_page_accessed'/>
<use f='linux-4.14.y/mm/swap.c' l='401' u='a'/>
<use f='linux-4.14.y/mm/swap.c' l='401' u='a'/>
<doc f='linux-4.14.y/mm/swap.c' l='366'>/*
 * Mark a page as having seen activity.
 *
 * inactive,unreferenced	-&gt;	inactive,referenced
 * inactive,referenced		-&gt;	active,unreferenced
 * active,unreferenced		-&gt;	active,referenced
 *
 * When a newly allocated page is not yet visible, so safe for non-atomic ops,
 * __SetPageReferenced(page) may be substituted for mark_page_accessed(page).
 */</doc>
