<dec f='linux-4.18.y/include/linux/ring_buffer.h' l='165' type='void ring_buffer_record_off(struct ring_buffer * buffer)'/>
<def f='linux-4.18.y/kernel/trace/ring_buffer.c' l='3185' ll='3194' type='void ring_buffer_record_off(struct ring_buffer * buffer)'/>
<dec f='linux-4.18.y/kernel/trace/ring_buffer.c' l='3195' type='void ring_buffer_record_off(struct ring_buffer * )'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='3195' c='ring_buffer_record_off'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='3195' u='a'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='3195' u='a'/>
<doc f='linux-4.18.y/kernel/trace/ring_buffer.c' l='3174'>/**
 * ring_buffer_record_off - stop all writes into the buffer
 * @buffer: The ring buffer to stop writes to.
 *
 * This prevents all writes to the buffer. Any attempt to write
 * to the buffer after this will fail and return NULL.
 *
 * This is different than ring_buffer_record_disable() as
 * it works like an on/off switch, where as the disable() version
 * must be paired with a enable().
 */</doc>
<use f='linux-4.18.y/kernel/trace/trace.c' l='1050' u='c' c='tracer_tracing_off'/>
