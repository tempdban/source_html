<dec f='linux-4.14.y/include/linux/acpi.h' l='411' type='bool acpi_dev_resource_memory(struct acpi_resource * ares, struct resource * res)'/>
<use f='linux-4.14.y/drivers/acpi/ioapic.c' l='58' u='c' c='setup_res'/>
<def f='linux-4.14.y/drivers/acpi/resource.c' l='113' ll='144' type='bool acpi_dev_resource_memory(struct acpi_resource * ares, struct resource * res)'/>
<dec f='linux-4.14.y/drivers/acpi/resource.c' l='145' type='bool acpi_dev_resource_memory(struct acpi_resource * , struct resource * )'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='145' c='acpi_dev_resource_memory'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='145' u='a'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='145' u='a'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='559' u='c' c='acpi_dev_process_resource'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='645' u='c' c='is_memory'/>
<doc f='linux-4.14.y/drivers/acpi/resource.c' l='99'>/**
 * acpi_dev_resource_memory - Extract ACPI memory resource information.
 * @ares: Input ACPI resource object.
 * @res: Output generic resource object.
 *
 * Check if the given ACPI resource object represents a memory resource and
 * if that&apos;s the case, use the information in it to populate the generic
 * resource object pointed to by @res.
 *
 * Return:
 * 1) false with res-&gt;flags setting to zero: not the expected resource type
 * 2) false with IORESOURCE_DISABLED in res-&gt;flags: valid unassigned resource
 * 3) true: valid assigned resource
 */</doc>
<use f='linux-4.14.y/drivers/acpi/scan.c' l='1629' u='c' c='acpi_get_resource_memory'/>
<use f='linux-4.14.y/drivers/pnp/pnpacpi/rsparser.c' l='233' u='c' c='pnpacpi_allocated_resource'/>
