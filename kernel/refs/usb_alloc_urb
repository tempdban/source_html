<dec f='linux-4.18.y/include/linux/usb.h' l='1701' type='struct urb * usb_alloc_urb(int iso_packets, gfp_t mem_flags)'/>
<use f='linux-4.18.y/drivers/hid/usbhid/hid-core.c' l='1123' u='c' c='usbhid_start'/>
<use f='linux-4.18.y/drivers/hid/usbhid/hid-core.c' l='1133' u='c' c='usbhid_start'/>
<use f='linux-4.18.y/drivers/hid/usbhid/hid-core.c' l='1143' u='c' c='usbhid_start'/>
<use f='linux-4.18.y/drivers/usb/class/cdc-acm.c' l='1358' u='c' c='acm_probe'/>
<use f='linux-4.18.y/drivers/usb/class/cdc-acm.c' l='1373' u='c' c='acm_probe'/>
<use f='linux-4.18.y/drivers/usb/class/cdc-acm.c' l='1395' u='c' c='acm_probe'/>
<use f='linux-4.18.y/drivers/usb/core/devio.c' l='366' u='c' c='alloc_async'/>
<use f='linux-4.18.y/drivers/usb/core/hub.c' l='1577' u='c' c='hub_configure'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='94' u='c' c='usb_internal_control_msg'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='239' u='c' c='usb_bulk_msg'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='405' u='c' c='usb_sg_init'/>
<def f='linux-4.18.y/drivers/usb/core/urb.c' l='69' ll='80' type='struct urb * usb_alloc_urb(int iso_packets, gfp_t mem_flags)'/>
<dec f='linux-4.18.y/drivers/usb/core/urb.c' l='81' type='struct urb * usb_alloc_urb(int , gfp_t )'/>
<use f='linux-4.18.y/drivers/usb/core/urb.c' l='81' c='usb_alloc_urb'/>
<use f='linux-4.18.y/drivers/usb/core/urb.c' l='81' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/urb.c' l='81' u='a'/>
<doc f='linux-4.18.y/drivers/usb/core/urb.c' l='53'>/**
 * usb_alloc_urb - creates a new urb for a USB driver to use
 * @iso_packets: number of iso packets for this urb
 * @mem_flags: the type of memory to allocate, see kmalloc() for a list of
 *	valid options for this.
 *
 * Creates an urb for the USB driver to use, initializes a few internal
 * structures, increments the usage counter, and returns a pointer to it.
 *
 * If the driver want to use this urb for interrupt, control, or bulk
 * endpoints, pass &apos;0&apos; as the number of iso packets.
 *
 * The driver must call usb_free_urb() when it is finished with the urb.
 *
 * Return: A pointer to the new urb, or %NULL if no memory is available.
 */</doc>
<use f='linux-4.18.y/drivers/usb/storage/usb.c' l='775' u='c' c='usb_stor_acquire_resources'/>
