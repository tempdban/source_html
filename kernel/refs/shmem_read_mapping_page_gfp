<dec f='linux-4.18.y/include/linux/shmem_fs.h' l='72' type='struct page * shmem_read_mapping_page_gfp(struct address_space * mapping, unsigned long index, gfp_t gfp_mask)'/>
<use f='linux-4.18.y/include/linux/shmem_fs.h' l='97' u='c' c='shmem_read_mapping_page'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_tt.c' l='376' u='c' c='ttm_tt_swapin'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_tt.c' l='435' u='c' c='ttm_tt_swapout'/>
<def f='linux-4.18.y/mm/shmem.c' l='4051' ll='4073' type='struct page * shmem_read_mapping_page_gfp(struct address_space * mapping, unsigned long index, gfp_t gfp)'/>
<dec f='linux-4.18.y/mm/shmem.c' l='4074' type='struct page * shmem_read_mapping_page_gfp(struct address_space * , unsigned long , gfp_t )'/>
<use f='linux-4.18.y/mm/shmem.c' l='4074' c='shmem_read_mapping_page_gfp'/>
<use f='linux-4.18.y/mm/shmem.c' l='4074' u='a'/>
<use f='linux-4.18.y/mm/shmem.c' l='4074' u='a'/>
<doc f='linux-4.18.y/mm/shmem.c' l='4036'>/**
 * shmem_read_mapping_page_gfp - read into page cache, using specified page allocation flags.
 * @mapping:	the page&apos;s address_space
 * @index:	the page index
 * @gfp:	the page allocator flags to use if allocating
 *
 * This behaves as a tmpfs &quot;read_cache_page_gfp(mapping, index, gfp)&quot;,
 * with any new page allocations done using the specified allocation flags.
 * But read_cache_page_gfp() uses the -&gt;readpage() method: which does not
 * suit tmpfs, since it may have pages in swapcache, and needs to find those
 * for itself; although drivers/gpu/drm i915 and ttm rely upon this support.
 *
 * i915_gem_object_get_pages_gtt() mixes __GFP_NORETRY | __GFP_NOWARN in
 * with the mapping_gfp_mask(), to avoid OOMing the machine unnecessarily.
 */</doc>
