<dec f='linux-4.14.y/include/linux/mm.h' l='1439' type='int __set_page_dirty_nobuffers(struct page * page)'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='3844' u='c' c='ext4_journalled_set_page_dirty'/>
<use f='linux-4.14.y/fs/fuse/file.c' l='3054'/>
<use f='linux-4.14.y/fs/fuse/file.c' l='3054'/>
<use f='linux-4.14.y/fs/ntfs/aops.c' l='1704'/>
<use f='linux-4.14.y/fs/ntfs/aops.c' l='1704'/>
<use f='linux-4.14.y/fs/ntfs/aops.c' l='1768' u='c' c='mark_ntfs_record_dirty'/>
<use f='linux-4.14.y/fs/ntfs/file.c' l='1677' u='c' c='ntfs_commit_pages_after_write'/>
<def f='linux-4.14.y/mm/page-writeback.c' l='2475' ll='2504' type='int __set_page_dirty_nobuffers(struct page * page)'/>
<dec f='linux-4.14.y/mm/page-writeback.c' l='2505' type='int __set_page_dirty_nobuffers(struct page * )'/>
<use f='linux-4.14.y/mm/page-writeback.c' l='2505' c='__set_page_dirty_nobuffers'/>
<use f='linux-4.14.y/mm/page-writeback.c' l='2505' u='a'/>
<use f='linux-4.14.y/mm/page-writeback.c' l='2505' u='a'/>
<use f='linux-4.14.y/mm/page-writeback.c' l='2542' u='c' c='redirty_page_for_writepage'/>
<doc f='linux-4.14.y/mm/page-writeback.c' l='2463'>/*
 * For address_spaces which do not use buffers.  Just tag the page as dirty in
 * its radix tree.
 *
 * This is also used when a single buffer is being dirtied: we want to set the
 * page dirty in that case, but not all the buffers.  This is a &quot;bottom-up&quot;
 * dirtying, whereas __set_page_dirty_buffers() is a &quot;top-down&quot; dirtying.
 *
 * The caller must ensure this doesn&apos;t race with truncation.  Most will simply
 * hold the page lock, but e.g. zap_pte_range() calls with the page mapped and
 * the pte lock held, which also locks out truncation.
 */</doc>
