<dec f='linux-4.18.y/include/drm/drm_bridge.h' l='284' type='int drm_bridge_attach(struct drm_encoder * encoder, struct drm_bridge * bridge, struct drm_bridge * previous)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_bridge.c' l='110' ll='142' type='int drm_bridge_attach(struct drm_encoder * encoder, struct drm_bridge * bridge, struct drm_bridge * previous)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_bridge.c' l='143' type='int drm_bridge_attach(struct drm_encoder * , struct drm_bridge * , struct drm_bridge * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_bridge.c' l='143' c='drm_bridge_attach'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_bridge.c' l='143' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_bridge.c' l='143' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_bridge.c' l='92'>/**
 * drm_bridge_attach - attach the bridge to an encoder&apos;s chain
 *
 * @encoder: DRM encoder
 * @bridge: bridge to attach
 * @previous: previous bridge in the chain (optional)
 *
 * Called by a kms driver to link the bridge to an encoder&apos;s chain. The previous
 * argument specifies the previous bridge in the chain. If NULL, the bridge is
 * linked directly at the encoder&apos;s output. Otherwise it is linked at the
 * previous bridge&apos;s output.
 *
 * If non-NULL the previous bridge must be already attached by a call to this
 * function.
 *
 * RETURNS:
 * Zero on success, error code on failure
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='226' u='c' c='drm_simple_display_pipe_attach_bridge'/>
