<dec f='linux-4.18.y/include/linux/pci.h' l='1710' type='int pci_mmap_resource_range(struct pci_dev * dev, int bar, struct vm_area_struct * vma, enum pci_mmap_state mmap_state, int write_combine)'/>
<doc f='linux-4.18.y/include/linux/pci.h' l='1698'>/* These two functions provide almost identical functionality. Depennding
 * on the architecture, one will be implemented as a wrapper around the
 * other (in drivers/pci/mmap.c).
 *
 * pci_mmap_resource_range() maps a specific BAR, and vm-&gt;vm_pgoff
 * is expected to be an offset within that region.
 *
 * pci_mmap_page_range() is the legacy architecture-specific interface,
 * which accepts a &quot;user visible&quot; resource address converted by
 * pci_resource_to_user(), as used in the legacy mmap() interface in
 * /proc/bus/pci/.
 */</doc>
<use f='linux-4.18.y/drivers/pci/mmap.c' l='32' u='c' c='pci_mmap_page_range'/>
<def f='linux-4.18.y/drivers/pci/mmap.c' l='43' ll='71' type='int pci_mmap_resource_range(struct pci_dev * pdev, int bar, struct vm_area_struct * vma, enum pci_mmap_state mmap_state, int write_combine)'/>
<use f='linux-4.18.y/drivers/pci/pci-sysfs.c' l='1179' u='c' c='pci_mmap_resource'/>
