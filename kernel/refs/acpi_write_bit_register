<dec f='linux-4.18.y/include/acpi/acpixf.h' l='849' type='acpi_status acpi_write_bit_register(u32 register_id, u32 value)'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evevent.c' l='143' u='c' c='acpi_ev_fixed_event_initialize'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evevent.c' l='243' u='c' c='acpi_ev_fixed_event_dispatch'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evevent.c' l='251' u='c' c='acpi_ev_fixed_event_dispatch'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evglock.c' l='293' u='c' c='acpi_ev_release_global_lock'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evxfevnt.c' l='166' u='c' c='acpi_enable_event'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evxfevnt.c' l='229' u='c' c='acpi_disable_event'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evxfevnt.c' l='288' u='c' c='acpi_clear_event'/>
<use f='linux-4.18.y/drivers/acpi/acpica/hwsleep.c' l='48' u='c' c='acpi_hw_legacy_sleep'/>
<use f='linux-4.18.y/drivers/acpi/acpica/hwsleep.c' l='287' u='c' c='acpi_hw_legacy_wake'/>
<use f='linux-4.18.y/drivers/acpi/acpica/hwsleep.c' l='294' u='c' c='acpi_hw_legacy_wake'/>
<use f='linux-4.18.y/drivers/acpi/acpica/hwsleep.c' l='299' u='c' c='acpi_hw_legacy_wake'/>
<def f='linux-4.18.y/drivers/acpi/acpica/hwxface.c' l='214' ll='293' type='acpi_status acpi_write_bit_register(u32 register_id, u32 value)'/>
<dec f='linux-4.18.y/drivers/acpi/acpica/hwxface.c' l='295' type='acpi_status acpi_write_bit_register(u32 , u32 )'/>
<use f='linux-4.18.y/drivers/acpi/acpica/hwxface.c' l='295' c='acpi_write_bit_register'/>
<use f='linux-4.18.y/drivers/acpi/acpica/hwxface.c' l='295' u='a'/>
<use f='linux-4.18.y/drivers/acpi/acpica/hwxface.c' l='295' u='a'/>
<doc f='linux-4.18.y/drivers/acpi/acpica/hwxface.c' l='193'>/*******************************************************************************
 *
 * FUNCTION:    acpi_write_bit_register
 *
 * PARAMETERS:  register_id     - ID of ACPI Bit Register to access
 *              value           - Value to write to the register, in bit
 *                                position zero. The bit is automatically
 *                                shifted to the correct position.
 *
 * RETURN:      Status
 *
 * DESCRIPTION: ACPI Bit Register write function. Acquires the hardware lock
 *              since most operations require a read/modify/write sequence.
 *
 * SUPPORTS:    Bit fields in PM1 Status, PM1 Enable, PM1 Control, and
 *              PM2 Control.
 *
 * Note that at this level, the fact that there may be actually two
 * hardware registers (A and B - and B may not exist) is abstracted.
 *
 ******************************************************************************/</doc>
<use f='linux-4.18.y/drivers/acpi/acpica/hwxfsleep.c' l='167' u='c' c='acpi_enter_sleep_state_s4bios'/>
<use f='linux-4.18.y/drivers/acpi/processor_idle.c' l='542' u='c' c='acpi_processor_power_verify_c3'/>
<use f='linux-4.18.y/drivers/acpi/processor_idle.c' l='635' u='c' c='acpi_idle_bm_check'/>
<use f='linux-4.18.y/drivers/acpi/processor_idle.c' l='740' u='c' c='acpi_idle_enter_bm'/>
<use f='linux-4.18.y/drivers/acpi/processor_idle.c' l='749' u='c' c='acpi_idle_enter_bm'/>
