<dec f='linux-4.18.y/include/linux/sched/signal.h' l='318' type='int force_sig_info(int , struct siginfo * , struct task_struct * )'/>
<use f='linux-4.18.y/include/linux/tracehook.h' l='129' u='c' c='tracehook_report_syscall_exit'/>
<use f='linux-4.18.y/arch/x86/entry/vsyscall/vsyscall_64.c' l='116' u='c' c='write_ok_or_segv'/>
<use f='linux-4.18.y/arch/x86/kernel/ptrace.c' l='1400' u='c' c='send_sigtrap'/>
<use f='linux-4.18.y/arch/x86/kernel/traps.c' l='281' u='c' c='do_trap'/>
<use f='linux-4.18.y/arch/x86/kernel/traps.c' l='577' u='c' c='do_general_protection'/>
<use f='linux-4.18.y/arch/x86/kernel/traps.c' l='871' u='c' c='math_error'/>
<use f='linux-4.18.y/arch/x86/kernel/umip.c' l='286' u='c' c='force_sig_info_umip_fault'/>
<use f='linux-4.18.y/arch/x86/kernel/uprobes.c' l='1089' u='c' c='arch_uretprobe_hijack_return_addr'/>
<use f='linux-4.18.y/arch/x86/mm/fault.c' l='225' u='c' c='force_sig_info_fault'/>
<use f='linux-4.18.y/kernel/events/uprobes.c' l='1857' u='c' c='handle_trampoline'/>
<use f='linux-4.18.y/kernel/events/uprobes.c' l='1965' u='c' c='handle_singlestep'/>
<use f='linux-4.18.y/kernel/seccomp.c' l='547' u='c' c='seccomp_send_sigsys'/>
<def f='linux-4.18.y/kernel/signal.c' l='1188' ll='1216' type='int force_sig_info(int sig, struct siginfo * info, struct task_struct * t)'/>
<use f='linux-4.18.y/kernel/signal.c' l='1464' u='c' c='force_sig'/>
<use f='linux-4.18.y/kernel/signal.c' l='1506' u='c' c='force_sig_fault'/>
<use f='linux-4.18.y/kernel/signal.c' l='1543' u='c' c='force_sig_mceerr'/>
<use f='linux-4.18.y/kernel/signal.c' l='1572' u='c' c='force_sig_bnderr'/>
<use f='linux-4.18.y/kernel/signal.c' l='1586' u='c' c='force_sig_pkuerr'/>
<use f='linux-4.18.y/kernel/signal.c' l='1602' u='c' c='force_sig_ptrace_errno_trap'/>
<doc f='linux-4.18.y/kernel/signal.c' l='1177'>/*
 * Force a signal that the process can&apos;t ignore: if necessary
 * we unblock the signal and change any SIG_IGN to SIG_DFL.
 *
 * Note: If we unblock the signal, we always reset it to SIG_DFL,
 * since we do not want to have a signal handler that was blocked
 * be invoked when user space had explicitly blocked it.
 *
 * We don&apos;t want to have recursive SIGSEGV&apos;s etc, for example,
 * that is why we also clear SIGNAL_UNKILLABLE.
 */</doc>
