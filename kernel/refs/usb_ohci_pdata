<def f='linux-4.18.y/include/linux/usb/ohci_pdriver.h' l='34' ll='47'/>
<size>32</size>
<doc f='linux-4.18.y/include/linux/usb/ohci_pdriver.h' l='23'>/**
 * struct usb_ohci_pdata - platform_data for generic ohci driver
 *
 * @big_endian_desc:	BE descriptors
 * @big_endian_mmio:	BE registers
 * @no_big_frame_no:	no big endian frame_no shift
 * @num_ports:		number of ports
 *
 * These are general configuration options for the OHCI controller. All of
 * these options are activating more or less workarounds for some hardware.
 */</doc>
<mbr r='usb_ohci_pdata::big_endian_desc' o='0' t='unsigned int'/>
<mbr r='usb_ohci_pdata::big_endian_mmio' o='1' t='unsigned int'/>
<mbr r='usb_ohci_pdata::no_big_frame_no' o='2' t='unsigned int'/>
<mbr r='usb_ohci_pdata::num_ports' o='32' t='unsigned int'/>
<mbr r='usb_ohci_pdata::power_on' o='64' t='int (*)(struct platform_device *)'/>
<mbr r='usb_ohci_pdata::power_off' o='128' t='void (*)(struct platform_device *)'/>
<mbr r='usb_ohci_pdata::power_suspend' o='192' t='void (*)(struct platform_device *)'/>
