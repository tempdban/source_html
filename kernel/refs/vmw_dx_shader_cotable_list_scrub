<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='1096' type='void vmw_dx_shader_cotable_list_scrub(struct vmw_private * dev_priv, struct list_head * list, bool readback)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cotable.c' l='85' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cotable.c' l='85' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cotable.c' l='85' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_cotable.c' l='85' u='a'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_shader.c' l='559' ll='572' type='void vmw_dx_shader_cotable_list_scrub(struct vmw_private * dev_priv, struct list_head * list, bool readback)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_shader.c' l='548'>/**
 * vmw_dx_shader_cotable_list_scrub - The cotable unbind_func callback for
 * DX shaders.
 *
 * @dev_priv: Pointer to device private structure.
 * @list: The list of cotable resources.
 * @readback: Whether the call was part of a readback unbind.
 *
 * Scrubs all shader MOBs so that any subsequent shader unbind or shader
 * destroy operation won&apos;t need to swap in the context.
 */</doc>
