<dec f='linux-4.14.y/include/linux/libata.h' l='1862' type='void ata_sff_drain_fifo(struct ata_queued_cmd * qc)'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='67'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='67'/>
<def f='linux-4.14.y/drivers/ata/libata-sff.c' l='2136' ll='2155' type='void ata_sff_drain_fifo(struct ata_queued_cmd * qc)'/>
<dec f='linux-4.14.y/drivers/ata/libata-sff.c' l='2156' type='void ata_sff_drain_fifo(struct ata_queued_cmd * )'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='2156' c='ata_sff_drain_fifo'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='2156' u='a'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='2156' u='a'/>
<doc f='linux-4.14.y/drivers/ata/libata-sff.c' l='2126'>/**
 *	ata_sff_drain_fifo - Stock FIFO drain logic for SFF controllers
 *	@qc: command
 *
 *	Drain the FIFO and device of any stuck data following a command
 *	failing to complete. In some cases this is necessary before a
 *	reset will recover the device.
 *
 */</doc>
<dec f='linux-4.14.y/include/linux/libata.h' l='1862' type='void ata_sff_drain_fifo(struct ata_queued_cmd * qc)'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='67'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='67'/>
<def f='linux-4.14.y/drivers/ata/libata-sff.c' l='2136' ll='2155' type='void ata_sff_drain_fifo(struct ata_queued_cmd * qc)'/>
<dec f='linux-4.14.y/drivers/ata/libata-sff.c' l='2156' type='void ata_sff_drain_fifo(struct ata_queued_cmd * )'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='2156' c='ata_sff_drain_fifo'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='2156' u='a'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='2156' u='a'/>
<doc f='linux-4.14.y/drivers/ata/libata-sff.c' l='2126'>/**
 *	ata_sff_drain_fifo - Stock FIFO drain logic for SFF controllers
 *	@qc: command
 *
 *	Drain the FIFO and device of any stuck data following a command
 *	failing to complete. In some cases this is necessary before a
 *	reset will recover the device.
 *
 */</doc>
