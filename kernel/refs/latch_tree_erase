<def f='linux-4.14.y/include/linux/rbtree_latch.h' l='169' ll='178' type='void latch_tree_erase(struct latch_tree_node * node, struct latch_tree_root * root, const struct latch_tree_ops * ops)'/>
<doc f='linux-4.14.y/include/linux/rbtree_latch.h' l='153'>/**
 * latch_tree_erase() - removes @node from the trees @root
 * @node: nodes to remote
 * @root: trees to remove @node from
 * @ops: operators defining the node order
 *
 * Removes @node from the trees @root in an ordered fashion such that we can
 * always observe one complete tree. See the comment for
 * raw_write_seqcount_latch().
 *
 * It is assumed that @node will observe one RCU quiescent state before being
 * reused of freed.
 *
 * All modifications (latch_tree_insert, latch_tree_remove) are assumed to be
 * serialized.
 */</doc>
<use f='linux-4.14.y/kernel/module.c' l='172' u='c' c='__mod_tree_remove'/>
