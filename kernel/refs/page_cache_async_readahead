<dec f='linux-4.14.y/include/linux/mm.h' l='2248' type='void page_cache_async_readahead(struct address_space * mapping, struct file_ra_state * ra, struct file * filp, struct page * pg, unsigned long offset, unsigned long size)'/>
<use f='linux-4.14.y/mm/filemap.c' l='1988' u='c' c='generic_file_buffered_read'/>
<use f='linux-4.14.y/mm/filemap.c' l='2353' u='c' c='do_async_mmap_readahead'/>
<def f='linux-4.14.y/mm/readahead.c' l='529' ll='555' type='void page_cache_async_readahead(struct address_space * mapping, struct file_ra_state * ra, struct file * filp, struct page * page, unsigned long offset, unsigned long req_size)'/>
<dec f='linux-4.14.y/mm/readahead.c' l='556' type='void page_cache_async_readahead(struct address_space * , struct file_ra_state * , struct file * , struct page * , unsigned long , unsigned long )'/>
<use f='linux-4.14.y/mm/readahead.c' l='556' c='page_cache_async_readahead'/>
<use f='linux-4.14.y/mm/readahead.c' l='556' u='a'/>
<use f='linux-4.14.y/mm/readahead.c' l='556' u='a'/>
<doc f='linux-4.14.y/mm/readahead.c' l='514'>/**
 * page_cache_async_readahead - file readahead for marked pages
 * @mapping: address_space which holds the pagecache and I/O vectors
 * @ra: file_ra_state which holds the readahead state
 * @filp: passed on to -&gt;readpage() and -&gt;readpages()
 * @page: the page at @offset which has the PG_readahead flag set
 * @offset: start offset into @mapping, in pagecache page-sized units
 * @req_size: hint: total size of the read which the caller is performing in
 *            pagecache pages
 *
 * page_cache_async_readahead() should be called when a page is used which
 * has the PG_readahead flag; this is a marker to suggest that the application
 * has used up enough of the readahead window that we should start pulling in
 * more pages.
 */</doc>
<dec f='linux-4.14.y/include/linux/mm.h' l='2248' type='void page_cache_async_readahead(struct address_space * mapping, struct file_ra_state * ra, struct file * filp, struct page * pg, unsigned long offset, unsigned long size)'/>
<use f='linux-4.14.y/mm/filemap.c' l='1988' u='c' c='generic_file_buffered_read'/>
<use f='linux-4.14.y/mm/filemap.c' l='2353' u='c' c='do_async_mmap_readahead'/>
<def f='linux-4.14.y/mm/readahead.c' l='529' ll='555' type='void page_cache_async_readahead(struct address_space * mapping, struct file_ra_state * ra, struct file * filp, struct page * page, unsigned long offset, unsigned long req_size)'/>
<dec f='linux-4.14.y/mm/readahead.c' l='556' type='void page_cache_async_readahead(struct address_space * , struct file_ra_state * , struct file * , struct page * , unsigned long , unsigned long )'/>
<use f='linux-4.14.y/mm/readahead.c' l='556' c='page_cache_async_readahead'/>
<use f='linux-4.14.y/mm/readahead.c' l='556' u='a'/>
<use f='linux-4.14.y/mm/readahead.c' l='556' u='a'/>
<doc f='linux-4.14.y/mm/readahead.c' l='514'>/**
 * page_cache_async_readahead - file readahead for marked pages
 * @mapping: address_space which holds the pagecache and I/O vectors
 * @ra: file_ra_state which holds the readahead state
 * @filp: passed on to -&gt;readpage() and -&gt;readpages()
 * @page: the page at @offset which has the PG_readahead flag set
 * @offset: start offset into @mapping, in pagecache page-sized units
 * @req_size: hint: total size of the read which the caller is performing in
 *            pagecache pages
 *
 * page_cache_async_readahead() should be called when a page is used which
 * has the PG_readahead flag; this is a marker to suggest that the application
 * has used up enough of the readahead window that we should start pulling in
 * more pages.
 */</doc>
