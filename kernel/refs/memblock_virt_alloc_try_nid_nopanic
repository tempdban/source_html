<dec f='linux-4.18.y/include/linux/bootmem.h' l='167' type='void * memblock_virt_alloc_try_nid_nopanic(phys_addr_t size, phys_addr_t align, phys_addr_t min_addr, phys_addr_t max_addr, int nid)'/>
<use f='linux-4.18.y/include/linux/bootmem.h' l='194' u='c' c='memblock_virt_alloc_nopanic'/>
<use f='linux-4.18.y/include/linux/bootmem.h' l='211' u='c' c='memblock_virt_alloc_low_nopanic'/>
<use f='linux-4.18.y/include/linux/bootmem.h' l='220' u='c' c='memblock_virt_alloc_from_nopanic'/>
<use f='linux-4.18.y/include/linux/bootmem.h' l='235' u='c' c='memblock_virt_alloc_node_nopanic'/>
<use f='linux-4.18.y/mm/hugetlb.c' l='2104' u='c' c='__alloc_bootmem_huge_page'/>
<def f='linux-4.18.y/mm/memblock.c' l='1379' ll='1395' type='void * memblock_virt_alloc_try_nid_nopanic(phys_addr_t size, phys_addr_t align, phys_addr_t min_addr, phys_addr_t max_addr, int nid)'/>
<doc f='linux-4.18.y/mm/memblock.c' l='1362'>/**
 * memblock_virt_alloc_try_nid_nopanic - allocate boot memory block
 * @size: size of memory block to be allocated in bytes
 * @align: alignment of the region and block&apos;s size
 * @min_addr: the lower bound of the memory region from where the allocation
 *	  is preferred (phys address)
 * @max_addr: the upper bound of the memory region from where the allocation
 *	      is preferred (phys address), or %BOOTMEM_ALLOC_ACCESSIBLE to
 *	      allocate only from memory limited by memblock.current_limit value
 * @nid: nid of the free area to find, %NUMA_NO_NODE for any node
 *
 * Public function, provides additional debug information (including caller
 * info), if enabled. This function zeroes the allocated memory.
 *
 * RETURNS:
 * Virtual address of allocated memory block on success, NULL on failure.
 */</doc>
