<dec f='linux-4.14.y/include/linux/bootmem.h' l='164' type='void * memblock_virt_alloc_try_nid_nopanic(phys_addr_t size, phys_addr_t align, phys_addr_t min_addr, phys_addr_t max_addr, int nid)'/>
<use f='linux-4.14.y/include/linux/bootmem.h' l='183' u='c' c='memblock_virt_alloc_nopanic'/>
<use f='linux-4.14.y/include/linux/bootmem.h' l='200' u='c' c='memblock_virt_alloc_low_nopanic'/>
<use f='linux-4.14.y/include/linux/bootmem.h' l='209' u='c' c='memblock_virt_alloc_from_nopanic'/>
<use f='linux-4.14.y/include/linux/bootmem.h' l='224' u='c' c='memblock_virt_alloc_node_nopanic'/>
<doc f='linux-4.14.y/include/linux/bootmem.h' l='163'>/* FIXME: Move to memblock.h at a point where we remove nobootmem.c */</doc>
<def f='linux-4.14.y/mm/memblock.c' l='1332' ll='1342' type='void * memblock_virt_alloc_try_nid_nopanic(phys_addr_t size, phys_addr_t align, phys_addr_t min_addr, phys_addr_t max_addr, int nid)'/>
<doc f='linux-4.14.y/mm/memblock.c' l='1315'>/**
 * memblock_virt_alloc_try_nid_nopanic - allocate boot memory block
 * @size: size of memory block to be allocated in bytes
 * @align: alignment of the region and block&apos;s size
 * @min_addr: the lower bound of the memory region from where the allocation
 *	  is preferred (phys address)
 * @max_addr: the upper bound of the memory region from where the allocation
 *	      is preferred (phys address), or %BOOTMEM_ALLOC_ACCESSIBLE to
 *	      allocate only from memory limited by memblock.current_limit value
 * @nid: nid of the free area to find, %NUMA_NO_NODE for any node
 *
 * Public version of _memblock_virt_alloc_try_nid_nopanic() which provides
 * additional debug information (including caller info), if enabled.
 *
 * RETURNS:
 * Virtual address of allocated memory block on success, NULL on failure.
 */</doc>
<dec f='linux-4.14.y/include/linux/bootmem.h' l='164' type='void * memblock_virt_alloc_try_nid_nopanic(phys_addr_t size, phys_addr_t align, phys_addr_t min_addr, phys_addr_t max_addr, int nid)'/>
<use f='linux-4.14.y/include/linux/bootmem.h' l='183' u='c' c='memblock_virt_alloc_nopanic'/>
<use f='linux-4.14.y/include/linux/bootmem.h' l='200' u='c' c='memblock_virt_alloc_low_nopanic'/>
<use f='linux-4.14.y/include/linux/bootmem.h' l='209' u='c' c='memblock_virt_alloc_from_nopanic'/>
<use f='linux-4.14.y/include/linux/bootmem.h' l='224' u='c' c='memblock_virt_alloc_node_nopanic'/>
<doc f='linux-4.14.y/include/linux/bootmem.h' l='163'>/* FIXME: Move to memblock.h at a point where we remove nobootmem.c */</doc>
<use f='linux-4.14.y/mm/hugetlb.c' l='2102' u='c' c='__alloc_bootmem_huge_page'/>
<def f='linux-4.14.y/mm/memblock.c' l='1332' ll='1342' type='void * memblock_virt_alloc_try_nid_nopanic(phys_addr_t size, phys_addr_t align, phys_addr_t min_addr, phys_addr_t max_addr, int nid)'/>
<doc f='linux-4.14.y/mm/memblock.c' l='1315'>/**
 * memblock_virt_alloc_try_nid_nopanic - allocate boot memory block
 * @size: size of memory block to be allocated in bytes
 * @align: alignment of the region and block&apos;s size
 * @min_addr: the lower bound of the memory region from where the allocation
 *	  is preferred (phys address)
 * @max_addr: the upper bound of the memory region from where the allocation
 *	      is preferred (phys address), or %BOOTMEM_ALLOC_ACCESSIBLE to
 *	      allocate only from memory limited by memblock.current_limit value
 * @nid: nid of the free area to find, %NUMA_NO_NODE for any node
 *
 * Public version of _memblock_virt_alloc_try_nid_nopanic() which provides
 * additional debug information (including caller info), if enabled.
 *
 * RETURNS:
 * Virtual address of allocated memory block on success, NULL on failure.
 */</doc>
