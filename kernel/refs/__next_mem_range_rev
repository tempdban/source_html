<dec f='linux-4.14.y/include/linux/memblock.h' l='104' type='void __next_mem_range_rev(u64 * idx, int nid, ulong flags, struct memblock_type * type_a, struct memblock_type * type_b, phys_addr_t * out_start, phys_addr_t * out_end, int * out_nid)'/>
<use f='linux-4.14.y/mm/memblock.c' l='150' macro='1' u='c'/>
<use f='linux-4.14.y/mm/memblock.c' l='150' macro='1' u='c'/>
<def f='linux-4.14.y/mm/memblock.c' l='979' ll='1070' type='void __next_mem_range_rev(u64 * idx, int nid, ulong flags, struct memblock_type * type_a, struct memblock_type * type_b, phys_addr_t * out_start, phys_addr_t * out_end, int * out_nid)'/>
<doc f='linux-4.14.y/mm/memblock.c' l='962'>/**
 * __next_mem_range_rev - generic next function for for_each_*_range_rev()
 *
 * Finds the next range from type_a which is not marked as unsuitable
 * in type_b.
 *
 * @idx: pointer to u64 loop variable
 * @nid: node selector, %NUMA_NO_NODE for all nodes
 * @flags: pick from blocks based on memory attributes
 * @type_a: pointer to memblock_type from where the range is taken
 * @type_b: pointer to memblock_type which excludes memory from being taken
 * @out_start: ptr to phys_addr_t for start address of the range, can be %NULL
 * @out_end: ptr to phys_addr_t for end address of the range, can be %NULL
 * @out_nid: ptr to int for nid of the range, can be %NULL
 *
 * Reverse of __next_mem_range().
 */</doc>
