<dec f='linux-4.18.y/drivers/net/ethernet/intel/e1000e/mac.h' l='39' type='s32 e1000_check_alt_mac_addr_generic(struct e1000_hw * hw)'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/e1000e/80003es2lan.c' l='714' u='c' c='e1000_reset_hw_80003es2lan'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/e1000e/80003es2lan.c' l='1259' u='c' c='e1000_read_mac_addr_80003es2lan'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/e1000e/82571.c' l='1044' u='c' c='e1000_reset_hw_82571'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/e1000e/82571.c' l='1781' u='c' c='e1000_read_mac_addr_82571'/>
<def f='linux-4.18.y/drivers/net/ethernet/intel/e1000e/mac.c' l='140' ll='194' type='s32 e1000_check_alt_mac_addr_generic(struct e1000_hw * hw)'/>
<doc f='linux-4.18.y/drivers/net/ethernet/intel/e1000e/mac.c' l='128'>/**
 *  e1000_check_alt_mac_addr_generic - Check for alternate MAC addr
 *  @hw: pointer to the HW structure
 *
 *  Checks the nvm for an alternate MAC address.  An alternate MAC address
 *  can be setup by pre-boot software and must be treated like a permanent
 *  address and must override the actual permanent MAC address. If an
 *  alternate MAC address is found it is programmed into RAR0, replacing
 *  the permanent address that was installed into RAR0 by the Si on reset.
 *  This function will return SUCCESS unless it encounters an error while
 *  reading the EEPROM.
 **/</doc>
