<def f='linux-4.14.y/include/linux/device.h' l='888' ll='967'/>
<size>472</size>
<doc f='linux-4.14.y/include/linux/device.h' l='812'>/**
 * struct device - The basic device structure
 * @parent:	The device&apos;s &quot;parent&quot; device, the device to which it is attached.
 * 		In most cases, a parent device is some sort of bus or host
 * 		controller. If parent is NULL, the device, is a top-level device,
 * 		which is not usually what you want.
 * @p:		Holds the private data of the driver core portions of the device.
 * 		See the comment of the struct device_private for detail.
 * @kobj:	A top-level, abstract class from which other classes are derived.
 * @init_name:	Initial name of the device.
 * @type:	The type of device.
 * 		This identifies the device type and carries type-specific
 * 		information.
 * @mutex:	Mutex to synchronize calls to its driver.
 * @bus:	Type of bus device is on.
 * @driver:	Which driver has allocated this
 * @platform_data: Platform data specific to the device.
 * 		Example: For devices on custom boards, as typical of embedded
 * 		and SOC based hardware, Linux often uses platform_data to point
 * 		to board-specific structures describing devices and how they
 * 		are wired.  That can include what ports are available, chip
 * 		variants, which GPIO pins act in what additional roles, and so
 * 		on.  This shrinks the &quot;Board Support Packages&quot; (BSPs) and
 * 		minimizes board-specific #ifdefs in drivers.
 * @driver_data: Private pointer for driver specific info.
 * @links:	Links to suppliers and consumers of this device.
 * @power:	For device power management.
 *		See Documentation/driver-api/pm/devices.rst for details.
 * @pm_domain:	Provide callbacks that are executed during system suspend,
 * 		hibernation, system resume and during runtime PM transitions
 * 		along with subsystem-level and driver-level callbacks.
 * @pins:	For device pin management.
 *		See Documentation/driver-api/pinctl.rst for details.
 * @msi_list:	Hosts MSI descriptors
 * @msi_domain: The generic MSI domain this device is using.
 * @numa_node:	NUMA node this device is close to.
 * @dma_ops:    DMA mapping operations for this device.
 * @dma_mask:	Dma mask (if dma&apos;ble device).
 * @coherent_dma_mask: Like dma_mask, but for alloc_coherent mapping as not all
 * 		hardware supports 64-bit addresses for consistent allocations
 * 		such descriptors.
 * @dma_pfn_offset: offset of DMA memory range relatively of RAM
 * @dma_parms:	A low level driver may set these to teach IOMMU code about
 * 		segment limitations.
 * @dma_pools:	Dma pools (if dma&apos;ble device).
 * @dma_mem:	Internal for coherent mem override.
 * @cma_area:	Contiguous memory area for dma allocations
 * @archdata:	For arch-specific additions.
 * @of_node:	Associated device tree node.
 * @fwnode:	Associated device node supplied by platform firmware.
 * @devt:	For creating the sysfs &quot;dev&quot;.
 * @id:		device instance
 * @devres_lock: Spinlock to protect the resource of the device.
 * @devres_head: The resources list of the device.
 * @knode_class: The node used to add the device to the class list.
 * @class:	The class of the device.
 * @groups:	Optional attribute groups.
 * @release:	Callback to free the device after all references have
 * 		gone away. This should be set by the allocator of the
 * 		device (i.e. the bus driver that discovered the device).
 * @iommu_group: IOMMU group the device belongs to.
 * @iommu_fwspec: IOMMU-specific properties supplied by firmware.
 *
 * @offline_disabled: If set, the device is permanently online.
 * @offline:	Set after successful invocation of bus type&apos;s .offline().
 * @of_node_reused: Set if the device-tree node is shared with an ancestor
 *              device.
 *
 * At the lowest level, every device in a Linux system is represented by an
 * instance of struct device. The device structure contains the information
 * that the device model core needs to model the system. Most subsystems,
 * however, track additional information about the devices they host. As a
 * result, it is rare for devices to be represented by bare device structures;
 * instead, that structure, like kobject structures, is usually embedded within
 * a higher-level representation of the device.
 */</doc>
<mbr r='device::parent' o='0' t='struct device *'/>
<mbr r='device::p' o='64' t='struct device_private *'/>
<mbr r='device::kobj' o='128' t='struct kobject'/>
<mbr r='device::init_name' o='640' t='const char *'/>
<mbr r='device::type' o='704' t='const struct device_type *'/>
<mbr r='device::mutex' o='768' t='struct mutex'/>
<mbr r='device::bus' o='1024' t='struct bus_type *'/>
<mbr r='device::driver' o='1088' t='struct device_driver *'/>
<mbr r='device::platform_data' o='1152' t='void *'/>
<mbr r='device::driver_data' o='1216' t='void *'/>
<mbr r='device::links' o='1280' t='struct dev_links_info'/>
<mbr r='device::power' o='1600' t='struct dev_pm_info'/>
<mbr r='device::pm_domain' o='1920' t='struct dev_pm_domain *'/>
<mbr r='device::msi_domain' o='1984' t='struct irq_domain *'/>
<mbr r='device::msi_list' o='2048' t='struct list_head'/>
<mbr r='device::dma_ops' o='2176' t='const struct dma_map_ops *'/>
<mbr r='device::dma_mask' o='2240' t='u64 *'/>
<mbr r='device::coherent_dma_mask' o='2304' t='u64'/>
<mbr r='device::dma_pfn_offset' o='2368' t='unsigned long'/>
<mbr r='device::dma_parms' o='2432' t='struct device_dma_parameters *'/>
<mbr r='device::dma_pools' o='2496' t='struct list_head'/>
<mbr r='device::dma_mem' o='2624' t='struct dma_coherent_mem *'/>
<mbr r='device::archdata' o='2688' t='struct dev_archdata'/>
<mbr r='device::of_node' o='2752' t='struct device_node *'/>
<mbr r='device::fwnode' o='2816' t='struct fwnode_handle *'/>
<mbr r='device::devt' o='2880' t='dev_t'/>
<mbr r='device::id' o='2912' t='u32'/>
<mbr r='device::devres_lock' o='2944' t='spinlock_t'/>
<mbr r='device::devres_head' o='3008' t='struct list_head'/>
<mbr r='device::knode_class' o='3136' t='struct klist_node'/>
<mbr r='device::class' o='3392' t='struct class *'/>
<mbr r='device::groups' o='3456' t='const struct attribute_group **'/>
<mbr r='device::release' o='3520' t='void (*)(struct device *)'/>
<mbr r='device::iommu_group' o='3584' t='struct iommu_group *'/>
<mbr r='device::iommu_fwspec' o='3648' t='struct iommu_fwspec *'/>
<mbr r='device::offline_disabled' o='3712' t='bool'/>
<mbr r='device::offline' o='3713' t='bool'/>
<mbr r='device::of_node_reused' o='3714' t='bool'/>
<def f='linux-4.14.y/include/linux/device.h' l='888' ll='967'/>
<size>472</size>
<doc f='linux-4.14.y/include/linux/device.h' l='812'>/**
 * struct device - The basic device structure
 * @parent:	The device&apos;s &quot;parent&quot; device, the device to which it is attached.
 * 		In most cases, a parent device is some sort of bus or host
 * 		controller. If parent is NULL, the device, is a top-level device,
 * 		which is not usually what you want.
 * @p:		Holds the private data of the driver core portions of the device.
 * 		See the comment of the struct device_private for detail.
 * @kobj:	A top-level, abstract class from which other classes are derived.
 * @init_name:	Initial name of the device.
 * @type:	The type of device.
 * 		This identifies the device type and carries type-specific
 * 		information.
 * @mutex:	Mutex to synchronize calls to its driver.
 * @bus:	Type of bus device is on.
 * @driver:	Which driver has allocated this
 * @platform_data: Platform data specific to the device.
 * 		Example: For devices on custom boards, as typical of embedded
 * 		and SOC based hardware, Linux often uses platform_data to point
 * 		to board-specific structures describing devices and how they
 * 		are wired.  That can include what ports are available, chip
 * 		variants, which GPIO pins act in what additional roles, and so
 * 		on.  This shrinks the &quot;Board Support Packages&quot; (BSPs) and
 * 		minimizes board-specific #ifdefs in drivers.
 * @driver_data: Private pointer for driver specific info.
 * @links:	Links to suppliers and consumers of this device.
 * @power:	For device power management.
 *		See Documentation/driver-api/pm/devices.rst for details.
 * @pm_domain:	Provide callbacks that are executed during system suspend,
 * 		hibernation, system resume and during runtime PM transitions
 * 		along with subsystem-level and driver-level callbacks.
 * @pins:	For device pin management.
 *		See Documentation/driver-api/pinctl.rst for details.
 * @msi_list:	Hosts MSI descriptors
 * @msi_domain: The generic MSI domain this device is using.
 * @numa_node:	NUMA node this device is close to.
 * @dma_ops:    DMA mapping operations for this device.
 * @dma_mask:	Dma mask (if dma&apos;ble device).
 * @coherent_dma_mask: Like dma_mask, but for alloc_coherent mapping as not all
 * 		hardware supports 64-bit addresses for consistent allocations
 * 		such descriptors.
 * @dma_pfn_offset: offset of DMA memory range relatively of RAM
 * @dma_parms:	A low level driver may set these to teach IOMMU code about
 * 		segment limitations.
 * @dma_pools:	Dma pools (if dma&apos;ble device).
 * @dma_mem:	Internal for coherent mem override.
 * @cma_area:	Contiguous memory area for dma allocations
 * @archdata:	For arch-specific additions.
 * @of_node:	Associated device tree node.
 * @fwnode:	Associated device node supplied by platform firmware.
 * @devt:	For creating the sysfs &quot;dev&quot;.
 * @id:		device instance
 * @devres_lock: Spinlock to protect the resource of the device.
 * @devres_head: The resources list of the device.
 * @knode_class: The node used to add the device to the class list.
 * @class:	The class of the device.
 * @groups:	Optional attribute groups.
 * @release:	Callback to free the device after all references have
 * 		gone away. This should be set by the allocator of the
 * 		device (i.e. the bus driver that discovered the device).
 * @iommu_group: IOMMU group the device belongs to.
 * @iommu_fwspec: IOMMU-specific properties supplied by firmware.
 *
 * @offline_disabled: If set, the device is permanently online.
 * @offline:	Set after successful invocation of bus type&apos;s .offline().
 * @of_node_reused: Set if the device-tree node is shared with an ancestor
 *              device.
 *
 * At the lowest level, every device in a Linux system is represented by an
 * instance of struct device. The device structure contains the information
 * that the device model core needs to model the system. Most subsystems,
 * however, track additional information about the devices they host. As a
 * result, it is rare for devices to be represented by bare device structures;
 * instead, that structure, like kobject structures, is usually embedded within
 * a higher-level representation of the device.
 */</doc>
<mbr r='device::parent' o='0' t='struct device *'/>
<mbr r='device::p' o='64' t='struct device_private *'/>
<mbr r='device::kobj' o='128' t='struct kobject'/>
<mbr r='device::init_name' o='640' t='const char *'/>
<mbr r='device::type' o='704' t='const struct device_type *'/>
<mbr r='device::mutex' o='768' t='struct mutex'/>
<mbr r='device::bus' o='1024' t='struct bus_type *'/>
<mbr r='device::driver' o='1088' t='struct device_driver *'/>
<mbr r='device::platform_data' o='1152' t='void *'/>
<mbr r='device::driver_data' o='1216' t='void *'/>
<mbr r='device::links' o='1280' t='struct dev_links_info'/>
<mbr r='device::power' o='1600' t='struct dev_pm_info'/>
<mbr r='device::pm_domain' o='1920' t='struct dev_pm_domain *'/>
<mbr r='device::msi_domain' o='1984' t='struct irq_domain *'/>
<mbr r='device::msi_list' o='2048' t='struct list_head'/>
<mbr r='device::dma_ops' o='2176' t='const struct dma_map_ops *'/>
<mbr r='device::dma_mask' o='2240' t='u64 *'/>
<mbr r='device::coherent_dma_mask' o='2304' t='u64'/>
<mbr r='device::dma_pfn_offset' o='2368' t='unsigned long'/>
<mbr r='device::dma_parms' o='2432' t='struct device_dma_parameters *'/>
<mbr r='device::dma_pools' o='2496' t='struct list_head'/>
<mbr r='device::dma_mem' o='2624' t='struct dma_coherent_mem *'/>
<mbr r='device::archdata' o='2688' t='struct dev_archdata'/>
<mbr r='device::of_node' o='2752' t='struct device_node *'/>
<mbr r='device::fwnode' o='2816' t='struct fwnode_handle *'/>
<mbr r='device::devt' o='2880' t='dev_t'/>
<mbr r='device::id' o='2912' t='u32'/>
<mbr r='device::devres_lock' o='2944' t='spinlock_t'/>
<mbr r='device::devres_head' o='3008' t='struct list_head'/>
<mbr r='device::knode_class' o='3136' t='struct klist_node'/>
<mbr r='device::class' o='3392' t='struct class *'/>
<mbr r='device::groups' o='3456' t='const struct attribute_group **'/>
<mbr r='device::release' o='3520' t='void (*)(struct device *)'/>
<mbr r='device::iommu_group' o='3584' t='struct iommu_group *'/>
<mbr r='device::iommu_fwspec' o='3648' t='struct iommu_fwspec *'/>
<mbr r='device::offline_disabled' o='3712' t='bool'/>
<mbr r='device::offline' o='3713' t='bool'/>
<mbr r='device::of_node_reused' o='3714' t='bool'/>
