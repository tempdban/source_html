<dec f='linux-4.18.y/include/linux/mmzone.h' l='782' type='bool __zone_watermark_ok(struct zone * z, unsigned int order, unsigned long mark, int classzone_idx, unsigned int alloc_flags, long free_pages)'/>
<def f='linux-4.18.y/mm/page_alloc.c' l='3108' ll='3185' type='bool __zone_watermark_ok(struct zone * z, unsigned int order, unsigned long mark, int classzone_idx, unsigned int alloc_flags, long free_pages)'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='3190' u='c' c='zone_watermark_ok'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='3216' u='c' c='zone_watermark_fast'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='3228' u='c' c='zone_watermark_ok_safe'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='3965' u='c' c='should_reclaim_retry'/>
<doc f='linux-4.18.y/mm/page_alloc.c' l='3102'>/*
 * Return true if free base pages are above &apos;mark&apos;. For high-order checks it
 * will return true of the order-0 watermark is reached and there is at least
 * one free page of a suitable size. Checking now avoids taking the zone lock
 * to check in the allocation paths if no pages are free.
 */</doc>
