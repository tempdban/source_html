<def f='linux-4.14.y/include/linux/cgroup.h' l='372' ll='375' type='bool css_is_dying(struct cgroup_subsys_state * css)'/>
<doc f='linux-4.14.y/include/linux/cgroup.h' l='357'>/**
 * css_is_dying - test whether the specified css is dying
 * @css: target css
 *
 * Test whether @css is in the process of offlining or already offline.  In
 * most cases, -&gt;css_online() and -&gt;css_offline() callbacks should be
 * enough; however, the actual offline operations are RCU delayed and this
 * test returns %true also when @css is scheduled to be offlined.
 *
 * This is useful, for example, when the use case requires synchronous
 * behavior with respect to cgroup removal.  cgroup removal schedules css
 * offlining but the css can seem alive while the operation is being
 * delayed.  If the delay affects user visible semantics, this test can be
 * used to resolve the situation.
 */</doc>
<use f='linux-4.14.y/kernel/cgroup/cpuset.c' l='183' u='c' c='is_cpuset_online'/>
<def f='linux-4.14.y/include/linux/cgroup.h' l='372' ll='375' type='bool css_is_dying(struct cgroup_subsys_state * css)'/>
<doc f='linux-4.14.y/include/linux/cgroup.h' l='357'>/**
 * css_is_dying - test whether the specified css is dying
 * @css: target css
 *
 * Test whether @css is in the process of offlining or already offline.  In
 * most cases, -&gt;css_online() and -&gt;css_offline() callbacks should be
 * enough; however, the actual offline operations are RCU delayed and this
 * test returns %true also when @css is scheduled to be offlined.
 *
 * This is useful, for example, when the use case requires synchronous
 * behavior with respect to cgroup removal.  cgroup removal schedules css
 * offlining but the css can seem alive while the operation is being
 * delayed.  If the delay affects user visible semantics, this test can be
 * used to resolve the situation.
 */</doc>
<use f='linux-4.14.y/kernel/cgroup/cpuset.c' l='183' u='c' c='is_cpuset_online'/>
