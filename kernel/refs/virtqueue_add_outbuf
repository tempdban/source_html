<dec f='linux-4.18.y/include/linux/virtio.h' l='38' type='int virtqueue_add_outbuf(struct virtqueue * vq, struct scatterlist * sg, unsigned int num, void * data, gfp_t gfp)'/>
<use f='linux-4.18.y/drivers/char/virtio_console.c' l='580' u='c' c='__send_control_msg'/>
<use f='linux-4.18.y/drivers/char/virtio_console.c' l='632' u='c' c='__send_to_port'/>
<use f='linux-4.18.y/drivers/net/virtio_net.c' l='443' u='c' c='__virtnet_xdp_xmit_one'/>
<use f='linux-4.18.y/drivers/net/virtio_net.c' l='1449' u='c' c='xmit_skb'/>
<use f='linux-4.18.y/drivers/virtio/virtio_balloon.c' l='122' u='c' c='tell_host'/>
<use f='linux-4.18.y/drivers/virtio/virtio_balloon.c' l='325' u='c' c='stats_handle_request'/>
<use f='linux-4.18.y/drivers/virtio/virtio_balloon.c' l='458' u='c' c='init_vqs'/>
<use f='linux-4.18.y/drivers/virtio/virtio_input.c' l='76' u='c' c='virtinput_send_status'/>
<def f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='484' ll='490' type='int virtqueue_add_outbuf(struct virtqueue * vq, struct scatterlist * sg, unsigned int num, void * data, gfp_t gfp)'/>
<dec f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='491' type='int virtqueue_add_outbuf(struct virtqueue * , struct scatterlist * , unsigned int , void * , gfp_t )'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='491' c='virtqueue_add_outbuf'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='491' u='a'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='491' u='a'/>
<doc f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='471'>/**
 * virtqueue_add_outbuf - expose output buffers to other end
 * @vq: the struct virtqueue we&apos;re talking about.
 * @sg: scatterlist (must be well-formed and terminated!)
 * @num: the number of entries in @sg readable by other side
 * @data: the token identifying the buffer.
 * @gfp: how to do memory allocations (if necessary).
 *
 * Caller must ensure we don&apos;t call this with other virtqueue operations
 * at the same time (except where noted).
 *
 * Returns zero or a negative error (ie. ENOSPC, ENOMEM, EIO).
 */</doc>
