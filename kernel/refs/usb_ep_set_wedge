<dec f='linux-4.18.y/include/linux/usb/gadget.h' l='249' type='int usb_ep_set_wedge(struct usb_ep * ep)'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_mass_storage.c' l='1422' u='c' c='wedge_bulk_in_endpoint'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_mass_storage.c' l='1435' u='c' c='wedge_bulk_in_endpoint'/>
<def f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='365' ll='377' type='int usb_ep_set_wedge(struct usb_ep * ep)'/>
<dec f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='378' type='int usb_ep_set_wedge(struct usb_ep * )'/>
<use f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='378' c='usb_ep_set_wedge'/>
<use f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='378' u='a'/>
<use f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='378' u='a'/>
<doc f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='355'>/**
 * usb_ep_set_wedge - sets the halt feature and ignores clear requests
 * @ep: the endpoint being wedged
 *
 * Use this to stall an endpoint and ignore CLEAR_FEATURE(HALT_ENDPOINT)
 * requests. If the gadget driver clears the halt status, it will
 * automatically unwedge the endpoint.
 *
 * Returns zero on success, else negative errno.
 */</doc>
