<def f='linux-4.18.y/include/linux/spi/spi-mem.h' l='197' ll='202'/>
<size>184</size>
<doc f='linux-4.18.y/include/linux/spi/spi-mem.h' l='181'>/**
 * struct spi_mem_driver - SPI memory driver
 * @spidrv: inherit from a SPI driver
 * @probe: probe a SPI memory. Usually where detection/initialization takes
 *	   place
 * @remove: remove a SPI memory
 * @shutdown: take appropriate action when the system is shutdown
 *
 * This is just a thin wrapper around a spi_driver. The core takes care of
 * allocating the spi_mem object and forwarding the probe/remove/shutdown
 * request to the spi_mem_driver. The reason we use this wrapper is because
 * we might have to stuff more information into the spi_mem struct to let
 * SPI controllers know more about the SPI memory they interact with, and
 * having this intermediate layer allows us to do that without adding more
 * useless fields to the spi_device object.
 */</doc>
<mbr r='spi_mem_driver::spidrv' o='0' t='struct spi_driver'/>
<mbr r='spi_mem_driver::probe' o='1280' t='int (*)(struct spi_mem *)'/>
<mbr r='spi_mem_driver::remove' o='1344' t='int (*)(struct spi_mem *)'/>
<mbr r='spi_mem_driver::shutdown' o='1408' t='void (*)(struct spi_mem *)'/>
