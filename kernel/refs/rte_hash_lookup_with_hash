<dec f='linux-4.18.y/lib/librte_hash/rte_hash.h' l='380' type='int32_t rte_hash_lookup_with_hash(const struct rte_hash * h, const void * key, hash_sig_t sig)'/>
<doc f='linux-4.18.y/lib/librte_hash/rte_hash.h' l='360'>/**
 * Find a key in the hash table.
 * This operation is multi-thread safe with regarding to other lookup threads.
 * Read-write concurrency can be enabled by setting flag during
 * table creation.
 *
 * @param h
 *   Hash table to look in.
 * @param key
 *   Key to find.
 * @param sig
 *   Precomputed hash value for &apos;key&apos;.
 * @return
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if the key is not found.
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key, and is the same
 *     value that was returned when the key was added.
 */</doc>
<use f='linux-4.18.y/drivers/net/i40e/i40e_fdir.c' l='1391' u='c' c='i40e_sw_fdir_filter_lookup'/>
<def f='linux-4.18.y/lib/librte_hash/rte_cuckoo_hash.c' l='922' ll='928' type='int32_t rte_hash_lookup_with_hash(const struct rte_hash * h, const void * key, hash_sig_t sig)'/>
