<def f='linux-4.18.y/net/openvswitch/vport.h' l='134' ll='147'/>
<size>72</size>
<doc f='linux-4.18.y/net/openvswitch/vport.h' l='118'>/**
 * struct vport_ops - definition of a type of virtual port
 *
 * @type: %OVS_VPORT_TYPE_* value for this type of virtual port.
 * @create: Create a new vport configured as specified.  On success returns
 * a new vport allocated with ovs_vport_alloc(), otherwise an ERR_PTR() value.
 * @destroy: Destroys a vport.  Must call vport_free() on the vport but not
 * before an RCU grace period has elapsed.
 * @set_options: Modify the configuration of an existing vport.  May be %NULL
 * if modification is not supported.
 * @get_options: Appends vport-specific attributes for the configuration of an
 * existing vport to a &amp;struct sk_buff.  May be %NULL for a vport that does not
 * have any configuration.
 * @send: Send a packet on the device.
 * zero for dropped packets or negative for error.
 */</doc>
<mbr r='vport_ops::type' o='0' t='enum ovs_vport_type'/>
<mbr r='vport_ops::create' o='64' t='struct vport *(*)(const struct vport_parms *)'/>
<mbr r='vport_ops::destroy' o='128' t='void (*)(struct vport *)'/>
<mbr r='vport_ops::set_options' o='192' t='int (*)(struct vport *, struct nlattr *)'/>
<mbr r='vport_ops::get_options' o='256' t='int (*)(const struct vport *, struct sk_buff *)'/>
<mbr r='vport_ops::send' o='320' t='netdev_tx_t (*)(struct sk_buff *)'/>
<mbr r='vport_ops::owner' o='384' t='struct module *'/>
<mbr r='vport_ops::list' o='448' t='struct list_head'/>
