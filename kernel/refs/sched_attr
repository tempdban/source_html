<def f='linux-4.18.y/include/uapi/linux/sched/types.h' l='57' ll='73'/>
<size>48</size>
<doc f='linux-4.18.y/include/uapi/linux/sched/types.h' l='13'>/*
 * Extended scheduling parameters data structure.
 *
 * This is needed because the original struct sched_param can not be
 * altered without introducing ABI issues with legacy applications
 * (e.g., in sched_getparam()).
 *
 * However, the possibility of specifying more than just a priority for
 * the tasks may be useful for a wide variety of application fields, e.g.,
 * multimedia, streaming, automation and control, and many others.
 *
 * This variant (sched_attr) is meant at describing a so-called
 * sporadic time-constrained task. In such model a task is specified by:
 *  - the activation period or minimum instance inter-arrival time;
 *  - the maximum (or average, depending on the actual scheduling
 *    discipline) computation time of all instances, a.k.a. runtime;
 *  - the deadline (relative to the actual activation time) of each
 *    instance.
 * Very briefly, a periodic (sporadic) task asks for the execution of
 * some specific computation --which is typically called an instance--
 * (at most) every period. Moreover, each instance typically lasts no more
 * than the runtime and must be completed by time instant t equal to
 * the instance activation time + the deadline.
 *
 * This is reflected by the actual fields of the sched_attr structure:
 *
 *  @size		size of the structure, for fwd/bwd compat.
 *
 *  @sched_policy	task&apos;s scheduling policy
 *  @sched_flags	for customizing the scheduler behaviour
 *  @sched_nice		task&apos;s nice value      (SCHED_NORMAL/BATCH)
 *  @sched_priority	task&apos;s static priority (SCHED_FIFO/RR)
 *  @sched_deadline	representative of the task&apos;s deadline
 *  @sched_runtime	representative of the task&apos;s runtime
 *  @sched_period	representative of the task&apos;s period
 *
 * Given this task model, there are a multiplicity of scheduling algorithms
 * and policies, that can be used to ensure all the tasks will make their
 * timing constraints.
 *
 * As of now, the SCHED_DEADLINE policy (sched_dl scheduling class) is the
 * only user of this new interface. More information about the algorithm
 * available in the scheduling class file or in Documentation/.
 */</doc>
<mbr r='sched_attr::size' o='0' t='__u32'/>
<mbr r='sched_attr::sched_policy' o='32' t='__u32'/>
<mbr r='sched_attr::sched_flags' o='64' t='__u64'/>
<mbr r='sched_attr::sched_nice' o='128' t='__s32'/>
<mbr r='sched_attr::sched_priority' o='160' t='__u32'/>
<mbr r='sched_attr::sched_runtime' o='192' t='__u64'/>
<mbr r='sched_attr::sched_deadline' o='256' t='__u64'/>
<mbr r='sched_attr::sched_period' o='320' t='__u64'/>
