<dec f='linux-4.14.y/include/drm/drm_drv.h' l='612' type='int drm_dev_register(struct drm_device * dev, unsigned long flags)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='781' ll='833' type='int drm_dev_register(struct drm_device * dev, unsigned long flags)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='834' type='int drm_dev_register(struct drm_device * , unsigned long )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='834' c='drm_dev_register'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='834' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='834' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='761'>/**
 * drm_dev_register - Register DRM device
 * @dev: Device to register
 * @flags: Flags passed to the driver&apos;s .load() function
 *
 * Register the DRM device @dev with the system, advertise device to user-space
 * and start normal device operation. @dev must be allocated via drm_dev_alloc()
 * previously.
 *
 * Never call this twice on any device!
 *
 * NOTE: To ensure backward compatibility with existing drivers method this
 * function calls the &amp;drm_driver.load method after registering the device
 * nodes, creating race conditions. Usage of the &amp;drm_driver.load methods is
 * therefore deprecated, drivers must perform all initialization before calling
 * drm_dev_register().
 *
 * RETURNS:
 * 0 on success, negative error code on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='262' u='c' c='drm_get_pci_dev'/>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='92' u='c' c='qxl_pci_probe'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_drm_bus.c' l='81' u='c' c='drm_virtio_init'/>
<dec f='linux-4.14.y/include/drm/drm_drv.h' l='612' type='int drm_dev_register(struct drm_device * dev, unsigned long flags)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='781' ll='833' type='int drm_dev_register(struct drm_device * dev, unsigned long flags)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='834' type='int drm_dev_register(struct drm_device * , unsigned long )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='834' c='drm_dev_register'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='834' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='834' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='761'>/**
 * drm_dev_register - Register DRM device
 * @dev: Device to register
 * @flags: Flags passed to the driver&apos;s .load() function
 *
 * Register the DRM device @dev with the system, advertise device to user-space
 * and start normal device operation. @dev must be allocated via drm_dev_alloc()
 * previously.
 *
 * Never call this twice on any device!
 *
 * NOTE: To ensure backward compatibility with existing drivers method this
 * function calls the &amp;drm_driver.load method after registering the device
 * nodes, creating race conditions. Usage of the &amp;drm_driver.load methods is
 * therefore deprecated, drivers must perform all initialization before calling
 * drm_dev_register().
 *
 * RETURNS:
 * 0 on success, negative error code on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='262' u='c' c='drm_get_pci_dev'/>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='92' u='c' c='qxl_pci_probe'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_drm_bus.c' l='81' u='c' c='drm_virtio_init'/>
