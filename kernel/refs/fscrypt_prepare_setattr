<def f='linux-4.18.y/include/linux/fscrypt.h' l='182' ll='188' type='int fscrypt_prepare_setattr(struct dentry * dentry, struct iattr * attr)'/>
<doc f='linux-4.18.y/include/linux/fscrypt.h' l='165'>/**
 * fscrypt_prepare_setattr - prepare to change a possibly-encrypted inode&apos;s attributes
 * @dentry: dentry through which the inode is being changed
 * @attr: attributes to change
 *
 * Prepare for -&gt;setattr() on a possibly-encrypted inode.  On an encrypted file,
 * most attribute changes are allowed even without the encryption key.  However,
 * without the encryption key we do have to forbid truncates.  This is needed
 * because the size being truncated to may not be a multiple of the filesystem
 * block size, and in that case we&apos;d have to decrypt the final block, zero the
 * portion past i_size, and re-encrypt it.  (We *could* allow truncating to a
 * filesystem block boundary, but it&apos;s simpler to just forbid all truncates ---
 * and we already forbid all other contents modifications without the key.)
 *
 * Return: 0 on success, -ENOKEY if the key is missing, or another -errno code
 * if a problem occurred while setting up the encryption key.
 */</doc>
<use f='linux-4.18.y/fs/ext4/inode.c' l='5440' u='c' c='ext4_setattr'/>
<use f='linux-4.18.y/fs/f2fs/file.c' l='766' u='c' c='f2fs_setattr'/>
