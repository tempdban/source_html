<dec f='linux-4.14.y/include/linux/property.h' l='57' type='int fwnode_property_read_u8_array(const struct fwnode_handle * fwnode, const char * propname, u8 * val, size_t nval)'/>
<use f='linux-4.14.y/include/linux/property.h' l='147' u='c' c='fwnode_property_read_u8'/>
<use f='linux-4.14.y/drivers/base/property.c' l='295' u='c' c='device_property_read_u8_array'/>
<def f='linux-4.14.y/drivers/base/property.c' l='479' ll='484' type='int fwnode_property_read_u8_array(const struct fwnode_handle * fwnode, const char * propname, u8 * val, size_t nval)'/>
<dec f='linux-4.14.y/drivers/base/property.c' l='485' type='int fwnode_property_read_u8_array(const struct fwnode_handle * , const char * , u8 * , size_t )'/>
<use f='linux-4.14.y/drivers/base/property.c' l='485' c='fwnode_property_read_u8_array'/>
<use f='linux-4.14.y/drivers/base/property.c' l='485' u='a'/>
<use f='linux-4.14.y/drivers/base/property.c' l='485' u='a'/>
<doc f='linux-4.14.y/drivers/base/property.c' l='461'>/**
 * fwnode_property_read_u8_array - return a u8 array property of firmware node
 * @fwnode: Firmware node to get the property of
 * @propname: Name of the property
 * @val: The values are stored here or %NULL to return the number of values
 * @nval: Size of the @val array
 *
 * Read an array of u8 properties with @propname from @fwnode and stores them to
 * @val if found.
 *
 * Return: number of values if @val was %NULL,
 *         %0 if the property was found (success),
 *	   %-EINVAL if given arguments are not valid,
 *	   %-ENODATA if the property does not have a value,
 *	   %-EPROTO if the property is not an array of numbers,
 *	   %-EOVERFLOW if the size of the property is not as expected,
 *	   %-ENXIO if no suitable firmware interface is present.
 */</doc>
