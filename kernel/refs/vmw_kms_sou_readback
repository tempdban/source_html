<dec f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h' l='419' type='int vmw_kms_sou_readback(struct vmw_private * dev_priv, struct drm_file * file_priv, struct vmw_framebuffer * vfb, struct drm_vmw_fence_rep * user_fence_rep, struct drm_vmw_rect * vclips, uint32_t num_clips, struct drm_crtc * crtc)'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='928' u='c' c='vmw_kms_readback'/>
<def f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c' l='1136' ll='1174' type='int vmw_kms_sou_readback(struct vmw_private * dev_priv, struct drm_file * file_priv, struct vmw_framebuffer * vfb, struct drm_vmw_fence_rep * user_fence_rep, struct drm_vmw_rect * vclips, uint32_t num_clips, struct drm_crtc * crtc)'/>
<doc f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c' l='1119'>/**
 * vmw_kms_sou_readback - Perform a readback from the screen object system to
 * a dma-buffer backed framebuffer.
 *
 * @dev_priv: Pointer to the device private structure.
 * @file_priv: Pointer to a struct drm_file identifying the caller.
 * Must be set to NULL if @user_fence_rep is NULL.
 * @vfb: Pointer to the dma-buffer backed framebuffer.
 * @user_fence_rep: User-space provided structure for fence information.
 * Must be set to non-NULL if @file_priv is non-NULL.
 * @vclips: Array of clip rects.
 * @num_clips: Number of clip rects in @vclips.
 * @crtc: If crtc is passed, readback on that crtc only.
 *
 * Returns 0 on success, negative error code on failure. -ERESTARTSYS if
 * interrupted.
 */</doc>
