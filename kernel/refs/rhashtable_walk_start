<dec f='linux-4.14.y/include/linux/rhashtable.h' l='381' type='int rhashtable_walk_start(struct rhashtable_iter * iter)'/>
<def f='linux-4.14.y/lib/rhashtable.c' l='750' ll='768' type='int rhashtable_walk_start(struct rhashtable_iter * iter)'/>
<dec f='linux-4.14.y/lib/rhashtable.c' l='769' type='int rhashtable_walk_start(struct rhashtable_iter * )'/>
<use f='linux-4.14.y/lib/rhashtable.c' l='769' c='rhashtable_walk_start'/>
<use f='linux-4.14.y/lib/rhashtable.c' l='769' u='a'/>
<use f='linux-4.14.y/lib/rhashtable.c' l='769' u='a'/>
<doc f='linux-4.14.y/lib/rhashtable.c' l='736'>/**
 * rhashtable_walk_start - Start a hash table walk
 * @iter:	Hash table iterator
 *
 * Start a hash table walk at the current iterator position.  Note that we take
 * the RCU lock in all cases including when we return an error.  So you must
 * always call rhashtable_walk_stop to clean up.
 *
 * Returns zero if successful.
 *
 * Returns -EAGAIN if resize event occured.  Note that the iterator
 * will rewind back to the beginning and you may use it immediately
 * by calling rhashtable_walk_next.
 */</doc>
<use f='linux-4.14.y/net/netfilter/nft_set_hash.c' l='236' u='c' c='nft_rhash_walk'/>
<use f='linux-4.14.y/net/netfilter/nft_set_hash.c' l='291' u='c' c='nft_rhash_gc'/>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='2501' u='c' c='netlink_walk_start'/>
