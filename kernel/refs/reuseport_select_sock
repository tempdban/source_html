<dec f='linux-4.18.y/include/net/sock_reuseport.h' l='22' type='struct sock * reuseport_select_sock(struct sock * sk, u32 hash, struct sk_buff * skb, int hdr_len)'/>
<def f='linux-4.18.y/net/core/sock_reuseport.c' l='218' ll='252' type='struct sock * reuseport_select_sock(struct sock * sk, u32 hash, struct sk_buff * skb, int hdr_len)'/>
<dec f='linux-4.18.y/net/core/sock_reuseport.c' l='253' type='struct sock * reuseport_select_sock(struct sock * , u32 , struct sk_buff * , int )'/>
<use f='linux-4.18.y/net/core/sock_reuseport.c' l='253' c='reuseport_select_sock'/>
<use f='linux-4.18.y/net/core/sock_reuseport.c' l='253' u='a'/>
<use f='linux-4.18.y/net/core/sock_reuseport.c' l='253' u='a'/>
<doc f='linux-4.18.y/net/core/sock_reuseport.c' l='208'>/**
 *  reuseport_select_sock - Select a socket from an SO_REUSEPORT group.
 *  @sk: First socket in the group.
 *  @hash: When no BPF filter is available, use this hash to select.
 *  @skb: skb to run through BPF filter.
 *  @hdr_len: BPF filter expects skb data pointer at payload data.  If
 *    the skb does not yet point at the payload, this parameter represents
 *    how far the pointer needs to advance to reach the payload.
 *  Returns a socket that should receive the packet (or NULL on error).
 */</doc>
<use f='linux-4.18.y/net/ipv4/inet_hashtables.c' l='286' u='c' c='inet_lhash2_lookup'/>
<use f='linux-4.18.y/net/ipv4/inet_hashtables.c' l='352' u='c' c='__inet_lookup_listener'/>
<use f='linux-4.18.y/net/ipv4/udp.c' l='448' u='c' c='udp4_lib_lookup2'/>
<use f='linux-4.18.y/net/ipv4/udp.c' l='513' u='c' c='__udp4_lib_lookup'/>
