<dec f='linux-4.18.y/include/linux/property.h' l='69' type='int fwnode_property_read_string_array(const struct fwnode_handle * fwnode, const char * propname, const char ** val, size_t nval)'/>
<use f='linux-4.18.y/drivers/base/property.c' l='456' u='c' c='device_property_read_string_array'/>
<def f='linux-4.18.y/drivers/base/property.c' l='644' ll='658' type='int fwnode_property_read_string_array(const struct fwnode_handle * fwnode, const char * propname, const char ** val, size_t nval)'/>
<dec f='linux-4.18.y/drivers/base/property.c' l='659' type='int fwnode_property_read_string_array(const struct fwnode_handle * , const char * , const char ** , size_t )'/>
<use f='linux-4.18.y/drivers/base/property.c' l='659' c='fwnode_property_read_string_array'/>
<use f='linux-4.18.y/drivers/base/property.c' l='659' u='a'/>
<use f='linux-4.18.y/drivers/base/property.c' l='659' u='a'/>
<use f='linux-4.18.y/drivers/base/property.c' l='679' u='c' c='fwnode_property_read_string'/>
<use f='linux-4.18.y/drivers/base/property.c' l='706' u='c' c='fwnode_property_match_string'/>
<use f='linux-4.18.y/drivers/base/property.c' l='717' u='c' c='fwnode_property_match_string'/>
<doc f='linux-4.18.y/drivers/base/property.c' l='626'>/**
 * fwnode_property_read_string_array - return string array property of a node
 * @fwnode: Firmware node to get the property of
 * @propname: Name of the property
 * @val: The values are stored here or %NULL to return the number of values
 * @nval: Size of the @val array
 *
 * Read an string list property @propname from the given firmware node and store
 * them to @val if found.
 *
 * Return: number of values read on success if @val is non-NULL,
 *	   number of values available on success if @val is NULL,
 *	   %-EINVAL if given arguments are not valid,
 *	   %-ENODATA if the property does not have a value,
 *	   %-EPROTO or %-EILSEQ if the property is not an array of strings,
 *	   %-EOVERFLOW if the size of the property is not as expected,
 *	   %-ENXIO if no suitable firmware interface is present.
 */</doc>
