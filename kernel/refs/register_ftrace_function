<dec f='linux-4.14.y/include/linux/ftrace.h' l='204' type='int register_ftrace_function(struct ftrace_ops * ops)'/>
<doc f='linux-4.14.y/include/linux/ftrace.h' l='197'>/*
 * The ftrace_ops must be a static and should also
 * be read_mostly.  These functions do modify read_mostly variables
 * so use them sparely. Never free an ftrace_op or modify the
 * next pointer after it has been registered. Even after unregistering
 * it, the next pointer may still be used internally.
 */</doc>
<use f='linux-4.14.y/kernel/livepatch/patch.c' l='214' u='c' c='klp_patch_func'/>
<def f='linux-4.14.y/kernel/trace/ftrace.c' l='6466' ll='6479' type='int register_ftrace_function(struct ftrace_ops * ops)'/>
<dec f='linux-4.14.y/kernel/trace/ftrace.c' l='6480' type='int register_ftrace_function(struct ftrace_ops * )'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='6480' c='register_ftrace_function'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='6480' u='a'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='6480' u='a'/>
<doc f='linux-4.14.y/kernel/trace/ftrace.c' l='6455'>/**
 * register_ftrace_function - register a function for profiling
 * @ops - ops structure that holds the function for profiling.
 *
 * Register a function to be called by all functions in the
 * kernel.
 *
 * Note: @ops-&gt;func and all the functions it calls must be labeled
 *       with &quot;notrace&quot;, otherwise it will go into a
 *       recursive loop.
 */</doc>
<use f='linux-4.14.y/kernel/trace/trace_event_perf.c' l='346' u='c' c='perf_ftrace_function_register'/>
<use f='linux-4.14.y/kernel/trace/trace_functions.c' l='213' u='c' c='tracing_start_function_trace'/>
<use f='linux-4.14.y/kernel/trace/trace_functions.c' l='242' u='c' c='func_set_flag'/>
<use f='linux-4.14.y/kernel/trace/trace_functions.c' l='245' u='c' c='func_set_flag'/>
