<dec f='linux-4.14.y/drivers/ata/libata.h' l='172' type='int ata_eh_recover(struct ata_port * ap, ata_prereset_fn_t prereset, ata_reset_fn_t softreset, ata_reset_fn_t hardreset, ata_postreset_fn_t postreset, struct ata_link ** r_failed_disk)'/>
<def f='linux-4.14.y/drivers/ata/libata-eh.c' l='3772' ll='3993' type='int ata_eh_recover(struct ata_port * ap, ata_prereset_fn_t prereset, ata_reset_fn_t softreset, ata_reset_fn_t hardreset, ata_postreset_fn_t postreset, struct ata_link ** r_failed_link)'/>
<use f='linux-4.14.y/drivers/ata/libata-eh.c' l='4065' u='c' c='ata_do_eh'/>
<doc f='linux-4.14.y/drivers/ata/libata-eh.c' l='3750'>/**
 *	ata_eh_recover - recover host port after error
 *	@ap: host port to recover
 *	@prereset: prereset method (can be NULL)
 *	@softreset: softreset method (can be NULL)
 *	@hardreset: hardreset method (can be NULL)
 *	@postreset: postreset method (can be NULL)
 *	@r_failed_link: out parameter for failed link
 *
 *	This is the alpha and omega, eum and yang, heart and soul of
 *	libata exception handling.  On entry, actions required to
 *	recover each link and hotplug requests are recorded in the
 *	link&apos;s eh_context.  This function executes all the operations
 *	with appropriate retrials and fallbacks to resurrect failed
 *	devices, detach goners and greet newcomers.
 *
 *	LOCKING:
 *	Kernel thread context (may sleep).
 *
 *	RETURNS:
 *	0 on success, -errno on failure.
 */</doc>
<use f='linux-4.14.y/drivers/ata/libata-pmp.c' l='944' u='c' c='sata_pmp_eh_recover'/>
<use f='linux-4.14.y/drivers/ata/libata-pmp.c' l='990' u='c' c='sata_pmp_eh_recover'/>
