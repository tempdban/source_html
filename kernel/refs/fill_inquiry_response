<dec f='linux-4.18.y/drivers/usb/storage/usb.h' l='161' type='void fill_inquiry_response(struct us_data * us, unsigned char * data, unsigned int data_len)'/>
<doc f='linux-4.18.y/drivers/usb/storage/usb.h' l='160'>/* Function to fill an inquiry response. See usb.c for details */</doc>
<def f='linux-4.18.y/drivers/usb/storage/usb.c' l='261' ll='295' type='void fill_inquiry_response(struct us_data * us, unsigned char * data, unsigned int data_len)'/>
<dec f='linux-4.18.y/drivers/usb/storage/usb.c' l='296' type='void fill_inquiry_response(struct us_data * , unsigned char * , unsigned int )'/>
<use f='linux-4.18.y/drivers/usb/storage/usb.c' l='296' c='fill_inquiry_response'/>
<use f='linux-4.18.y/drivers/usb/storage/usb.c' l='296' u='a'/>
<use f='linux-4.18.y/drivers/usb/storage/usb.c' l='296' u='a'/>
<use f='linux-4.18.y/drivers/usb/storage/usb.c' l='373' u='c' c='usb_stor_control_thread'/>
<doc f='linux-4.18.y/drivers/usb/storage/usb.c' l='252'>/*
 * fill_inquiry_response takes an unsigned char array (which must
 * be at least 36 characters) and populates the vendor name,
 * product name, and revision fields. Then the array is copied
 * into the SCSI command&apos;s response buffer (oddly enough
 * called request_buffer). data_len contains the length of the
 * data array, which again must be at least 36.
 */</doc>
