<dec f='linux-4.18.y/include/linux/usb/role.h' l='49' type='struct usb_role_switch * usb_role_switch_register(struct device * parent, const struct usb_role_switch_desc * desc)'/>
<def f='linux-4.18.y/drivers/usb/common/roles.c' l='236' ll='273' type='struct usb_role_switch * usb_role_switch_register(struct device * parent, const struct usb_role_switch_desc * desc)'/>
<dec f='linux-4.18.y/drivers/usb/common/roles.c' l='274' type='struct usb_role_switch * usb_role_switch_register(struct device * , const struct usb_role_switch_desc * )'/>
<use f='linux-4.18.y/drivers/usb/common/roles.c' l='274' c='usb_role_switch_register'/>
<use f='linux-4.18.y/drivers/usb/common/roles.c' l='274' u='a'/>
<use f='linux-4.18.y/drivers/usb/common/roles.c' l='274' u='a'/>
<doc f='linux-4.18.y/drivers/usb/common/roles.c' l='222'>/**
 * usb_role_switch_register - Register USB Role Switch
 * @parent: Parent device for the switch
 * @desc: Description of the switch
 *
 * USB Role Switch is a device capable or choosing the role for USB connector.
 * On platforms where the USB controller is dual-role capable, the controller
 * driver will need to register the switch. On platforms where the USB host and
 * USB device controllers behind the connector are separate, there will be a
 * mux, and the driver for that mux will need to register the switch.
 *
 * Returns handle to a new role switch or ERR_PTR. The content of @desc is
 * copied.
 */</doc>
