<dec f='linux-4.14.y/include/linux/iova.h' l='142' type='struct iova * alloc_iova(struct iova_domain * iovad, unsigned long size, unsigned long limit_pfn, bool size_aligned)'/>
<def f='linux-4.14.y/drivers/iommu/iova.c' l='311' ll='332' type='struct iova * alloc_iova(struct iova_domain * iovad, unsigned long size, unsigned long limit_pfn, bool size_aligned)'/>
<dec f='linux-4.14.y/drivers/iommu/iova.c' l='333' type='struct iova * alloc_iova(struct iova_domain * , unsigned long , unsigned long , bool )'/>
<use f='linux-4.14.y/drivers/iommu/iova.c' l='333' c='alloc_iova'/>
<use f='linux-4.14.y/drivers/iommu/iova.c' l='333' u='a'/>
<use f='linux-4.14.y/drivers/iommu/iova.c' l='333' u='a'/>
<use f='linux-4.14.y/drivers/iommu/iova.c' l='443' u='c' c='alloc_iova_fast'/>
<doc f='linux-4.14.y/drivers/iommu/iova.c' l='300'>/**
 * alloc_iova - allocates an iova
 * @iovad: - iova domain in question
 * @size: - size of page frames to allocate
 * @limit_pfn: - max limit address
 * @size_aligned: - set if size_aligned address range is required
 * This function allocates an iova in the range iovad-&gt;start_pfn to limit_pfn,
 * searching top-down from limit_pfn to iovad-&gt;start_pfn. If the size_aligned
 * flag is set then the allocated address iova-&gt;pfn_lo will be naturally
 * aligned on roundup_power_of_two(size).
 */</doc>
