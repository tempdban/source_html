<def f='linux-4.18.y/lib/librte_bbdev/rte_bbdev_op.h' l='249' ll='287'/>
<size>80</size>
<doc f='linux-4.18.y/lib/librte_bbdev/rte_bbdev_op.h' l='221'>/**&lt; Operation structure for Turbo decode.
 * An operation can perform on one CB at a time &quot;CB-mode&quot;.
 * An operation can perform on one or multiple CBs that are logically belonging
 * to one TB &quot;TB-mode&quot;.
 * The provided K size parameter of the CB is its size out coming from the
 * decode operation.
 * CRC24A/B check is requested by the application by setting the flag
 * RTE_BBDEV_TURBO_CRC_TYPE_24B for CRC24B check or CRC24A otherwise.
 * In TB-mode, BBDEV concatenates the decoded CBs one next to the other with
 * relevant CRC24B in between.
 *
 * The input encoded CB data is the Virtual Circular Buffer data stream, wk,
 * with the null padding included as described in 3GPP TS 36.212
 * section 5.1.4.1.2 and shown in 3GPP TS 36.212 section 5.1.4.1 Figure 5.1.4-1.
 * The size of the virtual circular buffer is 3*Kpi, where Kpi is the 32 byte
 * aligned value of K, as specified in 3GPP TS 36.212 section 5.1.4.1.1.
 *
 * Each byte in the input circular buffer is the LLR value of each bit of the
 * original CB.
 *
 * Hard output is a mandatory capability that all BBDEV PMDs support. This is
 * the decoded CBs of K sizes (CRC24A/B is the last 24-bit in each decoded CB).
 * Soft output is an optional capability for BBDEV PMDs. If supported, an LLR
 * rate matched output is computed in the soft_output buffer structure.
 *
 * The output mbuf data structure is expected to be allocated by the
 * application with enough room for the output data.
 */</doc>
<mbr r='rte_bbdev_op_turbo_dec::input' o='0' t='struct rte_bbdev_op_data'/>
<mbr r='rte_bbdev_op_turbo_dec::hard_output' o='128' t='struct rte_bbdev_op_data'/>
<mbr r='rte_bbdev_op_turbo_dec::soft_output' o='256' t='struct rte_bbdev_op_data'/>
<mbr r='rte_bbdev_op_turbo_dec::op_flags' o='384' t='uint32_t'/>
<mbr r='rte_bbdev_op_turbo_dec::rv_index' o='416' t='uint8_t'/>
<mbr r='rte_bbdev_op_turbo_dec::iter_min' o='424' t='uint8_t'/>
<mbr r='rte_bbdev_op_turbo_dec::iter_max' o='428' t='uint8_t'/>
<mbr r='rte_bbdev_op_turbo_dec::iter_count' o='432' t='uint8_t'/>
<mbr r='rte_bbdev_op_turbo_dec::ext_scale' o='440' t='uint8_t'/>
<mbr r='rte_bbdev_op_turbo_dec::num_maps' o='448' t='uint8_t'/>
<mbr r='rte_bbdev_op_turbo_dec::code_block_mode' o='456' t='uint8_t'/>
