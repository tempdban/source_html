<dec f='linux-4.14.y/include/linux/device.h' l='1192' type='struct device * device_create(struct class * cls, struct device * parent, dev_t devt, void * drvdata, const char * fmt)'/>
<use f='linux-4.14.y/arch/x86/kernel/cpuid.c' l='119' u='c' c='cpuid_device_create'/>
<use f='linux-4.14.y/arch/x86/kernel/msr.c' l='188' u='c' c='msr_device_create'/>
<use f='linux-4.14.y/block/bsg.c' l='1009' u='c' c='bsg_register_queue'/>
<def f='linux-4.14.y/drivers/base/core.c' l='2514' ll='2524' type='struct device * device_create(struct class * class, struct device * parent, dev_t devt, void * drvdata, const char * fmt)'/>
<dec f='linux-4.14.y/drivers/base/core.c' l='2525' type='struct device * device_create(struct class * , struct device * , dev_t , void * , const char * )'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2525' c='device_create'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2525' u='a'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2525' u='a'/>
<doc f='linux-4.14.y/drivers/base/core.c' l='2490'>/**
 * device_create - creates a device and registers it with sysfs
 * @class: pointer to the struct class that this device should be registered to
 * @parent: pointer to the parent struct device of this new device, if any
 * @devt: the dev_t for the char device to be added
 * @drvdata: the data to be added to the device for callbacks
 * @fmt: string for the device&apos;s name
 *
 * This function can be used by char device classes.  A struct device
 * will be created in sysfs, registered to the specified class.
 *
 * A &quot;dev&quot; file will be created, showing the dev_t for the device, if
 * the dev_t is not 0,0.
 * If a pointer to a parent struct device is passed in, the newly created
 * struct device will be a child of that device in sysfs.
 * The pointer to the struct device will be returned from the call.
 * Any further sysfs files that might be required can be created using this
 * pointer.
 *
 * Returns &amp;struct device pointer on success, or ERR_PTR() on error.
 *
 * Note: the struct class passed to this function must have previously
 * been created with a call to class_create().
 */</doc>
<use f='linux-4.14.y/drivers/char/mem.c' l='934' u='c' c='chr_dev_init'/>
<use f='linux-4.14.y/drivers/char/virtio_console.c' l='1449' u='c' c='add_port'/>
<use f='linux-4.14.y/drivers/dca/dca-sysfs.c' l='41' u='c' c='dca_sysfs_add_req'/>
<use f='linux-4.14.y/drivers/dca/dca-sysfs.c' l='70' u='c' c='dca_sysfs_add_provider'/>
<use f='linux-4.14.y/drivers/pps/pps.c' l='386' u='c' c='pps_register_cdev'/>
<use f='linux-4.14.y/drivers/scsi/sg.c' l='1551' u='c' c='sg_add_device'/>
<use f='linux-4.14.y/drivers/scsi/st.c' l='4204' u='c' c='create_one_cdev'/>
<use f='linux-4.14.y/drivers/tty/pty.c' l='942' u='c' c='unix98_pty_init'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='3325' u='c' c='tty_init'/>
<use f='linux-4.14.y/drivers/tty/vt/vc_screen.c' l='629' u='c' c='vcs_make_sysfs'/>
<use f='linux-4.14.y/drivers/tty/vt/vc_screen.c' l='631' u='c' c='vcs_make_sysfs'/>
<use f='linux-4.14.y/drivers/tty/vt/vc_screen.c' l='649' u='c' c='vcs_init'/>
<use f='linux-4.14.y/drivers/tty/vt/vc_screen.c' l='650' u='c' c='vcs_init'/>
<use f='linux-4.14.y/drivers/uio/uio.c' l='831' u='c' c='__uio_register_device'/>
<use f='linux-4.14.y/drivers/vfio/vfio.c' l='381' u='c' c='vfio_create_group'/>
<use f='linux-4.14.y/drivers/video/fbdev/core/fbcon.c' l='3630' u='c' c='fb_console_init'/>
<use f='linux-4.14.y/drivers/video/fbdev/core/fbmem.c' l='1664' u='c' c='do_register_framebuffer'/>
<use f='linux-4.14.y/net/netfilter/xt_IDLETIMER.c' l='280' u='c' c='idletimer_tg_init'/>
<dec f='linux-4.14.y/include/linux/device.h' l='1192' type='struct device * device_create(struct class * cls, struct device * parent, dev_t devt, void * drvdata, const char * fmt)'/>
<use f='linux-4.14.y/arch/x86/kernel/cpuid.c' l='119' u='c' c='cpuid_device_create'/>
<use f='linux-4.14.y/arch/x86/kernel/msr.c' l='188' u='c' c='msr_device_create'/>
<use f='linux-4.14.y/block/bsg.c' l='1009' u='c' c='bsg_register_queue'/>
<def f='linux-4.14.y/drivers/base/core.c' l='2514' ll='2524' type='struct device * device_create(struct class * class, struct device * parent, dev_t devt, void * drvdata, const char * fmt)'/>
<dec f='linux-4.14.y/drivers/base/core.c' l='2525' type='struct device * device_create(struct class * , struct device * , dev_t , void * , const char * )'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2525' c='device_create'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2525' u='a'/>
<use f='linux-4.14.y/drivers/base/core.c' l='2525' u='a'/>
<doc f='linux-4.14.y/drivers/base/core.c' l='2490'>/**
 * device_create - creates a device and registers it with sysfs
 * @class: pointer to the struct class that this device should be registered to
 * @parent: pointer to the parent struct device of this new device, if any
 * @devt: the dev_t for the char device to be added
 * @drvdata: the data to be added to the device for callbacks
 * @fmt: string for the device&apos;s name
 *
 * This function can be used by char device classes.  A struct device
 * will be created in sysfs, registered to the specified class.
 *
 * A &quot;dev&quot; file will be created, showing the dev_t for the device, if
 * the dev_t is not 0,0.
 * If a pointer to a parent struct device is passed in, the newly created
 * struct device will be a child of that device in sysfs.
 * The pointer to the struct device will be returned from the call.
 * Any further sysfs files that might be required can be created using this
 * pointer.
 *
 * Returns &amp;struct device pointer on success, or ERR_PTR() on error.
 *
 * Note: the struct class passed to this function must have previously
 * been created with a call to class_create().
 */</doc>
<use f='linux-4.14.y/drivers/char/mem.c' l='934' u='c' c='chr_dev_init'/>
<use f='linux-4.14.y/drivers/char/virtio_console.c' l='1449' u='c' c='add_port'/>
<use f='linux-4.14.y/drivers/dca/dca-sysfs.c' l='41' u='c' c='dca_sysfs_add_req'/>
<use f='linux-4.14.y/drivers/dca/dca-sysfs.c' l='70' u='c' c='dca_sysfs_add_provider'/>
<use f='linux-4.14.y/drivers/pps/pps.c' l='386' u='c' c='pps_register_cdev'/>
<use f='linux-4.14.y/drivers/scsi/sg.c' l='1551' u='c' c='sg_add_device'/>
<use f='linux-4.14.y/drivers/scsi/st.c' l='4204' u='c' c='create_one_cdev'/>
<use f='linux-4.14.y/drivers/tty/pty.c' l='942' u='c' c='unix98_pty_init'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='3325' u='c' c='tty_init'/>
<use f='linux-4.14.y/drivers/tty/vt/vc_screen.c' l='629' u='c' c='vcs_make_sysfs'/>
<use f='linux-4.14.y/drivers/tty/vt/vc_screen.c' l='631' u='c' c='vcs_make_sysfs'/>
<use f='linux-4.14.y/drivers/tty/vt/vc_screen.c' l='649' u='c' c='vcs_init'/>
<use f='linux-4.14.y/drivers/tty/vt/vc_screen.c' l='650' u='c' c='vcs_init'/>
<use f='linux-4.14.y/drivers/uio/uio.c' l='831' u='c' c='__uio_register_device'/>
<use f='linux-4.14.y/drivers/vfio/vfio.c' l='381' u='c' c='vfio_create_group'/>
<use f='linux-4.14.y/drivers/video/fbdev/core/fbcon.c' l='3630' u='c' c='fb_console_init'/>
<use f='linux-4.14.y/drivers/video/fbdev/core/fbmem.c' l='1664' u='c' c='do_register_framebuffer'/>
<use f='linux-4.14.y/net/netfilter/xt_IDLETIMER.c' l='280' u='c' c='idletimer_tg_init'/>
