<dec f='linux-4.18.y/include/linux/mm.h' l='1482' type='int get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<use f='linux-4.18.y/arch/x86/kvm/paging_tmpl.h' l='143' u='c' c='ept_cmpxchg_gpte'/>
<use f='linux-4.18.y/arch/x86/kvm/paging_tmpl.h' l='143' u='c' c='paging64_cmpxchg_gpte'/>
<use f='linux-4.18.y/arch/x86/kvm/paging_tmpl.h' l='143' u='c' c='paging32_cmpxchg_gpte'/>
<use f='linux-4.18.y/drivers/scsi/st.c' l='4924' u='c' c='sgl_map_user_pages'/>
<use f='linux-4.18.y/drivers/vhost/vhost.c' l='1661' u='c' c='set_bit_to_user'/>
<use f='linux-4.18.y/kernel/futex.c' l='541' u='c' c='get_futex_key'/>
<use f='linux-4.18.y/kernel/futex.c' l='547' u='c' c='get_futex_key'/>
<use f='linux-4.18.y/lib/iov_iter.c' l='1208' u='c' c='iov_iter_get_pages'/>
<use f='linux-4.18.y/lib/iov_iter.c' l='1208' u='c' c='iov_iter_get_pages'/>
<use f='linux-4.18.y/lib/iov_iter.c' l='1286' u='c' c='iov_iter_get_pages_alloc'/>
<use f='linux-4.18.y/lib/iov_iter.c' l='1286' u='c' c='iov_iter_get_pages_alloc'/>
<def f='linux-4.18.y/mm/gup.c' l='1833' ll='1876' type='int get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux-4.18.y/mm/gup.c' l='1817'>/**
 * get_user_pages_fast() - pin user pages in memory
 * @start:	starting user address
 * @nr_pages:	number of pages from start to pin
 * @write:	whether pages will be written to
 * @pages:	array that receives pointers to the pages pinned.
 *		Should be at least nr_pages long.
 *
 * Attempt to pin user pages in memory without taking mm-&gt;mmap_sem.
 * If not successful, it will fall back to taking the lock and
 * calling get_user_pages().
 *
 * Returns number of pages pinned. This may be fewer than the number
 * requested. If nr_pages is 0 or negative, returns 0. If no pages
 * were pinned, returns -errno.
 */</doc>
<def f='linux-4.18.y/mm/util.c' l='336' ll='341' type='int get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<dec f='linux-4.18.y/mm/util.c' l='342' type='int get_user_pages_fast(unsigned long , int , int , struct page ** )'/>
<use f='linux-4.18.y/mm/util.c' l='342' c='get_user_pages_fast'/>
<use f='linux-4.18.y/mm/util.c' l='342' u='a'/>
<use f='linux-4.18.y/mm/util.c' l='342' u='a'/>
<doc f='linux-4.18.y/mm/util.c' l='312'>/**
 * get_user_pages_fast() - pin user pages in memory
 * @start:	starting user address
 * @nr_pages:	number of pages from start to pin
 * @write:	whether pages will be written to
 * @pages:	array that receives pointers to the pages pinned.
 *		Should be at least nr_pages long.
 *
 * Returns number of pages pinned. This may be fewer than the number
 * requested. If nr_pages is 0 or negative, returns 0. If no pages
 * were pinned, returns -errno.
 *
 * get_user_pages_fast provides equivalent functionality to get_user_pages,
 * operating on current and current-&gt;mm, with force=0 and vma=NULL. However
 * unlike get_user_pages, it must be called without mmap_sem held.
 *
 * get_user_pages_fast may take mmap_sem and page table locks, so no
 * assumptions can be made about lack of locking. get_user_pages_fast is to be
 * implemented in a way that is advantageous (vs get_user_pages()) when the
 * user memory area is already faulted in and present in ptes. However if the
 * pages have to be faulted in, it may turn out to be slightly slower so
 * callers need to carefully consider what to use. On many architectures,
 * get_user_pages_fast simply falls back to get_user_pages.
 */</doc>
