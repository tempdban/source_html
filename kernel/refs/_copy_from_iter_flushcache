<dec f='linux-4.18.y/include/linux/uio.h' l='152' type='size_t _copy_from_iter_flushcache(void * addr, size_t bytes, struct iov_iter * i)'/>
<use f='linux-4.18.y/include/linux/uio.h' l='169' u='c' c='copy_from_iter_flushcache'/>
<doc f='linux-4.18.y/include/linux/uio.h' l='146'>/*
 * Note, users like pmem that depend on the stricter semantics of
 * copy_from_iter_flushcache() than copy_from_iter_nocache() must check for
 * IS_ENABLED(CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE) before assuming that the
 * destination is flushed from the cache on return.
 */</doc>
<def f='linux-4.18.y/lib/iov_iter.c' l='773' ll='790' type='size_t _copy_from_iter_flushcache(void * addr, size_t bytes, struct iov_iter * i)'/>
<dec f='linux-4.18.y/lib/iov_iter.c' l='791' type='size_t _copy_from_iter_flushcache(void * , size_t , struct iov_iter * )'/>
<use f='linux-4.18.y/lib/iov_iter.c' l='791' c='_copy_from_iter_flushcache'/>
<use f='linux-4.18.y/lib/iov_iter.c' l='791' u='a'/>
<use f='linux-4.18.y/lib/iov_iter.c' l='791' u='a'/>
<doc f='linux-4.18.y/lib/iov_iter.c' l='759'>/**
 * _copy_from_iter_flushcache - write destination through cpu cache
 * @addr: destination kernel address
 * @bytes: total transfer length
 * @iter: source iterator
 *
 * The pmem driver arranges for filesystem-dax to use this facility via
 * dax_copy_from_iter() for ensuring that writes to persistent memory
 * are flushed through the CPU cache. It is differentiated from
 * _copy_from_iter_nocache() in that guarantees all data is flushed for
 * all iterator types. The _copy_from_iter_nocache() only attempts to
 * bypass the cache for the ITER_IOVEC case, and on some archs may use
 * instructions that strand dirty-data in the cache.
 */</doc>
