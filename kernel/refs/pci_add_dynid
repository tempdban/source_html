<dec f='linux-4.18.y/include/linux/pci.h' l='1292' type='int pci_add_dynid(struct pci_driver * drv, unsigned int vendor, unsigned int device, unsigned int subvendor, unsigned int subdevice, unsigned int class, unsigned int class_mask, unsigned long driver_data)'/>
<def f='linux-4.18.y/drivers/pci/pci-driver.c' l='50' ll='75' type='int pci_add_dynid(struct pci_driver * drv, unsigned int vendor, unsigned int device, unsigned int subvendor, unsigned int subdevice, unsigned int class, unsigned int class_mask, unsigned long driver_data)'/>
<dec f='linux-4.18.y/drivers/pci/pci-driver.c' l='76' type='int pci_add_dynid(struct pci_driver * , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , unsigned long )'/>
<use f='linux-4.18.y/drivers/pci/pci-driver.c' l='76' c='pci_add_dynid'/>
<use f='linux-4.18.y/drivers/pci/pci-driver.c' l='76' u='a'/>
<use f='linux-4.18.y/drivers/pci/pci-driver.c' l='76' u='a'/>
<use f='linux-4.18.y/drivers/pci/pci-driver.c' l='150' u='c' c='new_id_store'/>
<doc f='linux-4.18.y/drivers/pci/pci-driver.c' l='29'>/**
 * pci_add_dynid - add a new PCI device ID to this driver and re-probe devices
 * @drv: target pci driver
 * @vendor: PCI vendor ID
 * @device: PCI device ID
 * @subvendor: PCI subvendor ID
 * @subdevice: PCI subdevice ID
 * @class: PCI class
 * @class_mask: PCI class mask
 * @driver_data: private driver data
 *
 * Adds a new dynamic pci device ID to this driver and causes the
 * driver to probe for all devices again.  @drv must have been
 * registered prior to calling this function.
 *
 * CONTEXT:
 * Does GFP_KERNEL allocation.
 *
 * RETURNS:
 * 0 on success, -errno on failure.
 */</doc>
<use f='linux-4.18.y/drivers/pci/pci-stub.c' l='78' u='c' c='pci_stub_init'/>
<use f='linux-4.18.y/drivers/vfio/pci/vfio_pci.c' l='1432' u='c' c='vfio_pci_fill_ids'/>
