<dec f='linux-4.14.y/include/linux/mm.h' l='2220' type='void truncate_inode_pages(struct address_space * , loff_t )'/>
<doc f='linux-4.14.y/include/linux/mm.h' l='2219'>/* truncate.c */</doc>
<use f='linux-4.14.y/fs/block_dev.c' l='98' u='c' c='kill_bdev'/>
<use f='linux-4.14.y/fs/ext4/truncate.h' l='15' u='c' c='ext4_truncate_failed_write'/>
<use f='linux-4.14.y/fs/ext4/ioctl.c' l='122' u='c' c='swap_inode_boot_loader'/>
<use f='linux-4.14.y/fs/ext4/ioctl.c' l='123' u='c' c='swap_inode_boot_loader'/>
<use f='linux-4.14.y/fs/ext4/super.c' l='2537' u='c' c='ext4_orphan_cleanup'/>
<def f='linux-4.14.y/mm/truncate.c' l='427' ll='430' type='void truncate_inode_pages(struct address_space * mapping, loff_t lstart)'/>
<dec f='linux-4.14.y/mm/truncate.c' l='431' type='void truncate_inode_pages(struct address_space * , loff_t )'/>
<use f='linux-4.14.y/mm/truncate.c' l='431' c='truncate_inode_pages'/>
<use f='linux-4.14.y/mm/truncate.c' l='431' u='a'/>
<use f='linux-4.14.y/mm/truncate.c' l='431' u='a'/>
<use f='linux-4.14.y/mm/truncate.c' l='475' u='c' c='truncate_inode_pages_final'/>
<use f='linux-4.14.y/mm/truncate.c' l='757' u='c' c='truncate_pagecache'/>
<doc f='linux-4.14.y/mm/truncate.c' l='415'>/**
 * truncate_inode_pages - truncate *all* the pages from an offset
 * @mapping: mapping to truncate
 * @lstart: offset from which to truncate
 *
 * Called under (and serialised by) inode-&gt;i_mutex.
 *
 * Note: When this function returns, there can be a page in the process of
 * deletion (inside __delete_from_page_cache()) in the specified range.  Thus
 * mapping-&gt;nrpages can be non-zero when this function returns even after
 * truncation of the whole mapping.
 */</doc>
<dec f='linux-4.14.y/include/linux/mm.h' l='2220' type='void truncate_inode_pages(struct address_space * , loff_t )'/>
<doc f='linux-4.14.y/include/linux/mm.h' l='2219'>/* truncate.c */</doc>
<use f='linux-4.14.y/fs/block_dev.c' l='98' u='c' c='kill_bdev'/>
<use f='linux-4.14.y/fs/ext4/truncate.h' l='15' u='c' c='ext4_truncate_failed_write'/>
<use f='linux-4.14.y/fs/ext4/ioctl.c' l='122' u='c' c='swap_inode_boot_loader'/>
<use f='linux-4.14.y/fs/ext4/ioctl.c' l='123' u='c' c='swap_inode_boot_loader'/>
<use f='linux-4.14.y/fs/ext4/super.c' l='2537' u='c' c='ext4_orphan_cleanup'/>
<use f='linux-4.14.y/fs/f2fs/inline.c' l='448' u='c' c='f2fs_add_inline_entries'/>
<use f='linux-4.14.y/fs/ntfs/logfile.c' l='758' u='c' c='ntfs_empty_logfile'/>
<use f='linux-4.14.y/fs/ntfs/logfile.c' l='844' u='c' c='ntfs_empty_logfile'/>
<def f='linux-4.14.y/mm/truncate.c' l='427' ll='430' type='void truncate_inode_pages(struct address_space * mapping, loff_t lstart)'/>
<dec f='linux-4.14.y/mm/truncate.c' l='431' type='void truncate_inode_pages(struct address_space * , loff_t )'/>
<use f='linux-4.14.y/mm/truncate.c' l='431' c='truncate_inode_pages'/>
<use f='linux-4.14.y/mm/truncate.c' l='431' u='a'/>
<use f='linux-4.14.y/mm/truncate.c' l='431' u='a'/>
<use f='linux-4.14.y/mm/truncate.c' l='475' u='c' c='truncate_inode_pages_final'/>
<use f='linux-4.14.y/mm/truncate.c' l='757' u='c' c='truncate_pagecache'/>
<doc f='linux-4.14.y/mm/truncate.c' l='415'>/**
 * truncate_inode_pages - truncate *all* the pages from an offset
 * @mapping: mapping to truncate
 * @lstart: offset from which to truncate
 *
 * Called under (and serialised by) inode-&gt;i_mutex.
 *
 * Note: When this function returns, there can be a page in the process of
 * deletion (inside __delete_from_page_cache()) in the specified range.  Thus
 * mapping-&gt;nrpages can be non-zero when this function returns even after
 * truncation of the whole mapping.
 */</doc>
