<def f='linux-4.14.y/include/linux/dma-buf.h' l='324' ll='329'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/dma-buf.h' l='308'>/**
 * struct dma_buf_attachment - holds device-buffer attachment data
 * @dmabuf: buffer for this attachment.
 * @dev: device attached to the buffer.
 * @node: list of dma_buf_attachment.
 * @priv: exporter specific attachment data.
 *
 * This structure holds the attachment information between the dma_buf buffer
 * and its user device(s). The list contains one attachment struct per device
 * attached to the buffer.
 *
 * An attachment is created by calling dma_buf_attach(), and released again by
 * calling dma_buf_detach(). The DMA mapping itself needed to initiate a
 * transfer is created by dma_buf_map_attachment() and freed again by calling
 * dma_buf_unmap_attachment().
 */</doc>
<mbr r='dma_buf_attachment::dmabuf' o='0' t='struct dma_buf *'/>
<mbr r='dma_buf_attachment::dev' o='64' t='struct device *'/>
<mbr r='dma_buf_attachment::node' o='128' t='struct list_head'/>
<mbr r='dma_buf_attachment::priv' o='256' t='void *'/>
<def f='linux-4.14.y/include/linux/dma-buf.h' l='324' ll='329'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/dma-buf.h' l='308'>/**
 * struct dma_buf_attachment - holds device-buffer attachment data
 * @dmabuf: buffer for this attachment.
 * @dev: device attached to the buffer.
 * @node: list of dma_buf_attachment.
 * @priv: exporter specific attachment data.
 *
 * This structure holds the attachment information between the dma_buf buffer
 * and its user device(s). The list contains one attachment struct per device
 * attached to the buffer.
 *
 * An attachment is created by calling dma_buf_attach(), and released again by
 * calling dma_buf_detach(). The DMA mapping itself needed to initiate a
 * transfer is created by dma_buf_map_attachment() and freed again by calling
 * dma_buf_unmap_attachment().
 */</doc>
<mbr r='dma_buf_attachment::dmabuf' o='0' t='struct dma_buf *'/>
<mbr r='dma_buf_attachment::dev' o='64' t='struct device *'/>
<mbr r='dma_buf_attachment::node' o='128' t='struct list_head'/>
<mbr r='dma_buf_attachment::priv' o='256' t='void *'/>
