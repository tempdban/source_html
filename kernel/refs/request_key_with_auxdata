<dec f='linux-4.14.y/include/linux/key.h' l='276' type='struct key * request_key_with_auxdata(struct key_type * type, const char * description, const void * callout_info, size_t callout_len, void * aux)'/>
<def f='linux-4.14.y/security/keys/request_key.c' l='684' ll='703' type='struct key * request_key_with_auxdata(struct key_type * type, const char * description, const void * callout_info, size_t callout_len, void * aux)'/>
<dec f='linux-4.14.y/security/keys/request_key.c' l='704' type='struct key * request_key_with_auxdata(struct key_type * , const char * , const void * , size_t , void * )'/>
<use f='linux-4.14.y/security/keys/request_key.c' l='704' c='request_key_with_auxdata'/>
<use f='linux-4.14.y/security/keys/request_key.c' l='704' u='a'/>
<use f='linux-4.14.y/security/keys/request_key.c' l='704' u='a'/>
<doc f='linux-4.14.y/security/keys/request_key.c' l='670'>/**
 * request_key_with_auxdata - Request a key with auxiliary data for the upcaller
 * @type: The type of key we want.
 * @description: The searchable description of the key.
 * @callout_info: The data to pass to the instantiation upcall (or NULL).
 * @callout_len: The length of callout_info.
 * @aux: Auxiliary data for the upcall.
 *
 * As for request_key_and_link() except that it does not add the returned key
 * to a keyring if found and new keys are always allocated in the user&apos;s quota.
 *
 * Furthermore, it then works as wait_for_key_construction() to wait for the
 * completion of keys undergoing construction with a non-interruptible wait.
 */</doc>
