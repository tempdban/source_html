<dec f='linux-4.18.y/include/drm/drm_modeset_lock.h' l='119' type='int drm_modeset_lock_single_interruptible(struct drm_modeset_lock * lock)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_debugfs_crc.c' l='158' u='c' c='crtc_crc_open'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='353' ll='356' type='int drm_modeset_lock_single_interruptible(struct drm_modeset_lock * lock)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='357' type='int drm_modeset_lock_single_interruptible(struct drm_modeset_lock * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='357' c='drm_modeset_lock_single_interruptible'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='357' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='357' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='344'>/**
 * drm_modeset_lock_single_interruptible - take a single modeset lock
 * @lock: lock to take
 *
 * This function behaves as drm_modeset_lock() with a NULL context,
 * but performs interruptible waits.
 *
 * This function returns 0 on success, or -ERESTARTSYS when interrupted.
 */</doc>
