<def f='linux-4.14.y/include/linux/fscrypt_notsupp.h' l='71' ll='75' type='int fscrypt_has_permitted_context(struct inode * parent, struct inode * child)'/>
<use f='linux-4.14.y/fs/ext4/file.c' l='418' u='c' c='ext4_file_open'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='1590' u='c' c='ext4_lookup'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3228' u='c' c='ext4_link'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3557' u='c' c='ext4_rename'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3736' u='c' c='ext4_cross_rename'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3737' u='c' c='ext4_cross_rename'/>
<dec f='linux-4.14.y/include/linux/fscrypt_supp.h' l='41' type='int fscrypt_has_permitted_context(struct inode * , struct inode * )'/>
<def f='linux-4.14.y/fs/crypto/policy.c' l='157' ll='226' type='int fscrypt_has_permitted_context(struct inode * parent, struct inode * child)'/>
<dec f='linux-4.14.y/fs/crypto/policy.c' l='227' type='int fscrypt_has_permitted_context(struct inode * , struct inode * )'/>
<use f='linux-4.14.y/fs/crypto/policy.c' l='227' c='fscrypt_has_permitted_context'/>
<use f='linux-4.14.y/fs/crypto/policy.c' l='227' u='a'/>
<use f='linux-4.14.y/fs/crypto/policy.c' l='227' u='a'/>
<doc f='linux-4.14.y/fs/crypto/policy.c' l='137'>/**
 * fscrypt_has_permitted_context() - is a file&apos;s encryption policy permitted
 *				     within its directory?
 *
 * @parent: inode for parent directory
 * @child: inode for file being looked up, opened, or linked into @parent
 *
 * Filesystems must call this before permitting access to an inode in a
 * situation where the parent directory is encrypted (either before allowing
 * -&gt;lookup() to succeed, or for a regular file before allowing it to be opened)
 * and before any operation that involves linking an inode into an encrypted
 * directory, including link, rename, and cross rename.  It enforces the
 * constraint that within a given encrypted directory tree, all files use the
 * same encryption policy.  The pre-access check is needed to detect potentially
 * malicious offline violations of this constraint, while the link and rename
 * checks are needed to prevent online violations of this constraint.
 *
 * Return: 1 if permitted, 0 if forbidden.  If forbidden, the caller must fail
 * the filesystem operation with EPERM.
 */</doc>
<use f='linux-4.14.y/fs/ext4/file.c' l='418' u='c' c='ext4_file_open'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='1590' u='c' c='ext4_lookup'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3228' u='c' c='ext4_link'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3557' u='c' c='ext4_rename'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3736' u='c' c='ext4_cross_rename'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3737' u='c' c='ext4_cross_rename'/>
<use f='linux-4.14.y/fs/f2fs/file.c' l='469' u='c' c='f2fs_file_open'/>
<use f='linux-4.14.y/fs/f2fs/namei.c' l='224' u='c' c='f2fs_link'/>
<use f='linux-4.14.y/fs/f2fs/namei.c' l='383' u='c' c='f2fs_lookup'/>
<use f='linux-4.14.y/fs/f2fs/namei.c' l='748' u='c' c='f2fs_rename'/>
<use f='linux-4.14.y/fs/f2fs/namei.c' l='942' u='c' c='f2fs_cross_rename'/>
<use f='linux-4.14.y/fs/f2fs/namei.c' l='943' u='c' c='f2fs_cross_rename'/>
