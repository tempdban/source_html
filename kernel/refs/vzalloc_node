<dec f='linux-4.14.y/include/linux/vmalloc.h' l='75' type='void * vzalloc_node(unsigned long size, int node)'/>
<def f='linux-4.14.y/mm/vmalloc.c' l='1916' ll='1920' type='void * vzalloc_node(unsigned long size, int node)'/>
<dec f='linux-4.14.y/mm/vmalloc.c' l='1921' type='void * vzalloc_node(unsigned long , int )'/>
<use f='linux-4.14.y/mm/vmalloc.c' l='1921' c='vzalloc_node'/>
<use f='linux-4.14.y/mm/vmalloc.c' l='1921' u='a'/>
<use f='linux-4.14.y/mm/vmalloc.c' l='1921' u='a'/>
<doc f='linux-4.14.y/mm/vmalloc.c' l='1904'>/**
 * vzalloc_node - allocate memory on a specific node with zero fill
 * @size:	allocation size
 * @node:	numa node
 *
 * Allocate enough pages to cover @size from the page level
 * allocator and map them into contiguous kernel virtual space.
 * The memory allocated is set to zero.
 *
 * For tight control over page level allocator and protection flags
 * use __vmalloc_node() instead.
 */</doc>
<dec f='linux-4.14.y/include/linux/vmalloc.h' l='75' type='void * vzalloc_node(unsigned long size, int node)'/>
<def f='linux-4.14.y/mm/vmalloc.c' l='1916' ll='1920' type='void * vzalloc_node(unsigned long size, int node)'/>
<dec f='linux-4.14.y/mm/vmalloc.c' l='1921' type='void * vzalloc_node(unsigned long , int )'/>
<use f='linux-4.14.y/mm/vmalloc.c' l='1921' c='vzalloc_node'/>
<use f='linux-4.14.y/mm/vmalloc.c' l='1921' u='a'/>
<use f='linux-4.14.y/mm/vmalloc.c' l='1921' u='a'/>
<doc f='linux-4.14.y/mm/vmalloc.c' l='1904'>/**
 * vzalloc_node - allocate memory on a specific node with zero fill
 * @size:	allocation size
 * @node:	numa node
 *
 * Allocate enough pages to cover @size from the page level
 * allocator and map them into contiguous kernel virtual space.
 * The memory allocated is set to zero.
 *
 * For tight control over page level allocator and protection flags
 * use __vmalloc_node() instead.
 */</doc>
