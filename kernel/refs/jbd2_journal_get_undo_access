<dec f='linux-4.18.y/include/linux/jbd2.h' l='1357' type='int jbd2_journal_get_undo_access(handle_t * , struct buffer_head * )'/>
<dec f='linux-4.18.y/fs/jbd2/journal.c' l='65' type='int jbd2_journal_get_undo_access(handle_t * , struct buffer_head * )'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='65' c='jbd2_journal_get_undo_access'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='65' u='a'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='65' u='a'/>
<def f='linux-4.18.y/fs/jbd2/transaction.c' l='1216' ll='1261' type='int jbd2_journal_get_undo_access(handle_t * handle, struct buffer_head * bh)'/>
<doc f='linux-4.18.y/fs/jbd2/transaction.c' l='1190'>/**
 * int jbd2_journal_get_undo_access() -  Notify intent to modify metadata with
 *     non-rewindable consequences
 * @handle: transaction
 * @bh: buffer to undo
 *
 * Sometimes there is a need to distinguish between metadata which has
 * been committed to disk and that which has not.  The ext3fs code uses
 * this for freeing and allocating space, we have to make sure that we
 * do not reuse freed space until the deallocation has been committed,
 * since if we overwrote that space we would make the delete
 * un-rewindable in case of a crash.
 *
 * To deal with that, jbd2_journal_get_undo_access requests write access to a
 * buffer for parts of non-rewindable operations such as delete
 * operations on the bitmaps.  The journaling code must keep a copy of
 * the buffer&apos;s contents prior to the undo_access call until such time
 * as we know that the buffer has definitely been committed to disk.
 *
 * We never need to know which transaction the committed data is part
 * of, buffers touched here are guaranteed to be dirtied later and so
 * will be committed to a new transaction in due course, at which point
 * we can discard the old committed data pointer.
 *
 * Returns error number or 0 on success.
 */</doc>
