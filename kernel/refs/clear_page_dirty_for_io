<dec f='linux-4.18.y/include/linux/mm.h' l='1554' type='int clear_page_dirty_for_io(struct page * page)'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='1746' u='c' c='mpage_release_unused_pages'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='2188' u='c' c='mpage_submit_page'/>
<use f='linux-4.18.y/fs/f2fs/checkpoint.c' l='357' u='c' c='f2fs_sync_meta_pages'/>
<use f='linux-4.18.y/fs/f2fs/checkpoint.c' l='1200' u='c' c='commit_checkpoint'/>
<use f='linux-4.18.y/fs/f2fs/data.c' l='2021' u='c' c='f2fs_write_cache_pages'/>
<use f='linux-4.18.y/fs/f2fs/dir.c' l='734' u='c' c='f2fs_delete_entry'/>
<use f='linux-4.18.y/fs/f2fs/gc.c' l='696' u='c' c='move_data_block'/>
<use f='linux-4.18.y/fs/f2fs/gc.c' l='783' u='c' c='move_data_page'/>
<use f='linux-4.18.y/fs/f2fs/inline.c' l='149' u='c' c='f2fs_convert_inline_page'/>
<use f='linux-4.18.y/fs/f2fs/node.c' l='107' u='c' c='clear_node_page_dirty'/>
<use f='linux-4.18.y/fs/f2fs/node.c' l='1279' u='c' c='flush_inline_data'/>
<use f='linux-4.18.y/fs/f2fs/node.c' l='1447' u='c' c='f2fs_move_node_page'/>
<use f='linux-4.18.y/fs/f2fs/node.c' l='1547' u='c' c='f2fs_fsync_node_pages'/>
<use f='linux-4.18.y/fs/f2fs/node.c' l='1663' u='c' c='f2fs_sync_node_pages'/>
<use f='linux-4.18.y/fs/f2fs/segment.c' l='385' u='c' c='__f2fs_commit_inmem_pages'/>
<use f='linux-4.18.y/fs/fuse/file.c' l='2019' u='c' c='fuse_launder_page'/>
<use f='linux-4.18.y/mm/page-writeback.c' l='2236' u='c' c='write_cache_pages'/>
<use f='linux-4.18.y/mm/page-writeback.c' l='2374' u='c' c='write_one_page'/>
<def f='linux-4.18.y/mm/page-writeback.c' l='2647' ll='2705' type='int clear_page_dirty_for_io(struct page * page)'/>
<dec f='linux-4.18.y/mm/page-writeback.c' l='2706' type='int clear_page_dirty_for_io(struct page * )'/>
<use f='linux-4.18.y/mm/page-writeback.c' l='2706' c='clear_page_dirty_for_io'/>
<use f='linux-4.18.y/mm/page-writeback.c' l='2706' u='a'/>
<use f='linux-4.18.y/mm/page-writeback.c' l='2706' u='a'/>
<doc f='linux-4.18.y/mm/page-writeback.c' l='2633'>/*
 * Clear a page&apos;s dirty flag, while caring for dirty memory accounting.
 * Returns true if the page was previously dirty.
 *
 * This is for preparing to put the page under writeout.  We leave the page
 * tagged as dirty in the radix tree so that a concurrent write-for-sync
 * can discover it via a PAGECACHE_TAG_DIRTY walk.  The -&gt;writepage
 * implementation will run either set_page_writeback() or set_page_dirty(),
 * at which stage we bring the page&apos;s dirty flag and radix-tree dirty tag
 * back into sync.
 *
 * This incoherency between the page&apos;s dirty flag and radix-tree tag is
 * unfortunate, but it only exists while the page is locked.
 */</doc>
<use f='linux-4.18.y/mm/vmscan.c' l='671' u='c' c='pageout'/>
