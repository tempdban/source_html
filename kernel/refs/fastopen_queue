<def f='linux-4.14.y/include/net/request_sock.h' l='144' ll='153'/>
<size>32</size>
<doc f='linux-4.14.y/include/net/request_sock.h' l='127'>/*
 * For a TCP Fast Open listener -
 *	lock - protects the access to all the reqsk, which is co-owned by
 *		the listener and the child socket.
 *	qlen - pending TFO requests (still in TCP_SYN_RECV).
 *	max_qlen - max TFO reqs allowed before TFO is disabled.
 *
 *	XXX (TFO) - ideally these fields can be made as part of &quot;listen_sock&quot;
 *	structure above. But there is some implementation difficulty due to
 *	listen_sock being part of request_sock_queue hence will be freed when
 *	a listener is stopped. But TFO related fields may continue to be
 *	accessed even after a listener is closed, until its sk_refcnt drops
 *	to 0 implying no more outstanding TFO reqs. One solution is to keep
 *	listen_opt around until	sk_refcnt drops to 0. But there is some other
 *	complexity that needs to be resolved. E.g., a listener can be disabled
 *	temporarily through shutdown()-&gt;tcp_disconnect(), and re-enabled later.
 */</doc>
<mbr r='fastopen_queue::rskq_rst_head' o='0' t='struct request_sock *'/>
<mbr r='fastopen_queue::rskq_rst_tail' o='64' t='struct request_sock *'/>
<mbr r='fastopen_queue::lock' o='128' t='spinlock_t'/>
<mbr r='fastopen_queue::qlen' o='160' t='int'/>
<mbr r='fastopen_queue::max_qlen' o='192' t='int'/>
