<dec f='linux-4.14.y/include/linux/mm.h' l='284' type='pgprot_t [16]'/>
<doc f='linux-4.14.y/include/linux/mm.h' l='280'>/*
 * mapping from the currently active vm_flags protection bits (the
 * low four bits) to a page protection mask..
 */</doc>
<def f='linux-4.14.y/mm/mmap.c' l='98' ll='101' type='pgprot_t [16]'/>
<use f='linux-4.14.y/mm/mmap.c' l='105' u='m' c='vm_get_page_prot'/>
<use f='linux-4.14.y/mm/mmap.c' l='105' u='m' c='vm_get_page_prot'/>
<doc f='linux-4.14.y/mm/mmap.c' l='78'>/* description of effects of mapping type and prot in current implementation.
 * this is due to the limited x86 page protection hardware.  The expected
 * behavior is in parens:
 *
 * map_type	prot
 *		PROT_NONE	PROT_READ	PROT_WRITE	PROT_EXEC
 * MAP_SHARED	r: (no) no	r: (yes) yes	r: (no) yes	r: (no) yes
 *		w: (no) no	w: (no) no	w: (yes) yes	w: (no) no
 *		x: (no) no	x: (no) yes	x: (no) yes	x: (yes) yes
 *
 * MAP_PRIVATE	r: (no) no	r: (yes) yes	r: (no) yes	r: (no) yes
 *		w: (no) no	w: (no) no	w: (copy) copy	w: (no) no
 *		x: (no) no	x: (no) yes	x: (no) yes	x: (yes) yes
 *
 * On arm64, PROT_EXEC has the following behaviour for both MAP_SHARED and
 * MAP_PRIVATE:
 *								r: (no) no
 *								w: (no) no
 *								x: (yes) yes
 */</doc>
