<dec f='linux-4.18.y/include/drm/drm_blend.h' l='51' type='int drm_plane_create_zpos_immutable_property(struct drm_plane * plane, unsigned int zpos)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_blend.c' l='317' ll='337' type='int drm_plane_create_zpos_immutable_property(struct drm_plane * plane, unsigned int zpos)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_blend.c' l='338' type='int drm_plane_create_zpos_immutable_property(struct drm_plane * , unsigned int )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_blend.c' l='338' c='drm_plane_create_zpos_immutable_property'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_blend.c' l='338' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_blend.c' l='338' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_blend.c' l='301'>/**
 * drm_plane_create_zpos_immutable_property - create immuttable zpos property
 * @plane: drm plane
 * @zpos: value of zpos property
 *
 * This function initializes generic immutable zpos property and enables
 * support for it in drm core. Using this property driver lets userspace
 * to get the arrangement of the planes for blending operation and notifies
 * it that the hardware (or driver) doesn&apos;t support changing of the planes&apos;
 * order. For mutable zpos see drm_plane_create_zpos_property().
 *
 * The property exposed to userspace is called &quot;zpos&quot;.
 *
 * Returns:
 * Zero on success, negative errno on failure.
 */</doc>
