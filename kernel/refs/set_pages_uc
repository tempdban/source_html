<dec f='linux-4.14.y/arch/x86/include/asm/set_memory.h' l='80' type='int set_pages_uc(struct page * page, int numpages)'/>
<doc f='linux-4.14.y/arch/x86/include/asm/set_memory.h' l='60'>/*
 * For legacy compatibility with the old APIs, a few functions
 * are provided that work on a &quot;struct page&quot;.
 * These functions operate ONLY on the 1:1 kernel mapping of the
 * memory that the struct page represents, and internally just
 * call the set_memory_* function. See the description of the
 * set_memory_* function for more details on conventions.
 *
 * These APIs should be considered *deprecated* and are likely going to
 * be removed in the future.
 * The reason for this is the implicit operation on the 1:1 mapping only,
 * making this not a generally useful API.
 *
 * Specifically, many users of the old APIs had a virtual address,
 * called virt_to_page() or vmalloc_to_page() on that address to
 * get a struct page* that the old API required.
 * To convert these cases, use set_memory_*() on the original
 * virtual address, do not use these functions.
 */</doc>
<def f='linux-4.14.y/arch/x86/mm/pageattr.c' l='1844' ll='1849' type='int set_pages_uc(struct page * page, int numpages)'/>
<dec f='linux-4.14.y/arch/x86/mm/pageattr.c' l='1850' type='int set_pages_uc(struct page * , int )'/>
<use f='linux-4.14.y/arch/x86/mm/pageattr.c' l='1850' c='set_pages_uc'/>
<use f='linux-4.14.y/arch/x86/mm/pageattr.c' l='1850' u='a'/>
<use f='linux-4.14.y/arch/x86/mm/pageattr.c' l='1850' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_tt.c' l='90' u='c' c='ttm_tt_set_page_caching'/>
