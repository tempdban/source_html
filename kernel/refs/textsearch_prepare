<dec f='linux-4.14.y/include/linux/textsearch.h' l='151' type='struct ts_config * textsearch_prepare(const char * , const void * , unsigned int , gfp_t , int )'/>
<def f='linux-4.14.y/lib/textsearch.c' l='261' ll='301' type='struct ts_config * textsearch_prepare(const char * algo, const void * pattern, unsigned int len, gfp_t gfp_mask, int flags)'/>
<dec f='linux-4.14.y/lib/textsearch.c' l='302' type='struct ts_config * textsearch_prepare(const char * , const void * , unsigned int , gfp_t , int )'/>
<use f='linux-4.14.y/lib/textsearch.c' l='302' c='textsearch_prepare'/>
<use f='linux-4.14.y/lib/textsearch.c' l='302' u='a'/>
<use f='linux-4.14.y/lib/textsearch.c' l='302' u='a'/>
<doc f='linux-4.14.y/lib/textsearch.c' l='243'>/**
 * textsearch_prepare - Prepare a search
 * @algo: name of search algorithm
 * @pattern: pattern data
 * @len: length of pattern
 * @gfp_mask: allocation mask
 * @flags: search flags
 *
 * Looks up the search algorithm module and creates a new textsearch
 * configuration for the specified pattern.
 *
 * Note: The format of the pattern may not be compatible between
 *       the various search algorithms.
 *
 * Returns a new textsearch configuration according to the specified
 * parameters or a ERR_PTR(). If a zero length pattern is passed, this
 * function returns EINVAL.
 */</doc>
<use f='linux-4.14.y/net/netfilter/xt_string.c' l='58' u='c' c='string_mt_check'/>
