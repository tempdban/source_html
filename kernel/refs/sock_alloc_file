<dec f='linux-4.14.y/include/linux/net.h' l='234' type='struct file * sock_alloc_file(struct socket * sock, int flags, const char * dname)'/>
<def f='linux-4.14.y/net/socket.c' l='395' ll='428' type='struct file * sock_alloc_file(struct socket * sock, int flags, const char * dname)'/>
<dec f='linux-4.14.y/net/socket.c' l='429' type='struct file * sock_alloc_file(struct socket * , int , const char * )'/>
<use f='linux-4.14.y/net/socket.c' l='429' c='sock_alloc_file'/>
<use f='linux-4.14.y/net/socket.c' l='429' u='a'/>
<use f='linux-4.14.y/net/socket.c' l='429' u='a'/>
<use f='linux-4.14.y/net/socket.c' l='438' u='c' c='sock_map_fd'/>
<use f='linux-4.14.y/net/socket.c' l='1409' u='c' c='SYSC_socketpair'/>
<use f='linux-4.14.y/net/socket.c' l='1415' u='c' c='SYSC_socketpair'/>
<use f='linux-4.14.y/net/socket.c' l='1573' u='c' c='SYSC_accept4'/>
<doc f='linux-4.14.y/net/socket.c' l='378'>/*
 *	Obtains the first available file descriptor and sets it up for use.
 *
 *	These functions create file structures and maps them to fd space
 *	of the current process. On success it returns file descriptor
 *	and file struct implicitly stored in sock-&gt;file.
 *	Note that another thread may close file descriptor before we return
 *	from this function. We use the fact that now we do not refer
 *	to socket after mapping. If one day we will need it, this
 *	function will increment ref. count on file by 1.
 *
 *	In any case returned fd MAY BE not valid!
 *	This race condition is unavoidable
 *	with shared fd spaces, we cannot solve it inside kernel,
 *	but we take care of internal coherence yet.
 */</doc>
<dec f='linux-4.14.y/include/linux/net.h' l='234' type='struct file * sock_alloc_file(struct socket * sock, int flags, const char * dname)'/>
<def f='linux-4.14.y/net/socket.c' l='395' ll='428' type='struct file * sock_alloc_file(struct socket * sock, int flags, const char * dname)'/>
<dec f='linux-4.14.y/net/socket.c' l='429' type='struct file * sock_alloc_file(struct socket * , int , const char * )'/>
<use f='linux-4.14.y/net/socket.c' l='429' c='sock_alloc_file'/>
<use f='linux-4.14.y/net/socket.c' l='429' u='a'/>
<use f='linux-4.14.y/net/socket.c' l='429' u='a'/>
<use f='linux-4.14.y/net/socket.c' l='438' u='c' c='sock_map_fd'/>
<use f='linux-4.14.y/net/socket.c' l='1409' u='c' c='SYSC_socketpair'/>
<use f='linux-4.14.y/net/socket.c' l='1415' u='c' c='SYSC_socketpair'/>
<use f='linux-4.14.y/net/socket.c' l='1573' u='c' c='SYSC_accept4'/>
<doc f='linux-4.14.y/net/socket.c' l='378'>/*
 *	Obtains the first available file descriptor and sets it up for use.
 *
 *	These functions create file structures and maps them to fd space
 *	of the current process. On success it returns file descriptor
 *	and file struct implicitly stored in sock-&gt;file.
 *	Note that another thread may close file descriptor before we return
 *	from this function. We use the fact that now we do not refer
 *	to socket after mapping. If one day we will need it, this
 *	function will increment ref. count on file by 1.
 *
 *	In any case returned fd MAY BE not valid!
 *	This race condition is unavoidable
 *	with shared fd spaces, we cannot solve it inside kernel,
 *	but we take care of internal coherence yet.
 */</doc>
