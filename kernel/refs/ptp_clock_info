<def f='linux-4.14.y/include/linux/ptp_clock_kernel.h' l='113' ll='135'/>
<size>128</size>
<doc f='linux-4.14.y/include/linux/ptp_clock_kernel.h' l='42'>/**
 * struct ptp_clock_info - decribes a PTP hardware clock
 *
 * @owner:     The clock driver should set to THIS_MODULE.
 * @name:      A short &quot;friendly name&quot; to identify the clock and to
 *             help distinguish PHY based devices from MAC based ones.
 *             The string is not meant to be a unique id.
 * @max_adj:   The maximum possible frequency adjustment, in parts per billon.
 * @n_alarm:   The number of programmable alarms.
 * @n_ext_ts:  The number of external time stamp channels.
 * @n_per_out: The number of programmable periodic signals.
 * @n_pins:    The number of programmable pins.
 * @pps:       Indicates whether the clock supports a PPS callback.
 * @pin_config: Array of length &apos;n_pins&apos;. If the number of
 *              programmable pins is nonzero, then drivers must
 *              allocate and initialize this array.
 *
 * clock operations
 *
 * @adjfine:  Adjusts the frequency of the hardware clock.
 *            parameter scaled_ppm: Desired frequency offset from
 *            nominal frequency in parts per million, but with a
 *            16 bit binary fractional field.
 *
 * @adjfreq:  Adjusts the frequency of the hardware clock.
 *            This method is deprecated.  New drivers should implement
 *            the @adjfine method instead.
 *            parameter delta: Desired frequency offset from nominal frequency
 *            in parts per billion
 *
 * @adjtime:  Shifts the time of the hardware clock.
 *            parameter delta: Desired change in nanoseconds.
 *
 * @gettime64:  Reads the current time from the hardware clock.
 *              parameter ts: Holds the result.
 *
 * @getcrosststamp:  Reads the current time from the hardware clock and
 *                   system clock simultaneously.
 *                   parameter cts: Contains timestamp (device,system) pair,
 *                   where system time is realtime and monotonic.
 *
 * @settime64:  Set the current time on the hardware clock.
 *              parameter ts: Time value to set.
 *
 * @enable:   Request driver to enable or disable an ancillary feature.
 *            parameter request: Desired resource to enable or disable.
 *            parameter on: Caller passes one to enable or zero to disable.
 *
 * @verify:   Confirm that a pin can perform a given function. The PTP
 *            Hardware Clock subsystem maintains the &apos;pin_config&apos;
 *            array on behalf of the drivers, but the PHC subsystem
 *            assumes that every pin can perform every function. This
 *            hook gives drivers a way of telling the core about
 *            limitations on specific pins. This function must return
 *            zero if the function can be assigned to this pin, and
 *            nonzero otherwise.
 *            parameter pin: index of the pin in question.
 *            parameter func: the desired function to use.
 *            parameter chan: the function channel index to use.
 *
 * @do_work:  Request driver to perform auxiliary (periodic) operations
 *	      Driver should return delay of the next auxiliary work scheduling
 *	      time (&gt;=0) or negative value in case further scheduling
 *	      is not required.
 *
 * Drivers should embed their ptp_clock_info within a private
 * structure, obtaining a reference to it using container_of().
 *
 * The callbacks must all return zero on success, non-zero otherwise.
 */</doc>
<mbr r='ptp_clock_info::owner' o='0' t='struct module *'/>
<mbr r='ptp_clock_info::name' o='64' t='char [16]'/>
<mbr r='ptp_clock_info::max_adj' o='192' t='s32'/>
<mbr r='ptp_clock_info::n_alarm' o='224' t='int'/>
<mbr r='ptp_clock_info::n_ext_ts' o='256' t='int'/>
<mbr r='ptp_clock_info::n_per_out' o='288' t='int'/>
<mbr r='ptp_clock_info::n_pins' o='320' t='int'/>
<mbr r='ptp_clock_info::pps' o='352' t='int'/>
<mbr r='ptp_clock_info::pin_config' o='384' t='struct ptp_pin_desc *'/>
<mbr r='ptp_clock_info::adjfine' o='448' t='int (*)(struct ptp_clock_info *, long)'/>
<mbr r='ptp_clock_info::adjfreq' o='512' t='int (*)(struct ptp_clock_info *, s32)'/>
<mbr r='ptp_clock_info::adjtime' o='576' t='int (*)(struct ptp_clock_info *, s64)'/>
<mbr r='ptp_clock_info::gettime64' o='640' t='int (*)(struct ptp_clock_info *, struct timespec *)'/>
<mbr r='ptp_clock_info::getcrosststamp' o='704' t='int (*)(struct ptp_clock_info *, struct system_device_crosststamp *)'/>
<mbr r='ptp_clock_info::settime64' o='768' t='int (*)(struct ptp_clock_info *, const struct timespec *)'/>
<mbr r='ptp_clock_info::enable' o='832' t='int (*)(struct ptp_clock_info *, struct ptp_clock_request *, int)'/>
<mbr r='ptp_clock_info::verify' o='896' t='int (*)(struct ptp_clock_info *, unsigned int, enum ptp_pin_function, unsigned int)'/>
<mbr r='ptp_clock_info::do_aux_work' o='960' t='long (*)(struct ptp_clock_info *)'/>
