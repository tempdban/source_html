<dec f='linux-4.18.y/lib/librte_efd/rte_efd.h' l='246' type='efd_value_t rte_efd_lookup(const struct rte_efd_table * table, unsigned int socket_id, const void * key)'/>
<def f='linux-4.18.y/lib/librte_efd/rte_efd.c' l='1279' ll='1298' type='efd_value_t rte_efd_lookup(const struct rte_efd_table *const table, const unsigned int socket_id, const void * key)'/>
<doc f='linux-4.18.y/lib/librte_efd/rte_efd.h' l='225'>/**
 * Looks up the value associated with a key
 * This operation is multi-thread safe.
 *
 * NOTE: Lookups will *always* succeed - this is a property of
 * using a perfect hash table.
 * If the specified key was never inserted, a pseudorandom answer will be returned.
 * There is no way to know based on the lookup if the key was ever inserted
 * originally, so this must be tracked elsewhere.
 *
 * @param table
 *   EFD table to reference
 * @param socket_id
 *   Socket ID to use to lookup existing value (ideally caller&apos;s socket id)
 * @param key
 *   EFD table key to look up
 *
 * @return
 *   Value associated with the key, or random junk if they key was never inserted
 */</doc>
