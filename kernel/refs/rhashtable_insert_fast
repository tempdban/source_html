<def f='linux-4.18.y/include/linux/rhashtable.h' l='842' ll='853' type='int rhashtable_insert_fast(struct rhashtable * ht, struct rhash_head * obj, const struct rhashtable_params params)'/>
<doc f='linux-4.18.y/include/linux/rhashtable.h' l='827'>/**
 * rhashtable_insert_fast - insert object into hash table
 * @ht:		hash table
 * @obj:	pointer to hash head inside object
 * @params:	hash table parameters
 *
 * Will take a per bucket spinlock to protect against mutual mutations
 * on the same bucket. Multiple insertions may occur in parallel unless
 * they map to the same bucket lock.
 *
 * It is safe to call this function from atomic context.
 *
 * Will trigger an automatic deferred table resizing if residency in the
 * table grows beyond 70%.
 */</doc>
<use f='linux-4.18.y/ipc/util.c' l='277' u='c' c='ipc_addid'/>
<use f='linux-4.18.y/net/ipv4/inet_fragment.c' l='188' u='c' c='inet_frag_create'/>
<use f='linux-4.18.y/security/apparmor/policy_unpack.c' l='846' u='c' c='unpack_profile'/>
