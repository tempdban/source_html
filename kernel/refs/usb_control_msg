<dec f='linux-4.14.y/include/linux/usb.h' l='1759' type='int usb_control_msg(struct usb_device * dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void * data, __u16 size, int timeout)'/>
<doc f='linux-4.14.y/include/linux/usb.h' l='1755'>/*-------------------------------------------------------------------*
 *                         SYNCHRONOUS CALL SUPPORT                  *
 *-------------------------------------------------------------------*/</doc>
<use f='linux-4.14.y/drivers/hid/usbhid/hid-core.c' l='657' u='c' c='hid_set_idle'/>
<use f='linux-4.14.y/drivers/hid/usbhid/hid-core.c' l='670' u='c' c='hid_get_class_descriptor'/>
<use f='linux-4.14.y/drivers/hid/usbhid/hid-core.c' l='878' u='c' c='usbhid_get_raw_report'/>
<use f='linux-4.14.y/drivers/hid/usbhid/hid-core.c' l='915' u='c' c='usbhid_set_raw_report'/>
<use f='linux-4.14.y/drivers/usb/class/cdc-acm.c' l='132' u='c' c='acm_ctrl_msg'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='1123' u='c' c='proc_control'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='1147' u='c' c='proc_control'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='380' u='c' c='get_hub_descriptor'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='403' u='c' c='clear_hub_feature'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='412' u='c' c='usb_clear_port_feature'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='422' u='c' c='set_port_feature'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='545' u='c' c='get_hub_status'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='563' u='c' c='get_port_status'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='723' u='c' c='hub_clear_tt_buffer'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='729' u='c' c='hub_clear_tt_buffer'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='1013' u='c' c='hub_activate'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='4286' u='c' c='hub_set_address'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='4502' u='c' c='hub_port_init'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='5534' u='c' c='usb_reset_and_verify_device'/>
<def f='linux-4.14.y/drivers/usb/core/message.c' l='134' ll='160' type='int usb_control_msg(struct usb_device * dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void * data, __u16 size, int timeout)'/>
<dec f='linux-4.14.y/drivers/usb/core/message.c' l='161' type='int usb_control_msg(struct usb_device * , unsigned int , __u8 , __u8 , __u16 , __u16 , void * , __u16 , int )'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='161' c='usb_control_msg'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='161' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='161' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='645' u='c' c='usb_get_descriptor'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='691' u='c' c='usb_get_string'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='952' u='c' c='usb_get_status'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1002' u='c' c='usb_clear_halt'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1347' u='c' c='usb_set_interface'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1507' u='c' c='usb_reset_configuration'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1884' u='c' c='usb_set_configuration'/>
<doc f='linux-4.14.y/drivers/usb/core/message.c' l='107'>/**
 * usb_control_msg - Builds a control urb, sends it off and waits for completion
 * @dev: pointer to the usb device to send the message to
 * @pipe: endpoint &quot;pipe&quot; to send the message to
 * @request: USB message request value
 * @requesttype: USB message request type value
 * @value: USB message value
 * @index: USB message index value
 * @data: pointer to the data to send
 * @size: length in bytes of the data to send
 * @timeout: time in msecs to wait for the message to complete before timing
 *	out (if 0 the wait is forever)
 *
 * Context: !in_interrupt ()
 *
 * This function sends a simple control message to a specified endpoint and
 * waits for the message to complete, or timeout.
 *
 * Don&apos;t use this function from within an interrupt context. If you need
 * an asynchronous message, or need to send a message from within interrupt
 * context, use usb_submit_urb(). If a thread in your driver uses this call,
 * make sure your disconnect() method can wait for it to complete. Since you
 * don&apos;t have a handle on the URB used, you can&apos;t cancel the request.
 *
 * Return: If successful, the number of bytes transferred. Otherwise, a negative
 * error number.
 */</doc>
<use f='linux-4.14.y/drivers/usb/storage/sierra_ms.c' l='52' u='c' c='sierra_set_ms_mode'/>
<use f='linux-4.14.y/drivers/usb/storage/sierra_ms.c' l='71' u='c' c='sierra_get_swoc_info'/>
