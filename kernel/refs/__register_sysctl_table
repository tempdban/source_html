<dec f='linux-4.18.y/include/linux/sysctl.h' l='187' type='struct ctl_table_header * __register_sysctl_table(struct ctl_table_set * set, const char * path, struct ctl_table * table)'/>
<def f='linux-4.18.y/fs/proc/proc_sysctl.c' l='1292' ll='1357' type='struct ctl_table_header * __register_sysctl_table(struct ctl_table_set * set, const char * path, struct ctl_table * table)'/>
<use f='linux-4.18.y/fs/proc/proc_sysctl.c' l='1371' u='c' c='register_sysctl'/>
<use f='linux-4.18.y/fs/proc/proc_sysctl.c' l='1446' u='c' c='register_leaf_sysctl_tables'/>
<use f='linux-4.18.y/fs/proc/proc_sysctl.c' l='1520' u='c' c='__register_sysctl_paths'/>
<doc f='linux-4.18.y/fs/proc/proc_sysctl.c' l='1250'>/**
 * __register_sysctl_table - register a leaf sysctl table
 * @set: Sysctl tree to register on
 * @path: The path to the directory the sysctl table is in.
 * @table: the top-level table structure
 *
 * Register a sysctl table hierarchy. @table should be a filled in ctl_table
 * array. A completely 0 filled entry terminates the table.
 *
 * The members of the &amp;struct ctl_table structure are used as follows:
 *
 * procname - the name of the sysctl file under /proc/sys. Set to %NULL to not
 *            enter a sysctl file
 *
 * data - a pointer to data for use by proc_handler
 *
 * maxlen - the maximum size in bytes of the data
 *
 * mode - the file permissions for the /proc/sys file
 *
 * child - must be %NULL.
 *
 * proc_handler - the text handler routine (described below)
 *
 * extra1, extra2 - extra pointers usable by the proc handler routines
 *
 * Leaf nodes in the sysctl tree will be represented by a single file
 * under /proc; non-leaf nodes will be represented by directories.
 *
 * There must be a proc_handler routine for any terminal nodes.
 * Several default handlers are available to cover common cases -
 *
 * proc_dostring(), proc_dointvec(), proc_dointvec_jiffies(),
 * proc_dointvec_userhz_jiffies(), proc_dointvec_minmax(),
 * proc_doulongvec_ms_jiffies_minmax(), proc_doulongvec_minmax()
 *
 * It is the handler&apos;s job to read the input buffer from user memory
 * and process it. The handler should return 0 on success.
 *
 * This routine returns %NULL on a failure to register, and a pointer
 * to the table header on success.
 */</doc>
<use f='linux-4.18.y/kernel/ucount.c' l='98' u='c' c='setup_userns_sysctls'/>
<use f='linux-4.18.y/net/sysctl_net.c' l='120' u='c' c='register_net_sysctl'/>
