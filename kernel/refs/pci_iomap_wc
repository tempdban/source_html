<dec f='linux-4.14.y/include/asm-generic/pci_iomap.h' l='18' type='void * pci_iomap_wc(struct pci_dev * dev, int bar, unsigned long max)'/>
<def f='linux-4.14.y/lib/pci_iomap.c' l='131' ll='134' type='void * pci_iomap_wc(struct pci_dev * dev, int bar, unsigned long maxlen)'/>
<dec f='linux-4.14.y/lib/pci_iomap.c' l='135' type='void * pci_iomap_wc(struct pci_dev * , int , unsigned long )'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='135' c='pci_iomap_wc'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='135' u='a'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='135' u='a'/>
<doc f='linux-4.14.y/lib/pci_iomap.c' l='116'>/**
 * pci_iomap_wc - create a virtual WC mapping cookie for a PCI BAR
 * @dev: PCI device that owns the BAR
 * @bar: BAR number
 * @maxlen: length of the memory to map
 *
 * Using this function you will get a __iomem address to your device BAR.
 * You can access it using ioread*() and iowrite*(). These functions hide
 * the details if this is a MMIO or PIO address space and will just do what
 * you expect from them in the correct way. When possible write combining
 * is used.
 *
 * @maxlen specifies the maximum length to map. If you want to get access to
 * the complete BAR without checking for its length first, pass %0 here.
 * */</doc>
<dec f='linux-4.14.y/include/asm-generic/pci_iomap.h' l='18' type='void * pci_iomap_wc(struct pci_dev * dev, int bar, unsigned long max)'/>
<def f='linux-4.14.y/lib/pci_iomap.c' l='131' ll='134' type='void * pci_iomap_wc(struct pci_dev * dev, int bar, unsigned long maxlen)'/>
<dec f='linux-4.14.y/lib/pci_iomap.c' l='135' type='void * pci_iomap_wc(struct pci_dev * , int , unsigned long )'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='135' c='pci_iomap_wc'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='135' u='a'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='135' u='a'/>
<doc f='linux-4.14.y/lib/pci_iomap.c' l='116'>/**
 * pci_iomap_wc - create a virtual WC mapping cookie for a PCI BAR
 * @dev: PCI device that owns the BAR
 * @bar: BAR number
 * @maxlen: length of the memory to map
 *
 * Using this function you will get a __iomem address to your device BAR.
 * You can access it using ioread*() and iowrite*(). These functions hide
 * the details if this is a MMIO or PIO address space and will just do what
 * you expect from them in the correct way. When possible write combining
 * is used.
 *
 * @maxlen specifies the maximum length to map. If you want to get access to
 * the complete BAR without checking for its length first, pass %0 here.
 * */</doc>
