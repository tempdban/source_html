<dec f='linux-4.18.y/include/linux/usb.h' l='1868' type='int usb_sg_init(struct usb_sg_request * io, struct usb_device * dev, unsigned int pipe, unsigned int period, struct scatterlist * sg, int nents, size_t length, gfp_t mem_flags)'/>
<def f='linux-4.18.y/drivers/usb/core/message.c' l='366' ll='467' type='int usb_sg_init(struct usb_sg_request * io, struct usb_device * dev, unsigned int pipe, unsigned int period, struct scatterlist * sg, int nents, size_t length, gfp_t mem_flags)'/>
<dec f='linux-4.18.y/drivers/usb/core/message.c' l='468' type='int usb_sg_init(struct usb_sg_request * , struct usb_device * , unsigned int , unsigned int , struct scatterlist * , int , size_t , gfp_t )'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='468' c='usb_sg_init'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='468' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='468' u='a'/>
<doc f='linux-4.18.y/drivers/usb/core/message.c' l='339'>/**
 * usb_sg_init - initializes scatterlist-based bulk/interrupt I/O request
 * @io: request block being initialized.  until usb_sg_wait() returns,
 *	treat this as a pointer to an opaque block of memory,
 * @dev: the usb device that will send or receive the data
 * @pipe: endpoint &quot;pipe&quot; used to transfer the data
 * @period: polling rate for interrupt endpoints, in frames or
 * 	(for high speed endpoints) microframes; ignored for bulk
 * @sg: scatterlist entries
 * @nents: how many entries in the scatterlist
 * @length: how many bytes to send from the scatterlist, or zero to
 * 	send every byte identified in the list.
 * @mem_flags: SLAB_* flags affecting memory allocations in this call
 *
 * This initializes a scatter/gather request, allocating resources such as
 * I/O mappings and urb memory (except maybe memory used by USB controller
 * drivers).
 *
 * The request must be issued using usb_sg_wait(), which waits for the I/O to
 * complete (or to be canceled) and then cleans up all resources allocated by
 * usb_sg_init().
 *
 * The request may be canceled with usb_sg_cancel(), either before or after
 * usb_sg_wait() is called.
 *
 * Return: Zero for success, else a negative errno value.
 */</doc>
<use f='linux-4.18.y/drivers/usb/storage/transport.c' l='423' u='c' c='usb_stor_bulk_transfer_sglist'/>
