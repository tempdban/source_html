<dec f='linux-4.14.y/include/linux/tty_flip.h' l='40' type='void tty_buffer_lock_exclusive(struct tty_port * port)'/>
<def f='linux-4.14.y/drivers/tty/tty_buffer.c' l='55' ll='61' type='void tty_buffer_lock_exclusive(struct tty_port * port)'/>
<dec f='linux-4.14.y/drivers/tty/tty_buffer.c' l='62' type='void tty_buffer_lock_exclusive(struct tty_port * )'/>
<use f='linux-4.14.y/drivers/tty/tty_buffer.c' l='62' c='tty_buffer_lock_exclusive'/>
<use f='linux-4.14.y/drivers/tty/tty_buffer.c' l='62' u='a'/>
<use f='linux-4.14.y/drivers/tty/tty_buffer.c' l='62' u='a'/>
<doc f='linux-4.14.y/drivers/tty/tty_buffer.c' l='40'>/**
 *	tty_buffer_lock_exclusive	-	gain exclusive access to buffer
 *	tty_buffer_unlock_exclusive	-	release exclusive access
 *
 *	@port - tty_port owning the flip buffer
 *
 *	Guarantees safe use of the line discipline&apos;s receive_buf() method by
 *	excluding the buffer work and any pending flush from using the flip
 *	buffer. Data can continue to be added concurrently to the flip buffer
 *	from the driver side.
 *
 *	On release, the buffer work is restarted if there is data in the
 *	flip buffer
 */</doc>
<use f='linux-4.14.y/drivers/tty/vt/selection.c' l='349' u='c' c='paste_selection'/>
<dec f='linux-4.14.y/include/linux/tty_flip.h' l='40' type='void tty_buffer_lock_exclusive(struct tty_port * port)'/>
<def f='linux-4.14.y/drivers/tty/tty_buffer.c' l='55' ll='61' type='void tty_buffer_lock_exclusive(struct tty_port * port)'/>
<dec f='linux-4.14.y/drivers/tty/tty_buffer.c' l='62' type='void tty_buffer_lock_exclusive(struct tty_port * )'/>
<use f='linux-4.14.y/drivers/tty/tty_buffer.c' l='62' c='tty_buffer_lock_exclusive'/>
<use f='linux-4.14.y/drivers/tty/tty_buffer.c' l='62' u='a'/>
<use f='linux-4.14.y/drivers/tty/tty_buffer.c' l='62' u='a'/>
<doc f='linux-4.14.y/drivers/tty/tty_buffer.c' l='40'>/**
 *	tty_buffer_lock_exclusive	-	gain exclusive access to buffer
 *	tty_buffer_unlock_exclusive	-	release exclusive access
 *
 *	@port - tty_port owning the flip buffer
 *
 *	Guarantees safe use of the line discipline&apos;s receive_buf() method by
 *	excluding the buffer work and any pending flush from using the flip
 *	buffer. Data can continue to be added concurrently to the flip buffer
 *	from the driver side.
 *
 *	On release, the buffer work is restarted if there is data in the
 *	flip buffer
 */</doc>
<use f='linux-4.14.y/drivers/tty/vt/selection.c' l='349' u='c' c='paste_selection'/>
