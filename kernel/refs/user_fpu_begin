<def f='linux-4.14.y/arch/x86/include/asm/fpu/internal.h' l='571' ll='578' type='void user_fpu_begin()'/>
<doc f='linux-4.14.y/arch/x86/include/asm/fpu/internal.h' l='563'>/*
 * Needs to be preemption-safe.
 *
 * NOTE! user_fpu_begin() must be used only immediately before restoring
 * the save state. It does not do any saving/restoring on its own. In
 * lazy FPU mode, it is just an optimization to avoid a #NM exception,
 * the task can lose the FPU right after preempt_enable().
 */</doc>
<use f='linux-4.14.y/arch/x86/kernel/fpu/core.c' l='396' u='c' c='fpu__clear'/>
<use f='linux-4.14.y/arch/x86/kernel/fpu/signal.c' l='359' u='c' c='__fpu__restore_sig'/>
<def f='linux-4.14.y/arch/x86/include/asm/fpu/internal.h' l='571' ll='578' type='void user_fpu_begin()'/>
<doc f='linux-4.14.y/arch/x86/include/asm/fpu/internal.h' l='563'>/*
 * Needs to be preemption-safe.
 *
 * NOTE! user_fpu_begin() must be used only immediately before restoring
 * the save state. It does not do any saving/restoring on its own. In
 * lazy FPU mode, it is just an optimization to avoid a #NM exception,
 * the task can lose the FPU right after preempt_enable().
 */</doc>
<use f='linux-4.14.y/arch/x86/kernel/fpu/core.c' l='396' u='c' c='fpu__clear'/>
<use f='linux-4.14.y/arch/x86/kernel/fpu/signal.c' l='359' u='c' c='__fpu__restore_sig'/>
