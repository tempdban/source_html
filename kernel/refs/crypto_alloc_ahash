<dec f='linux-4.14.y/include/crypto/hash.h' l='245' type='struct crypto_ahash * crypto_alloc_ahash(const char * alg_name, u32 type, u32 mask)'/>
<def f='linux-4.14.y/crypto/ahash.c' l='556' ll='560' type='struct crypto_ahash * crypto_alloc_ahash(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-4.14.y/crypto/ahash.c' l='561' type='struct crypto_ahash * crypto_alloc_ahash(const char * , u32 , u32 )'/>
<use f='linux-4.14.y/crypto/ahash.c' l='561' c='crypto_alloc_ahash'/>
<use f='linux-4.14.y/crypto/ahash.c' l='561' u='a'/>
<use f='linux-4.14.y/crypto/ahash.c' l='561' u='a'/>
<doc f='linux-4.14.y/include/crypto/hash.h' l='231'>/**
 * crypto_alloc_ahash() - allocate ahash cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      ahash cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for an ahash. The returned struct
 * crypto_ahash is the cipher handle that is required for any subsequent
 * API invocation for that ahash.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='439' u='c' c='crypt_iv_essiv_ctr'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='2386' u='c' c='crypt_ctr_auth_cipher'/>
<dec f='linux-4.14.y/include/crypto/hash.h' l='245' type='struct crypto_ahash * crypto_alloc_ahash(const char * alg_name, u32 type, u32 mask)'/>
<def f='linux-4.14.y/crypto/ahash.c' l='556' ll='560' type='struct crypto_ahash * crypto_alloc_ahash(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-4.14.y/crypto/ahash.c' l='561' type='struct crypto_ahash * crypto_alloc_ahash(const char * , u32 , u32 )'/>
<use f='linux-4.14.y/crypto/ahash.c' l='561' c='crypto_alloc_ahash'/>
<use f='linux-4.14.y/crypto/ahash.c' l='561' u='a'/>
<use f='linux-4.14.y/crypto/ahash.c' l='561' u='a'/>
<doc f='linux-4.14.y/include/crypto/hash.h' l='231'>/**
 * crypto_alloc_ahash() - allocate ahash cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      ahash cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for an ahash. The returned struct
 * crypto_ahash is the cipher handle that is required for any subsequent
 * API invocation for that ahash.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='439' u='c' c='crypt_iv_essiv_ctr'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='2386' u='c' c='crypt_ctr_auth_cipher'/>
