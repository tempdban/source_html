<dec f='linux-4.14.y/include/linux/rational.h' l='15' type='void rational_best_approximation(unsigned long given_numerator, unsigned long given_denominator, unsigned long max_numerator, unsigned long max_denominator, unsigned long * best_numerator, unsigned long * best_denominator)'/>
<use f='linux-4.14.y/drivers/clk/clk-fractional-divider.c' l='68' u='c' c='clk_fd_general_approximation'/>
<use f='linux-4.14.y/drivers/clk/clk-fractional-divider.c' l='102' u='c' c='clk_fd_set_rate'/>
<use f='linux-4.14.y/drivers/tty/serial/8250/8250_lpss.c' l='86' u='c' c='byt_set_termios'/>
<use f='linux-4.14.y/drivers/tty/serial/8250/8250_mid.c' l='227' u='c' c='mid8250_set_termios'/>
<def f='linux-4.14.y/lib/rational.c' l='31' ll='63' type='void rational_best_approximation(unsigned long given_numerator, unsigned long given_denominator, unsigned long max_numerator, unsigned long max_denominator, unsigned long * best_numerator, unsigned long * best_denominator)'/>
<dec f='linux-4.14.y/lib/rational.c' l='65' type='void rational_best_approximation(unsigned long , unsigned long , unsigned long , unsigned long , unsigned long * , unsigned long * )'/>
<use f='linux-4.14.y/lib/rational.c' l='65' c='rational_best_approximation'/>
<use f='linux-4.14.y/lib/rational.c' l='65' u='a'/>
<use f='linux-4.14.y/lib/rational.c' l='65' u='a'/>
<doc f='linux-4.14.y/lib/rational.c' l='14'>/*
 * calculate best rational approximation for a given fraction
 * taking into account restricted register size, e.g. to find
 * appropriate values for a pll with 5 bit denominator and
 * 8 bit numerator register fields, trying to set up with a
 * frequency ratio of 3.1415, one would say:
 *
 * rational_best_approximation(31415, 10000,
 *		(1 &lt;&lt; 8) - 1, (1 &lt;&lt; 5) - 1, &amp;n, &amp;d);
 *
 * you may look at given_numerator as a fixed point number,
 * with the fractional part size described in given_denominator.
 *
 * for theoretical background, see:
 * http://en.wikipedia.org/wiki/Continued_fraction
 */</doc>
