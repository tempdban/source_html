<dec f='linux-4.14.y/drivers/acpi/acpica/acnamesp.h' l='391' type='acpi_status acpi_ns_search_one_scope(u32 entry_name, struct acpi_namespace_node * node, acpi_object_type type, struct acpi_namespace_node ** ret_node)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evregion.c' l='571' u='c' c='acpi_ev_execute_reg_method'/>
<def f='linux-4.14.y/drivers/acpi/acpica/nssearch.c' l='94' ll='171' type='acpi_status acpi_ns_search_one_scope(u32 target_name, struct acpi_namespace_node * parent_node, acpi_object_type type, struct acpi_namespace_node ** return_node)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nssearch.c' l='245' u='c' c='acpi_ns_search_parent_tree'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nssearch.c' l='322' u='c' c='acpi_ns_search_and_enter'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/nssearch.c' l='62'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ns_search_one_scope
 *
 * PARAMETERS:  target_name     - Ascii ACPI name to search for
 *              parent_node     - Starting node where search will begin
 *              type            - Object type to match
 *              return_node     - Where the matched Named obj is returned
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Search a single level of the namespace. Performs a
 *              simple search of the specified level, and does not add
 *              entries or search parents.
 *
 *
 *      Named object lists are built (and subsequently dumped) in the
 *      order in which the names are encountered during the namespace load;
 *
 *      All namespace searching is linear in this implementation, but
 *      could be easily modified to support any improved search
 *      algorithm. However, the linear search was chosen for simplicity
 *      and because the trees are small and the other interpreter
 *      execution overhead is relatively high.
 *
 *      Note: CPU execution analysis has shown that the AML interpreter spends
 *      a very small percentage of its time searching the namespace. Therefore,
 *      the linear search seems to be sufficient, as there would seem to be
 *      little value in improving the search.
 *
 ******************************************************************************/</doc>
<dec f='linux-4.14.y/drivers/acpi/acpica/acnamesp.h' l='391' type='acpi_status acpi_ns_search_one_scope(u32 entry_name, struct acpi_namespace_node * node, acpi_object_type type, struct acpi_namespace_node ** ret_node)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evregion.c' l='571' u='c' c='acpi_ev_execute_reg_method'/>
<def f='linux-4.14.y/drivers/acpi/acpica/nssearch.c' l='94' ll='171' type='acpi_status acpi_ns_search_one_scope(u32 target_name, struct acpi_namespace_node * parent_node, acpi_object_type type, struct acpi_namespace_node ** return_node)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nssearch.c' l='245' u='c' c='acpi_ns_search_parent_tree'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nssearch.c' l='322' u='c' c='acpi_ns_search_and_enter'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/nssearch.c' l='62'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ns_search_one_scope
 *
 * PARAMETERS:  target_name     - Ascii ACPI name to search for
 *              parent_node     - Starting node where search will begin
 *              type            - Object type to match
 *              return_node     - Where the matched Named obj is returned
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Search a single level of the namespace. Performs a
 *              simple search of the specified level, and does not add
 *              entries or search parents.
 *
 *
 *      Named object lists are built (and subsequently dumped) in the
 *      order in which the names are encountered during the namespace load;
 *
 *      All namespace searching is linear in this implementation, but
 *      could be easily modified to support any improved search
 *      algorithm. However, the linear search was chosen for simplicity
 *      and because the trees are small and the other interpreter
 *      execution overhead is relatively high.
 *
 *      Note: CPU execution analysis has shown that the AML interpreter spends
 *      a very small percentage of its time searching the namespace. Therefore,
 *      the linear search seems to be sufficient, as there would seem to be
 *      little value in improving the search.
 *
 ******************************************************************************/</doc>
