<dec f='linux-4.14.y/include/linux/rcupdate.h' l='58' type='void call_rcu_bh(struct callback_head * head, rcu_callback_t func)'/>
<use f='linux-4.14.y/kernel/rcu/sync.c' l='54' u='r'/>
<use f='linux-4.14.y/kernel/rcu/sync.c' l='54' u='r'/>
<use f='linux-4.14.y/kernel/rcu/sync.c' l='54' u='r'/>
<use f='linux-4.14.y/kernel/rcu/sync.c' l='54' u='r'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='108'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='108'/>
<def f='linux-4.14.y/kernel/rcu/tree.c' l='3138' ll='3141' type='void call_rcu_bh(struct callback_head * head, rcu_callback_t func)'/>
<dec f='linux-4.14.y/kernel/rcu/tree.c' l='3142' type='void call_rcu_bh(struct callback_head * , rcu_callback_t )'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3142' c='call_rcu_bh'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3142' u='a'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3142' u='a'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3251' u='r' c='synchronize_rcu_bh'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3251' u='r' c='synchronize_rcu_bh'/>
<doc f='linux-4.14.y/kernel/rcu/tree.c' l='3116'>/**
 * call_rcu_bh() - Queue an RCU for invocation after a quicker grace period.
 * @head: structure to be used for queueing the RCU updates.
 * @func: actual callback function to be invoked after the grace period
 *
 * The callback function will be invoked some time after a full grace
 * period elapses, in other words after all currently executing RCU
 * read-side critical sections have completed. call_rcu_bh() assumes
 * that the read-side critical sections end on completion of a softirq
 * handler. This means that read-side critical sections in process
 * context must not be interrupted by softirqs. This interface is to be
 * used when most of the read-side critical sections are in softirq context.
 * RCU read-side critical sections are delimited by:
 *
 * - rcu_read_lock() and  rcu_read_unlock(), if in interrupt context, OR
 * - rcu_read_lock_bh() and rcu_read_unlock_bh(), if in process context.
 *
 * These may be nested.
 *
 * See the description of call_rcu() for more detailed information on
 * memory ordering guarantees.
 */</doc>
<use f='linux-4.14.y/kernel/rcu/update.c' l='390' u='r' c='__wait_rcu_gp'/>
<use f='linux-4.14.y/kernel/rcu/update.c' l='407' u='r' c='__wait_rcu_gp'/>
<use f='linux-4.14.y/net/netfilter/nfnetlink_log.c' l='151' u='c' c='instance_put'/>
<use f='linux-4.14.y/net/netfilter/xt_hashlimit.c' l='263' u='c' c='dsthash_free'/>
<dec f='linux-4.14.y/include/linux/rcupdate.h' l='58' type='void call_rcu_bh(struct callback_head * head, rcu_callback_t func)'/>
<use f='linux-4.14.y/kernel/rcu/sync.c' l='54' u='r'/>
<use f='linux-4.14.y/kernel/rcu/sync.c' l='54' u='r'/>
<use f='linux-4.14.y/kernel/rcu/sync.c' l='54' u='r'/>
<use f='linux-4.14.y/kernel/rcu/sync.c' l='54' u='r'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='108'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='108'/>
<def f='linux-4.14.y/kernel/rcu/tree.c' l='3138' ll='3141' type='void call_rcu_bh(struct callback_head * head, rcu_callback_t func)'/>
<dec f='linux-4.14.y/kernel/rcu/tree.c' l='3142' type='void call_rcu_bh(struct callback_head * , rcu_callback_t )'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3142' c='call_rcu_bh'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3142' u='a'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3142' u='a'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3251' u='r' c='synchronize_rcu_bh'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3251' u='r' c='synchronize_rcu_bh'/>
<doc f='linux-4.14.y/kernel/rcu/tree.c' l='3116'>/**
 * call_rcu_bh() - Queue an RCU for invocation after a quicker grace period.
 * @head: structure to be used for queueing the RCU updates.
 * @func: actual callback function to be invoked after the grace period
 *
 * The callback function will be invoked some time after a full grace
 * period elapses, in other words after all currently executing RCU
 * read-side critical sections have completed. call_rcu_bh() assumes
 * that the read-side critical sections end on completion of a softirq
 * handler. This means that read-side critical sections in process
 * context must not be interrupted by softirqs. This interface is to be
 * used when most of the read-side critical sections are in softirq context.
 * RCU read-side critical sections are delimited by:
 *
 * - rcu_read_lock() and  rcu_read_unlock(), if in interrupt context, OR
 * - rcu_read_lock_bh() and rcu_read_unlock_bh(), if in process context.
 *
 * These may be nested.
 *
 * See the description of call_rcu() for more detailed information on
 * memory ordering guarantees.
 */</doc>
<use f='linux-4.14.y/kernel/rcu/update.c' l='390' u='r' c='__wait_rcu_gp'/>
<use f='linux-4.14.y/kernel/rcu/update.c' l='407' u='r' c='__wait_rcu_gp'/>
<use f='linux-4.14.y/net/netfilter/nfnetlink_log.c' l='151' u='c' c='instance_put'/>
<use f='linux-4.14.y/net/netfilter/xt_hashlimit.c' l='263' u='c' c='dsthash_free'/>
