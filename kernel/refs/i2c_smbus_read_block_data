<dec f='linux-4.18.y/include/linux/i2c.h' l='177' type='s32 i2c_smbus_read_block_data(const struct i2c_client * client, u8 command, u8 * values)'/>
<doc f='linux-4.18.y/include/linux/i2c.h' l='176'>/* Returns the number of read bytes */</doc>
<use f='linux-4.18.y/drivers/i2c/i2c-core-acpi.c' l='586' u='c' c='i2c_acpi_space_handler'/>
<def f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='217' ll='231' type='s32 i2c_smbus_read_block_data(const struct i2c_client * client, u8 command, u8 * values)'/>
<dec f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='232' type='s32 i2c_smbus_read_block_data(const struct i2c_client * , u8 , u8 * )'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='232' c='i2c_smbus_read_block_data'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='232' u='a'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='232' u='a'/>
<doc f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='202'>/**
 * i2c_smbus_read_block_data - SMBus &quot;block read&quot; protocol
 * @client: Handle to slave device
 * @command: Byte interpreted by slave
 * @values: Byte array into which data will be read; big enough to hold
 *	the data returned by the slave.  SMBus allows at most 32 bytes.
 *
 * This executes the SMBus &quot;block read&quot; protocol, returning negative errno
 * else the number of data bytes in the slave&apos;s response.
 *
 * Note that using this function requires that the client&apos;s adapter support
 * the I2C_FUNC_SMBUS_READ_BLOCK_DATA functionality.  Not all adapter drivers
 * support this; its emulation through I2C messaging relies on a specific
 * mechanism (I2C_M_RECV_LEN) which may not be implemented.
 */</doc>
