<dec f='linux-4.14.y/include/linux/fscrypt_supp.h' l='20' type='int fscrypt_decrypt_page(const struct inode * , struct page * , unsigned int , unsigned int , u64 )'/>
<use f='linux-4.14.y/fs/crypto/bio.c' l='43' u='c' c='completion_pages'/>
<def f='linux-4.14.y/fs/crypto/crypto.c' l='318' ll='326' type='int fscrypt_decrypt_page(const struct inode * inode, struct page * page, unsigned int len, unsigned int offs, u64 lblk_num)'/>
<dec f='linux-4.14.y/fs/crypto/crypto.c' l='327' type='int fscrypt_decrypt_page(const struct inode * , struct page * , unsigned int , unsigned int , u64 )'/>
<use f='linux-4.14.y/fs/crypto/crypto.c' l='327' c='fscrypt_decrypt_page'/>
<use f='linux-4.14.y/fs/crypto/crypto.c' l='327' u='a'/>
<use f='linux-4.14.y/fs/crypto/crypto.c' l='327' u='a'/>
<doc f='linux-4.14.y/fs/crypto/crypto.c' l='303'>/**
 * fscrypt_decrypt_page() - Decrypts a page in-place
 * @inode:     The corresponding inode for the page to decrypt.
 * @page:      The page to decrypt. Must be locked in case
 *             it is a writeback page (FS_CFLG_OWN_PAGES unset).
 * @len:       Number of bytes in @page to be decrypted.
 * @offs:      Start of data in @page.
 * @lblk_num:  Logical block number.
 *
 * Decrypts page in-place using the ctx encryption context.
 *
 * Called from the read completion callback.
 *
 * Return: Zero on success, non-zero otherwise.
 */</doc>
<use f='linux-4.14.y/fs/ext4/inode.c' l='1234' u='c' c='ext4_block_write_begin'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='3984' u='c' c='__ext4_block_zero_page_range'/>
