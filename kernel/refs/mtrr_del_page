<dec f='linux-4.18.y/arch/x86/include/asm/mtrr.h' l='43' type='int mtrr_del_page(int reg, unsigned long base, unsigned long size)'/>
<use f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/if.c' l='76' u='c' c='mtrr_file_del'/>
<use f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/if.c' l='121' u='c' c='mtrr_write'/>
<use f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/if.c' l='309' u='c' c='mtrr_ioctl'/>
<def f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/mtrr.c' l='478' ll='527' type='int mtrr_del_page(int reg, unsigned long base, unsigned long size)'/>
<use f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/mtrr.c' l='549' u='c' c='mtrr_del'/>
<doc f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/mtrr.c' l='464'>/**
 * mtrr_del_page - delete a memory type region
 * @reg: Register returned by mtrr_add
 * @base: Physical base address
 * @size: Size of region
 *
 * If register is supplied then base and size are ignored. This is
 * how drivers should call it.
 *
 * Releases an MTRR region. If the usage count drops to zero the
 * register is freed and the region returns to default state.
 * On success the register is returned, on failure a negative error
 * code.
 */</doc>
