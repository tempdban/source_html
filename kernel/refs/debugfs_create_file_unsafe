<dec f='linux-4.18.y/include/linux/debugfs.h' l='64' type='struct dentry * debugfs_create_file_unsafe(const char * name, umode_t mode, struct dentry * parent, void * data, const struct file_operations * fops)'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='356' u='c' c='debugfs_create_mode_unsafe'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='360' u='c' c='debugfs_create_mode_unsafe'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='363' u='c' c='debugfs_create_mode_unsafe'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='918' u='c' c='debugfs_create_blob'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='1023' u='c' c='debugfs_create_u32_array'/>
<def f='linux-4.18.y/fs/debugfs/inode.c' l='433' ll='442' type='struct dentry * debugfs_create_file_unsafe(const char * name, umode_t mode, struct dentry * parent, void * data, const struct file_operations * fops)'/>
<dec f='linux-4.18.y/fs/debugfs/inode.c' l='443' type='struct dentry * debugfs_create_file_unsafe(const char * , umode_t , struct dentry * , void * , const struct file_operations * )'/>
<use f='linux-4.18.y/fs/debugfs/inode.c' l='443' c='debugfs_create_file_unsafe'/>
<use f='linux-4.18.y/fs/debugfs/inode.c' l='443' u='a'/>
<use f='linux-4.18.y/fs/debugfs/inode.c' l='443' u='a'/>
<doc f='linux-4.18.y/fs/debugfs/inode.c' l='406'>/**
 * debugfs_create_file_unsafe - create a file in the debugfs filesystem
 * @name: a pointer to a string containing the name of the file to create.
 * @mode: the permission that the file should have.
 * @parent: a pointer to the parent dentry for this file.  This should be a
 *          directory dentry if set.  If this parameter is NULL, then the
 *          file will be created in the root of the debugfs filesystem.
 * @data: a pointer to something that the caller will want to get to later
 *        on.  The inode.i_private pointer will point to this value on
 *        the open() call.
 * @fops: a pointer to a struct file_operations that should be used for
 *        this file.
 *
 * debugfs_create_file_unsafe() is completely analogous to
 * debugfs_create_file(), the only difference being that the fops
 * handed it will not get protected against file removals by the
 * debugfs core.
 *
 * It is your responsibility to protect your struct file_operation
 * methods against file removals by means of debugfs_use_file_start()
 * and debugfs_use_file_finish(). -&gt;open() is still protected by
 * debugfs though.
 *
 * Any struct file_operations defined by means of
 * DEFINE_DEBUGFS_ATTRIBUTE() is protected against file removals and
 * thus, may be used here.
 */</doc>
<use f='linux-4.18.y/mm/memory.c' l='3561' u='c' c='fault_around_debugfs'/>
