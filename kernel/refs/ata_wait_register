<dec f='linux-4.18.y/include/linux/libata.h' l='1162' type='u32 ata_wait_register(struct ata_port * ap, void * reg, u32 mask, u32 val, unsigned long interval, unsigned long timeout)'/>
<use f='linux-4.18.y/drivers/ata/libahci.c' l='687' u='c' c='ahci_stop_engine'/>
<use f='linux-4.18.y/drivers/ata/libahci.c' l='735' u='c' c='ahci_stop_fis_rx'/>
<use f='linux-4.18.y/drivers/ata/libahci.c' l='948' u='c' c='ahci_reset_controller'/>
<use f='linux-4.18.y/drivers/ata/libahci.c' l='1344' u='c' c='ahci_kick_engine'/>
<use f='linux-4.18.y/drivers/ata/libahci.c' l='1383' u='c' c='ahci_exec_polled_cmd'/>
<def f='linux-4.18.y/drivers/ata/libata-core.c' l='7139' ll='7159' type='u32 ata_wait_register(struct ata_port * ap, void * reg, u32 mask, u32 val, unsigned long interval, unsigned long timeout)'/>
<dec f='linux-4.18.y/drivers/ata/libata-core.c' l='7340' type='u32 ata_wait_register(struct ata_port * , void * , u32 , u32 , unsigned long , unsigned long )'/>
<use f='linux-4.18.y/drivers/ata/libata-core.c' l='7340' c='ata_wait_register'/>
<use f='linux-4.18.y/drivers/ata/libata-core.c' l='7340' u='a'/>
<use f='linux-4.18.y/drivers/ata/libata-core.c' l='7340' u='a'/>
<doc f='linux-4.18.y/drivers/ata/libata-core.c' l='7115'>/**
 *	ata_wait_register - wait until register value changes
 *	@ap: ATA port to wait register for, can be NULL
 *	@reg: IO-mapped register
 *	@mask: Mask to apply to read register value
 *	@val: Wait condition
 *	@interval: polling interval in milliseconds
 *	@timeout: timeout in milliseconds
 *
 *	Waiting for some bits of register to change is a common
 *	operation for ATA controllers.  This function reads 32bit LE
 *	IO-mapped register @reg and tests for the following condition.
 *
 *	(*@reg &amp; mask) != val
 *
 *	If the condition is met, it returns; otherwise, the process is
 *	repeated after @interval_msec until timeout.
 *
 *	LOCKING:
 *	Kernel thread context (may sleep)
 *
 *	RETURNS:
 *	The final register value.
 */</doc>
