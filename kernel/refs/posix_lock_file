<dec f='linux-4.18.y/include/linux/fs.h' l='1089' type='int posix_lock_file(struct file * , struct file_lock * , struct file_lock * )'/>
<use f='linux-4.18.y/fs/fuse/file.c' l='2219' u='c' c='fuse_file_lock'/>
<def f='linux-4.18.y/fs/locks.c' l='1226' ll='1230' type='int posix_lock_file(struct file * filp, struct file_lock * fl, struct file_lock * conflock)'/>
<dec f='linux-4.18.y/fs/locks.c' l='1231' type='int posix_lock_file(struct file * , struct file_lock * , struct file_lock * )'/>
<use f='linux-4.18.y/fs/locks.c' l='1231' c='posix_lock_file'/>
<use f='linux-4.18.y/fs/locks.c' l='1231' u='a'/>
<use f='linux-4.18.y/fs/locks.c' l='1231' u='a'/>
<use f='linux-4.18.y/fs/locks.c' l='2198' u='c' c='vfs_lock_file'/>
<doc f='linux-4.18.y/fs/locks.c' l='1212'>/**
 * posix_lock_file - Apply a POSIX-style lock to a file
 * @filp: The file to apply the lock to
 * @fl: The lock to be applied
 * @conflock: Place to return a copy of the conflicting lock, if found.
 *
 * Add a POSIX style lock to a file.
 * We merge adjacent &amp; overlapping locks whenever possible.
 * POSIX locks are sorted by owner task, then by starting address
 *
 * Note that if called with an FL_EXISTS argument, the caller may determine
 * whether or not a lock was successfully freed by testing the return
 * value for -ENOENT.
 */</doc>
