<dec f='linux-4.14.y/include/linux/ring_buffer.h' l='78' type='void ring_buffer_discard_commit(struct ring_buffer * buffer, struct ring_buffer_event * event)'/>
<doc f='linux-4.14.y/include/linux/ring_buffer.h' l='64'>/*
 * ring_buffer_discard_commit will remove an event that has not
 *   ben committed yet. If this is used, then ring_buffer_unlock_commit
 *   must not be called on the discarded event. This function
 *   will try to remove the event from the ring buffer completely
 *   if another event has not been written after it.
 *
 * Example use:
 *
 *  if (some_condition)
 *    ring_buffer_discard_commit(buffer, event);
 *  else
 *    ring_buffer_unlock_commit(buffer, event);
 */</doc>
<use f='linux-4.14.y/kernel/trace/trace.h' l='1270' u='c' c='__trace_event_discard_commit'/>
<def f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2905' ll='2940' type='void ring_buffer_discard_commit(struct ring_buffer * buffer, struct ring_buffer_event * event)'/>
<dec f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2941' type='void ring_buffer_discard_commit(struct ring_buffer * , struct ring_buffer_event * )'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2941' c='ring_buffer_discard_commit'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2941' u='a'/>
<use f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2941' u='a'/>
<doc f='linux-4.14.y/kernel/trace/ring_buffer.c' l='2886'>/**
 * ring_buffer_commit_discard - discard an event that has not been committed
 * @buffer: the ring buffer
 * @event: non committed event to discard
 *
 * Sometimes an event that is in the ring buffer needs to be ignored.
 * This function lets the user discard an event in the ring buffer
 * and then that event will not be read later.
 *
 * This function only works if it is called before the the item has been
 * committed. It will try to free the event from the ring buffer
 * if another event has not been added behind it.
 *
 * If another event has been added behind it, it will set the event
 * up as discarded, and perform the commit.
 *
 * If this function is called, do not call ring_buffer_unlock_commit on
 * the event.
 */</doc>
