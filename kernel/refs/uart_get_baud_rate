<dec f='linux-4.14.y/include/linux/serial_core.h' l='327' type='unsigned int uart_get_baud_rate(struct uart_port * port, struct ktermios * termios, struct ktermios * old, unsigned int min, unsigned int max)'/>
<use f='linux-4.14.y/drivers/tty/serial/8250/8250_port.c' l='2619' u='c' c='serial8250_get_baud_rate'/>
<def f='linux-4.14.y/drivers/tty/serial/serial_core.c' l='386' ll='465' type='unsigned int uart_get_baud_rate(struct uart_port * port, struct ktermios * termios, struct ktermios * old, unsigned int min, unsigned int max)'/>
<dec f='linux-4.14.y/drivers/tty/serial/serial_core.c' l='467' type='unsigned int uart_get_baud_rate(struct uart_port * , struct ktermios * , struct ktermios * , unsigned int , unsigned int )'/>
<use f='linux-4.14.y/drivers/tty/serial/serial_core.c' l='467' c='uart_get_baud_rate'/>
<use f='linux-4.14.y/drivers/tty/serial/serial_core.c' l='467' u='a'/>
<use f='linux-4.14.y/drivers/tty/serial/serial_core.c' l='467' u='a'/>
<doc f='linux-4.14.y/drivers/tty/serial/serial_core.c' l='367'>/**
 *	uart_get_baud_rate - return baud rate for a particular port
 *	@port: uart_port structure describing the port in question.
 *	@termios: desired termios settings.
 *	@old: old termios (or NULL)
 *	@min: minimum acceptable baud rate
 *	@max: maximum acceptable baud rate
 *
 *	Decode the termios structure into a numeric baud rate,
 *	taking account of the magic 38400 baud rate (with spd_*
 *	flags), and mapping the %B0 rate to 9600 baud.
 *
 *	If the new baud rate is invalid, try the old termios setting.
 *	If it&apos;s still invalid, we try 9600 baud.
 *
 *	Update the @termios structure to reflect the baud rate
 *	we&apos;re actually going to be using. Don&apos;t do this for the case
 *	where B0 is requested (&quot;hang up&quot;).
 */</doc>
