<def f='linux-4.18.y/include/linux/ftrace.h' l='191' ll='204'/>
<size>160</size>
<doc f='linux-4.18.y/include/linux/ftrace.h' l='180'>/*
 * Note, ftrace_ops can be referenced outside of RCU protection, unless
 * the RCU flag is set. If ftrace_ops is allocated and not part of kernel
 * core data, the unregistering of it will perform a scheduling on all CPUs
 * to make sure that there are no more users. Depending on the load of the
 * system that may take a bit of time.
 *
 * Any private data added must also take care not to be freed and if private
 * data is added to a ftrace_ops that is in core code, the user of the
 * ftrace_ops must perform a schedule_on_each_cpu() before freeing it.
 */</doc>
<mbr r='ftrace_ops::func' o='0' t='ftrace_func_t'/>
<mbr r='ftrace_ops::next' o='64' t='struct ftrace_ops *'/>
<mbr r='ftrace_ops::flags' o='128' t='unsigned long'/>
<mbr r='ftrace_ops::private' o='192' t='void *'/>
<mbr r='ftrace_ops::saved_func' o='256' t='ftrace_func_t'/>
<mbr r='ftrace_ops::local_hash' o='320' t='struct ftrace_ops_hash'/>
<mbr r='ftrace_ops::func_hash' o='704' t='struct ftrace_ops_hash *'/>
<mbr r='ftrace_ops::old_hash' o='768' t='struct ftrace_ops_hash'/>
<mbr r='ftrace_ops::trampoline' o='1152' t='unsigned long'/>
<mbr r='ftrace_ops::trampoline_size' o='1216' t='unsigned long'/>
