<dec f='linux-4.14.y/include/linux/async_tx.h' l='191' type='struct dma_async_tx_descriptor * async_gen_syndrome(struct page ** blocks, unsigned int offset, int src_cnt, size_t len, struct async_submit_ctl * submit)'/>
<def f='linux-4.14.y/crypto/async_tx/async_pq.c' l='176' ll='266' type='struct dma_async_tx_descriptor * async_gen_syndrome(struct page ** blocks, unsigned int offset, int disks, size_t len, struct async_submit_ctl * submit)'/>
<dec f='linux-4.14.y/crypto/async_tx/async_pq.c' l='267' type='struct dma_async_tx_descriptor * async_gen_syndrome(struct page ** , unsigned int , int , size_t , struct async_submit_ctl * )'/>
<use f='linux-4.14.y/crypto/async_tx/async_pq.c' l='267' c='async_gen_syndrome'/>
<use f='linux-4.14.y/crypto/async_tx/async_pq.c' l='267' u='a'/>
<use f='linux-4.14.y/crypto/async_tx/async_pq.c' l='267' u='a'/>
<use f='linux-4.14.y/crypto/async_tx/async_pq.c' l='409' u='c' c='async_syndrome_val'/>
<doc f='linux-4.14.y/crypto/async_tx/async_pq.c' l='155'>/**
 * async_gen_syndrome - asynchronously calculate a raid6 syndrome
 * @blocks: source blocks from idx 0..disks-3, P @ disks-2 and Q @ disks-1
 * @offset: common offset into each block (src and dest) to start transaction
 * @disks: number of blocks (including missing P or Q, see below)
 * @len: length of operation in bytes
 * @submit: submission/completion modifiers
 *
 * General note: This routine assumes a field of GF(2^8) with a
 * primitive polynomial of 0x11d and a generator of {02}.
 *
 * &apos;disks&apos; note: callers can optionally omit either P or Q (but not
 * both) from the calculation by setting blocks[disks-2] or
 * blocks[disks-1] to NULL.  When P or Q is omitted &apos;len&apos; must be &lt;=
 * PAGE_SIZE as a temporary buffer of this size is used in the
 * synchronous path.  &apos;disks&apos; always accounts for both destination
 * buffers.  If any source buffers (blocks[i] where i &lt; disks - 2) are
 * set to NULL those buffers will be replaced with the raid6_zero_page
 * in the synchronous path and omitted in the hardware-asynchronous
 * path.
 */</doc>
<use f='linux-4.14.y/crypto/async_tx/async_raid6_recov.c' l='300' u='c' c='__2data_recov_n'/>
<use f='linux-4.14.y/crypto/async_tx/async_raid6_recov.c' l='500' u='c' c='async_raid6_datap_recov'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='1534' u='c' c='ops_run_compute6_1'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='1609' u='c' c='ops_run_compute6_2'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='1640' u='c' c='ops_run_compute6_2'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='1723' u='c' c='ops_run_prexor6'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='1984' u='c' c='ops_run_reconstruct6'/>
