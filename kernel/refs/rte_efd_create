<dec f='linux-4.18.y/lib/librte_efd/rte_efd.h' l='141' type='struct rte_efd_table * rte_efd_create(const char * name, uint32_t max_num_rules, uint32_t key_len, uint8_t online_cpu_socket_bitmask, uint8_t offline_cpu_socket)'/>
<def f='linux-4.18.y/lib/librte_efd/rte_efd.c' l='493' ll='710' type='struct rte_efd_table * rte_efd_create(const char * name, uint32_t max_num_rules, uint32_t key_len, uint8_t online_cpu_socket_bitmask, uint8_t offline_cpu_socket)'/>
<doc f='linux-4.18.y/lib/librte_efd/rte_efd.h' l='119'>/**
 * Creates an EFD table with a single offline region and multiple per-socket
 * internally-managed copies of the online table used for lookups
 *
 * @param name
 *   EFD table name
 * @param max_num_rules
 *   Minimum number of rules the table should be sized to hold.
 *   Will be rounded up to the next smallest valid table size
 * @param key_len
 *   Length of the key
 * @param online_cpu_socket_bitmask
 *   Bitmask specifying which sockets should get a copy of the online table.
 *   LSB = socket 0, etc.
 * @param offline_cpu_socket
 *   Identifies the socket where the offline table will be allocated
 *   (and most efficiently accessed in the case of updates/insertions)
 *
 * @return
 *   EFD table, or NULL if table allocation failed or the bitmask is invalid
 */</doc>
