<dec f='linux-4.14.y/include/scsi/scsi_host.h' l='128' type='int (*)(struct Scsi_Host *, struct scsi_cmnd *)'/>
<use f='linux-4.14.y/drivers/ata/ahci.c' l='109' macro='1' u='w'/>
<offset>448</offset>
<doc f='linux-4.14.y/include/scsi/scsi_host.h' l='96'>/*
	 * The queuecommand function is used to queue up a scsi
	 * command block to the LLDD.  When the driver finished
	 * processing the command the done callback is invoked.
	 *
	 * If queuecommand returns 0, then the HBA has accepted the
	 * command.  The done() function must be called on the command
	 * when the driver has finished with it. (you may call done on the
	 * command before queuecommand returns, but in this case you
	 * *must* return 0 from queuecommand).
	 *
	 * Queuecommand may also reject the command, in which case it may
	 * not touch the command and must not call done() for it.
	 *
	 * There are two possible rejection returns:
	 *
	 *   SCSI_MLQUEUE_DEVICE_BUSY: Block this device temporarily, but
	 *   allow commands to other devices serviced by this host.
	 *
	 *   SCSI_MLQUEUE_HOST_BUSY: Block all devices served by this
	 *   host temporarily.
	 *
         * For compatibility, any other non-zero return is treated the
         * same as SCSI_MLQUEUE_HOST_BUSY.
	 *
	 * NOTE: &quot;temporarily&quot; means either until the next command for#
	 * this device/host completes, or a period of time determined by
	 * I/O pressure in the system if there are no other outstanding
	 * commands.
	 *
	 * STATUS: REQUIRED
	 */</doc>
<use f='linux-4.14.y/drivers/ata/ahci_platform.c' l='37' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/ata_generic.c' l='99' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/ata_piix.c' l='1079' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/ata_piix.c' l='1113' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/pata_acpi.c' l='208' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/pata_mpiix.c' l='139' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/pata_oldpiix.c' l='207' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/pata_sch.c' l='74' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/message/fusion/mptsas.c' l='1979' u='w'/>
<use f='linux-4.14.y/drivers/message/fusion/mptspi.c' l='834' u='w'/>
<use f='linux-4.14.y/drivers/scsi/BusLogic.c' l='3849' u='w'/>
<use f='linux-4.14.y/drivers/scsi/gdth.c' l='4669' u='w'/>
<use f='linux-4.14.y/drivers/scsi/megaraid.c' l='4176' u='w'/>
<use f='linux-4.14.y/drivers/scsi/megaraid/megaraid_mbox.c' l='342' u='w'/>
<use f='linux-4.14.y/drivers/scsi/megaraid/megaraid_sas_base.c' l='3120' u='w'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='8635' u='w'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='8673' u='w'/>
<use f='linux-4.14.y/drivers/scsi/scsi_error.c' l='1039' u='r' c='scsi_send_eh_cmnd'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='1740' u='r' c='scsi_dispatch_cmd'/>
<use f='linux-4.14.y/drivers/scsi/virtio_scsi.c' l='814' u='w'/>
<use f='linux-4.14.y/drivers/scsi/virtio_scsi.c' l='834' u='w'/>
<use f='linux-4.14.y/drivers/scsi/vmw_pvscsi.c' l='1000' u='w'/>
<dec f='linux-4.14.y/include/scsi/scsi_host.h' l='128' type='int (*)(struct Scsi_Host *, struct scsi_cmnd *)'/>
<use f='linux-4.14.y/drivers/ata/ahci.c' l='109' macro='1' u='w'/>
<offset>448</offset>
<doc f='linux-4.14.y/include/scsi/scsi_host.h' l='96'>/*
	 * The queuecommand function is used to queue up a scsi
	 * command block to the LLDD.  When the driver finished
	 * processing the command the done callback is invoked.
	 *
	 * If queuecommand returns 0, then the HBA has accepted the
	 * command.  The done() function must be called on the command
	 * when the driver has finished with it. (you may call done on the
	 * command before queuecommand returns, but in this case you
	 * *must* return 0 from queuecommand).
	 *
	 * Queuecommand may also reject the command, in which case it may
	 * not touch the command and must not call done() for it.
	 *
	 * There are two possible rejection returns:
	 *
	 *   SCSI_MLQUEUE_DEVICE_BUSY: Block this device temporarily, but
	 *   allow commands to other devices serviced by this host.
	 *
	 *   SCSI_MLQUEUE_HOST_BUSY: Block all devices served by this
	 *   host temporarily.
	 *
         * For compatibility, any other non-zero return is treated the
         * same as SCSI_MLQUEUE_HOST_BUSY.
	 *
	 * NOTE: &quot;temporarily&quot; means either until the next command for#
	 * this device/host completes, or a period of time determined by
	 * I/O pressure in the system if there are no other outstanding
	 * commands.
	 *
	 * STATUS: REQUIRED
	 */</doc>
<use f='linux-4.14.y/drivers/ata/ahci_platform.c' l='37' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/ata_generic.c' l='99' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/ata_piix.c' l='1079' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/ata_piix.c' l='1113' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/pata_acpi.c' l='208' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/pata_mpiix.c' l='139' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/pata_oldpiix.c' l='207' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/ata/pata_sch.c' l='74' macro='1' u='w'/>
<use f='linux-4.14.y/drivers/message/fusion/mptsas.c' l='1979' u='w'/>
<use f='linux-4.14.y/drivers/message/fusion/mptspi.c' l='834' u='w'/>
<use f='linux-4.14.y/drivers/scsi/BusLogic.c' l='3849' u='w'/>
<use f='linux-4.14.y/drivers/scsi/gdth.c' l='4669' u='w'/>
<use f='linux-4.14.y/drivers/scsi/megaraid.c' l='4176' u='w'/>
<use f='linux-4.14.y/drivers/scsi/megaraid/megaraid_mbox.c' l='342' u='w'/>
<use f='linux-4.14.y/drivers/scsi/megaraid/megaraid_sas_base.c' l='3120' u='w'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='8635' u='w'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='8673' u='w'/>
<use f='linux-4.14.y/drivers/scsi/scsi_error.c' l='1039' u='r' c='scsi_send_eh_cmnd'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='1740' u='r' c='scsi_dispatch_cmd'/>
<use f='linux-4.14.y/drivers/scsi/virtio_scsi.c' l='814' u='w'/>
<use f='linux-4.14.y/drivers/scsi/virtio_scsi.c' l='834' u='w'/>
<use f='linux-4.14.y/drivers/scsi/vmw_pvscsi.c' l='1000' u='w'/>
