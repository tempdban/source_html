<dec f='linux-4.18.y/drivers/net/qede/base/ecore_l2_api.h' l='254' type='enum _ecore_status_t ecore_eth_tx_queue_start(struct ecore_hwfn * p_hwfn, u16 opaque_fid, struct ecore_queue_start_common_params * p_params, u8 tc, dma_addr_t pbl_addr, u16 pbl_size, struct ecore_txq_start_ret_params * p_ret_params)'/>
<doc f='linux-4.18.y/drivers/net/qede/base/ecore_l2_api.h' l='237'>/**
 * @brief - TX Queue Start Ramrod
 *
 * This ramrod initializes a TX Queue for a VPort. An Assert is generated if
 * the VPort is not currently initialized.
 *
 * @param p_hwfn
 * @param opaque_fid
 * @p_params
 * @param tc			traffic class to use with this L2 txq
 * @param pbl_addr		address of the pbl array
 * @param pbl_size		number of entries in pbl
 * @param p_ret_params		Pointer to fill the return parameters in.
 *
 * @return enum _ecore_status_t
 */</doc>
<def f='linux-4.18.y/drivers/net/qede/base/ecore_l2.c' l='1214' ll='1243' type='enum _ecore_status_t ecore_eth_tx_queue_start(struct ecore_hwfn * p_hwfn, u16 opaque_fid, struct ecore_queue_start_common_params * p_params, u8 tc, dma_addr_t pbl_addr, u16 pbl_size, struct ecore_txq_start_ret_params * p_ret_params)'/>
<use f='linux-4.18.y/drivers/net/qede/qede_rxtx.c' l='675' u='c' c='qede_tx_queue_start'/>
