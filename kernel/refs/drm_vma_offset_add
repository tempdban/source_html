<dec f='linux-4.14.y/include/drm/drm_vma_manager.h' l='58' type='int drm_vma_offset_add(struct drm_vma_offset_manager * mgr, struct drm_vma_offset_node * node, unsigned long pages)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='497' u='c' c='drm_gem_create_mmap_offset_size'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='203' ll='222' type='int drm_vma_offset_add(struct drm_vma_offset_manager * mgr, struct drm_vma_offset_node * node, unsigned long pages)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='223' type='int drm_vma_offset_add(struct drm_vma_offset_manager * , struct drm_vma_offset_node * , unsigned long )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='223' c='drm_vma_offset_add'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='223' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='223' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='180'>/**
 * drm_vma_offset_add() - Add offset node to manager
 * @mgr: Manager object
 * @node: Node to be added
 * @pages: Allocation size visible to user-space (in number of pages)
 *
 * Add a node to the offset-manager. If the node was already added, this does
 * nothing and return 0. @pages is the size of the object given in number of
 * pages.
 * After this call succeeds, you can access the offset of the node until it
 * is removed again.
 *
 * If this call fails, it is safe to retry the operation or call
 * drm_vma_offset_remove(), anyway. However, no cleanup is required in that
 * case.
 *
 * @pages is not required to be the same size as the underlying memory object
 * that you want to map. It only limits the size that user-space can map into
 * their address space.
 *
 * RETURNS:
 * 0 on success, negative error code on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1218' u='c' c='ttm_bo_init_reserved'/>
<dec f='linux-4.14.y/include/drm/drm_vma_manager.h' l='58' type='int drm_vma_offset_add(struct drm_vma_offset_manager * mgr, struct drm_vma_offset_node * node, unsigned long pages)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='497' u='c' c='drm_gem_create_mmap_offset_size'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='203' ll='222' type='int drm_vma_offset_add(struct drm_vma_offset_manager * mgr, struct drm_vma_offset_node * node, unsigned long pages)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='223' type='int drm_vma_offset_add(struct drm_vma_offset_manager * , struct drm_vma_offset_node * , unsigned long )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='223' c='drm_vma_offset_add'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='223' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='223' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_vma_manager.c' l='180'>/**
 * drm_vma_offset_add() - Add offset node to manager
 * @mgr: Manager object
 * @node: Node to be added
 * @pages: Allocation size visible to user-space (in number of pages)
 *
 * Add a node to the offset-manager. If the node was already added, this does
 * nothing and return 0. @pages is the size of the object given in number of
 * pages.
 * After this call succeeds, you can access the offset of the node until it
 * is removed again.
 *
 * If this call fails, it is safe to retry the operation or call
 * drm_vma_offset_remove(), anyway. However, no cleanup is required in that
 * case.
 *
 * @pages is not required to be the same size as the underlying memory object
 * that you want to map. It only limits the size that user-space can map into
 * their address space.
 *
 * RETURNS:
 * 0 on success, negative error code on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1218' u='c' c='ttm_bo_init_reserved'/>
