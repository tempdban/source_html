<def f='linux-4.14.y/include/linux/i2c.h' l='175' ll='219'/>
<size>232</size>
<doc f='linux-4.14.y/include/linux/i2c.h' l='138'>/**
 * struct i2c_driver - represent an I2C device driver
 * @class: What kind of i2c device we instantiate (for detect)
 * @attach_adapter: Callback for bus addition (deprecated)
 * @probe: Callback for device binding - soon to be deprecated
 * @probe_new: New callback for device binding
 * @remove: Callback for device unbinding
 * @shutdown: Callback for device shutdown
 * @alert: Alert callback, for example for the SMBus alert protocol
 * @command: Callback for bus-wide signaling (optional)
 * @driver: Device driver model driver
 * @id_table: List of I2C devices supported by this driver
 * @detect: Callback for device detection
 * @address_list: The I2C addresses to probe (for detect)
 * @clients: List of detected clients we created (for i2c-core use only)
 * @disable_i2c_core_irq_mapping: Tell the i2c-core to not do irq-mapping
 *
 * The driver.owner field should be set to the module owner of this driver.
 * The driver.name field should be set to the name of this driver.
 *
 * For automatic device detection, both @detect and @address_list must
 * be defined. @class should also be set, otherwise only devices forced
 * with module parameters will be created. The detect function must
 * fill at least the name field of the i2c_board_info structure it is
 * handed upon successful detection, and possibly also the flags field.
 *
 * If @detect is missing, the driver will still work fine for enumerated
 * devices. Detected devices simply won&apos;t be supported. This is expected
 * for the many I2C/SMBus devices which can&apos;t be detected reliably, and
 * the ones which can always be enumerated in practice.
 *
 * The i2c_client structure which is handed to the @detect callback is
 * not a real i2c_client. It is initialized just enough so that you can
 * call i2c_smbus_read_byte_data and friends on it. Don&apos;t do anything
 * else with it. In particular, calling dev_dbg and friends on it is
 * not allowed.
 */</doc>
<mbr r='i2c_driver::class' o='0' t='unsigned int'/>
<mbr r='i2c_driver::attach_adapter' o='64' t='int (*)(struct i2c_adapter *)'/>
<mbr r='i2c_driver::probe' o='128' t='int (*)(struct i2c_client *, const struct i2c_device_id *)'/>
<mbr r='i2c_driver::remove' o='192' t='int (*)(struct i2c_client *)'/>
<mbr r='i2c_driver::probe_new' o='256' t='int (*)(struct i2c_client *)'/>
<mbr r='i2c_driver::shutdown' o='320' t='void (*)(struct i2c_client *)'/>
<mbr r='i2c_driver::alert' o='384' t='void (*)(struct i2c_client *, enum i2c_alert_protocol, unsigned int)'/>
<mbr r='i2c_driver::command' o='448' t='int (*)(struct i2c_client *, unsigned int, void *)'/>
<mbr r='i2c_driver::driver' o='512' t='struct device_driver'/>
<mbr r='i2c_driver::id_table' o='1472' t='const struct i2c_device_id *'/>
<mbr r='i2c_driver::detect' o='1536' t='int (*)(struct i2c_client *, struct i2c_board_info *)'/>
<mbr r='i2c_driver::address_list' o='1600' t='const unsigned short *'/>
<mbr r='i2c_driver::clients' o='1664' t='struct list_head'/>
<mbr r='i2c_driver::disable_i2c_core_irq_mapping' o='1792' t='bool'/>
