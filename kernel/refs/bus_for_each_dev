<dec f='linux-4.14.y/include/linux/device.h' l='158' type='int bus_for_each_dev(struct bus_type * bus, struct device * start, void * data, int (*)(struct device *, void *) fn)'/>
<def f='linux-4.14.y/drivers/base/bus.c' l='300' ll='316' type='int bus_for_each_dev(struct bus_type * bus, struct device * start, void * data, int (*)(struct device *, void *) fn)'/>
<dec f='linux-4.14.y/drivers/base/bus.c' l='317' type='int bus_for_each_dev(struct bus_type * , struct device * , void * , int (*)(struct device *, void *) )'/>
<use f='linux-4.14.y/drivers/base/bus.c' l='317' c='bus_for_each_dev'/>
<use f='linux-4.14.y/drivers/base/bus.c' l='317' u='a'/>
<use f='linux-4.14.y/drivers/base/bus.c' l='317' u='a'/>
<use f='linux-4.14.y/drivers/base/bus.c' l='759' u='c' c='bus_rescan_devices'/>
<doc f='linux-4.14.y/drivers/base/bus.c' l='281'>/**
 * bus_for_each_dev - device iterator.
 * @bus: bus type.
 * @start: device to start iterating from.
 * @data: data for the callback.
 * @fn: function to be called for each device.
 *
 * Iterate over @bus&apos;s list of devices, and call @fn for each,
 * passing it @data. If @start is not NULL, we use that device to
 * begin iterating from.
 *
 * We check the return of @fn each time. If it returns anything
 * other than 0, we break out and return that value.
 *
 * NOTE: The device that returns a non-zero value is not retained
 * in any way, nor is its refcount incremented. If the caller needs
 * to retain this data, it should do so, and increment the reference
 * count in the supplied callback.
 */</doc>
<use f='linux-4.14.y/drivers/base/dd.c' l='802' u='c' c='driver_attach'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1573' u='c' c='i2c_for_each_dev'/>
<use f='linux-4.14.y/drivers/iommu/iommu.c' l='1164' u='c' c='iommu_bus_init'/>
<use f='linux-4.14.y/drivers/iommu/iommu.c' l='1173' u='c' c='iommu_bus_init'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='530' u='c' c='spi_add_device'/>
