<dec f='linux-4.18.y/include/linux/printk.h' l='488' type='int hex_dump_to_buffer(const void * buf, size_t len, int rowsize, int groupsize, char * linebuf, size_t linebuflen, bool ascii)'/>
<use f='linux-4.18.y/drivers/net/ethernet/amd/xgbe/xgbe-drv.c' l='2995' u='c' c='xgbe_print_pkt'/>
<use f='linux-4.18.y/drivers/scsi/scsi_logging.c' l='264' u='c' c='scsi_print_command'/>
<use f='linux-4.18.y/drivers/scsi/scsi_logging.c' l='276' u='c' c='scsi_print_command'/>
<use f='linux-4.18.y/drivers/scsi/scsi_logging.c' l='356' u='c' c='scsi_log_dump_sense'/>
<use f='linux-4.18.y/fs/seq_file.c' l='887' u='c' c='seq_hex_dump'/>
<def f='linux-4.18.y/lib/hexdump.c' l='109' ll='208' type='int hex_dump_to_buffer(const void * buf, size_t len, int rowsize, int groupsize, char * linebuf, size_t linebuflen, bool ascii)'/>
<dec f='linux-4.18.y/lib/hexdump.c' l='209' type='int hex_dump_to_buffer(const void * , size_t , int , int , char * , size_t , bool )'/>
<use f='linux-4.18.y/lib/hexdump.c' l='209' c='hex_dump_to_buffer'/>
<use f='linux-4.18.y/lib/hexdump.c' l='209' u='a'/>
<use f='linux-4.18.y/lib/hexdump.c' l='209' u='a'/>
<use f='linux-4.18.y/lib/hexdump.c' l='258' u='c' c='print_hex_dump'/>
<doc f='linux-4.18.y/lib/hexdump.c' l='79'>/**
 * hex_dump_to_buffer - convert a blob of data to &quot;hex ASCII&quot; in memory
 * @buf: data blob to dump
 * @len: number of bytes in the @buf
 * @rowsize: number of bytes to print per line; must be 16 or 32
 * @groupsize: number of bytes to print at a time (1, 2, 4, 8; default = 1)
 * @linebuf: where to put the converted data
 * @linebuflen: total size of @linebuf, including space for terminating NUL
 * @ascii: include ASCII after the hex output
 *
 * hex_dump_to_buffer() works on one &quot;line&quot; of output at a time, i.e.,
 * 16 or 32 bytes of input data converted to hex + ASCII output.
 *
 * Given a buffer of u8 data, hex_dump_to_buffer() converts the input data
 * to a hex + ASCII dump at the supplied memory location.
 * The converted output is always NUL-terminated.
 *
 * E.g.:
 *   hex_dump_to_buffer(frame-&gt;data, frame-&gt;len, 16, 1,
 *			linebuf, sizeof(linebuf), true);
 *
 * example output buffer:
 * 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f  @ABCDEFGHIJKLMNO
 *
 * Return:
 * The amount of bytes placed in the buffer without terminating NUL. If the
 * output was truncated, then the return value is the number of bytes
 * (excluding the terminating NUL) which would have been written to the final
 * string if enough space had been available.
 */</doc>
