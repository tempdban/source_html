<dec f='linux-4.18.y/drivers/usb/host/xhci.h' l='2092' type='void xhci_stop_endpoint_command_watchdog(struct timer_list * t)'/>
<use f='linux-4.18.y/drivers/usb/host/xhci-mem.c' l='797' u='r' c='xhci_init_endpoint_timer'/>
<def f='linux-4.18.y/drivers/usb/host/xhci-ring.c' l='938' ll='969' type='void xhci_stop_endpoint_command_watchdog(struct timer_list * t)'/>
<doc f='linux-4.18.y/drivers/usb/host/xhci-ring.c' l='921'>/* Watchdog timer function for when a stop endpoint command fails to complete.
 * In this case, we assume the host controller is broken or dying or dead.  The
 * host may still be completing some other events, so we have to be careful to
 * let the event ring handler and the URB dequeueing/enqueueing functions know
 * through xhci-&gt;state.
 *
 * The timer may also fire if the host takes a very long time to respond to the
 * command, and the stop endpoint command completion handler cannot delete the
 * timer before the timer function is called.  Another endpoint cancellation may
 * sneak in before the timer function can grab the lock, and that may queue
 * another stop endpoint command and add the timer back.  So we cannot use a
 * simple flag to say whether there is a pending stop endpoint command for a
 * particular endpoint.
 *
 * Instead we use a combination of that flag and checking if a new timer is
 * pending.
 */</doc>
