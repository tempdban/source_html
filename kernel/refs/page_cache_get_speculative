<def f='linux-4.14.y/include/linux/pagemap.h' l='165' ll='196' type='int page_cache_get_speculative(struct page * page)'/>
<doc f='linux-4.14.y/include/linux/pagemap.h' l='121'>/*
 * speculatively take a reference to a page.
 * If the page is free (_refcount == 0), then _refcount is untouched, and 0
 * is returned. Otherwise, _refcount is incremented by 1 and 1 is returned.
 *
 * This function must be called inside the same rcu_read_lock() section as has
 * been used to lookup the page in the pagecache radix-tree (or page table):
 * this allows allocators to use a synchronize_rcu() to stabilize _refcount.
 *
 * Unless an RCU grace period has passed, the count of all pages coming out
 * of the allocator must be considered unstable. page_count may return higher
 * than expected, and put_page must be able to do the right thing when the
 * page has been finished with, no matter what it is subsequently allocated
 * for (because put_page is what is used here to drop an invalid speculative
 * reference).
 *
 * This is the interesting part of the lockless pagecache (and lockless
 * get_user_pages) locking protocol, where the lookup-side (eg. find_get_page)
 * has the following pattern:
 * 1. find page in radix tree
 * 2. conditionally increment refcount
 * 3. check the page is still in pagecache (if no, goto 1)
 *
 * Remove-side that cares about stability of _refcount (eg. reclaim) has the
 * following (with tree_lock held for write):
 * A. atomically check refcount is correct and set it to 0 (atomic_cmpxchg)
 * B. remove page from pagecache
 * C. free the page
 *
 * There are 2 critical interleavings that matter:
 * - 2 runs before A: in this case, A sees elevated refcount and bails out
 * - A runs before 2: in this case, 2 sees zero refcount and retries;
 *   subsequently, B will complete and 1 will find no page, causing the
 *   lookup to return NULL.
 *
 * It is possible that between 1 and 2, the page is removed then the exact same
 * page is inserted into the same position in pagecache. That&apos;s OK: the
 * old find_get_page using tree_lock could equally have run before or after
 * such a re-insertion, depending on order that locks are granted.
 *
 * Lookups racing against pagecache insertion isn&apos;t a big problem: either 1
 * will find the page or it will not. Likewise, the old find_get_page could run
 * either before the insertion or afterwards, depending on timing.
 */</doc>
<use f='linux-4.14.y/mm/filemap.c' l='1349' u='c' c='find_get_entry'/>
<use f='linux-4.14.y/mm/filemap.c' l='1557' u='c' c='find_get_entries'/>
<use f='linux-4.14.y/mm/filemap.c' l='1638' u='c' c='find_get_pages_range'/>
<use f='linux-4.14.y/mm/filemap.c' l='1721' u='c' c='find_get_pages_contig'/>
<use f='linux-4.14.y/mm/filemap.c' l='1805' u='c' c='find_get_pages_tag'/>
<use f='linux-4.14.y/mm/filemap.c' l='1880' u='c' c='find_get_entries_tag'/>
<use f='linux-4.14.y/mm/filemap.c' l='2530' u='c' c='filemap_map_pages'/>
<use f='linux-4.14.y/mm/gup.c' l='1404' u='c' c='gup_pte_range'/>
<def f='linux-4.14.y/include/linux/pagemap.h' l='165' ll='196' type='int page_cache_get_speculative(struct page * page)'/>
<doc f='linux-4.14.y/include/linux/pagemap.h' l='121'>/*
 * speculatively take a reference to a page.
 * If the page is free (_refcount == 0), then _refcount is untouched, and 0
 * is returned. Otherwise, _refcount is incremented by 1 and 1 is returned.
 *
 * This function must be called inside the same rcu_read_lock() section as has
 * been used to lookup the page in the pagecache radix-tree (or page table):
 * this allows allocators to use a synchronize_rcu() to stabilize _refcount.
 *
 * Unless an RCU grace period has passed, the count of all pages coming out
 * of the allocator must be considered unstable. page_count may return higher
 * than expected, and put_page must be able to do the right thing when the
 * page has been finished with, no matter what it is subsequently allocated
 * for (because put_page is what is used here to drop an invalid speculative
 * reference).
 *
 * This is the interesting part of the lockless pagecache (and lockless
 * get_user_pages) locking protocol, where the lookup-side (eg. find_get_page)
 * has the following pattern:
 * 1. find page in radix tree
 * 2. conditionally increment refcount
 * 3. check the page is still in pagecache (if no, goto 1)
 *
 * Remove-side that cares about stability of _refcount (eg. reclaim) has the
 * following (with tree_lock held for write):
 * A. atomically check refcount is correct and set it to 0 (atomic_cmpxchg)
 * B. remove page from pagecache
 * C. free the page
 *
 * There are 2 critical interleavings that matter:
 * - 2 runs before A: in this case, A sees elevated refcount and bails out
 * - A runs before 2: in this case, 2 sees zero refcount and retries;
 *   subsequently, B will complete and 1 will find no page, causing the
 *   lookup to return NULL.
 *
 * It is possible that between 1 and 2, the page is removed then the exact same
 * page is inserted into the same position in pagecache. That&apos;s OK: the
 * old find_get_page using tree_lock could equally have run before or after
 * such a re-insertion, depending on order that locks are granted.
 *
 * Lookups racing against pagecache insertion isn&apos;t a big problem: either 1
 * will find the page or it will not. Likewise, the old find_get_page could run
 * either before the insertion or afterwards, depending on timing.
 */</doc>
<use f='linux-4.14.y/mm/filemap.c' l='1349' u='c' c='find_get_entry'/>
<use f='linux-4.14.y/mm/filemap.c' l='1557' u='c' c='find_get_entries'/>
<use f='linux-4.14.y/mm/filemap.c' l='1638' u='c' c='find_get_pages_range'/>
<use f='linux-4.14.y/mm/filemap.c' l='1721' u='c' c='find_get_pages_contig'/>
<use f='linux-4.14.y/mm/filemap.c' l='1805' u='c' c='find_get_pages_tag'/>
<use f='linux-4.14.y/mm/filemap.c' l='1880' u='c' c='find_get_entries_tag'/>
<use f='linux-4.14.y/mm/filemap.c' l='2530' u='c' c='filemap_map_pages'/>
<use f='linux-4.14.y/mm/gup.c' l='1404' u='c' c='gup_pte_range'/>
