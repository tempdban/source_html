<dec f='linux-4.18.y/security/keys/internal.h' l='243' type='long keyctl_assume_authority(key_serial_t )'/>
<use f='linux-4.18.y/security/keys/compat.c' l='114' u='c' c='__do_compat_sys_keyctl'/>
<def f='linux-4.18.y/security/keys/keyctl.c' l='1385' ll='1418' type='long keyctl_assume_authority(key_serial_t id)'/>
<use f='linux-4.18.y/security/keys/keyctl.c' l='1711' u='c' c='__do_sys_keyctl'/>
<doc f='linux-4.18.y/security/keys/keyctl.c' l='1368'>/*
 * Assume (or clear) the authority to instantiate the specified key.
 *
 * This sets the authoritative token currently in force for key instantiation.
 * This must be done for a key to be instantiated.  It has the effect of making
 * available all the keys from the caller of the request_key() that created a
 * key to request_key() calls made by the caller of this function.
 *
 * The caller must have the instantiation key in their process keyrings with a
 * Search permission grant available to the caller.
 *
 * If the ID given is 0, then the setting will be cleared and 0 returned.
 *
 * If the ID given has a matching an authorisation key, then that key will be
 * set and its ID will be returned.  The authorisation key can be read to get
 * the callout information passed to request_key().
 */</doc>
