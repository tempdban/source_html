<dec f='linux-4.18.y/include/linux/random.h' l='41' type='void get_random_bytes_arch(void * buf, int nbytes)'/>
<def f='linux-4.18.y/drivers/char/random.c' l='1729' ll='1748' type='void get_random_bytes_arch(void * buf, int nbytes)'/>
<dec f='linux-4.18.y/drivers/char/random.c' l='1749' type='void get_random_bytes_arch(void * , int )'/>
<use f='linux-4.18.y/drivers/char/random.c' l='1749' c='get_random_bytes_arch'/>
<use f='linux-4.18.y/drivers/char/random.c' l='1749' u='a'/>
<use f='linux-4.18.y/drivers/char/random.c' l='1749' u='a'/>
<doc f='linux-4.18.y/drivers/char/random.c' l='1719'>/*
 * This function will use the architecture-specific hardware random
 * number generator if it is available.  The arch-specific hw RNG will
 * almost certainly be faster than what we can do in software, but it
 * is impossible to verify that it is implemented securely (as
 * opposed, to, say, the AES encryption of a sequence number using a
 * key known by the NSA).  So it&apos;s useful if we need the speed, but
 * only if we&apos;re willing to trust the hardware manufacturer not to
 * have put in a back door.
 */</doc>
