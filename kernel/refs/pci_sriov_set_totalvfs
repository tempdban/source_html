<dec f='linux-4.18.y/include/linux/pci.h' l='1961' type='int pci_sriov_set_totalvfs(struct pci_dev * dev, u16 numvfs)'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/igb_main.c' l='3630' u='c' c='igb_probe_vfs'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c' l='10411' u='c' c='ixgbe_probe'/>
<def f='linux-4.18.y/drivers/pci/iov.c' l='817' ll='831' type='int pci_sriov_set_totalvfs(struct pci_dev * dev, u16 numvfs)'/>
<dec f='linux-4.18.y/drivers/pci/iov.c' l='832' type='int pci_sriov_set_totalvfs(struct pci_dev * , u16 )'/>
<use f='linux-4.18.y/drivers/pci/iov.c' l='832' c='pci_sriov_set_totalvfs'/>
<use f='linux-4.18.y/drivers/pci/iov.c' l='832' u='a'/>
<use f='linux-4.18.y/drivers/pci/iov.c' l='832' u='a'/>
<doc f='linux-4.18.y/drivers/pci/iov.c' l='804'>/**
 * pci_sriov_set_totalvfs -- reduce the TotalVFs available
 * @dev: the PCI PF device
 * @numvfs: number that should be used for TotalVFs supported
 *
 * Should be called from PF driver&apos;s probe routine with
 * device&apos;s mutex held.
 *
 * Returns 0 if PF is an SRIOV-capable device and
 * value of numvfs valid. If not a PF return -ENOSYS;
 * if numvfs is invalid return -EINVAL;
 * if VFs already enabled, return -EBUSY.
 */</doc>
