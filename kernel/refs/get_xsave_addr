<dec f='linux-4.14.y/arch/x86/include/asm/fpu/xstate.h' l='49' type='void * get_xsave_addr(struct xregs_state * xsave, int xstate)'/>
<def f='linux-4.14.y/arch/x86/kernel/fpu/xstate.c' l='843' ll='873' type='void * get_xsave_addr(struct xregs_state * xsave, int xstate_feature)'/>
<dec f='linux-4.14.y/arch/x86/kernel/fpu/xstate.c' l='874' type='void * get_xsave_addr(struct xregs_state * , int )'/>
<use f='linux-4.14.y/arch/x86/kernel/fpu/xstate.c' l='874' c='get_xsave_addr'/>
<use f='linux-4.14.y/arch/x86/kernel/fpu/xstate.c' l='874' u='a'/>
<use f='linux-4.14.y/arch/x86/kernel/fpu/xstate.c' l='874' u='a'/>
<use f='linux-4.14.y/arch/x86/kernel/fpu/xstate.c' l='905' u='c' c='get_xsave_field_ptr'/>
<doc f='linux-4.14.y/arch/x86/kernel/fpu/xstate.c' l='825'>/*
 * Given the xsave area and a state inside, this function returns the
 * address of the state.
 *
 * This is the API that is called to get xstate address in either
 * standard format or compacted format of xsave area.
 *
 * Note that if there is no data for the field in the xsave buffer
 * this will return NULL.
 *
 * Inputs:
 *	xstate: the thread&apos;s storage area for all FPU data
 *	xstate_feature: state which is defined in xsave.h (e.g.
 *	XFEATURE_MASK_FP, XFEATURE_MASK_SSE, etc...)
 * Output:
 *	address of the state in the xsave area, or NULL if the
 *	field is not present in the xsave buffer.
 */</doc>
<use f='linux-4.14.y/arch/x86/kvm/x86.c' l='3281' u='c' c='fill_xsave'/>
<use f='linux-4.14.y/arch/x86/kvm/x86.c' l='3324' u='c' c='load_xsave'/>
