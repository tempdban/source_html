<dec f='linux-4.14.y/include/linux/mm.h' l='1484' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux-4.14.y/include/linux/mm.h' l='1481'>/*
 * doesn&apos;t attempt to fault and will return short.
 */</doc>
<use f='linux-4.14.y/kernel/events/core.c' l='6094' u='c' c='perf_virt_to_phys'/>
<def f='linux-4.14.y/mm/gup.c' l='1772' ll='1807' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux-4.14.y/mm/gup.c' l='1768'>/*
 * Like get_user_pages_fast() except it&apos;s IRQ-safe in that it won&apos;t fall back to
 * the regular GUP. It will only return non-negative values.
 */</doc>
<def f='linux-4.14.y/mm/util.c' l='281' ll='285' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<dec f='linux-4.14.y/mm/util.c' l='286' type='int __get_user_pages_fast(unsigned long , int , int , struct page ** )'/>
<use f='linux-4.14.y/mm/util.c' l='286' c='__get_user_pages_fast'/>
<use f='linux-4.14.y/mm/util.c' l='286' u='a'/>
<use f='linux-4.14.y/mm/util.c' l='286' u='a'/>
<doc f='linux-4.14.y/mm/util.c' l='275'>/*
 * Like get_user_pages_fast() except its IRQ-safe in that it won&apos;t fall
 * back to the regular GUP.
 * If the architecture not support this function, simply return with no
 * page pinned
 */</doc>
<dec f='linux-4.14.y/include/linux/mm.h' l='1484' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux-4.14.y/include/linux/mm.h' l='1481'>/*
 * doesn&apos;t attempt to fault and will return short.
 */</doc>
<use f='linux-4.14.y/kernel/events/core.c' l='6094' u='c' c='perf_virt_to_phys'/>
<def f='linux-4.14.y/mm/gup.c' l='1772' ll='1807' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux-4.14.y/mm/gup.c' l='1768'>/*
 * Like get_user_pages_fast() except it&apos;s IRQ-safe in that it won&apos;t fall back to
 * the regular GUP. It will only return non-negative values.
 */</doc>
<def f='linux-4.14.y/mm/util.c' l='281' ll='285' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<dec f='linux-4.14.y/mm/util.c' l='286' type='int __get_user_pages_fast(unsigned long , int , int , struct page ** )'/>
<use f='linux-4.14.y/mm/util.c' l='286' c='__get_user_pages_fast'/>
<use f='linux-4.14.y/mm/util.c' l='286' u='a'/>
<use f='linux-4.14.y/mm/util.c' l='286' u='a'/>
<doc f='linux-4.14.y/mm/util.c' l='275'>/*
 * Like get_user_pages_fast() except its IRQ-safe in that it won&apos;t fall
 * back to the regular GUP.
 * If the architecture not support this function, simply return with no
 * page pinned
 */</doc>
