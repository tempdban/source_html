<dec f='linux-4.18.y/include/linux/mm.h' l='1589' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux-4.18.y/include/linux/mm.h' l='1586'>/*
 * doesn&apos;t attempt to fault and will return short.
 */</doc>
<use f='linux-4.18.y/kernel/events/core.c' l='6338' u='c' c='perf_virt_to_phys'/>
<def f='linux-4.18.y/mm/gup.c' l='1780' ll='1815' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux-4.18.y/mm/gup.c' l='1774'>/*
 * Like get_user_pages_fast() except it&apos;s IRQ-safe in that it won&apos;t fall back to
 * the regular GUP.
 * Note a difference with get_user_pages_fast: this always returns the
 * number of pages pinned, 0 if no pages were pinned.
 */</doc>
<def f='linux-4.18.y/mm/util.c' l='305' ll='309' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<dec f='linux-4.18.y/mm/util.c' l='310' type='int __get_user_pages_fast(unsigned long , int , int , struct page ** )'/>
<use f='linux-4.18.y/mm/util.c' l='310' c='__get_user_pages_fast'/>
<use f='linux-4.18.y/mm/util.c' l='310' u='a'/>
<use f='linux-4.18.y/mm/util.c' l='310' u='a'/>
<doc f='linux-4.18.y/mm/util.c' l='297'>/*
 * Like get_user_pages_fast() except its IRQ-safe in that it won&apos;t fall
 * back to the regular GUP.
 * Note a difference with get_user_pages_fast: this always returns the
 * number of pages pinned, 0 if no pages were pinned.
 * If the architecture does not support this function, simply return with no
 * pages pinned.
 */</doc>
<use f='linux-4.18.y/virt/kvm/kvm_main.c' l='1365' u='c' c='hva_to_pfn_fast'/>
<use f='linux-4.18.y/virt/kvm/kvm_main.c' l='1406' u='c' c='hva_to_pfn_slow'/>
<use f='linux-4.18.y/virt/kvm/kvm_main.c' l='1624' u='c' c='gfn_to_page_many_atomic'/>
