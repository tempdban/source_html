<dec f='linux-4.18.y/include/drm/drm_rect.h' l='196' type='void drm_rect_rotate_inv(struct drm_rect * r, int width, int height, unsigned int rotation)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='771' u='c' c='drm_atomic_helper_check_plane_state'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='423' ll='470' type='void drm_rect_rotate_inv(struct drm_rect * r, int width, int height, unsigned int rotation)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='471' type='void drm_rect_rotate_inv(struct drm_rect * , int , int , unsigned int )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='471' c='drm_rect_rotate_inv'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='471' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='471' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='399'>/**
 * drm_rect_rotate_inv - Inverse rotate the rectangle
 * @r: rectangle to be rotated
 * @width: Width of the coordinate space
 * @height: Height of the coordinate space
 * @rotation: Transformation whose inverse is to be applied
 *
 * Apply the inverse of @rotation to the coordinates
 * of rectangle @r.
 *
 * @width and @height combined with @rotation define
 * the location of the new origin.
 *
 * @width correcsponds to the horizontal and @height
 * to the vertical axis of the original untransformed
 * coordinate space, so that you never have to flip
 * them when doing a rotatation and its inverse.
 * That is, if you do ::
 *
 *     drm_rect_rotate(&amp;r, width, height, rotation);
 *     drm_rect_rotate_inv(&amp;r, width, height, rotation);
 *
 * you will always get back the original rectangle.
 */</doc>
