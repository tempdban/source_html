<dec f='linux-4.18.y/include/drm/drm_prime.h' l='85' type='int drm_gem_map_attach(struct dma_buf * dma_buf, struct device * target_dev, struct dma_buf_attachment * attach)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='198' ll='216' type='int drm_gem_map_attach(struct dma_buf * dma_buf, struct device * target_dev, struct dma_buf_attachment * attach)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='217' type='int drm_gem_map_attach(struct dma_buf * , struct device * , struct dma_buf_attachment * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='217' c='drm_gem_map_attach'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='217' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='217' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='517'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='517'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='186'>/**
 * drm_gem_map_attach - dma_buf attach implementation for GEM
 * @dma_buf: buffer to attach device to
 * @target_dev: not used
 * @attach: buffer attachment data
 *
 * Allocates &amp;drm_prime_attachment and calls &amp;drm_driver.gem_prime_pin for
 * device specific attachment. This can be used as the &amp;dma_buf_ops.attach
 * callback.
 *
 * Returns 0 on success, negative error code on failure.
 */</doc>
