<dec f='linux-4.14.y/include/linux/tracefs.h' l='28' type='struct dentry * tracefs_create_file(const char * name, umode_t mode, struct dentry * parent, void * data, const struct file_operations * fops)'/>
<def f='linux-4.14.y/fs/tracefs/inode.c' l='390' ll='415' type='struct dentry * tracefs_create_file(const char * name, umode_t mode, struct dentry * parent, void * data, const struct file_operations * fops)'/>
<doc f='linux-4.14.y/fs/tracefs/inode.c' l='364'>/**
 * tracefs_create_file - create a file in the tracefs filesystem
 * @name: a pointer to a string containing the name of the file to create.
 * @mode: the permission that the file should have.
 * @parent: a pointer to the parent dentry for this file.  This should be a
 *          directory dentry if set.  If this parameter is NULL, then the
 *          file will be created in the root of the tracefs filesystem.
 * @data: a pointer to something that the caller will want to get to later
 *        on.  The inode.i_private pointer will point to this value on
 *        the open() call.
 * @fops: a pointer to a struct file_operations that should be used for
 *        this file.
 *
 * This is the basic &quot;create a file&quot; function for tracefs.  It allows for a
 * wide range of flexibility in creating a file, or a directory (if you want
 * to create a directory, the tracefs_create_dir() function is
 * recommended to be used instead.)
 *
 * This function will return a pointer to a dentry if it succeeds.  This
 * pointer must be passed to the tracefs_remove() function when the file is
 * to be removed (no automatic cleanup happens if your module is unloaded,
 * you are responsible here.)  If an error occurs, %NULL will be returned.
 *
 * If tracefs is not enabled in the kernel, the value -%ENODEV will be
 * returned.
 */</doc>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='1080' u='c' c='ftrace_profile_tracefs'/>
<use f='linux-4.14.y/kernel/trace/trace.c' l='7366' u='c' c='trace_create_file'/>
<use f='linux-4.14.y/kernel/trace/trace_events.c' l='1936' u='c' c='event_subsystem_dir'/>
<use f='linux-4.14.y/kernel/trace/trace_events.c' l='2912' u='c' c='create_event_toplevel_files'/>
<use f='linux-4.14.y/kernel/trace/trace_events.c' l='2934' u='c' c='create_event_toplevel_files'/>
<use f='linux-4.14.y/kernel/trace/trace_events.c' l='3153' u='c' c='event_trace_init'/>
<use f='linux-4.14.y/kernel/trace/trace_stat.c' l='294' u='c' c='init_stat_file'/>
<dec f='linux-4.14.y/include/linux/tracefs.h' l='28' type='struct dentry * tracefs_create_file(const char * name, umode_t mode, struct dentry * parent, void * data, const struct file_operations * fops)'/>
<def f='linux-4.14.y/fs/tracefs/inode.c' l='390' ll='415' type='struct dentry * tracefs_create_file(const char * name, umode_t mode, struct dentry * parent, void * data, const struct file_operations * fops)'/>
<doc f='linux-4.14.y/fs/tracefs/inode.c' l='364'>/**
 * tracefs_create_file - create a file in the tracefs filesystem
 * @name: a pointer to a string containing the name of the file to create.
 * @mode: the permission that the file should have.
 * @parent: a pointer to the parent dentry for this file.  This should be a
 *          directory dentry if set.  If this parameter is NULL, then the
 *          file will be created in the root of the tracefs filesystem.
 * @data: a pointer to something that the caller will want to get to later
 *        on.  The inode.i_private pointer will point to this value on
 *        the open() call.
 * @fops: a pointer to a struct file_operations that should be used for
 *        this file.
 *
 * This is the basic &quot;create a file&quot; function for tracefs.  It allows for a
 * wide range of flexibility in creating a file, or a directory (if you want
 * to create a directory, the tracefs_create_dir() function is
 * recommended to be used instead.)
 *
 * This function will return a pointer to a dentry if it succeeds.  This
 * pointer must be passed to the tracefs_remove() function when the file is
 * to be removed (no automatic cleanup happens if your module is unloaded,
 * you are responsible here.)  If an error occurs, %NULL will be returned.
 *
 * If tracefs is not enabled in the kernel, the value -%ENODEV will be
 * returned.
 */</doc>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='1080' u='c' c='ftrace_profile_tracefs'/>
<use f='linux-4.14.y/kernel/trace/trace.c' l='7366' u='c' c='trace_create_file'/>
<use f='linux-4.14.y/kernel/trace/trace_events.c' l='1936' u='c' c='event_subsystem_dir'/>
<use f='linux-4.14.y/kernel/trace/trace_events.c' l='2912' u='c' c='create_event_toplevel_files'/>
<use f='linux-4.14.y/kernel/trace/trace_events.c' l='2934' u='c' c='create_event_toplevel_files'/>
<use f='linux-4.14.y/kernel/trace/trace_events.c' l='3153' u='c' c='event_trace_init'/>
<use f='linux-4.14.y/kernel/trace/trace_stat.c' l='294' u='c' c='init_stat_file'/>
