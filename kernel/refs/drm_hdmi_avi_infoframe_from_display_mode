<dec f='linux-4.14.y/include/drm/drm_edid.h' l='353' type='int drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe * frame, const struct drm_display_mode * mode, bool is_hdmi2_sink)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_edid.c' l='4747' ll='4805' type='int drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe * frame, const struct drm_display_mode * mode, bool is_hdmi2_sink)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_edid.c' l='4806' type='int drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe * , const struct drm_display_mode * , bool )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_edid.c' l='4806' c='drm_hdmi_avi_infoframe_from_display_mode'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_edid.c' l='4806' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_edid.c' l='4806' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_edid.c' l='4738'>/**
 * drm_hdmi_avi_infoframe_from_display_mode() - fill an HDMI AVI infoframe with
 *                                              data from a DRM display mode
 * @frame: HDMI AVI infoframe
 * @mode: DRM display mode
 * @is_hdmi2_sink: Sink is HDMI 2.0 compliant
 *
 * Return: 0 on success or a negative error code on failure.
 */</doc>
