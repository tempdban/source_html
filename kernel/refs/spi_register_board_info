<dec f='linux-4.14.y/include/linux/spi/spi.h' l='1318' type='int spi_register_board_info(const struct spi_board_info * info, unsigned int n)'/>
<def f='linux-4.14.y/drivers/spi/spi.c' l='690' ll='722' type='int spi_register_board_info(const struct spi_board_info * info, unsigned int n)'/>
<doc f='linux-4.14.y/drivers/spi/spi.c' l='668'>/**
 * spi_register_board_info - register SPI devices for a given board
 * @info: array of chip descriptors
 * @n: how many descriptors are provided
 * Context: can sleep
 *
 * Board-specific early init code calls this (probably during arch_initcall)
 * with segments of the SPI device table.  Any device nodes are created later,
 * after the relevant parent SPI controller (bus_num) is defined.  We keep
 * this table of devices forever, so that reloading a controller driver will
 * not make Linux forget about these hard-wired devices.
 *
 * Other code can also call this, e.g. a particular add-on board might provide
 * SPI devices through its expansion connector, so code initializing that board
 * would naturally declare its SPI devices.
 *
 * The board info passed can safely be __initdata ... but be careful of
 * any embedded pointers (platform_data, etc), they&apos;re copied as-is.
 * Device properties are deep-copied though.
 *
 * Return: zero on success, else a negative error code.
 */</doc>
