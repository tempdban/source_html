<dec f='linux-4.18.y/include/linux/memblock.h' l='95' type='int memblock_add_range(struct memblock_type * type, phys_addr_t base, phys_addr_t size, int nid, unsigned long flags)'/>
<doc f='linux-4.18.y/include/linux/memblock.h' l='94'>/* Low level functions */</doc>
<def f='linux-4.18.y/mm/memblock.c' l='507' ll='591' type='int memblock_add_range(struct memblock_type * type, phys_addr_t base, phys_addr_t size, int nid, unsigned long flags)'/>
<use f='linux-4.18.y/mm/memblock.c' l='596' u='c' c='memblock_add_node'/>
<use f='linux-4.18.y/mm/memblock.c' l='606' u='c' c='memblock_add'/>
<use f='linux-4.18.y/mm/memblock.c' l='729' u='c' c='memblock_reserve'/>
<doc f='linux-4.18.y/mm/memblock.c' l='491'>/**
 * memblock_add_range - add new memblock region
 * @type: memblock type to add new region into
 * @base: base address of the new region
 * @size: size of the new region
 * @nid: nid of the new region
 * @flags: flags of the new region
 *
 * Add new memblock region [@base,@base+@size) into @type.  The new region
 * is allowed to overlap with existing ones - overlaps don&apos;t affect already
 * existing regions.  @type is guaranteed to be minimal (all neighbouring
 * compatible regions are merged) after the addition.
 *
 * RETURNS:
 * 0 on success, -errno on failure.
 */</doc>
