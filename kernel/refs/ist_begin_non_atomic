<dec f='linux-4.14.y/arch/x86/include/asm/traps.h' l='114' type='void ist_begin_non_atomic(struct pt_regs * regs)'/>
<def f='linux-4.14.y/arch/x86/kernel/traps.c' l='135' ll='147' type='void ist_begin_non_atomic(struct pt_regs * regs)'/>
<doc f='linux-4.14.y/arch/x86/kernel/traps.c' l='122'>/**
 * ist_begin_non_atomic() - begin a non-atomic section in an IST exception
 * @regs:	regs passed to the IST exception handler
 *
 * IST exception handlers normally cannot schedule.  As a special
 * exception, if the exception interrupted userspace code (i.e.
 * user_mode(regs) would return true) and the exception was not
 * a double fault, it can be safe to schedule.  ist_begin_non_atomic()
 * begins a non-atomic section within an ist_enter()/ist_exit() region.
 * Callers are responsible for enabling interrupts themselves inside
 * the non-atomic section, and callers must call ist_end_non_atomic()
 * before ist_exit().
 */</doc>
