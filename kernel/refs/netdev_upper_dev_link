<dec f='linux-4.18.y/include/linux/netdevice.h' l='4053' type='int netdev_upper_dev_link(struct net_device * dev, struct net_device * upper_dev, struct netlink_ext_ack * extack)'/>
<use f='linux-4.18.y/drivers/net/ipvlan/ipvlan_main.c' l='662' u='c' c='ipvlan_link_new'/>
<use f='linux-4.18.y/drivers/net/macvlan.c' l='1438' u='c' c='macvlan_common_newlink'/>
<def f='linux-4.18.y/net/core/dev.c' l='6530' ll='6536' type='int netdev_upper_dev_link(struct net_device * dev, struct net_device * upper_dev, struct netlink_ext_ack * extack)'/>
<dec f='linux-4.18.y/net/core/dev.c' l='6537' type='int netdev_upper_dev_link(struct net_device * , struct net_device * , struct netlink_ext_ack * )'/>
<use f='linux-4.18.y/net/core/dev.c' l='6537' c='netdev_upper_dev_link'/>
<use f='linux-4.18.y/net/core/dev.c' l='6537' u='a'/>
<use f='linux-4.18.y/net/core/dev.c' l='6537' u='a'/>
<doc f='linux-4.18.y/net/core/dev.c' l='6519'>/**
 * netdev_upper_dev_link - Add a link to the upper device
 * @dev: device
 * @upper_dev: new upper device
 * @extack: netlink extended ack
 *
 * Adds a link to device which is upper to this one. The caller must hold
 * the RTNL lock. On a failure a negative errno code is returned.
 * On success the reference counts are adjusted and the function
 * returns zero.
 */</doc>
