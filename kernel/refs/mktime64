<dec f='linux-4.14.y/include/linux/time.h' l='52' type='time64_t mktime64(const unsigned int year, const unsigned int mon, const unsigned int day, const unsigned int hour, const unsigned int min, const unsigned int sec)'/>
<use f='linux-4.14.y/include/linux/time.h' l='64' u='c' c='mktime'/>
<use f='linux-4.14.y/drivers/rtc/rtc-lib.c' l='121' u='c' c='rtc_tm_to_time64'/>
<use f='linux-4.14.y/fs/isofs/util.c' l='36' u='c' c='iso_date'/>
<use f='linux-4.14.y/fs/udf/udftime.c' l='60' u='c' c='udf_disk_stamp_to_time'/>
<def f='linux-4.14.y/kernel/time/time.c' l='425' ll='443' type='time64_t mktime64(const unsigned int year0, const unsigned int mon0, const unsigned int day, const unsigned int hour, const unsigned int min, const unsigned int sec)'/>
<dec f='linux-4.14.y/kernel/time/time.c' l='444' type='time64_t mktime64(const unsigned int , const unsigned int , const unsigned int , const unsigned int , const unsigned int , const unsigned int )'/>
<use f='linux-4.14.y/kernel/time/time.c' l='444' c='mktime64'/>
<use f='linux-4.14.y/kernel/time/time.c' l='444' u='a'/>
<use f='linux-4.14.y/kernel/time/time.c' l='444' u='a'/>
<doc f='linux-4.14.y/kernel/time/time.c' l='405'>/*
 * mktime64 - Converts date to seconds.
 * Converts Gregorian date to seconds since 1970-01-01 00:00:00.
 * Assumes input in normal date format, i.e. 1980-12-31 23:59:59
 * =&gt; year=1980, mon=12, day=31, hour=23, min=59, sec=59.
 *
 * [For the Julian calendar (which was used in Russia before 1917,
 * Britain &amp; colonies before 1752, anywhere else before 1582,
 * and is still in use by some communities) leave out the
 * -year/100+year/400 terms, and add 10.]
 *
 * This algorithm was first published by Gauss (I think).
 *
 * A leap second can be indicated by calling this function with sec as
 * 60 (allowable under ISO 8601).  The leap second is treated the same
 * as the following second since they don&apos;t exist in UNIX time.
 *
 * An encoding of midnight at the end of the day as 24:00:00 - ie. midnight
 * tomorrow - (allowable under ISO 8601) is supported.
 */</doc>
<dec f='linux-4.14.y/include/linux/time.h' l='52' type='time64_t mktime64(const unsigned int year, const unsigned int mon, const unsigned int day, const unsigned int hour, const unsigned int min, const unsigned int sec)'/>
<use f='linux-4.14.y/include/linux/time.h' l='64' u='c' c='mktime'/>
<use f='linux-4.14.y/drivers/rtc/rtc-lib.c' l='121' u='c' c='rtc_tm_to_time64'/>
<use f='linux-4.14.y/fs/isofs/util.c' l='36' u='c' c='iso_date'/>
<use f='linux-4.14.y/fs/udf/udftime.c' l='60' u='c' c='udf_disk_stamp_to_time'/>
<def f='linux-4.14.y/kernel/time/time.c' l='425' ll='443' type='time64_t mktime64(const unsigned int year0, const unsigned int mon0, const unsigned int day, const unsigned int hour, const unsigned int min, const unsigned int sec)'/>
<dec f='linux-4.14.y/kernel/time/time.c' l='444' type='time64_t mktime64(const unsigned int , const unsigned int , const unsigned int , const unsigned int , const unsigned int , const unsigned int )'/>
<use f='linux-4.14.y/kernel/time/time.c' l='444' c='mktime64'/>
<use f='linux-4.14.y/kernel/time/time.c' l='444' u='a'/>
<use f='linux-4.14.y/kernel/time/time.c' l='444' u='a'/>
<doc f='linux-4.14.y/kernel/time/time.c' l='405'>/*
 * mktime64 - Converts date to seconds.
 * Converts Gregorian date to seconds since 1970-01-01 00:00:00.
 * Assumes input in normal date format, i.e. 1980-12-31 23:59:59
 * =&gt; year=1980, mon=12, day=31, hour=23, min=59, sec=59.
 *
 * [For the Julian calendar (which was used in Russia before 1917,
 * Britain &amp; colonies before 1752, anywhere else before 1582,
 * and is still in use by some communities) leave out the
 * -year/100+year/400 terms, and add 10.]
 *
 * This algorithm was first published by Gauss (I think).
 *
 * A leap second can be indicated by calling this function with sec as
 * 60 (allowable under ISO 8601).  The leap second is treated the same
 * as the following second since they don&apos;t exist in UNIX time.
 *
 * An encoding of midnight at the end of the day as 24:00:00 - ie. midnight
 * tomorrow - (allowable under ISO 8601) is supported.
 */</doc>
