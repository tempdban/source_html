<dec f='linux-4.18.y/include/linux/i2c.h' l='179' type='s32 i2c_smbus_write_block_data(const struct i2c_client * client, u8 command, u8 length, const u8 * values)'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-acpi.c' l='593' u='c' c='i2c_acpi_space_handler'/>
<def f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='244' ll='256' type='s32 i2c_smbus_write_block_data(const struct i2c_client * client, u8 command, u8 length, const u8 * values)'/>
<dec f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='257' type='s32 i2c_smbus_write_block_data(const struct i2c_client * , u8 , u8 , const u8 * )'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='257' c='i2c_smbus_write_block_data'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='257' u='a'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='257' u='a'/>
<doc f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='234'>/**
 * i2c_smbus_write_block_data - SMBus &quot;block write&quot; protocol
 * @client: Handle to slave device
 * @command: Byte interpreted by slave
 * @length: Size of data block; SMBus allows at most 32 bytes
 * @values: Byte array which will be written.
 *
 * This executes the SMBus &quot;block write&quot; protocol, returning negative errno
 * else zero on success.
 */</doc>
