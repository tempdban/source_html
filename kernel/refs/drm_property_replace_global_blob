<dec f='linux-4.18.y/include/drm/drm_property.h' l='272' type='int drm_property_replace_global_blob(struct drm_device * dev, struct drm_property_blob ** replace, size_t length, const void * data, struct drm_mode_object * obj_holds_id, struct drm_property * prop_holds_id)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_connector.c' l='1306' u='c' c='drm_mode_connector_set_path_property'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_connector.c' l='1334' u='c' c='drm_mode_connector_set_tile_property'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_connector.c' l='1349' u='c' c='drm_mode_connector_set_tile_property'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_connector.c' l='1401' u='c' c='drm_mode_connector_update_edid_property'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_property.c' l='688' ll='726' type='int drm_property_replace_global_blob(struct drm_device * dev, struct drm_property_blob ** replace, size_t length, const void * data, struct drm_mode_object * obj_holds_id, struct drm_property * prop_holds_id)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_property.c' l='727' type='int drm_property_replace_global_blob(struct drm_device * , struct drm_property_blob ** , size_t , const void * , struct drm_mode_object * , struct drm_property * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_property.c' l='727' c='drm_property_replace_global_blob'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_property.c' l='727' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_property.c' l='727' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_property.c' l='661'>/**
 * drm_property_replace_global_blob - replace existing blob property
 * @dev: drm device
 * @replace: location of blob property pointer to be replaced
 * @length: length of data for new blob, or 0 for no data
 * @data: content for new blob, or NULL for no data
 * @obj_holds_id: optional object for property holding blob ID
 * @prop_holds_id: optional property holding blob ID
 * @return 0 on success or error on failure
 *
 * This function will replace a global property in the blob list, optionally
 * updating a property which holds the ID of that property.
 *
 * If length is 0 or data is NULL, no new blob will be created, and the holding
 * property, if specified, will be set to 0.
 *
 * Access to the replace pointer is assumed to be protected by the caller, e.g.
 * by holding the relevant modesetting object lock for its parent.
 *
 * For example, a drm_connector has a &apos;PATH&apos; property, which contains the ID
 * of a blob property with the value of the MST path information. Calling this
 * function with replace pointing to the connector&apos;s path_blob_ptr, length and
 * data set for the new path information, obj_holds_id set to the connector&apos;s
 * base object, and prop_holds_id set to the path property name, will perform
 * a completely atomic update. The access to path_blob_ptr is protected by the
 * caller holding a lock on the connector.
 */</doc>
