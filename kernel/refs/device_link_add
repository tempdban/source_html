<dec f='linux-4.14.y/include/linux/device.h' l='1267' type='struct device_link * device_link_add(struct device * consumer, struct device * supplier, u32 flags)'/>
<doc f='linux-4.14.y/include/linux/device.h' l='1266'>/* Device links interface. */</doc>
<def f='linux-4.14.y/drivers/base/core.c' l='178' ll='289' type='struct device_link * device_link_add(struct device * consumer, struct device * supplier, u32 flags)'/>
<dec f='linux-4.14.y/drivers/base/core.c' l='290' type='struct device_link * device_link_add(struct device * , struct device * , u32 )'/>
<use f='linux-4.14.y/drivers/base/core.c' l='290' c='device_link_add'/>
<use f='linux-4.14.y/drivers/base/core.c' l='290' u='a'/>
<use f='linux-4.14.y/drivers/base/core.c' l='290' u='a'/>
<doc f='linux-4.14.y/drivers/base/core.c' l='150'>/**
 * device_link_add - Create a link between two devices.
 * @consumer: Consumer end of the link.
 * @supplier: Supplier end of the link.
 * @flags: Link flags.
 *
 * The caller is responsible for the proper synchronization of the link creation
 * with runtime PM.  First, setting the DL_FLAG_PM_RUNTIME flag will cause the
 * runtime PM framework to take the link into account.  Second, if the
 * DL_FLAG_RPM_ACTIVE flag is set in addition to it, the supplier devices will
 * be forced into the active metastate and reference-counted upon the creation
 * of the link.  If DL_FLAG_PM_RUNTIME is not set, DL_FLAG_RPM_ACTIVE will be
 * ignored.
 *
 * If the DL_FLAG_AUTOREMOVE is set, the link will be removed automatically
 * when the consumer device driver unbinds from it.  The combination of both
 * DL_FLAG_AUTOREMOVE and DL_FLAG_STATELESS set is invalid and will cause NULL
 * to be returned.
 *
 * A side effect of the link creation is re-ordering of dpm_list and the
 * devices_kset list by moving the consumer device and all devices depending
 * on it to the ends of these lists (that does not happen to devices that have
 * not been registered when this function is called).
 *
 * The supplier device is required to be registered when this function is called
 * and NULL will be returned if that is not the case.  The consumer device need
 * not be registered, however.
 */</doc>
