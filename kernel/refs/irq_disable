<dec f='linux-4.14.y/kernel/irq/internals.h' l='82' type='void irq_disable(struct irq_desc * desc)'/>
<def f='linux-4.14.y/kernel/irq/chip.c' l='356' ll='359' type='void irq_disable(struct irq_desc * desc)'/>
<doc f='linux-4.14.y/kernel/irq/chip.c' l='336'>/**
 * irq_disable - Mark interrupt disabled
 * @desc:	irq descriptor which should be disabled
 *
 * If the chip does not implement the irq_disable callback, we
 * use a lazy disable approach. That means we mark the interrupt
 * disabled, but leave the hardware unmasked. That&apos;s an
 * optimization because we avoid the hardware access for the
 * common case where no interrupt happens after we marked it
 * disabled. If an interrupt happens, then the interrupt flow
 * handler masks the line at the hardware level and marks it
 * pending.
 *
 * If the interrupt chip does not implement the irq_disable callback,
 * a driver can disable the lazy approach for a particular irq line by
 * calling &apos;irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY)&apos;. This can
 * be used for devices which cannot disable the interrupt at the
 * device level under certain circumstances and have to use
 * disable_irq[_nosync] instead.
 */</doc>
<use f='linux-4.14.y/kernel/irq/manage.c' l='442' u='c' c='__disable_irq'/>
<use f='linux-4.14.y/kernel/irq/spurious.c' l='424' u='c' c='note_interrupt'/>
<dec f='linux-4.14.y/kernel/irq/internals.h' l='82' type='void irq_disable(struct irq_desc * desc)'/>
<def f='linux-4.14.y/kernel/irq/chip.c' l='356' ll='359' type='void irq_disable(struct irq_desc * desc)'/>
<doc f='linux-4.14.y/kernel/irq/chip.c' l='336'>/**
 * irq_disable - Mark interrupt disabled
 * @desc:	irq descriptor which should be disabled
 *
 * If the chip does not implement the irq_disable callback, we
 * use a lazy disable approach. That means we mark the interrupt
 * disabled, but leave the hardware unmasked. That&apos;s an
 * optimization because we avoid the hardware access for the
 * common case where no interrupt happens after we marked it
 * disabled. If an interrupt happens, then the interrupt flow
 * handler masks the line at the hardware level and marks it
 * pending.
 *
 * If the interrupt chip does not implement the irq_disable callback,
 * a driver can disable the lazy approach for a particular irq line by
 * calling &apos;irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY)&apos;. This can
 * be used for devices which cannot disable the interrupt at the
 * device level under certain circumstances and have to use
 * disable_irq[_nosync] instead.
 */</doc>
<use f='linux-4.14.y/kernel/irq/manage.c' l='442' u='c' c='__disable_irq'/>
<use f='linux-4.14.y/kernel/irq/spurious.c' l='424' u='c' c='note_interrupt'/>
