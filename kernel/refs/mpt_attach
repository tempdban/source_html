<dec f='linux-4.18.y/drivers/message/fusion/mptbase.h' l='910' type='int mpt_attach(struct pci_dev * pdev, const struct pci_device_id * id)'/>
<def f='linux-4.18.y/drivers/message/fusion/mptbase.c' l='1770' ll='2073' type='int mpt_attach(struct pci_dev * pdev, const struct pci_device_id * id)'/>
<dec f='linux-4.18.y/drivers/message/fusion/mptbase.c' l='8438' type='int mpt_attach(struct pci_dev * , const struct pci_device_id * )'/>
<use f='linux-4.18.y/drivers/message/fusion/mptbase.c' l='8438' c='mpt_attach'/>
<use f='linux-4.18.y/drivers/message/fusion/mptbase.c' l='8438' u='a'/>
<use f='linux-4.18.y/drivers/message/fusion/mptbase.c' l='8438' u='a'/>
<doc f='linux-4.18.y/drivers/message/fusion/mptbase.c' l='1753'>/**
 *	mpt_attach - Install a PCI intelligent MPT adapter.
 *	@pdev: Pointer to pci_dev structure
 *	@id: PCI device ID information
 *
 *	This routine performs all the steps necessary to bring the IOC of
 *	a MPT adapter to a OPERATIONAL state.  This includes registering
 *	memory regions, registering the interrupt, and allocating request
 *	and reply memory pools.
 *
 *	This routine also pre-fetches the LAN MAC address of a Fibre Channel
 *	MPT adapter.
 *
 *	Returns 0 for success, non-zero for failure.
 *
 *	TODO: Add support for polled controllers
 */</doc>
<doc f='linux-4.18.y/drivers/message/fusion/mptbase.h' l='907'>/*
 *  Public entry points...
 */</doc>
<use f='linux-4.18.y/drivers/message/fusion/mptsas.c' l='5138' u='c' c='mptsas_probe'/>
<use f='linux-4.18.y/drivers/message/fusion/mptspi.c' l='1371' u='c' c='mptspi_probe'/>
