<dec f='linux-4.18.y/include/linux/pps_kernel.h' l='101' type='void pps_event(struct pps_device * pps, struct pps_event_time * ts, int event, void * data)'/>
<def f='linux-4.18.y/drivers/pps/kapi.c' l='172' ll='235' type='void pps_event(struct pps_device * pps, struct pps_event_time * ts, int event, void * data)'/>
<dec f='linux-4.18.y/drivers/pps/kapi.c' l='236' type='void pps_event(struct pps_device * , struct pps_event_time * , int , void * )'/>
<use f='linux-4.18.y/drivers/pps/kapi.c' l='236' c='pps_event'/>
<use f='linux-4.18.y/drivers/pps/kapi.c' l='236' u='a'/>
<use f='linux-4.18.y/drivers/pps/kapi.c' l='236' u='a'/>
<doc f='linux-4.18.y/drivers/pps/kapi.c' l='159'>/* pps_event - register a PPS event into the system
 * @pps: the PPS device
 * @ts: the event timestamp
 * @event: the event type
 * @data: userdef pointer
 *
 * This function is used by each PPS client in order to register a new
 * PPS event into the system (it&apos;s usually called inside an IRQ handler).
 *
 * If an echo function is associated with the PPS device it will be called
 * as:
 *	pps-&gt;info.echo(pps, event, data);
 */</doc>
<use f='linux-4.18.y/drivers/ptp/ptp_clock.c' l='341' u='c' c='ptp_clock_event'/>
<use f='linux-4.18.y/drivers/ptp/ptp_clock.c' l='345' u='c' c='ptp_clock_event'/>
