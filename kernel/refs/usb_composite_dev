<def f='linux-4.14.y/include/linux/usb/composite.h' l='474' ll='513'/>
<size>152</size>
<doc f='linux-4.14.y/include/linux/usb/composite.h' l='435'>/**
 * struct usb_composite_device - represents one composite usb gadget
 * @gadget: read-only, abstracts the gadget&apos;s usb peripheral controller
 * @req: used for control responses; buffer is pre-allocated
 * @os_desc_req: used for OS descriptors responses; buffer is pre-allocated
 * @config: the currently active configuration
 * @qw_sign: qwSignature part of the OS string
 * @b_vendor_code: bMS_VendorCode part of the OS string
 * @use_os_string: false by default, interested gadgets set it
 * @os_desc_config: the configuration to be used with OS descriptors
 * @setup_pending: true when setup request is queued but not completed
 * @os_desc_pending: true when os_desc request is queued but not completed
 *
 * One of these devices is allocated and initialized before the
 * associated device driver&apos;s bind() is called.
 *
 * OPEN ISSUE:  it appears that some WUSB devices will need to be
 * built by combining a normal (wired) gadget with a wireless one.
 * This revision of the gadget framework should probably try to make
 * sure doing that won&apos;t hurt too much.
 *
 * One notion for how to handle Wireless USB devices involves:
 *
 * (a) a second gadget here, discovery mechanism TBD, but likely
 *     needing separate &quot;register/unregister WUSB gadget&quot; calls;
 * (b) updates to usb_gadget to include flags &quot;is it wireless&quot;,
 *     &quot;is it wired&quot;, plus (presumably in a wrapper structure)
 *     bandgroup and PHY info;
 * (c) presumably a wireless_ep wrapping a usb_ep, and reporting
 *     wireless-specific parameters like maxburst and maxsequence;
 * (d) configurations that are specific to wireless links;
 * (e) function drivers that understand wireless configs and will
 *     support wireless for (additional) function instances;
 * (f) a function to support association setup (like CBAF), not
 *     necessarily requiring a wireless adapter;
 * (g) composite device setup that can create one or more wireless
 *     configs, including appropriate association setup support;
 * (h) more, TBD.
 */</doc>
<mbr r='usb_composite_dev::gadget' o='0' t='struct usb_gadget *'/>
<mbr r='usb_composite_dev::req' o='64' t='struct usb_request *'/>
<mbr r='usb_composite_dev::os_desc_req' o='128' t='struct usb_request *'/>
<mbr r='usb_composite_dev::config' o='192' t='struct usb_configuration *'/>
<mbr r='usb_composite_dev::qw_sign' o='256' t='u8 [14]'/>
<mbr r='usb_composite_dev::b_vendor_code' o='368' t='u8'/>
<mbr r='usb_composite_dev::os_desc_config' o='384' t='struct usb_configuration *'/>
<mbr r='usb_composite_dev::use_os_string' o='448' t='unsigned int'/>
<mbr r='usb_composite_dev::suspended' o='449' t='unsigned int'/>
<mbr r='usb_composite_dev::desc' o='456' t='struct usb_device_descriptor'/>
<mbr r='usb_composite_dev::configs' o='640' t='struct list_head'/>
<mbr r='usb_composite_dev::gstrings' o='768' t='struct list_head'/>
<mbr r='usb_composite_dev::driver' o='896' t='struct usb_composite_driver *'/>
<mbr r='usb_composite_dev::next_string_id' o='960' t='u8'/>
<mbr r='usb_composite_dev::def_manufacturer' o='1024' t='char *'/>
<mbr r='usb_composite_dev::deactivations' o='1088' t='unsigned int'/>
<mbr r='usb_composite_dev::delayed_status' o='1120' t='int'/>
<mbr r='usb_composite_dev::lock' o='1152' t='spinlock_t'/>
<mbr r='usb_composite_dev::setup_pending' o='1184' t='unsigned int'/>
<mbr r='usb_composite_dev::os_desc_pending' o='1185' t='unsigned int'/>
