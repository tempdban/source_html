<dec f='linux-4.14.y/include/linux/dax.h' l='89' type='long dax_direct_access(struct dax_device * dax_dev, unsigned long pgoff, long nr_pages, void ** kaddr, pfn_t * pfn)'/>
<use f='linux-4.14.y/drivers/dax/super.c' l='123' u='c' c='__bdev_dax_supported'/>
<def f='linux-4.14.y/drivers/dax/super.c' l='242' ll='267' type='long dax_direct_access(struct dax_device * dax_dev, unsigned long pgoff, long nr_pages, void ** kaddr, pfn_t * pfn)'/>
<dec f='linux-4.14.y/drivers/dax/super.c' l='268' type='long dax_direct_access(struct dax_device * , unsigned long , long , void ** , pfn_t * )'/>
<use f='linux-4.14.y/drivers/dax/super.c' l='268' c='dax_direct_access'/>
<use f='linux-4.14.y/drivers/dax/super.c' l='268' u='a'/>
<use f='linux-4.14.y/drivers/dax/super.c' l='268' u='a'/>
<doc f='linux-4.14.y/drivers/dax/super.c' l='231'>/**
 * dax_direct_access() - translate a device pgoff to an absolute pfn
 * @dax_dev: a dax_device instance representing the logical memory range
 * @pgoff: offset in pages from the start of the device to translate
 * @nr_pages: number of consecutive pages caller can handle relative to @pfn
 * @kaddr: output parameter that returns a virtual address mapping of pfn
 * @pfn: output parameter that returns an absolute pfn translation of @pgoff
 *
 * Return: negative errno if an error occurs, otherwise the number of
 * pages accessible at the device relative @pgoff.
 */</doc>
<use f='linux-4.14.y/drivers/md/dm-linear.c' l='170' u='c' c='linear_dax_direct_access'/>
<use f='linux-4.14.y/drivers/md/dm-stripe.c' l='332' u='c' c='stripe_dax_direct_access'/>
