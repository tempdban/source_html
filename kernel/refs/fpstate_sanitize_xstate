<dec f='linux-4.18.y/arch/x86/include/asm/fpu/internal.h' l='104' type='void fpstate_sanitize_xstate(struct fpu * fpu)'/>
<use f='linux-4.18.y/arch/x86/kernel/fpu/regset.c' l='43' u='c' c='xfpregs_get'/>
<use f='linux-4.18.y/arch/x86/kernel/fpu/regset.c' l='60' u='c' c='xfpregs_set'/>
<use f='linux-4.18.y/arch/x86/kernel/fpu/regset.c' l='101' u='c' c='xstateregs_get'/>
<use f='linux-4.18.y/arch/x86/kernel/fpu/regset.c' l='317' u='c' c='fpregs_get'/>
<use f='linux-4.18.y/arch/x86/kernel/fpu/regset.c' l='338' u='c' c='fpregs_set'/>
<use f='linux-4.18.y/arch/x86/kernel/fpu/signal.c' l='194' u='c' c='copy_fpstate_to_sigframe'/>
<def f='linux-4.18.y/arch/x86/kernel/fpu/xstate.c' l='152' ll='214' type='void fpstate_sanitize_xstate(struct fpu * fpu)'/>
<doc f='linux-4.18.y/arch/x86/kernel/fpu/xstate.c' l='137'>/*
 * When executing XSAVEOPT (or other optimized XSAVE instructions), if
 * a processor implementation detects that an FPU state component is still
 * (or is again) in its initialized state, it may clear the corresponding
 * bit in the header.xfeatures field, and can skip the writeout of registers
 * to the corresponding memory layout.
 *
 * This means that when the bit is zero, the state component might still contain
 * some previous - non-initialized register state.
 *
 * Before writing xstate information to user-space we sanitize those components,
 * to always ensure that the memory layout of a feature will be in the init state
 * if the corresponding header bit is zero. This is to ensure that user-space doesn&apos;t
 * see some stale state in the memory layout during signal handling, debugging etc.
 */</doc>
