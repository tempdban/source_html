<dec f='linux-4.14.y/include/linux/property.h' l='72' type='int fwnode_property_read_string(const struct fwnode_handle * fwnode, const char * propname, const char ** val)'/>
<use f='linux-4.14.y/drivers/base/property.c' l='417' u='c' c='device_property_read_string'/>
<def f='linux-4.14.y/drivers/base/property.c' l='615' ll='621' type='int fwnode_property_read_string(const struct fwnode_handle * fwnode, const char * propname, const char ** val)'/>
<dec f='linux-4.14.y/drivers/base/property.c' l='622' type='int fwnode_property_read_string(const struct fwnode_handle * , const char * , const char ** )'/>
<use f='linux-4.14.y/drivers/base/property.c' l='622' c='fwnode_property_read_string'/>
<use f='linux-4.14.y/drivers/base/property.c' l='622' u='a'/>
<use f='linux-4.14.y/drivers/base/property.c' l='622' u='a'/>
<doc f='linux-4.14.y/drivers/base/property.c' l='600'>/**
 * fwnode_property_read_string - return a string property of a firmware node
 * @fwnode: Firmware node to get the property of
 * @propname: Name of the property
 * @val: The value is stored here
 *
 * Read property @propname from the given firmware node and store the value into
 * @val if found.  The value is checked to be a string.
 *
 * Return: %0 if the property was found (success),
 *	   %-EINVAL if given arguments are not valid,
 *	   %-ENODATA if the property does not have a value,
 *	   %-EPROTO or %-EILSEQ if the property is not a string,
 *	   %-ENXIO if no suitable firmware interface is present.
 */</doc>
