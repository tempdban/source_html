<dec f='linux-4.14.y/include/crypto/akcipher.h' l='130' type='struct crypto_akcipher * crypto_alloc_akcipher(const char * alg_name, u32 type, u32 mask)'/>
<def f='linux-4.14.y/crypto/akcipher.c' l='109' ll='113' type='struct crypto_akcipher * crypto_alloc_akcipher(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-4.14.y/crypto/akcipher.c' l='114' type='struct crypto_akcipher * crypto_alloc_akcipher(const char * , u32 , u32 )'/>
<use f='linux-4.14.y/crypto/akcipher.c' l='114' c='crypto_alloc_akcipher'/>
<use f='linux-4.14.y/crypto/akcipher.c' l='114' u='a'/>
<use f='linux-4.14.y/crypto/akcipher.c' l='114' u='a'/>
<doc f='linux-4.14.y/include/crypto/akcipher.h' l='116'>/**
 * crypto_alloc_akcipher() - allocate AKCIPHER tfm handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      public key algorithm e.g. &quot;rsa&quot;
 * @type: specifies the type of the algorithm
 * @mask: specifies the mask for the algorithm
 *
 * Allocate a handle for public key algorithm. The returned struct
 * crypto_akcipher is the handle that is required for any subsequent
 * API invocation for the public key operations.
 *
 * Return: allocated handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<dec f='linux-4.14.y/include/crypto/akcipher.h' l='130' type='struct crypto_akcipher * crypto_alloc_akcipher(const char * alg_name, u32 type, u32 mask)'/>
<def f='linux-4.14.y/crypto/akcipher.c' l='109' ll='113' type='struct crypto_akcipher * crypto_alloc_akcipher(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-4.14.y/crypto/akcipher.c' l='114' type='struct crypto_akcipher * crypto_alloc_akcipher(const char * , u32 , u32 )'/>
<use f='linux-4.14.y/crypto/akcipher.c' l='114' c='crypto_alloc_akcipher'/>
<use f='linux-4.14.y/crypto/akcipher.c' l='114' u='a'/>
<use f='linux-4.14.y/crypto/akcipher.c' l='114' u='a'/>
<doc f='linux-4.14.y/include/crypto/akcipher.h' l='116'>/**
 * crypto_alloc_akcipher() - allocate AKCIPHER tfm handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      public key algorithm e.g. &quot;rsa&quot;
 * @type: specifies the type of the algorithm
 * @mask: specifies the mask for the algorithm
 *
 * Allocate a handle for public key algorithm. The returned struct
 * crypto_akcipher is the handle that is required for any subsequent
 * API invocation for the public key operations.
 *
 * Return: allocated handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
