<dec f='linux-4.18.y/include/linux/stop_machine.h' l='124' type='int stop_machine(cpu_stop_fn_t fn, void * data, const struct cpumask * cpus)'/>
<doc f='linux-4.18.y/include/linux/stop_machine.h' l='108'>/**
 * stop_machine: freeze the machine on all CPUs and run this function
 * @fn: the function to run
 * @data: the data ptr for the @fn()
 * @cpus: the cpus to run the @fn() on (NULL = any online cpu)
 *
 * Description: This causes a thread to be scheduled on every cpu,
 * each of which disables interrupts.  The result is that no one is
 * holding a spinlock or inside any other preempt-disabled region when
 * @fn() runs.
 *
 * This can be thought of as a very heavy write lock, equivalent to
 * grabbing every spinlock in the kernel.
 *
 * Protects against CPU hotplug.
 */</doc>
<use f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/mtrr.c' l='238' u='c' c='set_mtrr'/>
<def f='linux-4.18.y/kernel/stop_machine.c' l='619' ll='628' type='int stop_machine(cpu_stop_fn_t fn, void * data, const struct cpumask * cpus)'/>
<dec f='linux-4.18.y/kernel/stop_machine.c' l='629' type='int stop_machine(cpu_stop_fn_t , void * , const struct cpumask * )'/>
<use f='linux-4.18.y/kernel/stop_machine.c' l='629' c='stop_machine'/>
<use f='linux-4.18.y/kernel/stop_machine.c' l='629' u='a'/>
<use f='linux-4.18.y/kernel/stop_machine.c' l='629' u='a'/>
<use f='linux-4.18.y/kernel/time/timekeeping.c' l='1407' u='c' c='timekeeping_notify'/>
<use f='linux-4.18.y/kernel/trace/ftrace.c' l='2640' u='c' c='ftrace_run_stop_machine'/>
