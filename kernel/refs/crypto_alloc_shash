<dec f='linux-4.14.y/include/crypto/hash.h' l='681' type='struct crypto_shash * crypto_alloc_shash(const char * alg_name, u32 type, u32 mask)'/>
<doc f='linux-4.14.y/include/crypto/hash.h' l='667'>/**
 * crypto_alloc_shash() - allocate message digest handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      message digest cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for a message digest. The returned &amp;struct
 * crypto_shash is the cipher handle that is required for any subsequent
 * API invocation for that message digest.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-4.14.y/crypto/drbg.c' l='1577' u='c' c='drbg_init_hash_kernel'/>
<def f='linux-4.14.y/crypto/shash.c' l='450' ll='454' type='struct crypto_shash * crypto_alloc_shash(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-4.14.y/crypto/shash.c' l='455' type='struct crypto_shash * crypto_alloc_shash(const char * , u32 , u32 )'/>
<use f='linux-4.14.y/crypto/shash.c' l='455' c='crypto_alloc_shash'/>
<use f='linux-4.14.y/crypto/shash.c' l='455' u='a'/>
<use f='linux-4.14.y/crypto/shash.c' l='455' u='a'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='556' u='c' c='crypt_iv_lmk_ctr'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='719' u='c' c='crypt_iv_tcw_ctr'/>
<use f='linux-4.14.y/fs/ext4/super.c' l='3533' u='c' c='ext4_fill_super'/>
<use f='linux-4.14.y/fs/jbd2/journal.c' l='1576' u='c' c='journal_get_superblock'/>
<use f='linux-4.14.y/fs/jbd2/journal.c' l='1892' u='c' c='jbd2_journal_set_features'/>
<use f='linux-4.14.y/lib/crc-t10dif.c' l='52' u='c' c='crc_t10dif_mod_init'/>
<use f='linux-4.14.y/lib/libcrc32c.c' l='65' u='c' c='libcrc32c_mod_init'/>
<use f='linux-4.14.y/security/apparmor/crypto.c' l='115' u='c' c='init_profile_hash'/>
