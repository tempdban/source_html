<dec f='linux-4.18.y/include/linux/vfio.h' l='98' type='struct vfio_group * vfio_group_get_external_user(struct file * filep)'/>
<use f='linux-4.18.y/drivers/vfio/pci/vfio_pci.c' l='988' u='c' c='vfio_pci_ioctl'/>
<doc f='linux-4.18.y/include/linux/vfio.h' l='95'>/*
 * External user API
 */</doc>
<def f='linux-4.18.y/drivers/vfio/vfio.c' l='1754' ll='1769' type='struct vfio_group * vfio_group_get_external_user(struct file * filep)'/>
<dec f='linux-4.18.y/drivers/vfio/vfio.c' l='1770' type='struct vfio_group * vfio_group_get_external_user(struct file * )'/>
<use f='linux-4.18.y/drivers/vfio/vfio.c' l='1770' c='vfio_group_get_external_user'/>
<use f='linux-4.18.y/drivers/vfio/vfio.c' l='1770' u='a'/>
<use f='linux-4.18.y/drivers/vfio/vfio.c' l='1770' u='a'/>
<doc f='linux-4.18.y/drivers/vfio/vfio.c' l='1727'>/**
 * External user API, exported by symbols to be linked dynamically.
 *
 * The protocol includes:
 *  1. do normal VFIO init operation:
 *	- opening a new container;
 *	- attaching group(s) to it;
 *	- setting an IOMMU driver for a container.
 * When IOMMU is set for a container, all groups in it are
 * considered ready to use by an external user.
 *
 * 2. User space passes a group fd to an external user.
 * The external user calls vfio_group_get_external_user()
 * to verify that:
 *	- the group is initialized;
 *	- IOMMU is set for it.
 * If both checks passed, vfio_group_get_external_user()
 * increments the container user counter to prevent
 * the VFIO group from disposal before KVM exits.
 *
 * 3. The external user calls vfio_external_user_iommu_id()
 * to know an IOMMU ID.
 *
 * 4. When the external KVM finishes, it calls
 * vfio_group_put_external_user() to release the VFIO group.
 * This call decrements the container user counter.
 */</doc>
<use f='linux-4.18.y/virt/kvm/vfio.c' l='43' u='a' c='kvm_vfio_group_get_external_user'/>
