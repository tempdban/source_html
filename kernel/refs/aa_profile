<def f='linux-4.14.y/security/apparmor/include/policy.h' l='132' ll='159'/>
<size>736</size>
<doc f='linux-4.14.y/security/apparmor/include/policy.h' l='97'>/* struct aa_profile - basic confinement data
 * @base - base components of the profile (name, refcount, lists, lock ...)
 * @label - label this profile is an extension of
 * @parent: parent of profile
 * @ns: namespace the profile is in
 * @rename: optional profile name that this profile renamed
 * @attach: human readable attachment string
 * @xmatch: optional extended matching for unconfined executables names
 * @xmatch_len: xmatch prefix len, used to determine xmatch priority
 * @audit: the auditing mode of the profile
 * @mode: the enforcement mode of the profile
 * @path_flags: flags controlling path generation behavior
 * @disconnected: what to prepend if attach_disconnected is specified
 * @size: the memory consumed by this profiles rules
 * @policy: general match rules governing policy
 * @file: The set of rules governing basic file access and domain transitions
 * @caps: capabilities for the profile
 * @rlimits: rlimits for the profile
 *
 * @dents: dentries for the profiles file entries in apparmorfs
 * @dirname: name of the profile dir in apparmorfs
 * @data: hashtable for free-form policy aa_data
 *
 * The AppArmor profile contains the basic confinement data.  Each profile
 * has a name, and exists in a namespace.  The @name and @exec_match are
 * used to determine profile attachment against unconfined tasks.  All other
 * attachments are determined by profile X transition rules.
 *
 * Profiles have a hierarchy where hats and children profiles keep
 * a reference to their parent.
 *
 * Profile names can not begin with a : and can not contain the \0
 * character.  If a profile name begins with / it will be considered when
 * determining profile attachment on &quot;unconfined&quot; tasks.
 */</doc>
<mbr r='aa_profile::base' o='0' t='struct aa_policy'/>
<mbr r='aa_profile::parent' o='384' t='struct aa_profile *'/>
<mbr r='aa_profile::ns' o='448' t='struct aa_ns *'/>
<mbr r='aa_profile::rename' o='512' t='const char *'/>
<mbr r='aa_profile::attach' o='576' t='const char *'/>
<mbr r='aa_profile::xmatch' o='640' t='struct aa_dfa *'/>
<mbr r='aa_profile::xmatch_len' o='704' t='int'/>
<mbr r='aa_profile::audit' o='736' t='enum audit_mode'/>
<mbr r='aa_profile::mode' o='768' t='long'/>
<mbr r='aa_profile::path_flags' o='832' t='u32'/>
<mbr r='aa_profile::disconnected' o='896' t='const char *'/>
<mbr r='aa_profile::size' o='960' t='int'/>
<mbr r='aa_profile::policy' o='1024' t='struct aa_policydb'/>
<mbr r='aa_profile::file' o='1664' t='struct aa_file_rules'/>
<mbr r='aa_profile::caps' o='1920' t='struct aa_caps'/>
<mbr r='aa_profile::rlimits' o='2304' t='struct aa_rlimit'/>
<mbr r='aa_profile::rawdata' o='4416' t='struct aa_loaddata *'/>
<mbr r='aa_profile::hash' o='4480' t='unsigned char *'/>
<mbr r='aa_profile::dirname' o='4544' t='char *'/>
<mbr r='aa_profile::dents' o='4608' t='struct dentry *[9]'/>
<mbr r='aa_profile::data' o='5184' t='struct rhashtable *'/>
<mbr r='aa_profile::label' o='5248' t='struct aa_label'/>
