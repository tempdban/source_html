<dec f='linux-4.18.y/include/linux/rtc.h' l='181' type='struct rtc_device * devm_rtc_device_register(struct device * dev, const char * name, const struct rtc_class_ops * ops, struct module * owner)'/>
<def f='linux-4.18.y/drivers/rtc/class.c' l='407' ll='427' type='struct rtc_device * devm_rtc_device_register(struct device * dev, const char * name, const struct rtc_class_ops * ops, struct module * owner)'/>
<dec f='linux-4.18.y/drivers/rtc/class.c' l='428' type='struct rtc_device * devm_rtc_device_register(struct device * , const char * , const struct rtc_class_ops * , struct module * )'/>
<use f='linux-4.18.y/drivers/rtc/class.c' l='428' c='devm_rtc_device_register'/>
<use f='linux-4.18.y/drivers/rtc/class.c' l='428' u='a'/>
<use f='linux-4.18.y/drivers/rtc/class.c' l='428' u='a'/>
<doc f='linux-4.18.y/drivers/rtc/class.c' l='393'>/**
 * devm_rtc_device_register - resource managed rtc_device_register()
 * @dev: the device to register
 * @name: the name of the device
 * @ops: the rtc operations structure
 * @owner: the module owner
 *
 * @return a struct rtc on success, or an ERR_PTR on error
 *
 * Managed rtc_device_register(). The rtc_device returned from this function
 * are automatically freed on driver detach. See rtc_device_register()
 * for more information.
 */</doc>
