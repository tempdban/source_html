<dec f='linux-4.18.y/include/drm/drm_vblank.h' l='202' type='bool drm_calc_vbltimestamp_from_scanoutpos(struct drm_device * dev, unsigned int pipe, int * max_error, ktime_t * vblank_time, bool in_vblank_irq)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_vblank.c' l='579' ll='692' type='bool drm_calc_vbltimestamp_from_scanoutpos(struct drm_device * dev, unsigned int pipe, int * max_error, ktime_t * vblank_time, bool in_vblank_irq)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_vblank.c' l='693' type='bool drm_calc_vbltimestamp_from_scanoutpos(struct drm_device * , unsigned int , int * , ktime_t * , bool )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_vblank.c' l='693' c='drm_calc_vbltimestamp_from_scanoutpos'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_vblank.c' l='693' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_vblank.c' l='693' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_vblank.c' l='548'>/**
 * drm_calc_vbltimestamp_from_scanoutpos - precise vblank timestamp helper
 * @dev: DRM device
 * @pipe: index of CRTC whose vblank timestamp to retrieve
 * @max_error: Desired maximum allowable error in timestamps (nanosecs)
 *             On return contains true maximum error of timestamp
 * @vblank_time: Pointer to time which should receive the timestamp
 * @in_vblank_irq:
 *     True when called from drm_crtc_handle_vblank().  Some drivers
 *     need to apply some workarounds for gpu-specific vblank irq quirks
 *     if flag is set.
 *
 * Implements calculation of exact vblank timestamps from given drm_display_mode
 * timings and current video scanout position of a CRTC. This can be directly
 * used as the &amp;drm_driver.get_vblank_timestamp implementation of a kms driver
 * if &amp;drm_driver.get_scanout_position is implemented.
 *
 * The current implementation only handles standard video modes. For double scan
 * and interlaced modes the driver is supposed to adjust the hardware mode
 * (taken from &amp;drm_crtc_state.adjusted mode for atomic modeset drivers) to
 * match the scanout position reported.
 *
 * Note that atomic drivers must call drm_calc_timestamping_constants() before
 * enabling a CRTC. The atomic helpers already take care of that in
 * drm_atomic_helper_update_legacy_modeset_state().
 *
 * Returns:
 *
 * Returns true on success, and false on failure, i.e. when no accurate
 * timestamp could be acquired.
 */</doc>
