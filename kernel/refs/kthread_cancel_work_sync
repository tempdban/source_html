<dec f='linux-4.14.y/include/linux/kthread.h' l='197' type='bool kthread_cancel_work_sync(struct kthread_work * work)'/>
<def f='linux-4.14.y/kernel/kthread.c' l='1096' ll='1099' type='bool kthread_cancel_work_sync(struct kthread_work * work)'/>
<dec f='linux-4.14.y/kernel/kthread.c' l='1100' type='bool kthread_cancel_work_sync(struct kthread_work * )'/>
<use f='linux-4.14.y/kernel/kthread.c' l='1100' c='kthread_cancel_work_sync'/>
<use f='linux-4.14.y/kernel/kthread.c' l='1100' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='1100' u='a'/>
<doc f='linux-4.14.y/kernel/kthread.c' l='1080'>/**
 * kthread_cancel_work_sync - cancel a kthread work and wait for it to finish
 * @work: the kthread work to cancel
 *
 * Cancel @work and wait for its execution to finish.  This function
 * can be used even if the work re-queues itself. On return from this
 * function, @work is guaranteed to be not pending or executing on any CPU.
 *
 * kthread_cancel_work_sync(&amp;delayed_work-&gt;work) must not be used for
 * delayed_work&apos;s. Use kthread_cancel_delayed_work_sync() instead.
 *
 * The caller must ensure that the worker on which @work was last
 * queued can&apos;t be destroyed before this function returns.
 *
 * Return: %true if @work was pending, %false otherwise.
 */</doc>
