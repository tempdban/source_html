<dec f='linux-4.14.y/include/crypto/aes.h' l='36' type='int crypto_aes_set_key(struct crypto_tfm * tfm, const u8 * in_key, unsigned int key_len)'/>
<def f='linux-4.14.y/crypto/aes_generic.c' l='1287' ll='1300' type='int crypto_aes_set_key(struct crypto_tfm * tfm, const u8 * in_key, unsigned int key_len)'/>
<dec f='linux-4.14.y/crypto/aes_generic.c' l='1301' type='int crypto_aes_set_key(struct crypto_tfm * , const u8 * , unsigned int )'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1301' c='crypto_aes_set_key'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1301' u='a'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1301' u='a'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<doc f='linux-4.14.y/crypto/aes_generic.c' l='1276'>/**
 * crypto_aes_set_key - Set the AES key.
 * @tfm:	The %crypto_tfm that is used in the context.
 * @in_key:	The input key.
 * @key_len:	The size of the key.
 *
 * Returns 0 on success, on failure the %CRYPTO_TFM_RES_BAD_KEY_LEN flag in tfm
 * is set. The function uses crypto_aes_expand_key() to expand the key.
 * &amp;crypto_aes_ctx _must_ be the private data embedded in @tfm which is
 * retrieved with crypto_tfm_ctx().
 */</doc>
<dec f='linux-4.14.y/include/crypto/aes.h' l='36' type='int crypto_aes_set_key(struct crypto_tfm * tfm, const u8 * in_key, unsigned int key_len)'/>
<def f='linux-4.14.y/crypto/aes_generic.c' l='1287' ll='1300' type='int crypto_aes_set_key(struct crypto_tfm * tfm, const u8 * in_key, unsigned int key_len)'/>
<dec f='linux-4.14.y/crypto/aes_generic.c' l='1301' type='int crypto_aes_set_key(struct crypto_tfm * , const u8 * , unsigned int )'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1301' c='crypto_aes_set_key'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1301' u='a'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1301' u='a'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<use f='linux-4.14.y/crypto/aes_generic.c' l='1455'/>
<doc f='linux-4.14.y/crypto/aes_generic.c' l='1276'>/**
 * crypto_aes_set_key - Set the AES key.
 * @tfm:	The %crypto_tfm that is used in the context.
 * @in_key:	The input key.
 * @key_len:	The size of the key.
 *
 * Returns 0 on success, on failure the %CRYPTO_TFM_RES_BAD_KEY_LEN flag in tfm
 * is set. The function uses crypto_aes_expand_key() to expand the key.
 * &amp;crypto_aes_ctx _must_ be the private data embedded in @tfm which is
 * retrieved with crypto_tfm_ctx().
 */</doc>
