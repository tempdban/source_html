<def f='linux-4.14.y/include/linux/phy.h' l='398' ll='481'/>
<size>888</size>
<doc f='linux-4.14.y/include/linux/phy.h' l='365'>/* phy_device: An instance of a PHY
 *
 * drv: Pointer to the driver for this PHY instance
 * phy_id: UID for this device found during discovery
 * c45_ids: 802.3-c45 Device Identifers if is_c45.
 * is_c45:  Set to true if this phy uses clause 45 addressing.
 * is_internal: Set to true if this phy is internal to a MAC.
 * is_pseudo_fixed_link: Set to true if this phy is an Ethernet switch, etc.
 * has_fixups: Set to true if this phy has fixups/quirks.
 * suspended: Set to true if this phy has been suspended successfully.
 * sysfs_links: Internal boolean tracking sysfs symbolic links setup/removal.
 * loopback_enabled: Set true if this phy has been loopbacked successfully.
 * state: state of the PHY for management purposes
 * dev_flags: Device-specific flags used by the PHY driver.
 * link_timeout: The number of timer firings to wait before the
 * giving up on the current attempt at acquiring a link
 * irq: IRQ number of the PHY&apos;s interrupt (-1 if none)
 * phy_timer: The timer for handling the state machine
 * phy_queue: A work_queue for the phy_mac_interrupt
 * attached_dev: The attached enet driver&apos;s device instance ptr
 * adjust_link: Callback for the enet controller to respond to
 * changes in the link state.
 *
 * speed, duplex, pause, supported, advertising, lp_advertising,
 * and autoneg are used like in mii_if_info
 *
 * interrupts currently only supports enabled or disabled,
 * but could be changed in the future to support enabling
 * and disabling specific interrupts
 *
 * Contains some infrastructure for polling and interrupt
 * handling, as well as handling shifts in PHY hardware state
 */</doc>
<mbr r='phy_device::mdio' o='0' t='struct mdio_device'/>
<mbr r='phy_device::drv' o='4416' t='struct phy_driver *'/>
<mbr r='phy_device::phy_id' o='4480' t='u32'/>
<mbr r='phy_device::c45_ids' o='4512' t='struct phy_c45_device_ids'/>
<mbr r='phy_device::is_c45' o='4800' t='bool'/>
<mbr r='phy_device::is_internal' o='4808' t='bool'/>
<mbr r='phy_device::is_pseudo_fixed_link' o='4816' t='bool'/>
<mbr r='phy_device::has_fixups' o='4824' t='bool'/>
<mbr r='phy_device::suspended' o='4832' t='bool'/>
<mbr r='phy_device::sysfs_links' o='4840' t='bool'/>
<mbr r='phy_device::loopback_enabled' o='4848' t='bool'/>
<mbr r='phy_device::state' o='4864' t='enum phy_state'/>
<mbr r='phy_device::dev_flags' o='4896' t='u32'/>
<mbr r='phy_device::interface' o='4928' t='phy_interface_t'/>
<mbr r='phy_device::speed' o='4960' t='int'/>
<mbr r='phy_device::duplex' o='4992' t='int'/>
<mbr r='phy_device::pause' o='5024' t='int'/>
<mbr r='phy_device::asym_pause' o='5056' t='int'/>
<mbr r='phy_device::link' o='5088' t='int'/>
<mbr r='phy_device::interrupts' o='5120' t='u32'/>
<mbr r='phy_device::supported' o='5152' t='u32'/>
<mbr r='phy_device::advertising' o='5184' t='u32'/>
<mbr r='phy_device::lp_advertising' o='5216' t='u32'/>
<mbr r='phy_device::eee_broken_modes' o='5248' t='u32'/>
<mbr r='phy_device::autoneg' o='5280' t='int'/>
<mbr r='phy_device::link_timeout' o='5312' t='int'/>
<mbr r='phy_device::irq' o='5344' t='int'/>
<mbr r='phy_device::priv' o='5376' t='void *'/>
<mbr r='phy_device::phy_queue' o='5440' t='struct work_struct'/>
<mbr r='phy_device::state_queue' o='5696' t='struct delayed_work'/>
<mbr r='phy_device::irq_disable' o='6464' t='atomic_t'/>
<mbr r='phy_device::lock' o='6528' t='struct mutex'/>
<mbr r='phy_device::phylink' o='6784' t='struct phylink *'/>
<mbr r='phy_device::attached_dev' o='6848' t='struct net_device *'/>
<mbr r='phy_device::mdix' o='6912' t='u8'/>
<mbr r='phy_device::mdix_ctrl' o='6920' t='u8'/>
<mbr r='phy_device::phy_link_change' o='6976' t='void (*)(struct phy_device *, bool, bool)'/>
<mbr r='phy_device::adjust_link' o='7040' t='void (*)(struct net_device *)'/>
