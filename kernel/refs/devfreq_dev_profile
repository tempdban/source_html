<def f='linux-4.14.y/include/linux/devfreq.h' l='90' ll='102'/>
<size>64</size>
<doc f='linux-4.14.y/include/linux/devfreq.h' l='63'>/**
 * struct devfreq_dev_profile - Devfreq&apos;s user device profile
 * @initial_freq:	The operating frequency when devfreq_add_device() is
 *			called.
 * @polling_ms:		The polling interval in ms. 0 disables polling.
 * @target:		The device should set its operating frequency at
 *			freq or lowest-upper-than-freq value. If freq is
 *			higher than any operable frequency, set maximum.
 *			Before returning, target function should set
 *			freq at the current frequency.
 *			The &quot;flags&quot; parameter&apos;s possible values are
 *			explained above with &quot;DEVFREQ_FLAG_*&quot; macros.
 * @get_dev_status:	The device should provide the current performance
 *			status to devfreq. Governors are recommended not to
 *			use this directly. Instead, governors are recommended
 *			to use devfreq_update_stats() along with
 *			devfreq.last_status.
 * @get_cur_freq:	The device should provide the current frequency
 *			at which it is operating.
 * @exit:		An optional callback that is called when devfreq
 *			is removing the devfreq object due to error or
 *			from devfreq_remove_device() call. If the user
 *			has registered devfreq-&gt;nb at a notifier-head,
 *			this is the time to unregister it.
 * @freq_table:	Optional list of frequencies to support statistics.
 * @max_state:	The size of freq_table.
 */</doc>
<mbr r='devfreq_dev_profile::initial_freq' o='0' t='unsigned long'/>
<mbr r='devfreq_dev_profile::polling_ms' o='64' t='unsigned int'/>
<mbr r='devfreq_dev_profile::target' o='128' t='int (*)(struct device *, unsigned long *, u32)'/>
<mbr r='devfreq_dev_profile::get_dev_status' o='192' t='int (*)(struct device *, struct devfreq_dev_status *)'/>
<mbr r='devfreq_dev_profile::get_cur_freq' o='256' t='int (*)(struct device *, unsigned long *)'/>
<mbr r='devfreq_dev_profile::exit' o='320' t='void (*)(struct device *)'/>
<mbr r='devfreq_dev_profile::freq_table' o='384' t='unsigned long *'/>
<mbr r='devfreq_dev_profile::max_state' o='448' t='unsigned int'/>
<def f='linux-4.14.y/include/linux/devfreq.h' l='90' ll='102'/>
<size>64</size>
<doc f='linux-4.14.y/include/linux/devfreq.h' l='63'>/**
 * struct devfreq_dev_profile - Devfreq&apos;s user device profile
 * @initial_freq:	The operating frequency when devfreq_add_device() is
 *			called.
 * @polling_ms:		The polling interval in ms. 0 disables polling.
 * @target:		The device should set its operating frequency at
 *			freq or lowest-upper-than-freq value. If freq is
 *			higher than any operable frequency, set maximum.
 *			Before returning, target function should set
 *			freq at the current frequency.
 *			The &quot;flags&quot; parameter&apos;s possible values are
 *			explained above with &quot;DEVFREQ_FLAG_*&quot; macros.
 * @get_dev_status:	The device should provide the current performance
 *			status to devfreq. Governors are recommended not to
 *			use this directly. Instead, governors are recommended
 *			to use devfreq_update_stats() along with
 *			devfreq.last_status.
 * @get_cur_freq:	The device should provide the current frequency
 *			at which it is operating.
 * @exit:		An optional callback that is called when devfreq
 *			is removing the devfreq object due to error or
 *			from devfreq_remove_device() call. If the user
 *			has registered devfreq-&gt;nb at a notifier-head,
 *			this is the time to unregister it.
 * @freq_table:	Optional list of frequencies to support statistics.
 * @max_state:	The size of freq_table.
 */</doc>
<mbr r='devfreq_dev_profile::initial_freq' o='0' t='unsigned long'/>
<mbr r='devfreq_dev_profile::polling_ms' o='64' t='unsigned int'/>
<mbr r='devfreq_dev_profile::target' o='128' t='int (*)(struct device *, unsigned long *, u32)'/>
<mbr r='devfreq_dev_profile::get_dev_status' o='192' t='int (*)(struct device *, struct devfreq_dev_status *)'/>
<mbr r='devfreq_dev_profile::get_cur_freq' o='256' t='int (*)(struct device *, unsigned long *)'/>
<mbr r='devfreq_dev_profile::exit' o='320' t='void (*)(struct device *)'/>
<mbr r='devfreq_dev_profile::freq_table' o='384' t='unsigned long *'/>
<mbr r='devfreq_dev_profile::max_state' o='448' t='unsigned int'/>
