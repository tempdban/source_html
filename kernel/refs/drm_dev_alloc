<dec f='linux-4.18.y/include/drm/drm_drv.h' l='618' type='struct drm_device * drm_dev_alloc(struct drm_driver * driver, struct device * parent)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='634' ll='651' type='struct drm_device * drm_dev_alloc(struct drm_driver * driver, struct device * parent)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='652' type='struct drm_device * drm_dev_alloc(struct drm_driver * , struct device * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='652' c='drm_dev_alloc'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='652' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='652' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_drv.c' l='612'>/**
 * drm_dev_alloc - Allocate new DRM device
 * @driver: DRM driver to allocate device for
 * @parent: Parent device object
 *
 * Allocate and initialize a new DRM device. No device registration is done.
 * Call drm_dev_register() to advertice the device to user space and register it
 * with other core subsystems. This should be done last in the device
 * initialization sequence to make sure userspace can&apos;t access an inconsistent
 * state.
 *
 * The initial ref-count of the object is 1. Use drm_dev_get() and
 * drm_dev_put() to take and drop further ref-counts.
 *
 * Note that for purely virtual devices @parent can be NULL.
 *
 * Drivers that wish to subclass or embed &amp;struct drm_device into their
 * own struct should look at using drm_dev_init() instead.
 *
 * RETURNS:
 * Pointer to new DRM device, or ERR_PTR on failure.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_pci.c' l='244' u='c' c='drm_get_pci_dev'/>
<use f='linux-4.18.y/drivers/gpu/drm/virtio/virtgpu_drm_bus.c' l='56' u='c' c='drm_virtio_init'/>
