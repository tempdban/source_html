<dec f='linux-4.14.y/include/linux/kthread.h' l='57' type='bool kthread_should_park()'/>
<use f='linux-4.14.y/drivers/md/md.c' l='7492' u='c' c='md_thread'/>
<use f='linux-4.14.y/drivers/md/md.c' l='7492' u='c' c='md_thread'/>
<use f='linux-4.14.y/drivers/md/md.c' l='7496' u='c' c='md_thread'/>
<def f='linux-4.14.y/kernel/kthread.c' l='108' ll='111' type='bool kthread_should_park()'/>
<dec f='linux-4.14.y/kernel/kthread.c' l='112' type='bool kthread_should_park()'/>
<use f='linux-4.14.y/kernel/kthread.c' l='112' c='kthread_should_park'/>
<use f='linux-4.14.y/kernel/kthread.c' l='112' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='112' u='a'/>
<doc f='linux-4.14.y/kernel/kthread.c' l='97'>/**
 * kthread_should_park - should this kthread park now?
 *
 * When someone calls kthread_park() on your kthread, it will be woken
 * and this will return true.  You should then do the necessary
 * cleanup and call kthread_parkme()
 *
 * Similar to kthread_should_stop(), but this keeps the thread alive
 * and in a park position. kthread_unpark() &quot;restarts&quot; the thread and
 * calls the thread function again.
 */</doc>
<use f='linux-4.14.y/kernel/smpboot.c' l='124' u='c' c='smpboot_thread_fn'/>
