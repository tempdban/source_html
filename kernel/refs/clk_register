<dec f='linux-4.18.y/include/linux/clk-provider.h' l='735' type='struct clk * clk_register(struct device * dev, struct clk_hw * hw)'/>
<doc f='linux-4.18.y/include/linux/clk-provider.h' l='724'>/**
 * clk_register - allocate a new clock, register it and return an opaque cookie
 * @dev: device that is registering this clock
 * @hw: link to hardware-specific clock data
 *
 * clk_register is the primary interface for populating the clock tree with new
 * clock nodes.  It returns a pointer to the newly allocated struct clk which
 * cannot be dereferenced by driver code but may be used in conjuction with the
 * rest of the clock API.  In the event of an error clk_register will return an
 * error code; drivers must test for an error code after calling clk_register.
 */</doc>
<def f='linux-4.18.y/drivers/clk/clk.c' l='2958' ll='3048' type='struct clk * clk_register(struct device * dev, struct clk_hw * hw)'/>
<dec f='linux-4.18.y/drivers/clk/clk.c' l='3049' type='struct clk * clk_register(struct device * , struct clk_hw * )'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3049' c='clk_register'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3049' u='a'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3049' u='a'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3063' u='c' c='clk_hw_register'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='3211' u='c' c='devm_clk_register'/>
<doc f='linux-4.18.y/drivers/clk/clk.c' l='2947'>/**
 * clk_register - allocate a new clock, register it and return an opaque cookie
 * @dev: device that is registering this clock
 * @hw: link to hardware-specific clock data
 *
 * clk_register is the primary interface for populating the clock tree with new
 * clock nodes.  It returns a pointer to the newly allocated struct clk which
 * cannot be dereferenced by driver code but may be used in conjunction with the
 * rest of the clock API.  In the event of an error clk_register will return an
 * error code; drivers must test for an error code after calling clk_register.
 */</doc>
