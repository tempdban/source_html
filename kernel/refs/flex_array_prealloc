<dec f='linux-4.14.y/include/linux/flex_array.h' l='85' type='int flex_array_prealloc(struct flex_array * fa, unsigned int start, unsigned int nr_elements, gfp_t flags)'/>
<doc f='linux-4.14.y/include/linux/flex_array.h' l='76'>/**
 * flex_array_prealloc() - Ensures that memory for the elements indexed in the
 * range defined by start and nr_elements has been allocated.
 * @fa:			array to allocate memory to.
 * @start:		start address
 * @nr_elements:	number of elements to be allocated.
 * @flags:		GFP flags
 *
 */</doc>
<use f='linux-4.14.y/drivers/md/raid5.c' l='2249' u='c' c='scribble_alloc'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2193' u='c' c='proc_map_files_readdir'/>
<def f='linux-4.14.y/lib/flex_array.c' l='268' ll='300' type='int flex_array_prealloc(struct flex_array * fa, unsigned int start, unsigned int nr_elements, gfp_t flags)'/>
<dec f='linux-4.14.y/lib/flex_array.c' l='301' type='int flex_array_prealloc(struct flex_array * , unsigned int , unsigned int , gfp_t )'/>
<use f='linux-4.14.y/lib/flex_array.c' l='301' c='flex_array_prealloc'/>
<use f='linux-4.14.y/lib/flex_array.c' l='301' u='a'/>
<use f='linux-4.14.y/lib/flex_array.c' l='301' u='a'/>
<doc f='linux-4.14.y/lib/flex_array.c' l='254'>/**
 * flex_array_prealloc - guarantee that array space exists
 * @fa:			the flex array for which to preallocate parts
 * @start:		index of first array element for which space is allocated
 * @nr_elements:	number of elements for which space is allocated
 * @flags:		page allocation flags
 *
 * This will guarantee that no future calls to flex_array_put()
 * will allocate memory.  It can be used if you are expecting to
 * be holding a lock or in some atomic context while writing
 * data into the array.
 *
 * Locking must be provided by the caller.
 */</doc>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='576' u='c' c='policydb_index'/>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='592' u='c' c='policydb_index'/>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='2529' u='c' c='policydb_read'/>
<dec f='linux-4.14.y/include/linux/flex_array.h' l='85' type='int flex_array_prealloc(struct flex_array * fa, unsigned int start, unsigned int nr_elements, gfp_t flags)'/>
<doc f='linux-4.14.y/include/linux/flex_array.h' l='76'>/**
 * flex_array_prealloc() - Ensures that memory for the elements indexed in the
 * range defined by start and nr_elements has been allocated.
 * @fa:			array to allocate memory to.
 * @start:		start address
 * @nr_elements:	number of elements to be allocated.
 * @flags:		GFP flags
 *
 */</doc>
<use f='linux-4.14.y/drivers/md/raid5.c' l='2249' u='c' c='scribble_alloc'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2193' u='c' c='proc_map_files_readdir'/>
<def f='linux-4.14.y/lib/flex_array.c' l='268' ll='300' type='int flex_array_prealloc(struct flex_array * fa, unsigned int start, unsigned int nr_elements, gfp_t flags)'/>
<dec f='linux-4.14.y/lib/flex_array.c' l='301' type='int flex_array_prealloc(struct flex_array * , unsigned int , unsigned int , gfp_t )'/>
<use f='linux-4.14.y/lib/flex_array.c' l='301' c='flex_array_prealloc'/>
<use f='linux-4.14.y/lib/flex_array.c' l='301' u='a'/>
<use f='linux-4.14.y/lib/flex_array.c' l='301' u='a'/>
<doc f='linux-4.14.y/lib/flex_array.c' l='254'>/**
 * flex_array_prealloc - guarantee that array space exists
 * @fa:			the flex array for which to preallocate parts
 * @start:		index of first array element for which space is allocated
 * @nr_elements:	number of elements for which space is allocated
 * @flags:		page allocation flags
 *
 * This will guarantee that no future calls to flex_array_put()
 * will allocate memory.  It can be used if you are expecting to
 * be holding a lock or in some atomic context while writing
 * data into the array.
 *
 * Locking must be provided by the caller.
 */</doc>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='576' u='c' c='policydb_index'/>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='592' u='c' c='policydb_index'/>
<use f='linux-4.14.y/security/selinux/ss/policydb.c' l='2529' u='c' c='policydb_read'/>
