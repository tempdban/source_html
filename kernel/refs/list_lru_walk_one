<dec f='linux-4.14.y/include/linux/list_lru.h' l='160' type='unsigned long list_lru_walk_one(struct list_lru * lru, int nid, struct mem_cgroup * memcg, list_lru_walk_cb isolate, void * cb_arg, unsigned long * nr_to_walk)'/>
<use f='linux-4.14.y/include/linux/list_lru.h' l='172' u='c' c='list_lru_shrink_walk'/>
<doc f='linux-4.14.y/include/linux/list_lru.h' l='138'>/**
 * list_lru_walk_one: walk a list_lru, isolating and disposing freeable items.
 * @lru: the lru pointer.
 * @nid: the node id to scan from.
 * @memcg: the cgroup to scan from.
 * @isolate: callback function that is resposible for deciding what to do with
 *  the item currently being scanned
 * @cb_arg: opaque type that will be passed to @isolate
 * @nr_to_walk: how many items to scan.
 *
 * This function will scan all elements in a particular list_lru, calling the
 * @isolate callback for each of those items, along with the current list
 * spinlock and a caller-provided opaque. The @isolate callback can choose to
 * drop the lock internally, but *must* return with the lock held. The callback
 * will return an enum lru_status telling the list_lru infrastructure what to
 * do with the object being scanned.
 *
 * Please note that nr_to_walk does not mean how many objects will be freed,
 * just how many objects will be scanned.
 *
 * Return value: the number of objects effectively removed from the LRU.
 */</doc>
<def f='linux-4.14.y/mm/list_lru.c' l='256' ll='263' type='unsigned long list_lru_walk_one(struct list_lru * lru, int nid, struct mem_cgroup * memcg, list_lru_walk_cb isolate, void * cb_arg, unsigned long * nr_to_walk)'/>
<dec f='linux-4.14.y/mm/list_lru.c' l='264' type='unsigned long list_lru_walk_one(struct list_lru * , int , struct mem_cgroup * , list_lru_walk_cb , void * , unsigned long * )'/>
<use f='linux-4.14.y/mm/list_lru.c' l='264' c='list_lru_walk_one'/>
<use f='linux-4.14.y/mm/list_lru.c' l='264' u='a'/>
<use f='linux-4.14.y/mm/list_lru.c' l='264' u='a'/>
<dec f='linux-4.14.y/include/linux/list_lru.h' l='160' type='unsigned long list_lru_walk_one(struct list_lru * lru, int nid, struct mem_cgroup * memcg, list_lru_walk_cb isolate, void * cb_arg, unsigned long * nr_to_walk)'/>
<use f='linux-4.14.y/include/linux/list_lru.h' l='172' u='c' c='list_lru_shrink_walk'/>
<doc f='linux-4.14.y/include/linux/list_lru.h' l='138'>/**
 * list_lru_walk_one: walk a list_lru, isolating and disposing freeable items.
 * @lru: the lru pointer.
 * @nid: the node id to scan from.
 * @memcg: the cgroup to scan from.
 * @isolate: callback function that is resposible for deciding what to do with
 *  the item currently being scanned
 * @cb_arg: opaque type that will be passed to @isolate
 * @nr_to_walk: how many items to scan.
 *
 * This function will scan all elements in a particular list_lru, calling the
 * @isolate callback for each of those items, along with the current list
 * spinlock and a caller-provided opaque. The @isolate callback can choose to
 * drop the lock internally, but *must* return with the lock held. The callback
 * will return an enum lru_status telling the list_lru infrastructure what to
 * do with the object being scanned.
 *
 * Please note that nr_to_walk does not mean how many objects will be freed,
 * just how many objects will be scanned.
 *
 * Return value: the number of objects effectively removed from the LRU.
 */</doc>
<def f='linux-4.14.y/mm/list_lru.c' l='256' ll='263' type='unsigned long list_lru_walk_one(struct list_lru * lru, int nid, struct mem_cgroup * memcg, list_lru_walk_cb isolate, void * cb_arg, unsigned long * nr_to_walk)'/>
<dec f='linux-4.14.y/mm/list_lru.c' l='264' type='unsigned long list_lru_walk_one(struct list_lru * , int , struct mem_cgroup * , list_lru_walk_cb , void * , unsigned long * )'/>
<use f='linux-4.14.y/mm/list_lru.c' l='264' c='list_lru_walk_one'/>
<use f='linux-4.14.y/mm/list_lru.c' l='264' u='a'/>
<use f='linux-4.14.y/mm/list_lru.c' l='264' u='a'/>
