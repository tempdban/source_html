<def f='linux-4.14.y/security/apparmor/include/label.h' l='348' ll='354' type='struct aa_label * __aa_get_label(struct aa_label * l)'/>
<doc f='linux-4.14.y/security/apparmor/include/label.h' l='340'>/**
 * __aa_get_label - get a reference count to uncounted label reference
 * @l: reference to get a count on
 *
 * Returns: pointer to reference OR NULL if race is lost and reference is
 *          being repeated.
 * Requires: lock held, and the return code MUST be checked
 */</doc>
<use f='linux-4.14.y/security/apparmor/label.c' l='665' u='c' c='__label_insert'/>
<use f='linux-4.14.y/security/apparmor/label.c' l='715' u='c' c='__vec_find'/>
<use f='linux-4.14.y/security/apparmor/label.c' l='1141' u='c' c='__label_find_merge'/>
<use f='linux-4.14.y/security/apparmor/label.c' l='1986' u='c' c='labelset_next_stale'/>
<def f='linux-4.14.y/security/apparmor/include/label.h' l='348' ll='354' type='struct aa_label * __aa_get_label(struct aa_label * l)'/>
<doc f='linux-4.14.y/security/apparmor/include/label.h' l='340'>/**
 * __aa_get_label - get a reference count to uncounted label reference
 * @l: reference to get a count on
 *
 * Returns: pointer to reference OR NULL if race is lost and reference is
 *          being repeated.
 * Requires: lock held, and the return code MUST be checked
 */</doc>
<use f='linux-4.14.y/security/apparmor/label.c' l='665' u='c' c='__label_insert'/>
<use f='linux-4.14.y/security/apparmor/label.c' l='715' u='c' c='__vec_find'/>
<use f='linux-4.14.y/security/apparmor/label.c' l='1141' u='c' c='__label_find_merge'/>
<use f='linux-4.14.y/security/apparmor/label.c' l='1986' u='c' c='labelset_next_stale'/>
