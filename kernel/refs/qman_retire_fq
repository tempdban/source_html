<dec f='linux-4.18.y/drivers/bus/dpaa/include/fsl_qman.h' l='1638' type='int qman_retire_fq(struct qman_fq * fq, u32 * flags)'/>
<doc f='linux-4.18.y/drivers/bus/dpaa/include/fsl_qman.h' l='1620'>/**
 * qman_retire_fq - Retires a FQ
 * @fq: the frame queue object to retire
 * @flags: FQ flags (as per qman_fq_state) if retirement completes immediately
 *
 * Retires the frame queue. This returns zero if it succeeds immediately, +1 if
 * the retirement was started asynchronously, otherwise it returns negative for
 * failure. When this function returns zero, @flags is set to indicate whether
 * the retired FQ is empty and/or whether it has any ORL fragments (to show up
 * as ERNs). Otherwise the corresponding flags will be known when a subsequent
 * FQRN message shows up on the portal&apos;s message ring.
 *
 * NB, if the retirement is asynchronous (the FQ was in the Truly Scheduled or
 * Active state), the completion will be via the message ring as a FQRN - but
 * the corresponding callback may occur before this function returns!! Ie. the
 * caller should be prepared to accept the callback as the function is called,
 * not only once it has returned.
 */</doc>
<def f='linux-4.18.y/drivers/bus/dpaa/base/qbman/qman.c' l='1647' ll='1735' type='int qman_retire_fq(struct qman_fq * fq, u32 * flags)'/>
<use f='linux-4.18.y/drivers/crypto/dpaa_sec/dpaa_sec.c' l='1794' u='c' c='dpaa_sec_detach_rxq'/>
