<dec f='linux-4.14.y/include/linux/string_helpers.h' l='26' type='int string_unescape(char * src, char * dst, size_t size, unsigned int flags)'/>
<use f='linux-4.14.y/include/linux/string_helpers.h' l='30' u='c' c='string_unescape_inplace'/>
<use f='linux-4.14.y/include/linux/string_helpers.h' l='35' u='c' c='string_unescape_any'/>
<def f='linux-4.14.y/lib/string_helpers.c' l='266' ll='298' type='int string_unescape(char * src, char * dst, size_t size, unsigned int flags)'/>
<dec f='linux-4.14.y/lib/string_helpers.c' l='299' type='int string_unescape(char * , char * , size_t , unsigned int )'/>
<use f='linux-4.14.y/lib/string_helpers.c' l='299' c='string_unescape'/>
<use f='linux-4.14.y/lib/string_helpers.c' l='299' u='a'/>
<use f='linux-4.14.y/lib/string_helpers.c' l='299' u='a'/>
<doc f='linux-4.14.y/lib/string_helpers.c' l='228'>/**
 * string_unescape - unquote characters in the given string
 * @src:	source buffer (escaped)
 * @dst:	destination buffer (unescaped)
 * @size:	size of the destination buffer (0 to unlimit)
 * @flags:	combination of the flags (bitwise OR):
 *	%UNESCAPE_SPACE:
 *		&apos;\f&apos; - form feed
 *		&apos;\n&apos; - new line
 *		&apos;\r&apos; - carriage return
 *		&apos;\t&apos; - horizontal tab
 *		&apos;\v&apos; - vertical tab
 *	%UNESCAPE_OCTAL:
 *		&apos;\NNN&apos; - byte with octal value NNN (1 to 3 digits)
 *	%UNESCAPE_HEX:
 *		&apos;\xHH&apos; - byte with hexadecimal value HH (1 to 2 digits)
 *	%UNESCAPE_SPECIAL:
 *		&apos;\&quot;&apos; - double quote
 *		&apos;\\&apos; - backslash
 *		&apos;\a&apos; - alert (BEL)
 *		&apos;\e&apos; - escape
 *	%UNESCAPE_ANY:
 *		all previous together
 *
 * Description:
 * The function unquotes characters in the given string.
 *
 * Because the size of the output will be the same as or less than the size of
 * the input, the transformation may be performed in place.
 *
 * Caller must provide valid source and destination pointers. Be aware that
 * destination buffer will always be NULL-terminated. Source string must be
 * NULL-terminated as well.
 *
 * Return:
 * The amount of the characters processed to the destination buffer excluding
 * trailing &apos;\0&apos; is returned.
 */</doc>
<dec f='linux-4.14.y/include/linux/string_helpers.h' l='26' type='int string_unescape(char * src, char * dst, size_t size, unsigned int flags)'/>
<use f='linux-4.14.y/include/linux/string_helpers.h' l='30' u='c' c='string_unescape_inplace'/>
<use f='linux-4.14.y/include/linux/string_helpers.h' l='35' u='c' c='string_unescape_any'/>
<def f='linux-4.14.y/lib/string_helpers.c' l='266' ll='298' type='int string_unescape(char * src, char * dst, size_t size, unsigned int flags)'/>
<dec f='linux-4.14.y/lib/string_helpers.c' l='299' type='int string_unescape(char * , char * , size_t , unsigned int )'/>
<use f='linux-4.14.y/lib/string_helpers.c' l='299' c='string_unescape'/>
<use f='linux-4.14.y/lib/string_helpers.c' l='299' u='a'/>
<use f='linux-4.14.y/lib/string_helpers.c' l='299' u='a'/>
<doc f='linux-4.14.y/lib/string_helpers.c' l='228'>/**
 * string_unescape - unquote characters in the given string
 * @src:	source buffer (escaped)
 * @dst:	destination buffer (unescaped)
 * @size:	size of the destination buffer (0 to unlimit)
 * @flags:	combination of the flags (bitwise OR):
 *	%UNESCAPE_SPACE:
 *		&apos;\f&apos; - form feed
 *		&apos;\n&apos; - new line
 *		&apos;\r&apos; - carriage return
 *		&apos;\t&apos; - horizontal tab
 *		&apos;\v&apos; - vertical tab
 *	%UNESCAPE_OCTAL:
 *		&apos;\NNN&apos; - byte with octal value NNN (1 to 3 digits)
 *	%UNESCAPE_HEX:
 *		&apos;\xHH&apos; - byte with hexadecimal value HH (1 to 2 digits)
 *	%UNESCAPE_SPECIAL:
 *		&apos;\&quot;&apos; - double quote
 *		&apos;\\&apos; - backslash
 *		&apos;\a&apos; - alert (BEL)
 *		&apos;\e&apos; - escape
 *	%UNESCAPE_ANY:
 *		all previous together
 *
 * Description:
 * The function unquotes characters in the given string.
 *
 * Because the size of the output will be the same as or less than the size of
 * the input, the transformation may be performed in place.
 *
 * Caller must provide valid source and destination pointers. Be aware that
 * destination buffer will always be NULL-terminated. Source string must be
 * NULL-terminated as well.
 *
 * Return:
 * The amount of the characters processed to the destination buffer excluding
 * trailing &apos;\0&apos; is returned.
 */</doc>
