<def f='linux-4.14.y/include/linux/fs.h' l='997' ll='1027'/>
<size>200</size>
<doc f='linux-4.14.y/include/linux/fs.h' l='980'>/*
 * struct file_lock represents a generic &quot;file lock&quot;. It&apos;s used to represent
 * POSIX byte range locks, BSD (flock) locks, and leases. It&apos;s important to
 * note that the same struct is used to represent both a request for a lock and
 * the lock itself, but the same object is never used for both.
 *
 * FIXME: should we create a separate &quot;struct lock_request&quot; to help distinguish
 * these two uses?
 *
 * The varous i_flctx lists are ordered by:
 *
 * 1) lock owner
 * 2) lock range start
 * 3) lock range end
 *
 * Obviously, the last two criteria only matter for POSIX locks.
 */</doc>
<mbr r='file_lock::fl_next' o='0' t='struct file_lock *'/>
<mbr r='file_lock::fl_list' o='64' t='struct list_head'/>
<mbr r='file_lock::fl_link' o='192' t='struct hlist_node'/>
<mbr r='file_lock::fl_block' o='320' t='struct list_head'/>
<mbr r='file_lock::fl_owner' o='448' t='fl_owner_t'/>
<mbr r='file_lock::fl_flags' o='512' t='unsigned int'/>
<mbr r='file_lock::fl_type' o='544' t='unsigned char'/>
<mbr r='file_lock::fl_pid' o='576' t='unsigned int'/>
<mbr r='file_lock::fl_link_cpu' o='608' t='int'/>
<mbr r='file_lock::fl_wait' o='640' t='wait_queue_head_t'/>
<mbr r='file_lock::fl_file' o='832' t='struct file *'/>
<mbr r='file_lock::fl_start' o='896' t='loff_t'/>
<mbr r='file_lock::fl_end' o='960' t='loff_t'/>
<mbr r='file_lock::fl_fasync' o='1024' t='struct fasync_struct *'/>
<mbr r='file_lock::fl_break_time' o='1088' t='unsigned long'/>
<mbr r='file_lock::fl_downgrade_time' o='1152' t='unsigned long'/>
<mbr r='file_lock::fl_ops' o='1216' t='const struct file_lock_operations *'/>
<mbr r='file_lock::fl_lmops' o='1280' t='const struct lock_manager_operations *'/>
<mbr r='file_lock::fl_u' o='1344' t='union (anonymous union at /home/tempdban/kernel/stable/./include/linux/fs.h:1019:2)'/>
<def f='linux-4.14.y/include/linux/fs.h' l='997' ll='1027'/>
<size>200</size>
<doc f='linux-4.14.y/include/linux/fs.h' l='980'>/*
 * struct file_lock represents a generic &quot;file lock&quot;. It&apos;s used to represent
 * POSIX byte range locks, BSD (flock) locks, and leases. It&apos;s important to
 * note that the same struct is used to represent both a request for a lock and
 * the lock itself, but the same object is never used for both.
 *
 * FIXME: should we create a separate &quot;struct lock_request&quot; to help distinguish
 * these two uses?
 *
 * The varous i_flctx lists are ordered by:
 *
 * 1) lock owner
 * 2) lock range start
 * 3) lock range end
 *
 * Obviously, the last two criteria only matter for POSIX locks.
 */</doc>
<mbr r='file_lock::fl_next' o='0' t='struct file_lock *'/>
<mbr r='file_lock::fl_list' o='64' t='struct list_head'/>
<mbr r='file_lock::fl_link' o='192' t='struct hlist_node'/>
<mbr r='file_lock::fl_block' o='320' t='struct list_head'/>
<mbr r='file_lock::fl_owner' o='448' t='fl_owner_t'/>
<mbr r='file_lock::fl_flags' o='512' t='unsigned int'/>
<mbr r='file_lock::fl_type' o='544' t='unsigned char'/>
<mbr r='file_lock::fl_pid' o='576' t='unsigned int'/>
<mbr r='file_lock::fl_link_cpu' o='608' t='int'/>
<mbr r='file_lock::fl_wait' o='640' t='wait_queue_head_t'/>
<mbr r='file_lock::fl_file' o='832' t='struct file *'/>
<mbr r='file_lock::fl_start' o='896' t='loff_t'/>
<mbr r='file_lock::fl_end' o='960' t='loff_t'/>
<mbr r='file_lock::fl_fasync' o='1024' t='struct fasync_struct *'/>
<mbr r='file_lock::fl_break_time' o='1088' t='unsigned long'/>
<mbr r='file_lock::fl_downgrade_time' o='1152' t='unsigned long'/>
<mbr r='file_lock::fl_ops' o='1216' t='const struct file_lock_operations *'/>
<mbr r='file_lock::fl_lmops' o='1280' t='const struct lock_manager_operations *'/>
<mbr r='file_lock::fl_u' o='1344' t='union (anonymous union at /home/tempdban/kernel/stable/./include/linux/fs.h:1019:2)'/>
