<dec f='linux-4.14.y/include/linux/clk.h' l='229' type='void clk_unprepare(struct clk * clk)'/>
<use f='linux-4.14.y/include/linux/clk.h' l='648' u='c' c='clk_prepare_enable'/>
<use f='linux-4.14.y/include/linux/clk.h' l='657' u='c' c='clk_disable_unprepare'/>
<use f='linux-4.14.y/drivers/clk/clk-bulk.c' l='74' u='c' c='clk_bulk_unprepare'/>
<def f='linux-4.14.y/drivers/clk/clk.c' l='515' ll='521' type='void clk_unprepare(struct clk * clk)'/>
<dec f='linux-4.14.y/drivers/clk/clk.c' l='522' type='void clk_unprepare(struct clk * )'/>
<use f='linux-4.14.y/drivers/clk/clk.c' l='522' c='clk_unprepare'/>
<use f='linux-4.14.y/drivers/clk/clk.c' l='522' u='a'/>
<use f='linux-4.14.y/drivers/clk/clk.c' l='522' u='a'/>
<doc f='linux-4.14.y/drivers/clk/clk.c' l='504'>/**
 * clk_unprepare - undo preparation of a clock source
 * @clk: the clk being unprepared
 *
 * clk_unprepare may sleep, which differentiates it from clk_disable.  In a
 * simple case, clk_unprepare can be used instead of clk_disable to gate a clk
 * if the operation may sleep.  One example is a clk which is accessed over
 * I2c.  In the complex case a clk gate operation may require a fast and a slow
 * part.  It is this reason that clk_unprepare and clk_disable are not mutually
 * exclusive.  In fact clk_disable must be called before clk_unprepare.
 */</doc>
<use f='linux-4.14.y/include/linux/amba/bus.h' l='117' u='c' c='amba_pclk_unprepare'/>
