<dec f='linux-4.18.y/fs/ntfs/runlist.h' l='97' type='int ntfs_rl_punch_nolock(const ntfs_volume * vol, runlist *const runlist, const VCN start, const s64 length)'/>
<use f='linux-4.18.y/fs/ntfs/file.c' l='1276' u='c' c='ntfs_prepare_pages_for_non_resident_write'/>
<def f='linux-4.18.y/fs/ntfs/runlist.c' l='1644' ll='1905' type='int ntfs_rl_punch_nolock(const ntfs_volume * vol, runlist *const runlist, const VCN start, const s64 length)'/>
<doc f='linux-4.18.y/fs/ntfs/runlist.c' l='1623'>/**
 * ntfs_rl_punch_nolock - punch a hole into a runlist
 * @vol:	ntfs volume (needed for error output)
 * @runlist:	runlist to punch a hole into
 * @start:	starting VCN of the hole to be created
 * @length:	size of the hole to be created in units of clusters
 *
 * Punch a hole into the runlist @runlist starting at VCN @start and of size
 * @length clusters.
 *
 * Return 0 on success and -errno on error, in which case @runlist has not been
 * modified.
 *
 * If @start and/or @start + @length are outside the runlist return error code
 * -ENOENT.
 *
 * If the runlist contains unmapped or error elements between @start and @start
 * + @length return error code -EINVAL.
 *
 * Locking: The caller must hold @runlist-&gt;lock for writing.
 */</doc>
