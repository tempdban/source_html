<dec f='linux-4.14.y/include/linux/pci.h' l='1114' type='int pci_request_irq(struct pci_dev * dev, unsigned int nr, irq_handler_t handler, irq_handler_t thread_fn, void * dev_id, const char * fmt)'/>
<def f='linux-4.14.y/drivers/pci/irq.c' l='84' ll='100' type='int pci_request_irq(struct pci_dev * dev, unsigned int nr, irq_handler_t handler, irq_handler_t thread_fn, void * dev_id, const char * fmt)'/>
<dec f='linux-4.14.y/drivers/pci/irq.c' l='101' type='int pci_request_irq(struct pci_dev * , unsigned int , irq_handler_t , irq_handler_t , void * , const char * )'/>
<use f='linux-4.14.y/drivers/pci/irq.c' l='101' c='pci_request_irq'/>
<use f='linux-4.14.y/drivers/pci/irq.c' l='101' u='a'/>
<use f='linux-4.14.y/drivers/pci/irq.c' l='101' u='a'/>
<doc f='linux-4.14.y/drivers/pci/irq.c' l='65'>/**
 * pci_request_irq - allocate an interrupt line for a PCI device
 * @dev:	PCI device to operate on
 * @nr:		device-relative interrupt vector index (0-based).
 * @handler:	Function to be called when the IRQ occurs.
 *		Primary handler for threaded interrupts.
 *		If NULL and thread_fn != NULL the default primary handler is
 *		installed.
 * @thread_fn:	Function called from the IRQ handler thread
 *		If NULL, no IRQ thread is created
 * @dev_id:	Cookie passed back to the handler function
 * @fmt:	Printf-like format string naming the handler
 *
 * This call allocates interrupt resources and enables the interrupt line and
 * IRQ handling. From the point this call is made @handler and @thread_fn may
 * be invoked.  All interrupts requested using this function might be shared.
 *
 * @dev_id must not be NULL and must be globally unique.
 */</doc>
<dec f='linux-4.14.y/include/linux/pci.h' l='1114' type='int pci_request_irq(struct pci_dev * dev, unsigned int nr, irq_handler_t handler, irq_handler_t thread_fn, void * dev_id, const char * fmt)'/>
<def f='linux-4.14.y/drivers/pci/irq.c' l='84' ll='100' type='int pci_request_irq(struct pci_dev * dev, unsigned int nr, irq_handler_t handler, irq_handler_t thread_fn, void * dev_id, const char * fmt)'/>
<dec f='linux-4.14.y/drivers/pci/irq.c' l='101' type='int pci_request_irq(struct pci_dev * , unsigned int , irq_handler_t , irq_handler_t , void * , const char * )'/>
<use f='linux-4.14.y/drivers/pci/irq.c' l='101' c='pci_request_irq'/>
<use f='linux-4.14.y/drivers/pci/irq.c' l='101' u='a'/>
<use f='linux-4.14.y/drivers/pci/irq.c' l='101' u='a'/>
<doc f='linux-4.14.y/drivers/pci/irq.c' l='65'>/**
 * pci_request_irq - allocate an interrupt line for a PCI device
 * @dev:	PCI device to operate on
 * @nr:		device-relative interrupt vector index (0-based).
 * @handler:	Function to be called when the IRQ occurs.
 *		Primary handler for threaded interrupts.
 *		If NULL and thread_fn != NULL the default primary handler is
 *		installed.
 * @thread_fn:	Function called from the IRQ handler thread
 *		If NULL, no IRQ thread is created
 * @dev_id:	Cookie passed back to the handler function
 * @fmt:	Printf-like format string naming the handler
 *
 * This call allocates interrupt resources and enables the interrupt line and
 * IRQ handling. From the point this call is made @handler and @thread_fn may
 * be invoked.  All interrupts requested using this function might be shared.
 *
 * @dev_id must not be NULL and must be globally unique.
 */</doc>
