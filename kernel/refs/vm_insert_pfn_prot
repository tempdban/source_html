<dec f='linux-4.18.y/include/linux/mm.h' l='2491' type='int vm_insert_pfn_prot(struct vm_area_struct * vma, unsigned long addr, unsigned long pfn, pgprot_t pgprot)'/>
<use f='linux-4.18.y/arch/x86/entry/vdso/vma.c' l='117' u='c' c='vvar_fault'/>
<use f='linux-4.18.y/mm/memory.c' l='1858' u='c' c='vm_insert_pfn'/>
<def f='linux-4.18.y/mm/memory.c' l='1877' ll='1905' type='int vm_insert_pfn_prot(struct vm_area_struct * vma, unsigned long addr, unsigned long pfn, pgprot_t pgprot)'/>
<dec f='linux-4.18.y/mm/memory.c' l='1906' type='int vm_insert_pfn_prot(struct vm_area_struct * , unsigned long , unsigned long , pgprot_t )'/>
<use f='linux-4.18.y/mm/memory.c' l='1906' c='vm_insert_pfn_prot'/>
<use f='linux-4.18.y/mm/memory.c' l='1906' u='a'/>
<use f='linux-4.18.y/mm/memory.c' l='1906' u='a'/>
<doc f='linux-4.18.y/mm/memory.c' l='1862'>/**
 * vm_insert_pfn_prot - insert single pfn into user vma with specified pgprot
 * @vma: user vma to map to
 * @addr: target user address of this page
 * @pfn: source kernel pfn
 * @pgprot: pgprot flags for the inserted page
 *
 * This is exactly like vm_insert_pfn, except that it allows drivers to
 * to override pgprot on a per-page basis.
 *
 * This only makes sense for IO mappings, and it makes no sense for
 * cow mappings.  In general, using multiple vmas is preferable;
 * vm_insert_pfn_prot should only be used if using multiple VMAs is
 * impractical.
 */</doc>
