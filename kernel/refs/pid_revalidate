<dec f='linux-4.14.y/fs/proc/internal.h' l='157' type='int pid_revalidate(struct dentry * , unsigned int )'/>
<def f='linux-4.14.y/fs/proc/base.c' l='1821' ll='1841' type='int pid_revalidate(struct dentry * dentry, unsigned int flags)'/>
<use f='linux-4.14.y/fs/proc/base.c' l='1859'/>
<use f='linux-4.14.y/fs/proc/base.c' l='1859'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2454' u='c' c='proc_pident_instantiate'/>
<use f='linux-4.14.y/fs/proc/base.c' l='3158' u='c' c='proc_pid_instantiate'/>
<use f='linux-4.14.y/fs/proc/base.c' l='3456' u='c' c='proc_task_instantiate'/>
<doc f='linux-4.14.y/fs/proc/base.c' l='1812'>/*
 *	Exceptional case: normally we are not allowed to unhash a busy
 * directory. In this case, however, we can do it - no aliasing problems
 * due to the way we treat inodes.
 *
 * Rewrite the inode&apos;s ownerships here because the owning task may have
 * performed a setuid(), etc.
 *
 */</doc>
<use f='linux-4.14.y/fs/proc/namespaces.c' l='108' u='c' c='proc_ns_instantiate'/>
<dec f='linux-4.14.y/fs/proc/internal.h' l='157' type='int pid_revalidate(struct dentry * , unsigned int )'/>
<def f='linux-4.14.y/fs/proc/base.c' l='1821' ll='1841' type='int pid_revalidate(struct dentry * dentry, unsigned int flags)'/>
<use f='linux-4.14.y/fs/proc/base.c' l='1859'/>
<use f='linux-4.14.y/fs/proc/base.c' l='1859'/>
<use f='linux-4.14.y/fs/proc/base.c' l='2454' u='c' c='proc_pident_instantiate'/>
<use f='linux-4.14.y/fs/proc/base.c' l='3158' u='c' c='proc_pid_instantiate'/>
<use f='linux-4.14.y/fs/proc/base.c' l='3456' u='c' c='proc_task_instantiate'/>
<doc f='linux-4.14.y/fs/proc/base.c' l='1812'>/*
 *	Exceptional case: normally we are not allowed to unhash a busy
 * directory. In this case, however, we can do it - no aliasing problems
 * due to the way we treat inodes.
 *
 * Rewrite the inode&apos;s ownerships here because the owning task may have
 * performed a setuid(), etc.
 *
 */</doc>
<use f='linux-4.14.y/fs/proc/namespaces.c' l='108' u='c' c='proc_ns_instantiate'/>
