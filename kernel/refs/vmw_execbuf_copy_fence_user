<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='840' type='void vmw_execbuf_copy_fence_user(struct vmw_private * dev_priv, struct vmw_fpriv * vmw_fp, int ret, struct drm_vmw_fence_rep * user_fence_rep, struct vmw_fence_obj * fence, uint32_t fence_handle, int32_t out_fence_fd, struct sync_file * sync_file)'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='3846' ll='3901' type='void vmw_execbuf_copy_fence_user(struct vmw_private * dev_priv, struct vmw_fpriv * vmw_fp, int ret, struct drm_vmw_fence_rep * user_fence_rep, struct vmw_fence_obj * fence, uint32_t fence_handle, int32_t out_fence_fd, struct sync_file * sync_file)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4266' u='c' c='vmw_execbuf_process'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='3824'>/**
 * vmw_execbuf_copy_fence_user - copy fence object information to
 * user-space.
 *
 * @dev_priv: Pointer to a vmw_private struct.
 * @vmw_fp: Pointer to the struct vmw_fpriv representing the calling file.
 * @ret: Return value from fence object creation.
 * @user_fence_rep: User space address of a struct drm_vmw_fence_rep to
 * which the information should be copied.
 * @fence: Pointer to the fenc object.
 * @fence_handle: User-space fence handle.
 * @out_fence_fd: exported file descriptor for the fence.  -1 if not used
 * @sync_file:  Only used to clean up in case of an error in this function.
 *
 * This function copies fence information to user-space. If copying fails,
 * The user-space struct drm_vmw_fence_rep::error member is hopefully
 * left untouched, and if it&apos;s preloaded with an -EFAULT by user-space,
 * the error will hopefully be detected.
 * Also if copying fails, user-space will be unable to signal the fence
 * object so we wait for it immediately, and then unreference the
 * user-space reference.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_fence.c' l='1152' u='c' c='vmw_fence_event_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2512' u='c' c='vmw_kms_helper_buffer_finish'/>
<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='840' type='void vmw_execbuf_copy_fence_user(struct vmw_private * dev_priv, struct vmw_fpriv * vmw_fp, int ret, struct drm_vmw_fence_rep * user_fence_rep, struct vmw_fence_obj * fence, uint32_t fence_handle, int32_t out_fence_fd, struct sync_file * sync_file)'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='3846' ll='3901' type='void vmw_execbuf_copy_fence_user(struct vmw_private * dev_priv, struct vmw_fpriv * vmw_fp, int ret, struct drm_vmw_fence_rep * user_fence_rep, struct vmw_fence_obj * fence, uint32_t fence_handle, int32_t out_fence_fd, struct sync_file * sync_file)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4266' u='c' c='vmw_execbuf_process'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='3824'>/**
 * vmw_execbuf_copy_fence_user - copy fence object information to
 * user-space.
 *
 * @dev_priv: Pointer to a vmw_private struct.
 * @vmw_fp: Pointer to the struct vmw_fpriv representing the calling file.
 * @ret: Return value from fence object creation.
 * @user_fence_rep: User space address of a struct drm_vmw_fence_rep to
 * which the information should be copied.
 * @fence: Pointer to the fenc object.
 * @fence_handle: User-space fence handle.
 * @out_fence_fd: exported file descriptor for the fence.  -1 if not used
 * @sync_file:  Only used to clean up in case of an error in this function.
 *
 * This function copies fence information to user-space. If copying fails,
 * The user-space struct drm_vmw_fence_rep::error member is hopefully
 * left untouched, and if it&apos;s preloaded with an -EFAULT by user-space,
 * the error will hopefully be detected.
 * Also if copying fails, user-space will be unable to signal the fence
 * object so we wait for it immediately, and then unreference the
 * user-space reference.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_fence.c' l='1152' u='c' c='vmw_fence_event_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2512' u='c' c='vmw_kms_helper_buffer_finish'/>
