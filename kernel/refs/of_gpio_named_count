<def f='linux-4.14.y/include/linux/of_gpio.h' l='111' ll='114' type='int of_gpio_named_count(struct device_node * np, const char * propname)'/>
<use f='linux-4.14.y/include/linux/of_gpio.h' l='124' u='c' c='of_gpio_count'/>
<doc f='linux-4.14.y/include/linux/of_gpio.h' l='91'>/**
 * of_gpio_named_count() - Count GPIOs for a device
 * @np:		device node to count GPIOs for
 * @propname:	property name containing gpio specifier(s)
 *
 * The function returns the count of GPIOs specified for a node.
 * Note that the empty GPIO specifiers count too. Returns either
 *   Number of gpios defined in property,
 *   -EINVAL for an incorrectly formed gpios property, or
 *   -ENOENT for a missing gpios property
 *
 * Example:
 * gpios = &lt;0
 *          &amp;gpio1 1 2
 *          0
 *          &amp;gpio2 3 4&gt;;
 *
 * The above example defines four GPIOs, two of which are not specified.
 * This function will return &apos;4&apos;
 */</doc>
<def f='linux-4.14.y/include/linux/of_gpio.h' l='111' ll='114' type='int of_gpio_named_count(struct device_node * np, const char * propname)'/>
<use f='linux-4.14.y/include/linux/of_gpio.h' l='124' u='c' c='of_gpio_count'/>
<doc f='linux-4.14.y/include/linux/of_gpio.h' l='91'>/**
 * of_gpio_named_count() - Count GPIOs for a device
 * @np:		device node to count GPIOs for
 * @propname:	property name containing gpio specifier(s)
 *
 * The function returns the count of GPIOs specified for a node.
 * Note that the empty GPIO specifiers count too. Returns either
 *   Number of gpios defined in property,
 *   -EINVAL for an incorrectly formed gpios property, or
 *   -ENOENT for a missing gpios property
 *
 * Example:
 * gpios = &lt;0
 *          &amp;gpio1 1 2
 *          0
 *          &amp;gpio2 3 4&gt;;
 *
 * The above example defines four GPIOs, two of which are not specified.
 * This function will return &apos;4&apos;
 */</doc>
