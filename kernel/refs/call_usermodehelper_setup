<dec f='linux-4.14.y/include/linux/umh.h' l='36' type='struct subprocess_info * call_usermodehelper_setup(const char * path, char ** argv, char ** envp, gfp_t gfp_mask, int (*)(struct subprocess_info *, struct cred *) init, void (*)(struct subprocess_info *) cleanup, void * data)'/>
<use f='linux-4.14.y/fs/coredump.c' l='648' u='c' c='do_coredump'/>
<use f='linux-4.14.y/init/do_mounts_initrd.c' l='75' u='c' c='handle_initrd'/>
<use f='linux-4.14.y/kernel/kmod.c' l='94' u='c' c='call_modprobe'/>
<def f='linux-4.14.y/kernel/umh.c' l='367' ll='393' type='struct subprocess_info * call_usermodehelper_setup(const char * path, char ** argv, char ** envp, gfp_t gfp_mask, int (*)(struct subprocess_info *, struct cred *) init, void (*)(struct subprocess_info *) cleanup, void * data)'/>
<dec f='linux-4.14.y/kernel/umh.c' l='394' type='struct subprocess_info * call_usermodehelper_setup(const char * , char ** , char ** , gfp_t , int (*)(struct subprocess_info *, struct cred *) , void (*)(struct subprocess_info *) , void * )'/>
<use f='linux-4.14.y/kernel/umh.c' l='394' c='call_usermodehelper_setup'/>
<use f='linux-4.14.y/kernel/umh.c' l='394' u='a'/>
<use f='linux-4.14.y/kernel/umh.c' l='394' u='a'/>
<use f='linux-4.14.y/kernel/umh.c' l='483' u='c' c='call_usermodehelper'/>
<doc f='linux-4.14.y/kernel/umh.c' l='344'>/**
 * call_usermodehelper_setup - prepare to call a usermode helper
 * @path: path to usermode executable
 * @argv: arg vector for process
 * @envp: environment for process
 * @gfp_mask: gfp mask for memory allocation
 * @cleanup: a cleanup function
 * @init: an init function
 * @data: arbitrary context sensitive data
 *
 * Returns either %NULL on allocation failure, or a subprocess_info
 * structure.  This should be passed to call_usermodehelper_exec to
 * exec the process and free the structure.
 *
 * The init function is used to customize the helper process prior to
 * exec.  A non-zero return code causes the process to error out, exit,
 * and return the failure to the calling process
 *
 * The cleanup function is just before ethe subprocess_info is about to
 * be freed.  This can be used for freeing the argv and envp.  The
 * Function must be runnable in either a process context or the
 * context in which call_usermodehelper_exec is called.
 */</doc>
<use f='linux-4.14.y/lib/kobject_uevent.c' l='522' u='c' c='kobject_uevent_env'/>
