<dec f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='680' type='int nfp_cpp_mutex_init(struct nfp_cpp * cpp, int target, unsigned long long address, uint32_t key_id)'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='662'>/*
 * Initialize a mutex location

 * The CPP target:address must point to a 64-bit aligned location, and will
 * initialize 64 bits of data at the location.
 *
 * This creates the initial mutex state, as locked by this nfp_cpp_interface().
 *
 * This function should only be called when setting up the initial lock state
 * upon boot-up of the system.
 *
 * @param cpp		NFP CPP handle
 * @param target	NFP CPP target ID
 * @param address	Offset into the address space of the NFP CPP target ID
 * @param key_id	Unique 32-bit value for this mutex
 *
 * @return 0 on success, or -1 on failure (and set errno accordingly).
 */</doc>
<def f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_mutex.c' l='75' ll='98' type='int nfp_cpp_mutex_init(struct nfp_cpp * cpp, int target, unsigned long long address, uint32_t key)'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_mutex.c' l='55'>/*
 * Initialize a mutex location
 *
 * The CPP target:address must point to a 64-bit aligned location, and
 * will initialize 64 bits of data at the location.
 *
 * This creates the initial mutex state, as locked by this
 * nfp_cpp_interface().
 *
 * This function should only be called when setting up
 * the initial lock state upon boot-up of the system.
 *
 * @param mutex     NFP CPP Mutex handle
 * @param target    NFP CPP target ID (ie NFP_CPP_TARGET_CLS or
 *		    NFP_CPP_TARGET_MU)
 * @param address   Offset into the address space of the NFP CPP target ID
 * @param key       Unique 32-bit value for this mutex
 *
 * @return 0 on success, or -1 on failure (and set errno accordingly).
 */</doc>
