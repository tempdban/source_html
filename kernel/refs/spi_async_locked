<dec f='linux-4.14.y/include/linux/spi/spi.h' l='943' type='int spi_async_locked(struct spi_device * spi, struct spi_message * message)'/>
<def f='linux-4.14.y/drivers/spi/spi.c' l='2990' ll='3008' type='int spi_async_locked(struct spi_device * spi, struct spi_message * message)'/>
<dec f='linux-4.14.y/drivers/spi/spi.c' l='3009' type='int spi_async_locked(struct spi_device * , struct spi_message * )'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='3009' c='spi_async_locked'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='3009' u='a'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='3009' u='a'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='3112' u='c' c='__spi_sync'/>
<doc f='linux-4.14.y/drivers/spi/spi.c' l='2959'>/**
 * spi_async_locked - version of spi_async with exclusive bus usage
 * @spi: device with which data will be exchanged
 * @message: describes the data transfers, including completion callback
 * Context: any (irqs may be blocked, etc)
 *
 * This call may be used in_irq and other contexts which can&apos;t sleep,
 * as well as from task contexts which can sleep.
 *
 * The completion callback is invoked in a context which can&apos;t sleep.
 * Before that invocation, the value of message-&gt;status is undefined.
 * When the callback is issued, message-&gt;status holds either zero (to
 * indicate complete success) or a negative error code.  After that
 * callback returns, the driver which issued the transfer request may
 * deallocate the associated memory; it&apos;s no longer in use by any SPI
 * core or controller driver code.
 *
 * Note that although all messages to a spi_device are handled in
 * FIFO order, messages may go to different devices in other orders.
 * Some device might be higher priority, or have various &quot;hard&quot; access
 * time requirements, for example.
 *
 * On detection of any fault during the transfer, processing of
 * the entire message is aborted, and the device is deselected.
 * Until returning from the associated message completion callback,
 * no other spi_message queued to that device will be processed.
 * (This rule applies equally to all the synchronous transfer calls,
 * which are wrappers around this core asynchronous primitive.)
 *
 * Return: zero on success, else a negative error code.
 */</doc>
