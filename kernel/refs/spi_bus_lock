<dec f='linux-4.18.y/include/linux/spi/spi.h' l='1030' type='int spi_bus_lock(struct spi_controller * ctlr)'/>
<def f='linux-4.18.y/drivers/spi/spi.c' l='3205' ll='3218' type='int spi_bus_lock(struct spi_controller * ctlr)'/>
<dec f='linux-4.18.y/drivers/spi/spi.c' l='3219' type='int spi_bus_lock(struct spi_controller * )'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='3219' c='spi_bus_lock'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='3219' u='a'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='3219' u='a'/>
<doc f='linux-4.18.y/drivers/spi/spi.c' l='3190'>/**
 * spi_bus_lock - obtain a lock for exclusive SPI bus usage
 * @ctlr: SPI bus master that should be locked for exclusive bus access
 * Context: can sleep
 *
 * This call may only be used from a context that may sleep.  The sleep
 * is non-interruptible, and has no timeout.
 *
 * This call should be used by drivers that require exclusive access to the
 * SPI bus. The SPI bus must be released by a spi_bus_unlock call when the
 * exclusive access is over. Data transfer must be done by spi_sync_locked
 * and spi_async_locked calls when the SPI bus lock is held.
 *
 * Return: always zero.
 */</doc>
