<dec f='linux-4.14.y/include/drm/drm_atomic.h' l='529' type='int drm_atomic_set_mode_prop_for_crtc(struct drm_crtc_state * state, struct drm_property_blob * blob)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='390' ll='419' type='int drm_atomic_set_mode_prop_for_crtc(struct drm_crtc_state * state, struct drm_property_blob * blob)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='420' type='int drm_atomic_set_mode_prop_for_crtc(struct drm_crtc_state * , struct drm_property_blob * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='420' c='drm_atomic_set_mode_prop_for_crtc'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='420' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='420' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='477' u='c' c='drm_atomic_crtc_set_property'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='377'>/**
 * drm_atomic_set_mode_prop_for_crtc - set mode for CRTC
 * @state: the CRTC whose incoming state to update
 * @blob: pointer to blob property to use for mode
 *
 * Set a mode (originating from a blob property) on the desired CRTC state.
 * This function will take a reference on the blob property for the CRTC state,
 * and release the reference held on the state&apos;s existing mode property, if any
 * was set.
 *
 * RETURNS:
 * Zero on success, error code on failure. Cannot return -EDEADLK.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='188' u='c' c='handle_conflicting_encoders'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='2555' u='c' c='update_output_state'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='2737' u='c' c='drm_atomic_helper_disable_all'/>
