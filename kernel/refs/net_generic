<def f='linux-4.14.y/include/net/netns/generic.h' l='28' ll='37'/>
<def f='linux-4.14.y/include/net/netns/generic.h' l='39' ll='50' type='void * net_generic(const struct net * net, unsigned int id)'/>
<size>24</size>
<doc f='linux-4.14.y/include/net/netns/generic.h' l='12'>/*
 * Generic net pointers are to be used by modules to put some private
 * stuff on the struct net without explicit struct net modification
 *
 * The rules are simple:
 * 1. set pernet_operations-&gt;id.  After register_pernet_device you
 *    will have the id of your private pointer.
 * 2. set pernet_operations-&gt;size to have the code allocate and free
 *    a private structure pointed to from struct net.
 * 3. do not change this pointer while the net is alive;
 * 4. do not try to have any private reference on the net_generic object.
 *
 * After accomplishing all of the above, the private pointer can be
 * accessed with the net_generic() call.
 */</doc>
<use f='linux-4.14.y/kernel/audit.c' l='266' u='c' c='audit_get_sk'/>
<use f='linux-4.14.y/kernel/audit.c' l='1501' u='c' c='audit_net_init'/>
<use f='linux-4.14.y/kernel/audit.c' l='1515' u='c' c='audit_net_exit'/>
<use f='linux-4.14.y/net/core/net_namespace.c' l='132' u='c' c='ops_free'/>
<use f='linux-4.14.y/include/net/netfilter/nf_conntrack_synproxy.h' l='63' u='c' c='synproxy_pernet'/>
<use f='linux-4.14.y/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c' l='327' u='c' c='ipv4_hooks_register'/>
<use f='linux-4.14.y/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c' l='354' u='c' c='ipv4_hooks_unregister'/>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_proto.c' l='264' u='c' c='nf_ct_l4proto_net'/>
<use f='linux-4.14.y/net/netfilter/nfnetlink_log.c' l='95' u='c' c='nfnl_log_pernet'/>
<use f='linux-4.14.y/net/netfilter/nfnetlink_queue.c' l='94' u='c' c='nfnl_queue_pernet'/>
<use f='linux-4.14.y/net/netfilter/xt_hashlimit.c' l='56' u='c' c='hashlimit_pernet'/>
<use f='linux-4.14.y/net/netfilter/xt_recent.c' l='102' u='c' c='recent_pernet'/>
