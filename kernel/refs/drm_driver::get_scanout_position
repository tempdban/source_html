<dec f='linux-4.14.y/include/drm/drm_drv.h' l='278' type='bool (*)(struct drm_device *, unsigned int, bool, int *, int *, ktime_t *, ktime_t *, const struct drm_display_mode *)'/>
<offset>576</offset>
<doc f='linux-4.14.y/include/drm/drm_drv.h' l='228'>/**
	 * @get_scanout_position:
	 *
	 * Called by vblank timestamping code.
	 *
	 * Returns the current display scanout position from a crtc, and an
	 * optional accurate ktime_get() timestamp of when position was
	 * measured. Note that this is a helper callback which is only used if a
	 * driver uses drm_calc_vbltimestamp_from_scanoutpos() for the
	 * @get_vblank_timestamp callback.
	 *
	 * Parameters:
	 *
	 * dev:
	 *     DRM device.
	 * pipe:
	 *     Id of the crtc to query.
	 * in_vblank_irq:
	 *     True when called from drm_crtc_handle_vblank().  Some drivers
	 *     need to apply some workarounds for gpu-specific vblank irq quirks
	 *     if flag is set.
	 * vpos:
	 *     Target location for current vertical scanout position.
	 * hpos:
	 *     Target location for current horizontal scanout position.
	 * stime:
	 *     Target location for timestamp taken immediately before
	 *     scanout position query. Can be NULL to skip timestamp.
	 * etime:
	 *     Target location for timestamp taken immediately after
	 *     scanout position query. Can be NULL to skip timestamp.
	 * mode:
	 *     Current display timings.
	 *
	 * Returns vpos as a positive number while in active scanout area.
	 * Returns vpos as a negative number inside vblank, counting the number
	 * of scanlines to go until end of vblank, e.g., -1 means &quot;one scanline
	 * until start of active scanout / end of vblank.&quot;
	 *
	 * Returns:
	 *
	 * True on success, false if a reliable scanout position counter could
	 * not be read out.
	 *
	 * FIXME:
	 *
	 * Since this is a helper to implement @get_vblank_timestamp, we should
	 * move it to &amp;struct drm_crtc_helper_funcs, like all the other
	 * helper-internal hooks.
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vblank.c' l='610' u='r' c='drm_calc_vbltimestamp_from_scanoutpos'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vblank.c' l='642' u='r' c='drm_calc_vbltimestamp_from_scanoutpos'/>
<dec f='linux-4.14.y/include/drm/drm_drv.h' l='278' type='bool (*)(struct drm_device *, unsigned int, bool, int *, int *, ktime_t *, ktime_t *, const struct drm_display_mode *)'/>
<offset>576</offset>
<doc f='linux-4.14.y/include/drm/drm_drv.h' l='228'>/**
	 * @get_scanout_position:
	 *
	 * Called by vblank timestamping code.
	 *
	 * Returns the current display scanout position from a crtc, and an
	 * optional accurate ktime_get() timestamp of when position was
	 * measured. Note that this is a helper callback which is only used if a
	 * driver uses drm_calc_vbltimestamp_from_scanoutpos() for the
	 * @get_vblank_timestamp callback.
	 *
	 * Parameters:
	 *
	 * dev:
	 *     DRM device.
	 * pipe:
	 *     Id of the crtc to query.
	 * in_vblank_irq:
	 *     True when called from drm_crtc_handle_vblank().  Some drivers
	 *     need to apply some workarounds for gpu-specific vblank irq quirks
	 *     if flag is set.
	 * vpos:
	 *     Target location for current vertical scanout position.
	 * hpos:
	 *     Target location for current horizontal scanout position.
	 * stime:
	 *     Target location for timestamp taken immediately before
	 *     scanout position query. Can be NULL to skip timestamp.
	 * etime:
	 *     Target location for timestamp taken immediately after
	 *     scanout position query. Can be NULL to skip timestamp.
	 * mode:
	 *     Current display timings.
	 *
	 * Returns vpos as a positive number while in active scanout area.
	 * Returns vpos as a negative number inside vblank, counting the number
	 * of scanlines to go until end of vblank, e.g., -1 means &quot;one scanline
	 * until start of active scanout / end of vblank.&quot;
	 *
	 * Returns:
	 *
	 * True on success, false if a reliable scanout position counter could
	 * not be read out.
	 *
	 * FIXME:
	 *
	 * Since this is a helper to implement @get_vblank_timestamp, we should
	 * move it to &amp;struct drm_crtc_helper_funcs, like all the other
	 * helper-internal hooks.
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vblank.c' l='610' u='r' c='drm_calc_vbltimestamp_from_scanoutpos'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_vblank.c' l='642' u='r' c='drm_calc_vbltimestamp_from_scanoutpos'/>
