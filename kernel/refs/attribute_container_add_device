<dec f='linux-4.14.y/include/linux/attribute_container.h' l='46' type='void attribute_container_add_device(struct device * dev, int (*)(struct attribute_container *, struct device *, struct device *) fn)'/>
<def f='linux-4.14.y/drivers/base/attribute_container.c' l='141' ll='178' type='void attribute_container_add_device(struct device * dev, int (*)(struct attribute_container *, struct device *, struct device *) fn)'/>
<doc f='linux-4.14.y/drivers/base/attribute_container.c' l='123'>/**
 * attribute_container_add_device - see if any container is interested in dev
 *
 * @dev: device to add attributes to
 * @fn:	 function to trigger addition of class device.
 *
 * This function allocates storage for the class device(s) to be
 * attached to dev (one for each matching attribute_container).  If no
 * fn is provided, the code will simply register the class device via
 * device_add.  If a function is provided, it is expected to add
 * the class device at the appropriate time.  One of the things that
 * might be necessary is to allocate and initialise the classdev and
 * then add it a later time.  To do this, call this routine for
 * allocation and initialisation and then use
 * attribute_container_device_trigger() to call device_add() on
 * it.  Note: after this, the class device contains a reference to dev
 * which is not relinquished until the release of the classdev.
 */</doc>
<use f='linux-4.14.y/drivers/base/transport_class.c' l='147' u='c' c='transport_setup_device'/>
<dec f='linux-4.14.y/include/linux/attribute_container.h' l='46' type='void attribute_container_add_device(struct device * dev, int (*)(struct attribute_container *, struct device *, struct device *) fn)'/>
<def f='linux-4.14.y/drivers/base/attribute_container.c' l='141' ll='178' type='void attribute_container_add_device(struct device * dev, int (*)(struct attribute_container *, struct device *, struct device *) fn)'/>
<doc f='linux-4.14.y/drivers/base/attribute_container.c' l='123'>/**
 * attribute_container_add_device - see if any container is interested in dev
 *
 * @dev: device to add attributes to
 * @fn:	 function to trigger addition of class device.
 *
 * This function allocates storage for the class device(s) to be
 * attached to dev (one for each matching attribute_container).  If no
 * fn is provided, the code will simply register the class device via
 * device_add.  If a function is provided, it is expected to add
 * the class device at the appropriate time.  One of the things that
 * might be necessary is to allocate and initialise the classdev and
 * then add it a later time.  To do this, call this routine for
 * allocation and initialisation and then use
 * attribute_container_device_trigger() to call device_add() on
 * it.  Note: after this, the class device contains a reference to dev
 * which is not relinquished until the release of the classdev.
 */</doc>
<use f='linux-4.14.y/drivers/base/transport_class.c' l='147' u='c' c='transport_setup_device'/>
