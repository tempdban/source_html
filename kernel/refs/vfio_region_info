<def f='linux-4.14.y/include/uapi/linux/vfio.h' l='231' ll='242'/>
<size>32</size>
<doc f='linux-4.14.y/include/uapi/linux/vfio.h' l='219'>/**
 * VFIO_DEVICE_GET_REGION_INFO - _IOWR(VFIO_TYPE, VFIO_BASE + 8,
 *				       struct vfio_region_info)
 *
 * Retrieve information about a device region.  Caller provides
 * struct vfio_region_info with index value set.  Caller sets argsz.
 * Implementation of region mapping is bus driver specific.  This is
 * intended to describe MMIO, I/O port, as well as bus specific
 * regions (ex. PCI config space).  Zero sized regions may be used
 * to describe unimplemented regions (ex. unimplemented PCI BARs).
 * Return: 0 on success, -errno on failure.
 */</doc>
<mbr r='vfio_region_info::argsz' o='0' t='__u32'/>
<mbr r='vfio_region_info::flags' o='32' t='__u32'/>
<mbr r='vfio_region_info::index' o='64' t='__u32'/>
<mbr r='vfio_region_info::cap_offset' o='96' t='__u32'/>
<mbr r='vfio_region_info::size' o='128' t='__u64'/>
<mbr r='vfio_region_info::offset' o='192' t='__u64'/>
<def f='linux-4.14.y/include/uapi/linux/vfio.h' l='231' ll='242'/>
<size>32</size>
<doc f='linux-4.14.y/include/uapi/linux/vfio.h' l='219'>/**
 * VFIO_DEVICE_GET_REGION_INFO - _IOWR(VFIO_TYPE, VFIO_BASE + 8,
 *				       struct vfio_region_info)
 *
 * Retrieve information about a device region.  Caller provides
 * struct vfio_region_info with index value set.  Caller sets argsz.
 * Implementation of region mapping is bus driver specific.  This is
 * intended to describe MMIO, I/O port, as well as bus specific
 * regions (ex. PCI config space).  Zero sized regions may be used
 * to describe unimplemented regions (ex. unimplemented PCI BARs).
 * Return: 0 on success, -errno on failure.
 */</doc>
<mbr r='vfio_region_info::argsz' o='0' t='__u32'/>
<mbr r='vfio_region_info::flags' o='32' t='__u32'/>
<mbr r='vfio_region_info::index' o='64' t='__u32'/>
<mbr r='vfio_region_info::cap_offset' o='96' t='__u32'/>
<mbr r='vfio_region_info::size' o='128' t='__u64'/>
<mbr r='vfio_region_info::offset' o='192' t='__u64'/>
