<dec f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='633' type='int nfp_cpp_writel(struct nfp_cpp * cpp, uint32_t cpp_id, unsigned long long address, uint32_t value)'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='622'>/*
 * Write a 32-bit value to a NFP CPP ID
 *
 * @param cpp           NFP CPP handle
 * @param cpp_id        NFP CPP ID
 * @param address       offset into the NFP CPP ID address space
 * @param value         value to write
 *
 * @return 0 on success, or -1 on failure (and set errno accordingly).
 *
 */</doc>
<def f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='488' ll='498' type='int nfp_cpp_writel(struct nfp_cpp * cpp, uint32_t cpp_id, unsigned long long address, uint32_t value)'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='532' u='c' c='nfp_xpb_writel'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_mutex.c' l='87' u='c' c='nfp_cpp_mutex_init'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_mutex.c' l='92' u='c' c='nfp_cpp_mutex_init'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_mutex.c' l='321' u='c' c='nfp_cpp_mutex_unlock'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_mutex.c' l='406' u='c' c='nfp_cpp_mutex_trylock'/>
