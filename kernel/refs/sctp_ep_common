<def f='linux-4.18.y/include/net/sctp/structs.h' l='1224' ll='1251'/>
<size>120</size>
<doc f='linux-4.18.y/include/net/sctp/structs.h' l='1208'>/*
 * A common base class to bridge the implmentation view of a
 * socket (usually listening) endpoint versus an association&apos;s
 * local endpoint.
 * This common structure is useful for several purposes:
 *   1) Common interface for lookup routines.
 *	a) Subfunctions work for either endpoint or association
 *	b) Single interface to lookup allows hiding the lookup lock rather
 *	   than acquiring it externally.
 *   2) Common interface for the inbound chunk handling/state machine.
 *   3) Common object handling routines for reference counting, etc.
 *   4) Disentangle association lookup from endpoint lookup, where we
 *	do not have to find our endpoint to find our association.
 *
 */</doc>
<mbr r='sctp_ep_common::node' o='0' t='struct hlist_node'/>
<mbr r='sctp_ep_common::hashent' o='128' t='int'/>
<mbr r='sctp_ep_common::type' o='160' t='enum sctp_endpoint_type'/>
<mbr r='sctp_ep_common::refcnt' o='192' t='refcount_t'/>
<mbr r='sctp_ep_common::dead' o='224' t='bool'/>
<mbr r='sctp_ep_common::sk' o='256' t='struct sock *'/>
<mbr r='sctp_ep_common::inqueue' o='320' t='struct sctp_inq'/>
<mbr r='sctp_ep_common::bind_addr' o='768' t='struct sctp_bind_addr'/>
