<dec f='linux-4.14.y/kernel/debug/kdb/kdb_private.h' l='193' type='int kdb_main_loop(kdb_reason_t , kdb_reason_t , int , kdb_dbtrap_t , struct pt_regs * )'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_debugger.c' l='141' u='c' c='kdb_stub'/>
<def f='linux-4.14.y/kernel/debug/kdb/kdb_main.c' l='1386' ll='1441' type='int kdb_main_loop(kdb_reason_t reason, kdb_reason_t reason2, int error, kdb_dbtrap_t db_result, struct pt_regs * regs)'/>
<doc f='linux-4.14.y/kernel/debug/kdb/kdb_main.c' l='1361'>/*
 * kdb_main_loop - After initial setup and assignment of the
 *	controlling cpu, all cpus are in this loop.  One cpu is in
 *	control and will issue the kdb prompt, the others will spin
 *	until &apos;go&apos; or cpu switch.
 *
 *	To get a consistent view of the kernel stacks for all
 *	processes, this routine is invoked from the main kdb code via
 *	an architecture specific routine.  kdba_main_loop is
 *	responsible for making the kernel stacks consistent for all
 *	processes, there should be no difference between a blocked
 *	process and a running process as far as kdb is concerned.
 * Inputs:
 *	reason		The reason KDB was invoked
 *	error		The hardware-defined error code
 *	reason2		kdb&apos;s current reason code.
 *			Initially error but can change
 *			according to kdb state.
 *	db_result	Result code from break or debug point.
 *	regs		The exception frame at time of fault/breakpoint.
 *			should always be valid.
 * Returns:
 *	0	KDB was invoked for an event which it wasn&apos;t responsible
 *	1	KDB handled the event for which it was invoked.
 */</doc>
