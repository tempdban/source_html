<dec f='linux-4.14.y/drivers/acpi/acpica/acutils.h' l='422' type='acpi_status acpi_ut_acquire_read_lock(struct acpi_rw_lock * lock)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsxfeval.c' l='618' u='c' c='acpi_walk_namespace'/>
<def f='linux-4.14.y/drivers/acpi/acpica/utlock.c' l='105' ll='125' type='acpi_status acpi_ut_acquire_read_lock(struct acpi_rw_lock * lock)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/utlock.c' l='87'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ut_acquire_read_lock
 *              acpi_ut_release_read_lock
 *
 * PARAMETERS:  lock                - Pointer to a valid RW lock
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Reader interfaces for reader/writer locks. On acquisition,
 *              only the first reader acquires the write mutex. On release,
 *              only the last reader releases the write mutex. Although this
 *              algorithm can in theory starve writers, this should not be a
 *              problem with ACPICA since the subsystem is infrequently used
 *              in comparison to (for example) an I/O system.
 *
 ******************************************************************************/</doc>
<dec f='linux-4.14.y/drivers/acpi/acpica/acutils.h' l='422' type='acpi_status acpi_ut_acquire_read_lock(struct acpi_rw_lock * lock)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsxfeval.c' l='618' u='c' c='acpi_walk_namespace'/>
<def f='linux-4.14.y/drivers/acpi/acpica/utlock.c' l='105' ll='125' type='acpi_status acpi_ut_acquire_read_lock(struct acpi_rw_lock * lock)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/utlock.c' l='87'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ut_acquire_read_lock
 *              acpi_ut_release_read_lock
 *
 * PARAMETERS:  lock                - Pointer to a valid RW lock
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Reader interfaces for reader/writer locks. On acquisition,
 *              only the first reader acquires the write mutex. On release,
 *              only the last reader releases the write mutex. Although this
 *              algorithm can in theory starve writers, this should not be a
 *              problem with ACPICA since the subsystem is infrequently used
 *              in comparison to (for example) an I/O system.
 *
 ******************************************************************************/</doc>
