<def f='linux-4.14.y/include/linux/sched.h' l='372' ll='379'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/sched.h' l='320'>/*
 * The load_avg/util_avg accumulates an infinite geometric series
 * (see __update_load_avg() in kernel/sched/fair.c).
 *
 * [load_avg definition]
 *
 *   load_avg = runnable% * scale_load_down(load)
 *
 * where runnable% is the time ratio that a sched_entity is runnable.
 * For cfs_rq, it is the aggregated load_avg of all runnable and
 * blocked sched_entities.
 *
 * load_avg may also take frequency scaling into account:
 *
 *   load_avg = runnable% * scale_load_down(load) * freq%
 *
 * where freq% is the CPU frequency normalized to the highest frequency.
 *
 * [util_avg definition]
 *
 *   util_avg = running% * SCHED_CAPACITY_SCALE
 *
 * where running% is the time ratio that a sched_entity is running on
 * a CPU. For cfs_rq, it is the aggregated util_avg of all runnable
 * and blocked sched_entities.
 *
 * util_avg may also factor frequency scaling and CPU capacity scaling:
 *
 *   util_avg = running% * SCHED_CAPACITY_SCALE * freq% * capacity%
 *
 * where freq% is the same as above, and capacity% is the CPU capacity
 * normalized to the greatest capacity (due to uarch differences, etc).
 *
 * N.B., the above ratios (runnable%, running%, freq%, and capacity%)
 * themselves are in the range of [0, 1]. To do fixed point arithmetics,
 * we therefore scale them to as large a range as necessary. This is for
 * example reflected by util_avg&apos;s SCHED_CAPACITY_SCALE.
 *
 * [Overflow issue]
 *
 * The 64-bit load_sum can have 4353082796 (=2^64/47742/88761) entities
 * with the highest load (=88761), always runnable on a single cfs_rq,
 * and should not overflow as the number already hits PID_MAX_LIMIT.
 *
 * For all other cases (including 32-bit kernels), struct load_weight&apos;s
 * weight will overflow first before we do, because:
 *
 *    Max(load_avg) &lt;= Max(load.weight)
 *
 * Then it is the load_weight&apos;s responsibility to consider overflow
 * issues.
 */</doc>
<mbr r='sched_avg::last_update_time' o='0' t='u64'/>
<mbr r='sched_avg::load_sum' o='64' t='u64'/>
<mbr r='sched_avg::util_sum' o='128' t='u32'/>
<mbr r='sched_avg::period_contrib' o='160' t='u32'/>
<mbr r='sched_avg::load_avg' o='192' t='unsigned long'/>
<mbr r='sched_avg::util_avg' o='256' t='unsigned long'/>
