<dec f='linux-4.14.y/include/linux/clockchips.h' l='186' type='void clockevents_config_and_register(struct clock_event_device * dev, u32 freq, unsigned long min_delta, unsigned long max_delta)'/>
<use f='linux-4.14.y/arch/x86/kernel/apic/apic.c' l='660' u='c' c='setup_APIC_timer'/>
<use f='linux-4.14.y/arch/x86/kernel/hpet.c' l='289' u='c' c='hpet_legacy_clockevent_register'/>
<use f='linux-4.14.y/arch/x86/kernel/hpet.c' l='580' u='c' c='init_one_hpet_msi_clockevent'/>
<use f='linux-4.14.y/drivers/clocksource/i8253.c' l='183' u='c' c='clockevent_i8253_init'/>
<def f='linux-4.14.y/kernel/time/clockevents.c' l='504' ll='512' type='void clockevents_config_and_register(struct clock_event_device * dev, u32 freq, unsigned long min_delta, unsigned long max_delta)'/>
<dec f='linux-4.14.y/kernel/time/clockevents.c' l='513' type='void clockevents_config_and_register(struct clock_event_device * , u32 , unsigned long , unsigned long )'/>
<use f='linux-4.14.y/kernel/time/clockevents.c' l='513' c='clockevents_config_and_register'/>
<use f='linux-4.14.y/kernel/time/clockevents.c' l='513' u='a'/>
<use f='linux-4.14.y/kernel/time/clockevents.c' l='513' u='a'/>
<doc f='linux-4.14.y/kernel/time/clockevents.c' l='495'>/**
 * clockevents_config_and_register - Configure and register a clock event device
 * @dev:	device to register
 * @freq:	The clock frequency
 * @min_delta:	The minimum clock ticks to program in oneshot mode
 * @max_delta:	The maximum clock ticks to program in oneshot mode
 *
 * min/max_delta can be 0 for devices which do not support oneshot mode.
 */</doc>
<dec f='linux-4.14.y/include/linux/clockchips.h' l='186' type='void clockevents_config_and_register(struct clock_event_device * dev, u32 freq, unsigned long min_delta, unsigned long max_delta)'/>
<use f='linux-4.14.y/arch/x86/kernel/apic/apic.c' l='660' u='c' c='setup_APIC_timer'/>
<use f='linux-4.14.y/arch/x86/kernel/hpet.c' l='289' u='c' c='hpet_legacy_clockevent_register'/>
<use f='linux-4.14.y/arch/x86/kernel/hpet.c' l='580' u='c' c='init_one_hpet_msi_clockevent'/>
<use f='linux-4.14.y/drivers/clocksource/i8253.c' l='183' u='c' c='clockevent_i8253_init'/>
<def f='linux-4.14.y/kernel/time/clockevents.c' l='504' ll='512' type='void clockevents_config_and_register(struct clock_event_device * dev, u32 freq, unsigned long min_delta, unsigned long max_delta)'/>
<dec f='linux-4.14.y/kernel/time/clockevents.c' l='513' type='void clockevents_config_and_register(struct clock_event_device * , u32 , unsigned long , unsigned long )'/>
<use f='linux-4.14.y/kernel/time/clockevents.c' l='513' c='clockevents_config_and_register'/>
<use f='linux-4.14.y/kernel/time/clockevents.c' l='513' u='a'/>
<use f='linux-4.14.y/kernel/time/clockevents.c' l='513' u='a'/>
<doc f='linux-4.14.y/kernel/time/clockevents.c' l='495'>/**
 * clockevents_config_and_register - Configure and register a clock event device
 * @dev:	device to register
 * @freq:	The clock frequency
 * @min_delta:	The minimum clock ticks to program in oneshot mode
 * @max_delta:	The maximum clock ticks to program in oneshot mode
 *
 * min/max_delta can be 0 for devices which do not support oneshot mode.
 */</doc>
