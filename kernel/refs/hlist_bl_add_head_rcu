<def f='linux-4.14.y/include/linux/rculist_bl.h' l='99' ll='114' type='void hlist_bl_add_head_rcu(struct hlist_bl_node * n, struct hlist_bl_head * h)'/>
<doc f='linux-4.14.y/include/linux/rculist_bl.h' l='80'>/**
 * hlist_bl_add_head_rcu
 * @n: the element to add to the hash list.
 * @h: the list to add to.
 *
 * Description:
 * Adds the specified element to the specified hlist_bl,
 * while permitting racing traversals.
 *
 * The caller must take whatever precautions are necessary
 * (such as holding appropriate locks) to avoid racing
 * with another list-mutation primitive, such as hlist_bl_add_head_rcu()
 * or hlist_bl_del_rcu(), running on this same list.
 * However, it is perfectly legal to run concurrently with
 * the _rcu list-traversal primitives, such as
 * hlist_bl_for_each_entry_rcu(), used to prevent memory-consistency
 * problems on Alpha CPUs.  Regardless of the type of CPU, the
 * list-traversal primitive must be guarded by rcu_read_lock().
 */</doc>
<use f='linux-4.14.y/fs/dcache.c' l='2420' u='c' c='__d_rehash'/>
<use f='linux-4.14.y/fs/dcache.c' l='2569' u='c' c='d_alloc_parallel'/>
