<dec f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='192' type='struct ffs_buffer *'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='802' u='a' c='__ffs_epfile_read_buffer_free'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='802' u='a' c='__ffs_epfile_read_buffer_free'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='802' u='a' c='__ffs_epfile_read_buffer_free'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='802' u='a' c='__ffs_epfile_read_buffer_free'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='802' u='a' c='__ffs_epfile_read_buffer_free'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='802' u='a' c='__ffs_epfile_read_buffer_free'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='816' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='816' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='816' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='816' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='816' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='816' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='834' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='834' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='834' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='834' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='834' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='834' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='834' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='834' u='a' c='__ffs_epfile_read_buffered'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='872' u='a' c='__ffs_epfile_read_data'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='872' u='a' c='__ffs_epfile_read_data'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='872' u='a' c='__ffs_epfile_read_data'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='872' u='a' c='__ffs_epfile_read_data'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='872' u='a' c='__ffs_epfile_read_data'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='872' u='a' c='__ffs_epfile_read_data'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='872' u='a' c='__ffs_epfile_read_data'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='872' u='a' c='__ffs_epfile_read_data'/>
<offset>448</offset>
<doc f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='137'>/*
	 * Buffer for holding data from partial reads which may happen since
	 * we’re rounding user read requests to a multiple of a max packet size.
	 *
	 * The pointer is initialised with NULL value and may be set by
	 * __ffs_epfile_read_data function to point to a temporary buffer.
	 *
	 * In normal operation, calls to __ffs_epfile_read_buffered will consume
	 * data from said buffer and eventually free it.  Importantly, while the
	 * function is using the buffer, it sets the pointer to NULL.  This is
	 * all right since __ffs_epfile_read_data and __ffs_epfile_read_buffered
	 * can never run concurrently (they are synchronised by epfile-&gt;mutex)
	 * so the latter will not assign a new value to the pointer.
	 *
	 * Meanwhile ffs_func_eps_disable frees the buffer (if the pointer is
	 * valid) and sets the pointer to READ_BUFFER_DROP value.  This special
	 * value is crux of the synchronisation between ffs_func_eps_disable and
	 * __ffs_epfile_read_data.
	 *
	 * Once __ffs_epfile_read_data is about to finish it will try to set the
	 * pointer back to its old value (as described above), but seeing as the
	 * pointer is not-NULL (namely READ_BUFFER_DROP) it will instead free
	 * the buffer.
	 *
	 * == State transitions ==
	 *
	 * • ptr == NULL:  (initial state)
	 *   ◦ __ffs_epfile_read_buffer_free: go to ptr == DROP
	 *   ◦ __ffs_epfile_read_buffered:    nop
	 *   ◦ __ffs_epfile_read_data allocates temp buffer: go to ptr == buf
	 *   ◦ reading finishes:              n/a, not in ‘and reading’ state
	 * • ptr == DROP:
	 *   ◦ __ffs_epfile_read_buffer_free: nop
	 *   ◦ __ffs_epfile_read_buffered:    go to ptr == NULL
	 *   ◦ __ffs_epfile_read_data allocates temp buffer: free buf, nop
	 *   ◦ reading finishes:              n/a, not in ‘and reading’ state
	 * • ptr == buf:
	 *   ◦ __ffs_epfile_read_buffer_free: free buf, go to ptr == DROP
	 *   ◦ __ffs_epfile_read_buffered:    go to ptr == NULL and reading
	 *   ◦ __ffs_epfile_read_data:        n/a, __ffs_epfile_read_buffered
	 *                                    is always called first
	 *   ◦ reading finishes:              n/a, not in ‘and reading’ state
	 * • ptr == NULL and reading:
	 *   ◦ __ffs_epfile_read_buffer_free: go to ptr == DROP and reading
	 *   ◦ __ffs_epfile_read_buffered:    n/a, mutex is held
	 *   ◦ __ffs_epfile_read_data:        n/a, mutex is held
	 *   ◦ reading finishes and …
	 *     … all data read:               free buf, go to ptr == NULL
	 *     … otherwise:                   go to ptr == buf and reading
	 * • ptr == DROP and reading:
	 *   ◦ __ffs_epfile_read_buffer_free: nop
	 *   ◦ __ffs_epfile_read_buffered:    n/a, mutex is held
	 *   ◦ __ffs_epfile_read_data:        n/a, mutex is held
	 *   ◦ reading finishes:              free buf, go to ptr == DROP
	 */</doc>
