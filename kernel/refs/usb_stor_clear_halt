<dec f='linux-4.14.y/drivers/usb/storage/transport.h' l='91' type='int usb_stor_clear_halt(struct us_data * us, unsigned int pipe)'/>
<def f='linux-4.14.y/drivers/usb/storage/transport.c' l='243' ll='261' type='int usb_stor_clear_halt(struct us_data * us, unsigned int pipe)'/>
<dec f='linux-4.14.y/drivers/usb/storage/transport.c' l='262' type='int usb_stor_clear_halt(struct us_data * , unsigned int )'/>
<use f='linux-4.14.y/drivers/usb/storage/transport.c' l='262' c='usb_stor_clear_halt'/>
<use f='linux-4.14.y/drivers/usb/storage/transport.c' l='262' u='a'/>
<use f='linux-4.14.y/drivers/usb/storage/transport.c' l='262' u='a'/>
<use f='linux-4.14.y/drivers/usb/storage/transport.c' l='303' u='c' c='interpret_urb_result'/>
<use f='linux-4.14.y/drivers/usb/storage/transport.c' l='1069' u='c' c='usb_stor_CB_transport'/>
<use f='linux-4.14.y/drivers/usb/storage/transport.c' l='1385' u='c' c='usb_stor_reset_common'/>
<use f='linux-4.14.y/drivers/usb/storage/transport.c' l='1388' u='c' c='usb_stor_reset_common'/>
<doc f='linux-4.14.y/drivers/usb/storage/transport.c' l='230'>/*
 * This is a version of usb_clear_halt() that allows early termination and
 * doesn&apos;t read the status from the device -- this is because some devices
 * crash their internal firmware when the status is requested after a halt.
 *
 * A definitive list of these &apos;bad&apos; devices is too difficult to maintain or
 * make complete enough to be useful.  This problem was first observed on the
 * Hagiwara FlashGate DUAL unit.  However, bus traces reveal that neither
 * MacOS nor Windows checks the status after clearing a halt.
 *
 * Since many vendors in this space limit their testing to interoperability
 * with these two OSes, specification violations like this one are common.
 */</doc>
