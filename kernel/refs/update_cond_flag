<dec f='linux-4.18.y/kernel/trace/trace.h' l='1535' type='void update_cond_flag(struct trace_event_file * file)'/>
<def f='linux-4.18.y/kernel/trace/trace_events_trigger.c' l='504' ll='521' type='void update_cond_flag(struct trace_event_file * file)'/>
<use f='linux-4.18.y/kernel/trace/trace_events_trigger.c' l='560' u='c' c='register_trigger'/>
<use f='linux-4.18.y/kernel/trace/trace_events_trigger.c' l='563' u='c' c='register_trigger'/>
<use f='linux-4.18.y/kernel/trace/trace_events_trigger.c' l='594' u='c' c='unregister_trigger'/>
<use f='linux-4.18.y/kernel/trace/trace_events_trigger.c' l='1522' u='c' c='event_enable_register_trigger'/>
<use f='linux-4.18.y/kernel/trace/trace_events_trigger.c' l='1525' u='c' c='event_enable_register_trigger'/>
<use f='linux-4.18.y/kernel/trace/trace_events_trigger.c' l='1551' u='c' c='event_enable_unregister_trigger'/>
<doc f='linux-4.18.y/kernel/trace/trace_events_trigger.c' l='494'>/**
 * update_cond_flag - Set or reset the TRIGGER_COND bit
 * @file: The trace_event_file associated with the event
 *
 * If an event has triggers and any of those triggers has a filter or
 * a post_trigger, trigger invocation needs to be deferred until after
 * the current event has logged its data, and the event should have
 * its TRIGGER_COND bit set, otherwise the TRIGGER_COND bit should be
 * cleared.
 */</doc>
