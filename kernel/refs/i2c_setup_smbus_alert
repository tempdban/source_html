<dec f='linux-4.18.y/include/linux/i2c-smbus.h' l='48' type='struct i2c_client * i2c_setup_smbus_alert(struct i2c_adapter * adapter, struct i2c_smbus_alert_setup * setup)'/>
<def f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='661' ll='670' type='struct i2c_client * i2c_setup_smbus_alert(struct i2c_adapter * adapter, struct i2c_smbus_alert_setup * setup)'/>
<dec f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='671' type='struct i2c_client * i2c_setup_smbus_alert(struct i2c_adapter * , struct i2c_smbus_alert_setup * )'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='671' c='i2c_setup_smbus_alert'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='671' u='a'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='671' u='a'/>
<doc f='linux-4.18.y/drivers/i2c/i2c-core-smbus.c' l='641'>/**
 * i2c_setup_smbus_alert - Setup SMBus alert support
 * @adapter: the target adapter
 * @setup: setup data for the SMBus alert handler
 * Context: can sleep
 *
 * Setup handling of the SMBus alert protocol on a given I2C bus segment.
 *
 * Handling can be done either through our IRQ handler, or by the
 * adapter (from its handler, periodic polling, or whatever).
 *
 * NOTE that if we manage the IRQ, we *MUST* know if it&apos;s level or
 * edge triggered in order to hand it to the workqueue correctly.
 * If triggering the alert seems to wedge the system, you probably
 * should have said it&apos;s level triggered.
 *
 * This returns the ara client, which should be saved for later use with
 * i2c_handle_smbus_alert() and ultimately i2c_unregister_device(); or NULL
 * to indicate an error.
 */</doc>
