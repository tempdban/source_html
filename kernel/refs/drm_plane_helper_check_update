<dec f='linux-4.14.y/include/drm/drm_plane_helper.h' l='46' type='int drm_plane_helper_check_update(struct drm_plane * plane, struct drm_crtc * crtc, struct drm_framebuffer * fb, struct drm_rect * src, struct drm_rect * dest, const struct drm_rect * clip, unsigned int rotation, int min_scale, int max_scale, bool can_position, bool can_update_disabled, bool * visible)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='220' ll='262' type='int drm_plane_helper_check_update(struct drm_plane * plane, struct drm_crtc * crtc, struct drm_framebuffer * fb, struct drm_rect * src, struct drm_rect * dst, const struct drm_rect * clip, unsigned int rotation, int min_scale, int max_scale, bool can_position, bool can_update_disabled, bool * visible)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='263' type='int drm_plane_helper_check_update(struct drm_plane * , struct drm_crtc * , struct drm_framebuffer * , struct drm_rect * , struct drm_rect * , const struct drm_rect * , unsigned int , int , int , bool , bool , bool * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='263' c='drm_plane_helper_check_update'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='263' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='263' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='337' u='c' c='drm_primary_helper_update'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='193'>/**
 * drm_plane_helper_check_update() - Check plane update for validity
 * @plane: plane object to update
 * @crtc: owning CRTC of owning plane
 * @fb: framebuffer to flip onto plane
 * @src: source coordinates in 16.16 fixed point
 * @dst: integer destination coordinates
 * @clip: integer clipping coordinates
 * @rotation: plane rotation
 * @min_scale: minimum @src:@dest scaling factor in 16.16 fixed point
 * @max_scale: maximum @src:@dest scaling factor in 16.16 fixed point
 * @can_position: is it legal to position the plane such that it
 *                doesn&apos;t cover the entire crtc?  This will generally
 *                only be false for primary planes.
 * @can_update_disabled: can the plane be updated while the crtc
 *                       is disabled?
 * @visible: output parameter indicating whether plane is still visible after
 *           clipping
 *
 * Checks that a desired plane update is valid.  Drivers that provide
 * their own plane handling rather than helper-provided implementations may
 * still wish to call this function to avoid duplication of error checking
 * code.
 *
 * RETURNS:
 * Zero if update appears valid, error code on failure
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='461' u='c' c='vmw_du_primary_plane_atomic_check'/>
