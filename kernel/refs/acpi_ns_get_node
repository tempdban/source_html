<dec f='linux-4.14.y/drivers/acpi/acpica/acnamesp.h' l='310' type='acpi_status acpi_ns_get_node(struct acpi_namespace_node * prefix_node, const char * external_pathname, u32 flags, struct acpi_namespace_node ** out_node)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsaccess.c' l='254' u='c' c='acpi_ns_root_initialize'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nseval.c' l='104' u='c' c='acpi_ns_evaluate'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsrepair2.c' l='759' u='c' c='acpi_ns_repair_TSS'/>
<def f='linux-4.14.y/drivers/acpi/acpica/nsutils.c' l='758' ll='777' type='acpi_status acpi_ns_get_node(struct acpi_namespace_node * prefix_node, const char * pathname, u32 flags, struct acpi_namespace_node ** return_node)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/nsutils.c' l='736'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ns_get_node
 *
 * PARAMETERS:  *pathname   - Name to be found, in external (ASL) format. The
 *                            \ (backslash) and ^ (carat) prefixes, and the
 *                            . (period) to separate segments are supported.
 *              prefix_node  - Root of subtree to be searched, or NS_ALL for the
 *                            root of the name space. If Name is fully
 *                            qualified (first s8 is &apos;\&apos;), the passed value
 *                            of Scope will not be accessed.
 *              flags       - Used to indicate whether to perform upsearch or
 *                            not.
 *              return_node - Where the Node is returned
 *
 * DESCRIPTION: Look up a name relative to a given scope and return the
 *              corresponding Node. NOTE: Scope can be null.
 *
 * MUTEX:       Locks namespace
 *
 ******************************************************************************/</doc>
<use f='linux-4.14.y/drivers/acpi/acpica/nsxfname.c' l='132' u='c' c='acpi_get_handle'/>
<use f='linux-4.14.y/drivers/acpi/acpica/uterror.c' l='275' u='c' c='acpi_ut_method_error'/>
<dec f='linux-4.14.y/drivers/acpi/acpica/acnamesp.h' l='310' type='acpi_status acpi_ns_get_node(struct acpi_namespace_node * prefix_node, const char * external_pathname, u32 flags, struct acpi_namespace_node ** out_node)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsaccess.c' l='254' u='c' c='acpi_ns_root_initialize'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nseval.c' l='104' u='c' c='acpi_ns_evaluate'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsrepair2.c' l='759' u='c' c='acpi_ns_repair_TSS'/>
<def f='linux-4.14.y/drivers/acpi/acpica/nsutils.c' l='758' ll='777' type='acpi_status acpi_ns_get_node(struct acpi_namespace_node * prefix_node, const char * pathname, u32 flags, struct acpi_namespace_node ** return_node)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/nsutils.c' l='736'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ns_get_node
 *
 * PARAMETERS:  *pathname   - Name to be found, in external (ASL) format. The
 *                            \ (backslash) and ^ (carat) prefixes, and the
 *                            . (period) to separate segments are supported.
 *              prefix_node  - Root of subtree to be searched, or NS_ALL for the
 *                            root of the name space. If Name is fully
 *                            qualified (first s8 is &apos;\&apos;), the passed value
 *                            of Scope will not be accessed.
 *              flags       - Used to indicate whether to perform upsearch or
 *                            not.
 *              return_node - Where the Node is returned
 *
 * DESCRIPTION: Look up a name relative to a given scope and return the
 *              corresponding Node. NOTE: Scope can be null.
 *
 * MUTEX:       Locks namespace
 *
 ******************************************************************************/</doc>
<use f='linux-4.14.y/drivers/acpi/acpica/nsxfname.c' l='132' u='c' c='acpi_get_handle'/>
<use f='linux-4.14.y/drivers/acpi/acpica/uterror.c' l='275' u='c' c='acpi_ut_method_error'/>
