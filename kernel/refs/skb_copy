<dec f='linux-4.14.y/include/linux/skbuff.h' l='1023' type='struct sk_buff * skb_copy(const struct sk_buff * skb, gfp_t priority)'/>
<use f='linux-4.14.y/include/linux/skbuff.h' l='1553' u='c' c='skb_unshare'/>
<use f='linux-4.14.y/kernel/audit.c' l='766' u='c' c='kauditd_send_multicast_skb'/>
<use f='linux-4.14.y/net/bridge/br_forward.c' l='247' u='c' c='maybe_deliver_addr'/>
<def f='linux-4.14.y/net/core/skbuff.c' l='1340' ll='1360' type='struct sk_buff * skb_copy(const struct sk_buff * skb, gfp_t gfp_mask)'/>
<dec f='linux-4.14.y/net/core/skbuff.c' l='1361' type='struct sk_buff * skb_copy(const struct sk_buff * , gfp_t )'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1361' c='skb_copy'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1361' u='a'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1361' u='a'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4111' u='c' c='skb_cow_data'/>
<doc f='linux-4.14.y/net/core/skbuff.c' l='1323'>/**
 *	skb_copy	-	create private copy of an sk_buff
 *	@skb: buffer to copy
 *	@gfp_mask: allocation priority
 *
 *	Make a copy of both an &amp;sk_buff and its data. This is used when the
 *	caller wishes to modify the data and needs a private copy of the
 *	data to alter. Returns %NULL on failure or the pointer to the buffer
 *	on success. The returned buffer has a reference count of 1.
 *
 *	As by-product this function converts non-linear &amp;sk_buff to linear
 *	one, so that &amp;sk_buff becomes completely private and caller is allowed
 *	to modify all the data of returned buffer. This means that this
 *	function is not recommended for use in circumstances when only
 *	header is going to be modified. Use pskb_copy() instead.
 */</doc>
<use f='linux-4.14.y/net/ipv4/tcp_output.c' l='3129' u='c' c='tcp_send_synack'/>
