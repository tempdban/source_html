<def f='linux-4.18.y/include/linux/ptr_ring.h' l='198' ll='203' type='bool __ptr_ring_empty(struct ptr_ring * r)'/>
<use f='linux-4.18.y/include/linux/ptr_ring.h' l='210' u='c' c='ptr_ring_empty'/>
<use f='linux-4.18.y/include/linux/ptr_ring.h' l='221' u='c' c='ptr_ring_empty_irq'/>
<use f='linux-4.18.y/include/linux/ptr_ring.h' l='233' u='c' c='ptr_ring_empty_any'/>
<use f='linux-4.18.y/include/linux/ptr_ring.h' l='244' u='c' c='ptr_ring_empty_bh'/>
<use f='linux-4.18.y/include/linux/skb_array.h' l='72' u='c' c='__skb_array_empty'/>
<doc f='linux-4.18.y/include/linux/ptr_ring.h' l='180'>/*
 * Test ring empty status without taking any locks.
 *
 * NB: This is only safe to call if ring is never resized.
 *
 * However, if some other CPU consumes ring entries at the same time, the value
 * returned is not guaranteed to be correct.
 *
 * In this case - to avoid incorrectly detecting the ring
 * as empty - the CPU consuming the ring entries is responsible
 * for either consuming all ring entries until the ring is empty,
 * or synchronizing with some other CPU and causing it to
 * re-test __ptr_ring_empty and/or consume the ring enteries
 * after the synchronization point.
 *
 * Note: callers invoking this in a loop must use a compiler barrier,
 * for example cpu_relax().
 */</doc>
