<dec f='linux-4.14.y/arch/x86/include/asm/uaccess_64.h' l='172' type='long __copy_user_nocache(void * dst, const void * src, unsigned int size, int zerorest)'/>
<use f='linux-4.14.y/arch/x86/include/asm/uaccess_64.h' l='184' u='c' c='__copy_from_user_inatomic_nocache'/>
<def f='linux-4.14.y/arch/x86/lib/copy_user_64.S' l='205' macro='1' type='int'/>
<doc f='linux-4.14.y/arch/x86/lib/copy_user_64.S' l='196'>/*
 * copy_user_nocache - Uncached memory copy with exception handling
 * This will force destination out of cache for more performance.
 *
 * Note: Cached memory copy is used when destination or size is not
 * naturally aligned. That is:
 *  - Require 8-byte alignment when size is 8 bytes or larger.
 *  - Require 4-byte alignment when size is 4 bytes.
 */</doc>
<use f='linux-4.14.y/arch/x86/lib/usercopy_64.c' l='109' u='c' c='__copy_user_flushcache'/>
<dec f='linux-4.14.y/arch/x86/include/asm/uaccess_64.h' l='172' type='long __copy_user_nocache(void * dst, const void * src, unsigned int size, int zerorest)'/>
<use f='linux-4.14.y/arch/x86/include/asm/uaccess_64.h' l='184' u='c' c='__copy_from_user_inatomic_nocache'/>
<def f='linux-4.14.y/arch/x86/lib/copy_user_64.S' l='205' macro='1' type='int'/>
<doc f='linux-4.14.y/arch/x86/lib/copy_user_64.S' l='196'>/*
 * copy_user_nocache - Uncached memory copy with exception handling
 * This will force destination out of cache for more performance.
 *
 * Note: Cached memory copy is used when destination or size is not
 * naturally aligned. That is:
 *  - Require 8-byte alignment when size is 8 bytes or larger.
 *  - Require 4-byte alignment when size is 4 bytes.
 */</doc>
<use f='linux-4.14.y/arch/x86/lib/usercopy_64.c' l='109' u='c' c='__copy_user_flushcache'/>
