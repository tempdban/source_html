<dec f='linux-4.18.y/include/linux/assoc_array.h' l='79' type='struct assoc_array_edit * assoc_array_delete(struct assoc_array * array, const struct assoc_array_ops * ops, const void * index_key)'/>
<def f='linux-4.18.y/lib/assoc_array.c' l='1081' ll='1256' type='struct assoc_array_edit * assoc_array_delete(struct assoc_array * array, const struct assoc_array_ops * ops, const void * index_key)'/>
<doc f='linux-4.18.y/lib/assoc_array.c' l='1062'>/**
 * assoc_array_delete - Script deletion of an object from an associative array
 * @array: The array to search.
 * @ops: The operations to use.
 * @index_key: The key to the object.
 *
 * Precalculate and preallocate a script for the deletion of an object from an
 * associative array.  This results in an edit script that can either be
 * applied or cancelled.
 *
 * The function returns a pointer to an edit script if the object was found,
 * NULL if the object was not found or -ENOMEM.
 *
 * The caller should lock against other modifications and must continue to hold
 * the lock until assoc_array_apply_edit() has been called.
 *
 * Accesses to the tree may take place concurrently with this function,
 * provided they hold the RCU read lock.
 */</doc>
<use f='linux-4.18.y/security/keys/keyring.c' l='1412' u='c' c='key_unlink'/>
