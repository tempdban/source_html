<dec f='linux-4.14.y/include/linux/fs.h' l='3164' type='int setattr_prepare(struct dentry * , struct iattr * )'/>
<def f='linux-4.14.y/fs/attr.c' l='35' ll='96' type='int setattr_prepare(struct dentry * dentry, struct iattr * attr)'/>
<dec f='linux-4.14.y/fs/attr.c' l='97' type='int setattr_prepare(struct dentry * , struct iattr * )'/>
<use f='linux-4.14.y/fs/attr.c' l='97' c='setattr_prepare'/>
<use f='linux-4.14.y/fs/attr.c' l='97' u='a'/>
<use f='linux-4.14.y/fs/attr.c' l='97' u='a'/>
<doc f='linux-4.14.y/fs/attr.c' l='21'>/**
 * setattr_prepare - check if attribute changes to a dentry are allowed
 * @dentry:	dentry to check
 * @attr:	attributes to change
 *
 * Check if we are allowed to change the attributes contained in @attr
 * in the given dentry.  This includes the normal unix access permission
 * checks, as well as checks for rlimits and others. The function also clears
 * SGID bit from mode if user is not allowed to set it. Also file capabilities
 * and IMA extended attributes are cleared if ATTR_KILL_PRIV is set.
 *
 * Should be called as the first thing in -&gt;setattr implementations,
 * possibly after taking additional locks.
 */</doc>
<use f='linux-4.14.y/fs/ext4/inode.c' l='5335' u='c' c='ext4_setattr'/>
<use f='linux-4.14.y/fs/kernfs/inode.c' l='122' u='c' c='kernfs_iop_setattr'/>
<use f='linux-4.14.y/fs/libfs.c' l='404' u='c' c='simple_setattr'/>
<use f='linux-4.14.y/fs/proc/base.c' l='674' u='c' c='proc_setattr'/>
<use f='linux-4.14.y/fs/proc/generic.c' l='111' u='c' c='proc_notify_change'/>
<use f='linux-4.14.y/fs/proc/proc_sysctl.c' l='813' u='c' c='proc_sys_setattr'/>
<use f='linux-4.14.y/fs/udf/file.c' l='262' u='c' c='udf_setattr'/>
<use f='linux-4.14.y/mm/shmem.c' l='1008' u='c' c='shmem_setattr'/>
<dec f='linux-4.14.y/include/linux/fs.h' l='3164' type='int setattr_prepare(struct dentry * , struct iattr * )'/>
<def f='linux-4.14.y/fs/attr.c' l='35' ll='96' type='int setattr_prepare(struct dentry * dentry, struct iattr * attr)'/>
<dec f='linux-4.14.y/fs/attr.c' l='97' type='int setattr_prepare(struct dentry * , struct iattr * )'/>
<use f='linux-4.14.y/fs/attr.c' l='97' c='setattr_prepare'/>
<use f='linux-4.14.y/fs/attr.c' l='97' u='a'/>
<use f='linux-4.14.y/fs/attr.c' l='97' u='a'/>
<doc f='linux-4.14.y/fs/attr.c' l='21'>/**
 * setattr_prepare - check if attribute changes to a dentry are allowed
 * @dentry:	dentry to check
 * @attr:	attributes to change
 *
 * Check if we are allowed to change the attributes contained in @attr
 * in the given dentry.  This includes the normal unix access permission
 * checks, as well as checks for rlimits and others. The function also clears
 * SGID bit from mode if user is not allowed to set it. Also file capabilities
 * and IMA extended attributes are cleared if ATTR_KILL_PRIV is set.
 *
 * Should be called as the first thing in -&gt;setattr implementations,
 * possibly after taking additional locks.
 */</doc>
<use f='linux-4.14.y/fs/ext4/inode.c' l='5335' u='c' c='ext4_setattr'/>
<use f='linux-4.14.y/fs/f2fs/file.c' l='731' u='c' c='f2fs_setattr'/>
<use f='linux-4.14.y/fs/fat/file.c' l='454' u='c' c='fat_setattr'/>
<use f='linux-4.14.y/fs/fuse/dir.c' l='1627' u='c' c='fuse_do_setattr'/>
<use f='linux-4.14.y/fs/hugetlbfs/inode.c' l='681' u='c' c='hugetlbfs_setattr'/>
<use f='linux-4.14.y/fs/kernfs/inode.c' l='122' u='c' c='kernfs_iop_setattr'/>
<use f='linux-4.14.y/fs/libfs.c' l='404' u='c' c='simple_setattr'/>
<use f='linux-4.14.y/fs/ntfs/inode.c' l='2896' u='c' c='ntfs_setattr'/>
<use f='linux-4.14.y/fs/overlayfs/inode.c' l='33' u='c' c='ovl_setattr'/>
<use f='linux-4.14.y/fs/proc/base.c' l='674' u='c' c='proc_setattr'/>
<use f='linux-4.14.y/fs/proc/generic.c' l='111' u='c' c='proc_notify_change'/>
<use f='linux-4.14.y/fs/proc/proc_sysctl.c' l='813' u='c' c='proc_sys_setattr'/>
<use f='linux-4.14.y/fs/udf/file.c' l='262' u='c' c='udf_setattr'/>
<use f='linux-4.14.y/mm/shmem.c' l='1008' u='c' c='shmem_setattr'/>
