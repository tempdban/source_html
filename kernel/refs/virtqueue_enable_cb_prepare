<dec f='linux-4.18.y/include/linux/virtio.h' l='76' type='unsigned int virtqueue_enable_cb_prepare(struct virtqueue * vq)'/>
<use f='linux-4.18.y/drivers/net/virtio_net.c' l='304' u='c' c='virtqueue_napi_complete'/>
<def f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='795' ll='815' type='unsigned int virtqueue_enable_cb_prepare(struct virtqueue * _vq)'/>
<dec f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='816' type='unsigned int virtqueue_enable_cb_prepare(struct virtqueue * )'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='816' c='virtqueue_enable_cb_prepare'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='816' u='a'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='816' u='a'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='849' u='c' c='virtqueue_enable_cb'/>
<doc f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='783'>/**
 * virtqueue_enable_cb_prepare - restart callbacks after disable_cb
 * @vq: the struct virtqueue we&apos;re talking about.
 *
 * This re-enables callbacks; it returns current queue state
 * in an opaque unsigned value. This value should be later tested by
 * virtqueue_poll, to detect a possible race between the driver checking for
 * more work, and enabling callbacks.
 *
 * Caller must ensure we don&apos;t call this with other virtqueue
 * operations at the same time (except where noted).
 */</doc>
