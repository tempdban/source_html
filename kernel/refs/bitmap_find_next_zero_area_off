<dec f='linux-4.18.y/include/linux/bitmap.h' l='137' type='unsigned long bitmap_find_next_zero_area_off(unsigned long * map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask, unsigned long align_offset)'/>
<use f='linux-4.18.y/include/linux/bitmap.h' l='163' u='c' c='bitmap_find_next_zero_area'/>
<def f='linux-4.18.y/lib/bitmap.c' l='308' ll='331' type='unsigned long bitmap_find_next_zero_area_off(unsigned long * map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask, unsigned long align_offset)'/>
<dec f='linux-4.18.y/lib/bitmap.c' l='332' type='unsigned long bitmap_find_next_zero_area_off(unsigned long * , unsigned long , unsigned long , unsigned int , unsigned long , unsigned long )'/>
<use f='linux-4.18.y/lib/bitmap.c' l='332' c='bitmap_find_next_zero_area_off'/>
<use f='linux-4.18.y/lib/bitmap.c' l='332' u='a'/>
<use f='linux-4.18.y/lib/bitmap.c' l='332' u='a'/>
<doc f='linux-4.18.y/lib/bitmap.c' l='295'>/**
 * bitmap_find_next_zero_area_off - find a contiguous aligned zero area
 * @map: The address to base the search on
 * @size: The bitmap size in bits
 * @start: The bitnumber to start searching at
 * @nr: The number of zeroed bits we&apos;re looking for
 * @align_mask: Alignment mask for zero area
 * @align_offset: Alignment offset for zero area.
 *
 * The @align_mask should be one less than a power of 2; the effect is that
 * the bit offset of all zero areas this function finds plus @align_offset
 * is multiple of that power of 2.
 */</doc>
