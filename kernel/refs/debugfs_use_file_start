<dec f='linux-4.14.y/include/linux/debugfs.h' l='110' type='int debugfs_use_file_start(const struct dentry * dentry, int * srcu_idx)'/>
<def f='linux-4.14.y/fs/debugfs/file.c' l='72' ll='80' type='int debugfs_use_file_start(const struct dentry * dentry, int * srcu_idx)'/>
<dec f='linux-4.14.y/fs/debugfs/file.c' l='81' type='int debugfs_use_file_start(const struct dentry * , int * )'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='81' c='debugfs_use_file_start'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='81' u='a'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='81' u='a'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='106' u='c' c='open_proxy_open'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='147' u='c' c='full_proxy_llseek'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='147' u='c' c='full_proxy_read'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='147' u='c' c='full_proxy_write'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='147' u='c' c='full_proxy_unlocked_ioctl'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='180' u='c' c='full_proxy_poll'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='235' u='c' c='full_proxy_open'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='291' u='c' c='debugfs_attr_read'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='305' u='c' c='debugfs_attr_write'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='744' u='c' c='debugfs_read_file_bool'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='776' u='c' c='debugfs_write_file_bool'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='846' u='c' c='read_file_blob'/>
<doc f='linux-4.14.y/fs/debugfs/file.c' l='51'>/**
 * debugfs_use_file_start - mark the beginning of file data access
 * @dentry: the dentry object whose data is being accessed.
 * @srcu_idx: a pointer to some memory to store a SRCU index in.
 *
 * Up to a matching call to debugfs_use_file_finish(), any
 * successive call into the file removing functions debugfs_remove()
 * and debugfs_remove_recursive() will block. Since associated private
 * file data may only get freed after a successful return of any of
 * the removal functions, you may safely access it after a successful
 * call to debugfs_use_file_start() without worrying about
 * lifetime issues.
 *
 * If -%EIO is returned, the file has already been removed and thus,
 * it is not safe to access any of its data. If, on the other hand,
 * it is allowed to access the file data, zero is returned.
 *
 * Regardless of the return code, any call to
 * debugfs_use_file_start() must be followed by a matching call
 * to debugfs_use_file_finish().
 */</doc>
