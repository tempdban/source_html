<dec f='linux-4.14.y/include/drm/drm_file.h' l='363' type='int drm_open(struct inode * inode, struct file * filp)'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_drv.c' l='73'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_drv.c' l='73'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_drv.c' l='124'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_drv.c' l='124'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='137' ll='169' type='int drm_open(struct inode * inode, struct file * filp)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='170' type='int drm_open(struct inode * , struct file * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='170' c='drm_open'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='170' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='170' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='124'>/**
 * drm_open - open method for DRM file
 * @inode: device inode
 * @filp: file pointer.
 *
 * This function must be used by drivers as their &amp;file_operations.open method.
 * It looks up the correct DRM device and instantiates all the per-file
 * resources for it. It also calls the &amp;drm_driver.open driver callback.
 *
 * RETURNS:
 *
 * 0 on success or negative errno value on falure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='127'/>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='127'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_drv.c' l='105'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_drv.c' l='105'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1513'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1513'/>
<dec f='linux-4.14.y/include/drm/drm_file.h' l='363' type='int drm_open(struct inode * inode, struct file * filp)'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_drv.c' l='73'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_drv.c' l='73'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_drv.c' l='124'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_drv.c' l='124'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='137' ll='169' type='int drm_open(struct inode * inode, struct file * filp)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='170' type='int drm_open(struct inode * , struct file * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='170' c='drm_open'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='170' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='170' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_file.c' l='124'>/**
 * drm_open - open method for DRM file
 * @inode: device inode
 * @filp: file pointer.
 *
 * This function must be used by drivers as their &amp;file_operations.open method.
 * It looks up the correct DRM device and instantiates all the per-file
 * resources for it. It also calls the &amp;drm_driver.open driver callback.
 *
 * RETURNS:
 *
 * 0 on success or negative errno value on falure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='127'/>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='127'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_drv.c' l='105'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_drv.c' l='105'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1513'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1513'/>
