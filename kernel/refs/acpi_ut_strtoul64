<dec f='linux-4.14.y/drivers/acpi/acpica/acutils.h' l='200' type='acpi_status acpi_ut_strtoul64(char * string, u32 flags, u64 * ret_integer)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/exconvrt.c' l='127' u='c' c='acpi_ex_convert_to_integer'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsconvert.c' l='81' u='c' c='acpi_ns_convert_to_integer'/>
<def f='linux-4.14.y/drivers/acpi/acpica/utstrtoul64.c' l='165' ll='243' type='acpi_status acpi_ut_strtoul64(char * string, u32 flags, u64 * return_value)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/utstrtoul64.c' l='119'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ut_strtoul64
 *
 * PARAMETERS:  string                  - Null terminated input string
 *              flags                   - Conversion info, see below
 *              return_value            - Where the converted integer is
 *                                        returned
 *
 * RETURN:      Status and Converted value
 *
 * DESCRIPTION: Convert a string into an unsigned value. Performs either a
 *              32-bit or 64-bit conversion, depending on the input integer
 *              size in Flags (often the current mode of the interpreter).
 *
 * Values for Flags:
 *      ACPI_STRTOUL_32BIT      - Max integer value is 32 bits
 *      ACPI_STRTOUL_64BIT      - Max integer value is 64 bits
 *      ACPI_STRTOUL_BASE16     - Input string is hexadecimal. Default
 *                                is 10/16 based on string prefix (0x).
 *
 * NOTES:
 *   Negative numbers are not supported, as they are not supported by ACPI.
 *
 *   Supports only base 16 or base 10 strings/values. Does not
 *   support Octal strings, as these are not supported by ACPI.
 *
 * Current users of this support:
 *
 *  interpreter - Implicit and explicit conversions, GPE method names
 *  debugger    - Command line input string conversion
 *  iASL        - Main parser, conversion of constants to integers
 *  iASL        - Data Table Compiler parser (constant math expressions)
 *  iASL        - Preprocessor (constant math expressions)
 *  acpi_dump   - Input table addresses
 *  acpi_exec   - Testing of the acpi_ut_strtoul64 function
 *
 * Note concerning callers:
 *   acpi_gbl_integer_byte_width can be used to set the 32/64 limit. If used,
 *   this global should be set to the proper width. For the core ACPICA code,
 *   this width depends on the DSDT version. For iASL, the default byte
 *   width is always 8 for the parser, but error checking is performed later
 *   to flag cases where a 64-bit constant is defined in a 32-bit DSDT/SSDT.
 *
 ******************************************************************************/</doc>
<dec f='linux-4.14.y/drivers/acpi/acpica/acutils.h' l='200' type='acpi_status acpi_ut_strtoul64(char * string, u32 flags, u64 * ret_integer)'/>
<use f='linux-4.14.y/drivers/acpi/acpica/exconvrt.c' l='127' u='c' c='acpi_ex_convert_to_integer'/>
<use f='linux-4.14.y/drivers/acpi/acpica/nsconvert.c' l='81' u='c' c='acpi_ns_convert_to_integer'/>
<def f='linux-4.14.y/drivers/acpi/acpica/utstrtoul64.c' l='165' ll='243' type='acpi_status acpi_ut_strtoul64(char * string, u32 flags, u64 * return_value)'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/utstrtoul64.c' l='119'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ut_strtoul64
 *
 * PARAMETERS:  string                  - Null terminated input string
 *              flags                   - Conversion info, see below
 *              return_value            - Where the converted integer is
 *                                        returned
 *
 * RETURN:      Status and Converted value
 *
 * DESCRIPTION: Convert a string into an unsigned value. Performs either a
 *              32-bit or 64-bit conversion, depending on the input integer
 *              size in Flags (often the current mode of the interpreter).
 *
 * Values for Flags:
 *      ACPI_STRTOUL_32BIT      - Max integer value is 32 bits
 *      ACPI_STRTOUL_64BIT      - Max integer value is 64 bits
 *      ACPI_STRTOUL_BASE16     - Input string is hexadecimal. Default
 *                                is 10/16 based on string prefix (0x).
 *
 * NOTES:
 *   Negative numbers are not supported, as they are not supported by ACPI.
 *
 *   Supports only base 16 or base 10 strings/values. Does not
 *   support Octal strings, as these are not supported by ACPI.
 *
 * Current users of this support:
 *
 *  interpreter - Implicit and explicit conversions, GPE method names
 *  debugger    - Command line input string conversion
 *  iASL        - Main parser, conversion of constants to integers
 *  iASL        - Data Table Compiler parser (constant math expressions)
 *  iASL        - Preprocessor (constant math expressions)
 *  acpi_dump   - Input table addresses
 *  acpi_exec   - Testing of the acpi_ut_strtoul64 function
 *
 * Note concerning callers:
 *   acpi_gbl_integer_byte_width can be used to set the 32/64 limit. If used,
 *   this global should be set to the proper width. For the core ACPICA code,
 *   this width depends on the DSDT version. For iASL, the default byte
 *   width is always 8 for the parser, but error checking is performed later
 *   to flag cases where a 64-bit constant is defined in a 32-bit DSDT/SSDT.
 *
 ******************************************************************************/</doc>
