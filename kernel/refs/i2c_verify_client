<dec f='linux-4.14.y/include/linux/i2c.h' l='257' type='struct i2c_client * i2c_verify_client(struct device * dev)'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-acpi.c' l='332' u='c' c='i2c_acpi_find_client_by_adev'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='100' u='c' c='i2c_device_match'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='324' u='c' c='i2c_device_probe'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='423' u='c' c='i2c_device_remove'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='446' u='c' c='i2c_device_shutdown'/>
<def f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='517' ll='522' type='struct i2c_client * i2c_verify_client(struct device * dev)'/>
<dec f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='523' type='struct i2c_client * i2c_verify_client(struct device * )'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='523' c='i2c_verify_client'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='523' u='a'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='523' u='a'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='580' u='c' c='__i2c_check_addr_busy'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1411' u='c' c='__unregister_client'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1419' u='c' c='__unregister_dummy'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1683' u='c' c='i2c_cmd'/>
<doc f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='508'>/**
 * i2c_verify_client - return parameter as i2c_client, or NULL
 * @dev: device, probably from some driver model iterator
 *
 * When traversing the driver model tree, perhaps using driver model
 * iterators like @device_for_each_child(), you can&apos;t assume very much
 * about the nodes you find.  Use this function to avoid oopses caused
 * by wrongly treating some non-I2C device as an i2c_client.
 */</doc>
<dec f='linux-4.14.y/include/linux/i2c.h' l='257' type='struct i2c_client * i2c_verify_client(struct device * dev)'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-acpi.c' l='332' u='c' c='i2c_acpi_find_client_by_adev'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='100' u='c' c='i2c_device_match'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='324' u='c' c='i2c_device_probe'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='423' u='c' c='i2c_device_remove'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='446' u='c' c='i2c_device_shutdown'/>
<def f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='517' ll='522' type='struct i2c_client * i2c_verify_client(struct device * dev)'/>
<dec f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='523' type='struct i2c_client * i2c_verify_client(struct device * )'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='523' c='i2c_verify_client'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='523' u='a'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='523' u='a'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='580' u='c' c='__i2c_check_addr_busy'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1411' u='c' c='__unregister_client'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1419' u='c' c='__unregister_dummy'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1683' u='c' c='i2c_cmd'/>
<doc f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='508'>/**
 * i2c_verify_client - return parameter as i2c_client, or NULL
 * @dev: device, probably from some driver model iterator
 *
 * When traversing the driver model tree, perhaps using driver model
 * iterators like @device_for_each_child(), you can&apos;t assume very much
 * about the nodes you find.  Use this function to avoid oopses caused
 * by wrongly treating some non-I2C device as an i2c_client.
 */</doc>
