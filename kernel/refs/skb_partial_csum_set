<dec f='linux-4.18.y/include/linux/skbuff.h' l='4113' type='bool skb_partial_csum_set(struct sk_buff * skb, u16 start, u16 off)'/>
<use f='linux-4.18.y/include/linux/virtio_net.h' l='40' u='c' c='virtio_net_hdr_to_skb'/>
<def f='linux-4.18.y/net/core/skbuff.c' l='4448' ll='4461' type='bool skb_partial_csum_set(struct sk_buff * skb, u16 start, u16 off)'/>
<dec f='linux-4.18.y/net/core/skbuff.c' l='4462' type='bool skb_partial_csum_set(struct sk_buff * , u16 , u16 )'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='4462' c='skb_partial_csum_set'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='4462' u='a'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='4462' u='a'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='4497' u='c' c='skb_checksum_setup_ip'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='4506' u='c' c='skb_checksum_setup_ip'/>
<doc f='linux-4.18.y/net/core/skbuff.c' l='4436'>/**
 * skb_partial_csum_set - set up and verify partial csum values for packet
 * @skb: the skb to set
 * @start: the number of bytes after skb-&gt;data to start checksumming.
 * @off: the offset from start to place the checksum.
 *
 * For untrusted partially-checksummed packets, we need to make sure the values
 * for skb-&gt;csum_start and skb-&gt;csum_offset are valid so we don&apos;t oops.
 *
 * This function checks and sets those values and skb-&gt;ip_summed: if this
 * returns false you should drop the packet.
 */</doc>
