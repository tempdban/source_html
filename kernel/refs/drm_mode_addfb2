<dec f='linux-4.14.y/drivers/gpu/drm/drm_crtc_internal.h' l='166' type='int drm_mode_addfb2(struct drm_device * dev, void * data, struct drm_file * file_priv)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_framebuffer.c' l='125' u='c' c='drm_mode_addfb'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_framebuffer.c' l='322' ll='344' type='int drm_mode_addfb2(struct drm_device * dev, void * data, struct drm_file * file_priv)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_framebuffer.c' l='307'>/**
 * drm_mode_addfb2 - add an FB to the graphics configuration
 * @dev: drm device for the ioctl
 * @data: data pointer for the ioctl
 * @file_priv: drm file for the ioctl call
 *
 * Add a new FB to the specified CRTC, given a user request with format. This is
 * the 2nd version of the addfb ioctl, which supports multi-planar framebuffers
 * and uses fourcc codes as pixel format specifiers.
 *
 * Called by the user via ioctl.
 *
 * Returns:
 * Zero on success, negative errno on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioc32.c' l='887' u='r' c='compat_drm_mode_addfb2'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='638'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='638'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='638'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='638'/>
