<dec f='linux-4.14.y/include/linux/eventfd.h' l='41' type='int eventfd_ctx_remove_wait_queue(struct eventfd_ctx * ctx, wait_queue_entry_t * wait, __u64 * cnt)'/>
<def f='linux-4.14.y/fs/eventfd.c' l='194' ll='207' type='int eventfd_ctx_remove_wait_queue(struct eventfd_ctx * ctx, wait_queue_entry_t * wait, __u64 * cnt)'/>
<dec f='linux-4.14.y/fs/eventfd.c' l='208' type='int eventfd_ctx_remove_wait_queue(struct eventfd_ctx * , wait_queue_entry_t * , __u64 * )'/>
<use f='linux-4.14.y/fs/eventfd.c' l='208' c='eventfd_ctx_remove_wait_queue'/>
<use f='linux-4.14.y/fs/eventfd.c' l='208' u='a'/>
<use f='linux-4.14.y/fs/eventfd.c' l='208' u='a'/>
<doc f='linux-4.14.y/fs/eventfd.c' l='181'>/**
 * eventfd_ctx_remove_wait_queue - Read the current counter and removes wait queue.
 * @ctx: [in] Pointer to eventfd context.
 * @wait: [in] Wait queue to be removed.
 * @cnt: [out] Pointer to the 64-bit counter value.
 *
 * Returns %0 if successful, or the following error codes:
 *
 * -EAGAIN      : The operation would have blocked.
 *
 * This is used to atomically remove a wait queue entry from the eventfd wait
 * queue head, and read/reset the counter value.
 */</doc>
