<dec f='linux-4.14.y/include/linux/vgaarb.h' l='126' type='struct pci_dev * vga_default_device()'/>
<use f='linux-4.14.y/arch/x86/pci/fixup.c' l='338' u='c' c='pci_fixup_video'/>
<use f='linux-4.14.y/arch/x86/pci/fixup.c' l='338' u='c' c='pci_fixup_video'/>
<use f='linux-4.14.y/arch/x86/video/fbdev.c' l='17' u='c' c='fb_is_primary_device'/>
<def f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='156' ll='159' type='struct pci_dev * vga_default_device()'/>
<dec f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='160' type='struct pci_dev * vga_default_device()'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='160' c='vga_default_device'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='160' u='a'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='160' u='a'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='426' u='c' c='vga_get'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='493' u='c' c='vga_tryget'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='527' u='c' c='vga_put'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1185' u='c' c='vga_arb_write'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1295' u='c' c='vga_arb_open'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1458' u='c' c='vga_arb_device_init'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1460' u='c' c='vga_arb_device_init'/>
<doc f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='138'>/**
 * vga_default_device - return the default VGA device, for vgacon
 *
 * This can be defined by the platform. The default implementation
 * is rather dumb and will probably only work properly on single
 * vga card setups and/or x86 platforms.
 *
 * If your VGA default device is not PCI, you&apos;ll have to return
 * NULL here. In this case, I assume it will not conflict with
 * any PCI card. If this is not true, I&apos;ll have to define two archs
 * hooks for enabling/disabling the VGA default device if that is
 * possible. This may be a problem with real _ISA_ VGA cards, in
 * addition to a PCI one. I don&apos;t know at this point how to deal
 * with that card. Can theirs IOs be disabled at all ? If not, then
 * I suppose it&apos;s a matter of having the proper arch hook telling
 * us about it, so we basically never allow anybody to succeed a
 * vga_get()...
 */</doc>
<use f='linux-4.14.y/drivers/pci/pci-sysfs.c' l='796' u='c' c='boot_vga_show'/>
<dec f='linux-4.14.y/include/linux/vgaarb.h' l='126' type='struct pci_dev * vga_default_device()'/>
<use f='linux-4.14.y/arch/x86/pci/fixup.c' l='338' u='c' c='pci_fixup_video'/>
<use f='linux-4.14.y/arch/x86/pci/fixup.c' l='338' u='c' c='pci_fixup_video'/>
<use f='linux-4.14.y/arch/x86/video/fbdev.c' l='17' u='c' c='fb_is_primary_device'/>
<def f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='156' ll='159' type='struct pci_dev * vga_default_device()'/>
<dec f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='160' type='struct pci_dev * vga_default_device()'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='160' c='vga_default_device'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='160' u='a'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='160' u='a'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='426' u='c' c='vga_get'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='493' u='c' c='vga_tryget'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='527' u='c' c='vga_put'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1185' u='c' c='vga_arb_write'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1295' u='c' c='vga_arb_open'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1458' u='c' c='vga_arb_device_init'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1460' u='c' c='vga_arb_device_init'/>
<doc f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='138'>/**
 * vga_default_device - return the default VGA device, for vgacon
 *
 * This can be defined by the platform. The default implementation
 * is rather dumb and will probably only work properly on single
 * vga card setups and/or x86 platforms.
 *
 * If your VGA default device is not PCI, you&apos;ll have to return
 * NULL here. In this case, I assume it will not conflict with
 * any PCI card. If this is not true, I&apos;ll have to define two archs
 * hooks for enabling/disabling the VGA default device if that is
 * possible. This may be a problem with real _ISA_ VGA cards, in
 * addition to a PCI one. I don&apos;t know at this point how to deal
 * with that card. Can theirs IOs be disabled at all ? If not, then
 * I suppose it&apos;s a matter of having the proper arch hook telling
 * us about it, so we basically never allow anybody to succeed a
 * vga_get()...
 */</doc>
<use f='linux-4.14.y/drivers/pci/pci-sysfs.c' l='796' u='c' c='boot_vga_show'/>
