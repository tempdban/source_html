<def f='linux-4.14.y/fs/ext4/ext4_jbd2.h' l='171' ll='176' type='void _ext4_journal_callback_add(handle_t * handle, struct ext4_journal_cb_entry * jce)'/>
<use f='linux-4.14.y/fs/ext4/ext4_jbd2.h' l='190' u='c' c='ext4_journal_callback_add'/>
<doc f='linux-4.14.y/fs/ext4/ext4_jbd2.h' l='150'>/**
 * ext4_journal_callback_add: add a function to call after transaction commit
 * @handle: active journal transaction handle to register callback on
 * @func: callback function to call after the transaction has committed:
 *        @sb: superblock of current filesystem for transaction
 *        @jce: returned journal callback data
 *        @rc: journal state at commit (0 = transaction committed properly)
 * @jce: journal callback data (internal and function private data struct)
 *
 * The registered function will be called in the context of the journal thread
 * after the transaction for which the handle was created has completed.
 *
 * No locks are held when the callback function is called, so it is safe to
 * call blocking functions from within the callback, but the callback should
 * not block or run for too long, or the filesystem will be blocked waiting for
 * the next transaction to commit. No journaling functions can be used, or
 * there is a risk of deadlock.
 *
 * There is no guaranteed calling order of multiple registered callbacks on
 * the same transaction.
 */</doc>
<def f='linux-4.14.y/fs/ext4/ext4_jbd2.h' l='171' ll='176' type='void _ext4_journal_callback_add(handle_t * handle, struct ext4_journal_cb_entry * jce)'/>
<use f='linux-4.14.y/fs/ext4/ext4_jbd2.h' l='190' u='c' c='ext4_journal_callback_add'/>
<doc f='linux-4.14.y/fs/ext4/ext4_jbd2.h' l='150'>/**
 * ext4_journal_callback_add: add a function to call after transaction commit
 * @handle: active journal transaction handle to register callback on
 * @func: callback function to call after the transaction has committed:
 *        @sb: superblock of current filesystem for transaction
 *        @jce: returned journal callback data
 *        @rc: journal state at commit (0 = transaction committed properly)
 * @jce: journal callback data (internal and function private data struct)
 *
 * The registered function will be called in the context of the journal thread
 * after the transaction for which the handle was created has completed.
 *
 * No locks are held when the callback function is called, so it is safe to
 * call blocking functions from within the callback, but the callback should
 * not block or run for too long, or the filesystem will be blocked waiting for
 * the next transaction to commit. No journaling functions can be used, or
 * there is a risk of deadlock.
 *
 * There is no guaranteed calling order of multiple registered callbacks on
 * the same transaction.
 */</doc>
