<dec f='linux-4.14.y/include/scsi/scsi_host.h' l='824' type='struct scsi_device * scsi_get_host_dev(struct Scsi_Host * )'/>
<use f='linux-4.14.y/drivers/scsi/gdth.c' l='491' u='c' c='gdth_execute'/>
<use f='linux-4.14.y/drivers/scsi/gdth.c' l='4040' u='c' c='gdth_open'/>
<def f='linux-4.14.y/drivers/scsi/scsi_scan.c' l='1900' ll='1921' type='struct scsi_device * scsi_get_host_dev(struct Scsi_Host * shost)'/>
<dec f='linux-4.14.y/drivers/scsi/scsi_scan.c' l='1922' type='struct scsi_device * scsi_get_host_dev(struct Scsi_Host * )'/>
<use f='linux-4.14.y/drivers/scsi/scsi_scan.c' l='1922' c='scsi_get_host_dev'/>
<use f='linux-4.14.y/drivers/scsi/scsi_scan.c' l='1922' u='a'/>
<use f='linux-4.14.y/drivers/scsi/scsi_scan.c' l='1922' u='a'/>
<doc f='linux-4.14.y/drivers/scsi/scsi_scan.c' l='1883'>/**
 * scsi_get_host_dev - Create a scsi_device that points to the host adapter itself
 * @shost: Host that needs a scsi_device
 *
 * Lock status: None assumed.
 *
 * Returns:     The scsi_device or NULL
 *
 * Notes:
 *	Attach a single scsi_device to the Scsi_Host - this should
 *	be made to look like a &quot;pseudo-device&quot; that points to the
 *	HA itself.
 *
 *	Note - this device is not accessible from any high-level
 *	drivers (including generics), which is probably not
 *	optimal.  We can add hooks later to attach.
 */</doc>
