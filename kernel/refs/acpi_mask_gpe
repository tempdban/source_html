<dec f='linux-4.18.y/include/acpi/acpixf.h' l='735' type='acpi_status acpi_mask_gpe(acpi_handle gpe_device, u32 gpe_number, u8 is_masked)'/>
<def f='linux-4.18.y/drivers/acpi/acpica/evxfgpe.c' l='259' ll='282' type='acpi_status acpi_mask_gpe(acpi_handle gpe_device, u32 gpe_number, u8 is_masked)'/>
<dec f='linux-4.18.y/drivers/acpi/acpica/evxfgpe.c' l='284' type='acpi_status acpi_mask_gpe(acpi_handle , u32 , u8 )'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evxfgpe.c' l='284' c='acpi_mask_gpe'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evxfgpe.c' l='284' u='a'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evxfgpe.c' l='284' u='a'/>
<doc f='linux-4.18.y/drivers/acpi/acpica/evxfgpe.c' l='245'>/*******************************************************************************
 *
 * FUNCTION:    acpi_mask_gpe
 *
 * PARAMETERS:  gpe_device          - Parent GPE Device. NULL for GPE0/GPE1
 *              gpe_number          - GPE level within the GPE block
 *              is_masked           - Whether the GPE is masked or not
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Unconditionally mask/unmask the an individual GPE, ex., to
 *              prevent a GPE flooding.
 *
 ******************************************************************************/</doc>
<use f='linux-4.18.y/drivers/acpi/sysfs.c' l='772' u='c' c='counter_set'/>
<use f='linux-4.18.y/drivers/acpi/sysfs.c' l='774' u='c' c='counter_set'/>
<use f='linux-4.18.y/drivers/acpi/sysfs.c' l='844' u='c' c='acpi_gpe_apply_masked_gpes'/>
