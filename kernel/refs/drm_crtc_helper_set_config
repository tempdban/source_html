<dec f='linux-4.14.y/include/drm/drm_crtc_helper.h' l='47' type='int drm_crtc_helper_set_config(struct drm_mode_set * set, struct drm_modeset_acquire_ctx * ctx)'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_kms.c' l='119'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_kms.c' l='119'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_mode.c' l='355'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_mode.c' l='355'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='514' ll='789' type='int drm_crtc_helper_set_config(struct drm_mode_set * set, struct drm_modeset_acquire_ctx * ctx)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='790' type='int drm_crtc_helper_set_config(struct drm_mode_set * , struct drm_modeset_acquire_ctx * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='790' c='drm_crtc_helper_set_config'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='790' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='790' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='476'>/**
 * drm_crtc_helper_set_config - set a new config from userspace
 * @set: mode set configuration
 * @ctx: lock acquire context, not used here
 *
 * The drm_crtc_helper_set_config() helper function implements the of
 * &amp;drm_crtc_funcs.set_config callback for drivers using the legacy CRTC
 * helpers.
 *
 * It first tries to locate the best encoder for each connector by calling the
 * connector @drm_connector_helper_funcs.best_encoder helper operation.
 *
 * After locating the appropriate encoders, the helper function will call the
 * mode_fixup encoder and CRTC helper operations to adjust the requested mode,
 * or reject it completely in which case an error will be returned to the
 * application. If the new configuration after mode adjustment is identical to
 * the current configuration the helper function will return without performing
 * any other operation.
 *
 * If the adjusted mode is identical to the current mode but changes to the
 * frame buffer need to be applied, the drm_crtc_helper_set_config() function
 * will call the CRTC &amp;drm_crtc_helper_funcs.mode_set_base helper operation.
 *
 * If the adjusted mode differs from the current mode, or if the
 * -&gt;mode_set_base() helper operation is not provided, the helper function
 * performs a full mode set sequence by calling the -&gt;prepare(), -&gt;mode_set()
 * and -&gt;commit() CRTC and encoder helper operations, in that order.
 * Alternatively it can also use the dpms and disable helper operations. For
 * details see &amp;struct drm_crtc_helper_funcs and struct
 * &amp;drm_encoder_helper_funcs.
 *
 * This function is deprecated.  New drivers must implement atomic modeset
 * support, for which this function is unsuitable. Instead drivers should use
 * drm_atomic_helper_set_config().
 *
 * Returns:
 * Returns 0 on success, negative errno numbers on failure.
 */</doc>
<dec f='linux-4.14.y/include/drm/drm_crtc_helper.h' l='47' type='int drm_crtc_helper_set_config(struct drm_mode_set * set, struct drm_modeset_acquire_ctx * ctx)'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_kms.c' l='119'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_kms.c' l='119'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_mode.c' l='355'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_mode.c' l='355'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='514' ll='789' type='int drm_crtc_helper_set_config(struct drm_mode_set * set, struct drm_modeset_acquire_ctx * ctx)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='790' type='int drm_crtc_helper_set_config(struct drm_mode_set * , struct drm_modeset_acquire_ctx * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='790' c='drm_crtc_helper_set_config'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='790' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='790' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='476'>/**
 * drm_crtc_helper_set_config - set a new config from userspace
 * @set: mode set configuration
 * @ctx: lock acquire context, not used here
 *
 * The drm_crtc_helper_set_config() helper function implements the of
 * &amp;drm_crtc_funcs.set_config callback for drivers using the legacy CRTC
 * helpers.
 *
 * It first tries to locate the best encoder for each connector by calling the
 * connector @drm_connector_helper_funcs.best_encoder helper operation.
 *
 * After locating the appropriate encoders, the helper function will call the
 * mode_fixup encoder and CRTC helper operations to adjust the requested mode,
 * or reject it completely in which case an error will be returned to the
 * application. If the new configuration after mode adjustment is identical to
 * the current configuration the helper function will return without performing
 * any other operation.
 *
 * If the adjusted mode is identical to the current mode but changes to the
 * frame buffer need to be applied, the drm_crtc_helper_set_config() function
 * will call the CRTC &amp;drm_crtc_helper_funcs.mode_set_base helper operation.
 *
 * If the adjusted mode differs from the current mode, or if the
 * -&gt;mode_set_base() helper operation is not provided, the helper function
 * performs a full mode set sequence by calling the -&gt;prepare(), -&gt;mode_set()
 * and -&gt;commit() CRTC and encoder helper operations, in that order.
 * Alternatively it can also use the dpms and disable helper operations. For
 * details see &amp;struct drm_crtc_helper_funcs and struct
 * &amp;drm_encoder_helper_funcs.
 *
 * This function is deprecated.  New drivers must implement atomic modeset
 * support, for which this function is unsuitable. Instead drivers should use
 * drm_atomic_helper_set_config().
 *
 * Returns:
 * Returns 0 on success, negative errno numbers on failure.
 */</doc>
