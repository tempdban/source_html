<def f='linux-4.14.y/include/crypto/aead.h' l='412' ll='423' type='struct aead_request * aead_request_alloc(struct crypto_aead * tfm, gfp_t gfp)'/>
<doc f='linux-4.14.y/include/crypto/aead.h' l='401'>/**
 * aead_request_alloc() - allocate request data structure
 * @tfm: cipher handle to be registered with the request
 * @gfp: memory allocation flag that is handed to kmalloc by the API call.
 *
 * Allocate the request data structure that must be used with the AEAD
 * encrypt and decrypt API calls. During the allocation, the provided aead
 * handle is registered in the request data structure.
 *
 * Return: allocated request handle in case of success, or NULL if out of memory
 */</doc>
<def f='linux-4.14.y/include/crypto/aead.h' l='412' ll='423' type='struct aead_request * aead_request_alloc(struct crypto_aead * tfm, gfp_t gfp)'/>
<doc f='linux-4.14.y/include/crypto/aead.h' l='401'>/**
 * aead_request_alloc() - allocate request data structure
 * @tfm: cipher handle to be registered with the request
 * @gfp: memory allocation flag that is handed to kmalloc by the API call.
 *
 * Allocate the request data structure that must be used with the AEAD
 * encrypt and decrypt API calls. During the allocation, the provided aead
 * handle is registered in the request data structure.
 *
 * Return: allocated request handle in case of success, or NULL if out of memory
 */</doc>
