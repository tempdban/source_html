<dec f='linux-4.18.y/include/linux/percpu-refcount.h' l='109' type='void percpu_ref_kill_and_confirm(struct percpu_ref * ref, percpu_ref_func_t * confirm_kill)'/>
<use f='linux-4.18.y/include/linux/percpu-refcount.h' l='127' u='c' c='percpu_ref_kill'/>
<use f='linux-4.18.y/kernel/cgroup/cgroup.c' l='5069' u='c' c='kill_css'/>
<def f='linux-4.18.y/lib/percpu-refcount.c' l='328' ll='343' type='void percpu_ref_kill_and_confirm(struct percpu_ref * ref, percpu_ref_func_t * confirm_kill)'/>
<dec f='linux-4.18.y/lib/percpu-refcount.c' l='344' type='void percpu_ref_kill_and_confirm(struct percpu_ref * , percpu_ref_func_t * )'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='344' c='percpu_ref_kill_and_confirm'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='344' u='a'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='344' u='a'/>
<doc f='linux-4.18.y/lib/percpu-refcount.c' l='311'>/**
 * percpu_ref_kill_and_confirm - drop the initial ref and schedule confirmation
 * @ref: percpu_ref to kill
 * @confirm_kill: optional confirmation callback
 *
 * Equivalent to percpu_ref_kill() but also schedules kill confirmation if
 * @confirm_kill is not NULL.  @confirm_kill, which may not block, will be
 * called after @ref is seen as dead from all CPUs at which point all
 * further invocations of percpu_ref_tryget_live() will fail.  See
 * percpu_ref_tryget_live() for details.
 *
 * This function normally doesn&apos;t block and can be called from any context
 * but it may block if @confirm_kill is specified and @ref is in the
 * process of switching to atomic mode by percpu_ref_switch_to_atomic().
 *
 * There are no implied RCU grace periods between kill and release.
 */</doc>
