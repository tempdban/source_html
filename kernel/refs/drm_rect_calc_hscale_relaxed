<dec f='linux-4.18.y/include/drm/drm_rect.h' l='185' type='int drm_rect_calc_hscale_relaxed(struct drm_rect * src, struct drm_rect * dst, int min_hscale, int max_hscale)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='233' ll='261' type='int drm_rect_calc_hscale_relaxed(struct drm_rect * src, struct drm_rect * dst, int min_hscale, int max_hscale)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='262' type='int drm_rect_calc_hscale_relaxed(struct drm_rect * , struct drm_rect * , int , int )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='262' c='drm_rect_calc_hscale_relaxed'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='262' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='262' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='210'>/**
 * drm_calc_hscale_relaxed - calculate the horizontal scaling factor
 * @src: source window rectangle
 * @dst: destination window rectangle
 * @min_hscale: minimum allowed horizontal scaling factor
 * @max_hscale: maximum allowed horizontal scaling factor
 *
 * Calculate the horizontal scaling factor as
 * (@src width) / (@dst width).
 *
 * If the calculated scaling factor is below @min_vscale,
 * decrease the height of rectangle @dst to compensate.
 *
 * If the calculated scaling factor is above @max_vscale,
 * decrease the height of rectangle @src to compensate.
 *
 * If the scale is below 1 &lt;&lt; 16, round down. If the scale is above
 * 1 &lt;&lt; 16, round up. This will calculate the scale with the most
 * pessimistic limit calculation.
 *
 * RETURNS:
 * The horizontal scaling factor.
 */</doc>
