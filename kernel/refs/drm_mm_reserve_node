<dec f='linux-4.14.y/include/drm/drm_mm.h' l='370' type='int drm_mm_reserve_node(struct drm_mm * mm, struct drm_mm_node * node)'/>
<doc f='linux-4.14.y/include/drm/drm_mm.h' l='367'>/*
 * Basic range manager support (drm_mm.c)
 */</doc>
<def f='linux-4.14.y/drivers/gpu/drm/drm_mm.c' l='385' ll='425' type='int drm_mm_reserve_node(struct drm_mm * mm, struct drm_mm_node * node)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_mm.c' l='426' type='int drm_mm_reserve_node(struct drm_mm * , struct drm_mm_node * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_mm.c' l='426' c='drm_mm_reserve_node'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_mm.c' l='426' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_mm.c' l='426' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_mm.c' l='371'>/**
 * drm_mm_reserve_node - insert an pre-initialized node
 * @mm: drm_mm allocator to insert @node into
 * @node: drm_mm_node to insert
 *
 * This functions inserts an already set-up &amp;drm_mm_node into the allocator,
 * meaning that start, size and color must be set by the caller. All other
 * fields must be cleared to 0. This is useful to initialize the allocator with
 * preallocated objects which must be set-up before the range allocator can be
 * set-up, e.g. when taking over a firmware framebuffer.
 *
 * Returns:
 * 0 on success, -ENOSPC if there&apos;s no hole where @node is.
 */</doc>
