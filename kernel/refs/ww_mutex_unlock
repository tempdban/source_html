<dec f='linux-4.14.y/include/linux/ww_mutex.h' l='323' type='void ww_mutex_unlock(struct ww_mutex * lock)'/>
<use f='linux-4.14.y/include/linux/reservation.h' l='198' u='c' c='reservation_object_unlock'/>
<use f='linux-4.14.y/include/drm/ttm/ttm_bo_driver.h' l='952' u='c' c='__ttm_bo_unreserve'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modeset_lock.c' l='365' u='c' c='drm_modeset_unlock'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='395' u='c' c='ttm_bo_cleanup_memtype_use'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='522' u='c' c='ttm_bo_cleanup_refs_and_unlock'/>
<def f='linux-4.14.y/kernel/locking/mutex.c' l='629' ll='645' type='void ww_mutex_unlock(struct ww_mutex * lock)'/>
<dec f='linux-4.14.y/kernel/locking/mutex.c' l='646' type='void ww_mutex_unlock(struct ww_mutex * )'/>
<use f='linux-4.14.y/kernel/locking/mutex.c' l='646' c='ww_mutex_unlock'/>
<use f='linux-4.14.y/kernel/locking/mutex.c' l='646' u='a'/>
<use f='linux-4.14.y/kernel/locking/mutex.c' l='646' u='a'/>
<doc f='linux-4.14.y/kernel/locking/mutex.c' l='618'>/**
 * ww_mutex_unlock - release the w/w mutex
 * @lock: the mutex to be released
 *
 * Unlock a mutex that has been locked by this task previously with any of the
 * ww_mutex_lock* functions (with or without an acquire context). It is
 * forbidden to release the locks after releasing the acquire context.
 *
 * This function must not be used in interrupt context. Unlocking
 * of a unlocked mutex is not allowed.
 */</doc>
<dec f='linux-4.14.y/include/linux/ww_mutex.h' l='323' type='void ww_mutex_unlock(struct ww_mutex * lock)'/>
<use f='linux-4.14.y/include/linux/reservation.h' l='198' u='c' c='reservation_object_unlock'/>
<use f='linux-4.14.y/include/drm/ttm/ttm_bo_driver.h' l='952' u='c' c='__ttm_bo_unreserve'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modeset_lock.c' l='365' u='c' c='drm_modeset_unlock'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='395' u='c' c='ttm_bo_cleanup_memtype_use'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='522' u='c' c='ttm_bo_cleanup_refs_and_unlock'/>
<def f='linux-4.14.y/kernel/locking/mutex.c' l='629' ll='645' type='void ww_mutex_unlock(struct ww_mutex * lock)'/>
<dec f='linux-4.14.y/kernel/locking/mutex.c' l='646' type='void ww_mutex_unlock(struct ww_mutex * )'/>
<use f='linux-4.14.y/kernel/locking/mutex.c' l='646' c='ww_mutex_unlock'/>
<use f='linux-4.14.y/kernel/locking/mutex.c' l='646' u='a'/>
<use f='linux-4.14.y/kernel/locking/mutex.c' l='646' u='a'/>
<doc f='linux-4.14.y/kernel/locking/mutex.c' l='618'>/**
 * ww_mutex_unlock - release the w/w mutex
 * @lock: the mutex to be released
 *
 * Unlock a mutex that has been locked by this task previously with any of the
 * ww_mutex_lock* functions (with or without an acquire context). It is
 * forbidden to release the locks after releasing the acquire context.
 *
 * This function must not be used in interrupt context. Unlocking
 * of a unlocked mutex is not allowed.
 */</doc>
