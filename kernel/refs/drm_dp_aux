<def f='linux-4.14.y/include/drm/drm_dp_helper.h' l='995' ll='1013'/>
<size>856</size>
<doc f='linux-4.14.y/include/drm/drm_dp_helper.h' l='955'>/**
 * struct drm_dp_aux - DisplayPort AUX channel
 * @name: user-visible name of this AUX channel and the I2C-over-AUX adapter
 * @ddc: I2C adapter that can be used for I2C-over-AUX communication
 * @dev: pointer to struct device that is the parent for this AUX channel
 * @crtc: backpointer to the crtc that is currently using this AUX channel
 * @hw_mutex: internal mutex used for locking transfers
 * @crc_work: worker that captures CRCs for each frame
 * @crc_count: counter of captured frame CRCs
 * @transfer: transfers a message representing a single AUX transaction
 *
 * The .dev field should be set to a pointer to the device that implements
 * the AUX channel.
 *
 * The .name field may be used to specify the name of the I2C adapter. If set to
 * NULL, dev_name() of .dev will be used.
 *
 * Drivers provide a hardware-specific implementation of how transactions
 * are executed via the .transfer() function. A pointer to a drm_dp_aux_msg
 * structure describing the transaction is passed into this function. Upon
 * success, the implementation should return the number of payload bytes
 * that were transferred, or a negative error-code on failure. Helpers
 * propagate errors from the .transfer() function, with the exception of
 * the -EBUSY error, which causes a transaction to be retried. On a short,
 * helpers will return -EPROTO to make it simpler to check for failure.
 *
 * An AUX channel can also be used to transport I2C messages to a sink. A
 * typical application of that is to access an EDID that&apos;s present in the
 * sink device. The .transfer() function can also be used to execute such
 * transactions. The drm_dp_aux_register() function registers an I2C
 * adapter that can be passed to drm_probe_ddc(). Upon removal, drivers
 * should call drm_dp_aux_unregister() to remove the I2C adapter.
 * The I2C adapter uses long transfers by default; if a partial response is
 * received, the adapter will drop down to the size given by the partial
 * response for this transaction only.
 *
 * Note that the aux helper code assumes that the .transfer() function
 * only modifies the reply field of the drm_dp_aux_msg structure.  The
 * retry logic and i2c helpers assume this is the case.
 */</doc>
<mbr r='drm_dp_aux::name' o='0' t='const char *'/>
<mbr r='drm_dp_aux::ddc' o='64' t='struct i2c_adapter'/>
<mbr r='drm_dp_aux::dev' o='6016' t='struct device *'/>
<mbr r='drm_dp_aux::crtc' o='6080' t='struct drm_crtc *'/>
<mbr r='drm_dp_aux::hw_mutex' o='6144' t='struct mutex'/>
<mbr r='drm_dp_aux::crc_work' o='6400' t='struct work_struct'/>
<mbr r='drm_dp_aux::crc_count' o='6656' t='u8'/>
<mbr r='drm_dp_aux::transfer' o='6720' t='ssize_t (*)(struct drm_dp_aux *, struct drm_dp_aux_msg *)'/>
<mbr r='drm_dp_aux::i2c_nack_count' o='6784' t='unsigned int'/>
<mbr r='drm_dp_aux::i2c_defer_count' o='6816' t='unsigned int'/>
<def f='linux-4.14.y/include/drm/drm_dp_helper.h' l='995' ll='1013'/>
<size>856</size>
<doc f='linux-4.14.y/include/drm/drm_dp_helper.h' l='955'>/**
 * struct drm_dp_aux - DisplayPort AUX channel
 * @name: user-visible name of this AUX channel and the I2C-over-AUX adapter
 * @ddc: I2C adapter that can be used for I2C-over-AUX communication
 * @dev: pointer to struct device that is the parent for this AUX channel
 * @crtc: backpointer to the crtc that is currently using this AUX channel
 * @hw_mutex: internal mutex used for locking transfers
 * @crc_work: worker that captures CRCs for each frame
 * @crc_count: counter of captured frame CRCs
 * @transfer: transfers a message representing a single AUX transaction
 *
 * The .dev field should be set to a pointer to the device that implements
 * the AUX channel.
 *
 * The .name field may be used to specify the name of the I2C adapter. If set to
 * NULL, dev_name() of .dev will be used.
 *
 * Drivers provide a hardware-specific implementation of how transactions
 * are executed via the .transfer() function. A pointer to a drm_dp_aux_msg
 * structure describing the transaction is passed into this function. Upon
 * success, the implementation should return the number of payload bytes
 * that were transferred, or a negative error-code on failure. Helpers
 * propagate errors from the .transfer() function, with the exception of
 * the -EBUSY error, which causes a transaction to be retried. On a short,
 * helpers will return -EPROTO to make it simpler to check for failure.
 *
 * An AUX channel can also be used to transport I2C messages to a sink. A
 * typical application of that is to access an EDID that&apos;s present in the
 * sink device. The .transfer() function can also be used to execute such
 * transactions. The drm_dp_aux_register() function registers an I2C
 * adapter that can be passed to drm_probe_ddc(). Upon removal, drivers
 * should call drm_dp_aux_unregister() to remove the I2C adapter.
 * The I2C adapter uses long transfers by default; if a partial response is
 * received, the adapter will drop down to the size given by the partial
 * response for this transaction only.
 *
 * Note that the aux helper code assumes that the .transfer() function
 * only modifies the reply field of the drm_dp_aux_msg structure.  The
 * retry logic and i2c helpers assume this is the case.
 */</doc>
<mbr r='drm_dp_aux::name' o='0' t='const char *'/>
<mbr r='drm_dp_aux::ddc' o='64' t='struct i2c_adapter'/>
<mbr r='drm_dp_aux::dev' o='6016' t='struct device *'/>
<mbr r='drm_dp_aux::crtc' o='6080' t='struct drm_crtc *'/>
<mbr r='drm_dp_aux::hw_mutex' o='6144' t='struct mutex'/>
<mbr r='drm_dp_aux::crc_work' o='6400' t='struct work_struct'/>
<mbr r='drm_dp_aux::crc_count' o='6656' t='u8'/>
<mbr r='drm_dp_aux::transfer' o='6720' t='ssize_t (*)(struct drm_dp_aux *, struct drm_dp_aux_msg *)'/>
<mbr r='drm_dp_aux::i2c_nack_count' o='6784' t='unsigned int'/>
<mbr r='drm_dp_aux::i2c_defer_count' o='6816' t='unsigned int'/>
