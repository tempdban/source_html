<dec f='linux-4.14.y/include/linux/fs.h' l='2558' type='unsigned long invalidate_mapping_pages(struct address_space * mapping, unsigned long start, unsigned long end)'/>
<use f='linux-4.14.y/include/linux/fs.h' l='2565' u='c' c='invalidate_remote_inode'/>
<use f='linux-4.14.y/drivers/md/bitmap.c' l='851' u='c' c='bitmap_file_unmap'/>
<use f='linux-4.14.y/fs/block_dev.c' l='110' u='c' c='invalidate_bdev'/>
<use f='linux-4.14.y/fs/drop_caches.c' l='33' u='c' c='drop_pagecache_sb'/>
<use f='linux-4.14.y/fs/inode.c' l='742' u='c' c='inode_lru_isolate'/>
<use f='linux-4.14.y/mm/fadvise.c' l='164' u='c' c='SYSC_fadvise64_64'/>
<use f='linux-4.14.y/mm/fadvise.c' l='175' u='c' c='SYSC_fadvise64_64'/>
<use f='linux-4.14.y/mm/filemap.c' l='3139' u='c' c='__generic_file_write_iter'/>
<def f='linux-4.14.y/mm/truncate.c' l='493' ll='560' type='unsigned long invalidate_mapping_pages(struct address_space * mapping, unsigned long start, unsigned long end)'/>
<dec f='linux-4.14.y/mm/truncate.c' l='561' type='unsigned long invalidate_mapping_pages(struct address_space * , unsigned long , unsigned long )'/>
<use f='linux-4.14.y/mm/truncate.c' l='561' c='invalidate_mapping_pages'/>
<use f='linux-4.14.y/mm/truncate.c' l='561' u='a'/>
<use f='linux-4.14.y/mm/truncate.c' l='561' u='a'/>
<doc f='linux-4.14.y/mm/truncate.c' l='480'>/**
 * invalidate_mapping_pages - Invalidate all the unlocked pages of one inode
 * @mapping: the address_space which holds the pages to invalidate
 * @start: the offset &apos;from&apos; which to invalidate
 * @end: the offset &apos;to&apos; which to invalidate (inclusive)
 *
 * This function only removes the unlocked pages, if you want to
 * remove all the pages of one inode, you must call truncate_inode_pages.
 *
 * invalidate_mapping_pages() will not block on IO activity. It will not
 * invalidate pages which are dirty, locked, under writeback or mapped into
 * pagetables.
 */</doc>
<dec f='linux-4.14.y/include/linux/fs.h' l='2558' type='unsigned long invalidate_mapping_pages(struct address_space * mapping, unsigned long start, unsigned long end)'/>
<use f='linux-4.14.y/include/linux/fs.h' l='2565' u='c' c='invalidate_remote_inode'/>
<use f='linux-4.14.y/drivers/md/bitmap.c' l='851' u='c' c='bitmap_file_unmap'/>
<use f='linux-4.14.y/fs/block_dev.c' l='110' u='c' c='invalidate_bdev'/>
<use f='linux-4.14.y/fs/drop_caches.c' l='33' u='c' c='drop_pagecache_sb'/>
<use f='linux-4.14.y/fs/f2fs/inode.c' l='523' u='c' c='f2fs_evict_inode'/>
<use f='linux-4.14.y/fs/f2fs/inode.c' l='526' u='c' c='f2fs_evict_inode'/>
<use f='linux-4.14.y/fs/f2fs/node.c' l='718' u='c' c='truncate_node'/>
<use f='linux-4.14.y/fs/f2fs/node.c' l='2351' u='c' c='restore_node_summary'/>
<use f='linux-4.14.y/fs/fuse/file.c' l='1224' u='c' c='fuse_file_write_iter'/>
<use f='linux-4.14.y/fs/inode.c' l='742' u='c' c='inode_lru_isolate'/>
<use f='linux-4.14.y/mm/fadvise.c' l='164' u='c' c='SYSC_fadvise64_64'/>
<use f='linux-4.14.y/mm/fadvise.c' l='175' u='c' c='SYSC_fadvise64_64'/>
<use f='linux-4.14.y/mm/filemap.c' l='3139' u='c' c='__generic_file_write_iter'/>
<def f='linux-4.14.y/mm/truncate.c' l='493' ll='560' type='unsigned long invalidate_mapping_pages(struct address_space * mapping, unsigned long start, unsigned long end)'/>
<dec f='linux-4.14.y/mm/truncate.c' l='561' type='unsigned long invalidate_mapping_pages(struct address_space * , unsigned long , unsigned long )'/>
<use f='linux-4.14.y/mm/truncate.c' l='561' c='invalidate_mapping_pages'/>
<use f='linux-4.14.y/mm/truncate.c' l='561' u='a'/>
<use f='linux-4.14.y/mm/truncate.c' l='561' u='a'/>
<doc f='linux-4.14.y/mm/truncate.c' l='480'>/**
 * invalidate_mapping_pages - Invalidate all the unlocked pages of one inode
 * @mapping: the address_space which holds the pages to invalidate
 * @start: the offset &apos;from&apos; which to invalidate
 * @end: the offset &apos;to&apos; which to invalidate (inclusive)
 *
 * This function only removes the unlocked pages, if you want to
 * remove all the pages of one inode, you must call truncate_inode_pages.
 *
 * invalidate_mapping_pages() will not block on IO activity. It will not
 * invalidate pages which are dirty, locked, under writeback or mapped into
 * pagetables.
 */</doc>
