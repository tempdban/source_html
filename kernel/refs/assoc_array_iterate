<dec f='linux-4.14.y/include/linux/assoc_array.h' l='64' type='int assoc_array_iterate(const struct assoc_array * array, int (*)(const void *, void *) iterator, void * iterator_data)'/>
<def f='linux-4.14.y/lib/assoc_array.c' l='145' ll='155' type='int assoc_array_iterate(const struct assoc_array * array, int (*)(const void *, void *) iterator, void * iterator_data)'/>
<doc f='linux-4.14.y/lib/assoc_array.c' l='122'>/**
 * assoc_array_iterate - Pass all objects in the array to a callback
 * @array: The array to iterate over.
 * @iterator: The callback function.
 * @iterator_data: Private data for the callback function.
 *
 * Iterate over all the objects in an associative array.  Each one will be
 * presented to the iterator function.
 *
 * If the array is being modified concurrently with the iteration then it is
 * possible that some objects in the array will be passed to the iterator
 * callback more than once - though every object should be passed at least
 * once.  If this is undesirable then the caller must lock against modification
 * for the duration of this function.
 *
 * The function will return 0 if no objects were in the array or else it will
 * return the result of the last iterator function called.  Iteration stops
 * immediately if any call to the iteration function results in a non-zero
 * return.
 *
 * The caller should hold the RCU read lock or better if concurrent
 * modification is possible.
 */</doc>
<use f='linux-4.14.y/security/keys/keyring.c' l='474' u='c' c='keyring_read'/>
<use f='linux-4.14.y/security/keys/keyring.c' l='633' u='c' c='search_keyring'/>
<use f='linux-4.14.y/security/keys/keyring.c' l='1527' u='c' c='keyring_gc'/>
