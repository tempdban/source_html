<dec f='linux-4.18.y/security/apparmor/include/audit.h' l='174' type='int aa_audit(int type, struct aa_profile * profile, struct common_audit_data * sa, void (*)(struct audit_buffer *, void *) cb)'/>
<def f='linux-4.18.y/security/apparmor/audit.c' l='129' ll='165' type='int aa_audit(int type, struct aa_profile * profile, struct common_audit_data * sa, void (*)(struct audit_buffer *, void *) cb)'/>
<doc f='linux-4.18.y/security/apparmor/audit.c' l='118'>/**
 * aa_audit - Log a profile based audit event to the audit subsystem
 * @type: audit type for the message
 * @profile: profile to check against (NOT NULL)
 * @sa: audit event (NOT NULL)
 * @cb: optional callback fn for type specific fields (MAYBE NULL)
 *
 * Handle default message switching based off of audit mode flags
 *
 * Returns: error on failure
 */</doc>
<use f='linux-4.18.y/security/apparmor/capability.c' l='106' u='c' c='audit_caps'/>
<use f='linux-4.18.y/security/apparmor/file.c' l='153' u='c' c='aa_audit_file'/>
<use f='linux-4.18.y/security/apparmor/ipc.c' l='112' u='c' c='profile_tracer_perm'/>
<use f='linux-4.18.y/security/apparmor/mount.c' l='181' u='c' c='audit_mount'/>
<use f='linux-4.18.y/security/apparmor/policy_unpack.c' l='124' u='c' c='audit_iface'/>
<use f='linux-4.18.y/security/apparmor/resource.c' l='68' u='c' c='audit_resource'/>
