<dec f='linux-4.18.y/include/linux/mm.h' l='1408' type='void truncate_pagecache_range(struct inode * inode, loff_t offset, loff_t end)'/>
<use f='linux-4.18.y/fs/ext4/extents.c' l='4835' u='c' c='ext4_zero_range'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='4280' u='c' c='ext4_punch_hole'/>
<use f='linux-4.18.y/fs/f2fs/file.c' l='1338' u='c' c='f2fs_zero_range'/>
<use f='linux-4.18.y/fs/fuse/file.c' l='2999' u='c' c='fuse_file_fallocate'/>
<use f='linux-4.18.y/fs/iomap.c' l='116' u='c' c='iomap_write_failed'/>
<def f='linux-4.18.y/mm/truncate.c' l='894' ll='916' type='void truncate_pagecache_range(struct inode * inode, loff_t lstart, loff_t lend)'/>
<dec f='linux-4.18.y/mm/truncate.c' l='917' type='void truncate_pagecache_range(struct inode * , loff_t , loff_t )'/>
<use f='linux-4.18.y/mm/truncate.c' l='917' c='truncate_pagecache_range'/>
<use f='linux-4.18.y/mm/truncate.c' l='917' u='a'/>
<use f='linux-4.18.y/mm/truncate.c' l='917' u='a'/>
<doc f='linux-4.18.y/mm/truncate.c' l='881'>/**
 * truncate_pagecache_range - unmap and remove pagecache that is hole-punched
 * @inode: inode
 * @lstart: offset of beginning of hole
 * @lend: offset of last byte of hole
 *
 * This function should typically be called before the filesystem
 * releases resources associated with the freed range (eg. deallocates
 * blocks). This way, pagecache will always stay logically coherent
 * with on-disk format, and the filesystem would not have to deal with
 * situations such as writepage being called for a page that has already
 * had its underlying blocks deallocated.
 */</doc>
