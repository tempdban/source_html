<dec f='linux-4.18.y/include/scsi/scsi_ioctl.h' l='44' type='int scsi_ioctl_block_when_processing_errors(struct scsi_device * sdev, int cmd, bool ndelay)'/>
<def f='linux-4.18.y/drivers/scsi/scsi_ioctl.c' l='279' ll='291' type='int scsi_ioctl_block_when_processing_errors(struct scsi_device * sdev, int cmd, bool ndelay)'/>
<dec f='linux-4.18.y/drivers/scsi/scsi_ioctl.c' l='292' type='int scsi_ioctl_block_when_processing_errors(struct scsi_device * , int , bool )'/>
<use f='linux-4.18.y/drivers/scsi/scsi_ioctl.c' l='292' c='scsi_ioctl_block_when_processing_errors'/>
<use f='linux-4.18.y/drivers/scsi/scsi_ioctl.c' l='292' u='a'/>
<use f='linux-4.18.y/drivers/scsi/scsi_ioctl.c' l='292' u='a'/>
<doc f='linux-4.18.y/drivers/scsi/scsi_ioctl.c' l='276'>/*
 * We can process a reset even when a device isn&apos;t fully operable.
 */</doc>
<use f='linux-4.18.y/drivers/scsi/sd.c' l='1470' u='c' c='sd_ioctl'/>
<use f='linux-4.18.y/drivers/scsi/sd.c' l='1685' u='c' c='sd_compat_ioctl'/>
<use f='linux-4.18.y/drivers/scsi/sg.c' l='1150' u='c' c='sg_ioctl'/>
<use f='linux-4.18.y/drivers/scsi/sr.c' l='568' u='c' c='sr_block_ioctl'/>
<use f='linux-4.18.y/drivers/scsi/st.c' l='3531' u='c' c='st_ioctl'/>
