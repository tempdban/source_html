<dec f='linux-4.14.y/include/linux/device.h' l='295' type='struct device_driver * driver_find(const char * name, struct bus_type * bus)'/>
<use f='linux-4.14.y/drivers/base/driver.c' l='161' u='c' c='driver_register'/>
<def f='linux-4.14.y/drivers/base/driver.c' l='211' ll='223' type='struct device_driver * driver_find(const char * name, struct bus_type * bus)'/>
<dec f='linux-4.14.y/drivers/base/driver.c' l='224' type='struct device_driver * driver_find(const char * , struct bus_type * )'/>
<use f='linux-4.14.y/drivers/base/driver.c' l='224' c='driver_find'/>
<use f='linux-4.14.y/drivers/base/driver.c' l='224' u='a'/>
<use f='linux-4.14.y/drivers/base/driver.c' l='224' u='a'/>
<doc f='linux-4.14.y/drivers/base/driver.c' l='199'>/**
 * driver_find - locate driver on a bus by its name.
 * @name: name of the driver.
 * @bus: bus to scan for the driver.
 *
 * Call kset_find_obj() to iterate over list of drivers on
 * a bus to find driver by name. Return driver if found.
 *
 * This routine provides no locking to prevent the driver it returns
 * from being unregistered or unloaded while the caller is using it.
 * The caller is responsible for preventing this.
 */</doc>
<use f='linux-4.14.y/drivers/input/serio/serio.c' l='416' u='c' c='drvctl_store'/>
