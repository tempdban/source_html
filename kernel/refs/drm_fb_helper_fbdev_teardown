<dec f='linux-4.18.y/include/drm/drm_fb_helper.h' l='329' type='void drm_fb_helper_fbdev_teardown(struct drm_device * dev)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2877' ll='2900' type='void drm_fb_helper_fbdev_teardown(struct drm_device * dev)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2901' type='void drm_fb_helper_fbdev_teardown(struct drm_device * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2901' c='drm_fb_helper_fbdev_teardown'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2901' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2901' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2862'>/**
 * drm_fb_helper_fbdev_teardown - Tear down fbdev emulation
 * @dev: DRM device
 *
 * This function unregisters fbdev if not already done and cleans up the
 * associated resources including the &amp;drm_framebuffer.
 * The driver is responsible for freeing the &amp;drm_fb_helper structure which is
 * stored in &amp;drm_device-&gt;fb_helper. Do note that this pointer has been cleared
 * when this function returns.
 *
 * In order to support device removal/unplug while file handles are still open,
 * drm_fb_helper_unregister_fbi() should be called on device removal and
 * drm_fb_helper_fbdev_teardown() in the &amp;drm_driver-&gt;release callback when
 * file handles are closed.
 */</doc>
