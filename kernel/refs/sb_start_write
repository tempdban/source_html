<def f='linux-4.14.y/include/linux/fs.h' l='1541' ll='1544' type='void sb_start_write(struct super_block * sb)'/>
<doc f='linux-4.14.y/include/linux/fs.h' l='1522'>/**
 * sb_start_write - get write access to a superblock
 * @sb: the super we write to
 *
 * When a process wants to write data or metadata to a file system (i.e. dirty
 * a page or an inode), it should embed the operation in a sb_start_write() -
 * sb_end_write() pair to get exclusion against file system freezing. This
 * function increments number of writers preventing freezing. If the file
 * system is already frozen, the function waits until the file system is
 * thawed.
 *
 * Since freeze protection behaves as a lock, users have to preserve
 * ordering of freeze protection and other filesystem locks. Generally,
 * freeze protection should be the outermost lock. In particular, we have:
 *
 * sb_start_write
 *   -&gt; i_mutex			(write path, truncate, directory ops, ...)
 *   -&gt; s_umount		(freeze_super, thaw_super)
 */</doc>
<use f='linux-4.14.y/fs/ext4/mmp.c' l='50' u='c' c='write_mmp_block'/>
<use f='linux-4.14.y/fs/namespace.c' l='386' u='c' c='mnt_want_write'/>
<use f='linux-4.14.y/fs/namespace.c' l='449' u='c' c='mnt_want_write_file_path'/>
<use f='linux-4.14.y/fs/namespace.c' l='497' u='c' c='mnt_want_write_file'/>
<use f='linux-4.14.y/fs/open.c' l='200' u='c' c='do_sys_ftruncate'/>
