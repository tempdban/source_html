<dec f='linux-4.14.y/include/linux/dma-fence-array.h' l='84' type='struct dma_fence_array * dma_fence_array_create(int num_fences, struct dma_fence ** fences, u64 context, unsigned int seqno, bool signal_on_any)'/>
<def f='linux-4.14.y/drivers/dma-buf/dma-fence-array.c' l='131' ll='155' type='struct dma_fence_array * dma_fence_array_create(int num_fences, struct dma_fence ** fences, u64 context, unsigned int seqno, bool signal_on_any)'/>
<dec f='linux-4.14.y/drivers/dma-buf/dma-fence-array.c' l='156' type='struct dma_fence_array * dma_fence_array_create(int , struct dma_fence ** , u64 , unsigned int , bool )'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-fence-array.c' l='156' c='dma_fence_array_create'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-fence-array.c' l='156' u='a'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-fence-array.c' l='156' u='a'/>
<doc f='linux-4.14.y/drivers/dma-buf/dma-fence-array.c' l='112'>/**
 * dma_fence_array_create - Create a custom fence array
 * @num_fences:		[in]	number of fences to add in the array
 * @fences:		[in]	array containing the fences
 * @context:		[in]	fence context to use
 * @seqno:		[in]	sequence number to use
 * @signal_on_any:	[in]	signal on any fence in the array
 *
 * Allocate a dma_fence_array object and initialize the base fence with
 * dma_fence_init().
 * In case of error it returns NULL.
 *
 * The caller should allocate the fences array with num_fences size
 * and fill it with the fences it wants to add to the object. Ownership of this
 * array is taken and dma_fence_put() is used on each fence on release.
 *
 * If @signal_on_any is true the fence array signals if any fence in the array
 * signals, otherwise it signals when all fences in the array signal.
 */</doc>
<use f='linux-4.14.y/drivers/dma-buf/sync_file.c' l='172' u='c' c='sync_file_set_fence'/>
