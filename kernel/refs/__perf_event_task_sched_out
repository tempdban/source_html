<dec f='linux-4.18.y/include/linux/perf_event.h' l='864' type='void __perf_event_task_sched_out(struct task_struct * prev, struct task_struct * next)'/>
<use f='linux-4.18.y/include/linux/perf_event.h' l='1112' u='c' c='perf_event_task_sched_out'/>
<def f='linux-4.18.y/kernel/events/core.c' l='3209' ll='3230' type='void __perf_event_task_sched_out(struct task_struct * task, struct task_struct * next)'/>
<doc f='linux-4.18.y/kernel/events/core.c' l='3198'>/*
 * Called from scheduler to remove the events of the current task,
 * with interrupts disabled.
 *
 * We stop each event and update the event value in event-&gt;count.
 *
 * This does not protect us against NMI, but disable()
 * sets the disabled bit in the control field of event _before_
 * accessing the event control register. If a NMI hits, then it will
 * not restart the event.
 */</doc>
