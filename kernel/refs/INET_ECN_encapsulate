<def f='linux-4.14.y/include/net/inet_ecn.h' l='44' ll='50' type='__u8 INET_ECN_encapsulate(__u8 outer, __u8 inner)'/>
<use f='linux-4.14.y/include/net/ip_tunnels.h' l='366' u='c' c='ip_tunnel_ecn_encap'/>
<doc f='linux-4.14.y/include/net/inet_ecn.h' l='36'>/*
 * RFC 3168 9.1.1
 *  The full-functionality option for ECN encapsulation is to copy the
 *  ECN codepoint of the inside header to the outside header on
 *  encapsulation if the inside header is not-ECT or ECT, and to set the
 *  ECN codepoint of the outside header to ECT(0) if the ECN codepoint of
 *  the inside header is CE.
 */</doc>
<def f='linux-4.14.y/include/net/inet_ecn.h' l='44' ll='50' type='__u8 INET_ECN_encapsulate(__u8 outer, __u8 inner)'/>
<use f='linux-4.14.y/include/net/ip_tunnels.h' l='366' u='c' c='ip_tunnel_ecn_encap'/>
<doc f='linux-4.14.y/include/net/inet_ecn.h' l='36'>/*
 * RFC 3168 9.1.1
 *  The full-functionality option for ECN encapsulation is to copy the
 *  ECN codepoint of the inside header to the outside header on
 *  encapsulation if the inside header is not-ECT or ECT, and to set the
 *  ECN codepoint of the outside header to ECT(0) if the ECN codepoint of
 *  the inside header is CE.
 */</doc>
