<dec f='linux-4.18.y/include/linux/vmalloc.h' l='81' type='void * __vmalloc_node_range(unsigned long size, unsigned long align, unsigned long start, unsigned long end, gfp_t gfp_mask, pgprot_t prot, unsigned long vm_flags, int node, const void * caller)'/>
<use f='linux-4.18.y/arch/x86/kernel/module.c' l='87' u='c' c='module_alloc'/>
<use f='linux-4.18.y/kernel/fork.c' l='226' u='c' c='alloc_thread_stack_node'/>
<def f='linux-4.18.y/mm/vmalloc.c' l='1728' ll='1765' type='void * __vmalloc_node_range(unsigned long size, unsigned long align, unsigned long start, unsigned long end, gfp_t gfp_mask, pgprot_t prot, unsigned long vm_flags, int node, const void * caller)'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='1791' u='c' c='__vmalloc_node'/>
<doc f='linux-4.18.y/mm/vmalloc.c' l='1712'>/**
 *	__vmalloc_node_range  -  allocate virtually contiguous memory
 *	@size:		allocation size
 *	@align:		desired alignment
 *	@start:		vm area range start
 *	@end:		vm area range end
 *	@gfp_mask:	flags for the page level allocator
 *	@prot:		protection mask for the allocated pages
 *	@vm_flags:	additional vm area flags (e.g. %VM_NO_GUARD)
 *	@node:		node to use for allocation or NUMA_NO_NODE
 *	@caller:	caller&apos;s return address
 *
 *	Allocate enough pages to cover @size from the page level
 *	allocator with @gfp_mask flags.  Map them into contiguous
 *	kernel virtual space, using a pagetable protection of @prot.
 */</doc>
