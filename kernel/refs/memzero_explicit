<dec f='linux-4.14.y/include/linux/string.h' l='215' type='void memzero_explicit(void * s, size_t count)'/>
<use f='linux-4.14.y/include/crypto/skcipher.h' l='546' u='c' c='skcipher_request_zero'/>
<use f='linux-4.14.y/include/crypto/hash.h' l='587' u='c' c='ahash_request_zero'/>
<use f='linux-4.14.y/include/crypto/hash.h' l='935' u='c' c='shash_desc_zero'/>
<use f='linux-4.14.y/crypto/cts.c' l='122' u='c' c='cts_cbc_encrypt'/>
<use f='linux-4.14.y/crypto/cts.c' l='214' u='c' c='cts_cbc_decrypt'/>
<use f='linux-4.14.y/crypto/drbg.c' l='1037' u='c' c='drbg_async_seed'/>
<use f='linux-4.14.y/crypto/drbg.c' l='1126' u='c' c='drbg_seed'/>
<use f='linux-4.14.y/crypto/sha1_generic.c' l='45' u='c' c='sha1_generic_block_fn'/>
<use f='linux-4.14.y/crypto/sha256_generic.c' l='231' u='c' c='sha256_transform'/>
<use f='linux-4.14.y/drivers/char/random.c' l='935' u='c' c='crng_reseed'/>
<use f='linux-4.14.y/drivers/char/random.c' l='1058' u='c' c='extract_crng_user'/>
<use f='linux-4.14.y/drivers/char/random.c' l='1454' u='c' c='extract_buf'/>
<use f='linux-4.14.y/drivers/char/random.c' l='1466' u='c' c='extract_buf'/>
<use f='linux-4.14.y/drivers/char/random.c' l='1494' u='c' c='_extract_entropy'/>
<use f='linux-4.14.y/drivers/char/random.c' l='1575' u='c' c='extract_entropy_user'/>
<use f='linux-4.14.y/drivers/char/random.c' l='1633' u='c' c='_get_random_bytes'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='793' u='c' c='crypt_iv_tcw_whitening'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='1991' u='c' c='crypt_setkey'/>
<use f='linux-4.14.y/fs/crypto/keyinfo.c' l='248' u='c' c='init_essiv_generator'/>
<def f='linux-4.14.y/lib/string.c' l='720' ll='724' type='void memzero_explicit(void * s, size_t count)'/>
<dec f='linux-4.14.y/lib/string.c' l='725' type='void memzero_explicit(void * , size_t )'/>
<use f='linux-4.14.y/lib/string.c' l='725' c='memzero_explicit'/>
<use f='linux-4.14.y/lib/string.c' l='725' u='a'/>
<use f='linux-4.14.y/lib/string.c' l='725' u='a'/>
<doc f='linux-4.14.y/lib/string.c' l='706'>/**
 * memzero_explicit - Fill a region of memory (e.g. sensitive
 *		      keying data) with 0s.
 * @s: Pointer to the start of the area.
 * @count: The size of the area.
 *
 * Note: usually using memset() is just fine (!), but in cases
 * where clearing out _local_ data at the end of a scope is
 * necessary, memzero_explicit() should be used instead in
 * order to prevent the compiler from optimising away zeroing.
 *
 * memzero_explicit() doesn&apos;t need an arch-specific version as
 * it just invokes the one of memset() implicitly.
 */</doc>
<use f='linux-4.14.y/security/keys/gc.c' l='161' u='c' c='key_gc_unused_keys'/>
<use f='linux-4.14.y/security/keys/keyctl.c' l='136' u='c' c='SYSC_add_key'/>
<use f='linux-4.14.y/security/keys/keyctl.c' l='1104' u='c' c='keyctl_instantiate_key_common'/>
