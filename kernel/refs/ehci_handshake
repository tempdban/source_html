<dec f='linux-4.14.y/drivers/usb/host/ehci.h' l='895' type='int ehci_handshake(struct ehci_hcd * ehci, void * ptr, u32 mask, u32 done, int usec)'/>
<def f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='160' ll='176' type='int ehci_handshake(struct ehci_hcd * ehci, void * ptr, u32 mask, u32 done, int usec)'/>
<dec f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='177' type='int ehci_handshake(struct ehci_hcd * , void * , u32 , u32 , int )'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='177' c='ehci_handshake'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='177' u='a'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='177' u='a'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='218' u='c' c='ehci_halt'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='257' u='c' c='ehci_reset'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='293' u='c' c='ehci_quiesce'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='303' u='c' c='ehci_quiesce'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hub.c' l='1068' u='c' c='ehci_hub_control'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-hub.c' l='1088' u='c' c='ehci_hub_control'/>
<doc f='linux-4.14.y/drivers/usb/host/ehci-hcd.c' l='143'>/*
 * ehci_handshake - spin reading hc until handshake completes or fails
 * @ptr: address of hc register to be read
 * @mask: bits to look at in result of read
 * @done: value of those bits when handshake succeeds
 * @usec: timeout in microseconds
 *
 * Returns negative errno, or zero on success
 *
 * Success happens when the &quot;mask&quot; bits have the specified value (hardware
 * handshake done).  There are two failure modes:  &quot;usec&quot; have passed (major
 * hardware flakeout), or the register reads as all-ones (hardware removed).
 *
 * That last failure should_only happen in cases like physical cardbus eject
 * before driver shutdown. But it also seems to be caused by bugs in cardbus
 * bridge shutdown:  shutting down the bridge before the devices using it.
 */</doc>
