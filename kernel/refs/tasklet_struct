<def f='linux-4.14.y/include/linux/interrupt.h' l='537' ll='544'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/interrupt.h' l='517'>/* Tasklets --- multithreaded analogue of BHs.

   Main feature differing them of generic softirqs: tasklet
   is running only on one CPU simultaneously.

   Main feature differing them of BHs: different tasklets
   may be run simultaneously on different CPUs.

   Properties:
   * If tasklet_schedule() is called, then tasklet is guaranteed
     to be executed on some cpu at least once after this.
   * If the tasklet is already scheduled, but its execution is still not
     started, it will be executed only once.
   * If this tasklet is already running on another CPU (or schedule is called
     from tasklet itself), it is rescheduled for later.
   * Tasklet is strictly serialized wrt itself, but not
     wrt another tasklets. If client needs some intertask synchronization,
     he makes it with spinlocks.
 */</doc>
<mbr r='tasklet_struct::next' o='0' t='struct tasklet_struct *'/>
<mbr r='tasklet_struct::state' o='64' t='unsigned long'/>
<mbr r='tasklet_struct::count' o='128' t='atomic_t'/>
<mbr r='tasklet_struct::func' o='192' t='void (*)(unsigned long)'/>
<mbr r='tasklet_struct::data' o='256' t='unsigned long'/>
