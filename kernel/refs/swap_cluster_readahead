<dec f='linux-4.18.y/include/linux/swap.h' l='424' type='struct page * swap_cluster_readahead(swp_entry_t entry, gfp_t flag, struct vm_fault * vmf)'/>
<use f='linux-4.18.y/mm/shmem.c' l='1446' u='c' c='shmem_swapin'/>
<def f='linux-4.18.y/mm/swap_state.c' l='566' ll='615' type='struct page * swap_cluster_readahead(swp_entry_t entry, gfp_t gfp_mask, struct vm_fault * vmf)'/>
<use f='linux-4.18.y/mm/swap_state.c' l='796' u='c' c='swapin_readahead'/>
<doc f='linux-4.18.y/mm/swap_state.c' l='548'>/**
 * swap_cluster_readahead - swap in pages in hope we need them soon
 * @entry: swap entry of this memory
 * @gfp_mask: memory allocation flags
 * @vmf: fault information
 *
 * Returns the struct page for entry and addr, after queueing swapin.
 *
 * Primitive swap readahead code. We simply read an aligned block of
 * (1 &lt;&lt; page_cluster) entries in the swap area. This method is chosen
 * because it doesn&apos;t cost us any seek time.  We also make sure to queue
 * the &apos;original&apos; request together with the readahead ones...
 *
 * This has been extended to use the NUMA policies from the mm triggering
 * the readahead.
 *
 * Caller must hold down_read on the vma-&gt;vm_mm if vmf-&gt;vma is not NULL.
 */</doc>
