<dec f='linux-4.14.y/kernel/cgroup/cgroup-internal.h' l='159' type='bool cgroup_on_dfl(const struct cgroup * cgrp)'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup-v1.c' l='99' u='c' c='cgroup_transfer_tasks'/>
<def f='linux-4.14.y/kernel/cgroup/cgroup.c' l='286' ll='289' type='bool cgroup_on_dfl(const struct cgroup * cgrp)'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='420' u='c' c='cgroup_control'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='889' u='c' c='compare_css_sets'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='1043' u='c' c='link_css_set'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='1365' u='c' c='cgroup_file_name'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='1564' u='c' c='css_populate_dir'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2337' u='c' c='cgroup_migrate_vet_dst'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2848' u='c' c='css_visible'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='3514' u='c' c='cgroup_addrm_files'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='3516' u='c' c='cgroup_addrm_files'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='4763' u='c' c='cgroup_create'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='5338' u='c' c='proc_cgroup_show'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='5351' u='c' c='proc_cgroup_show'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='5681' u='c' c='cgroup_get_from_fd'/>
<doc f='linux-4.14.y/kernel/cgroup/cgroup.c' l='233'>/**
 * cgroup_on_dfl - test whether a cgroup is on the default hierarchy
 * @cgrp: the cgroup of interest
 *
 * The default hierarchy is the v2 interface of cgroup and this function
 * can be used to test whether a cgroup is on the default hierarchy for
 * cases where a subsystem should behave differnetly depending on the
 * interface version.
 *
 * The set of behaviors which change on the default hierarchy are still
 * being determined and the mount option is prefixed with __DEVEL__.
 *
 * List of changed behaviors:
 *
 * - Mount options &quot;noprefix&quot;, &quot;xattr&quot;, &quot;clone_children&quot;, &quot;release_agent&quot;
 *   and &quot;name&quot; are disallowed.
 *
 * - When mounting an existing superblock, mount options should match.
 *
 * - Remount is disallowed.
 *
 * - rename(2) is disallowed.
 *
 * - &quot;tasks&quot; is removed.  Everything should be at process granularity.  Use
 *   &quot;cgroup.procs&quot; instead.
 *
 * - &quot;cgroup.procs&quot; is not sorted.  pids will be unique unless they got
 *   recycled inbetween reads.
 *
 * - &quot;release_agent&quot; and &quot;notify_on_release&quot; are removed.  Replacement
 *   notification mechanism will be implemented.
 *
 * - &quot;cgroup.clone_children&quot; is removed.
 *
 * - &quot;cgroup.subtree_populated&quot; is available.  Its value is 0 if the cgroup
 *   and its descendants contain no task; otherwise, 1.  The file also
 *   generates kernfs notification which can be monitored through poll and
 *   [di]notify when the value of the file changes.
 *
 * - cpuset: tasks will be kept in empty cpusets when hotplug happens and
 *   take masks of ancestors with non-empty cpus/mems, instead of being
 *   moved to an ancestor.
 *
 * - cpuset: a task can be moved into an empty cpuset, and again it takes
 *   masks of ancestors.
 *
 * - memcg: use_hierarchy is on by default and the cgroup file for the flag
 *   is not created.
 *
 * - blkcg: blk-throttle becomes properly hierarchical.
 *
 * - debug: disallowed on the default hierarchy.
 */</doc>
