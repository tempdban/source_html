<dec f='linux-4.14.y/include/linux/skbuff.h' l='1061' type='int skb_append_datato_frags(struct sock * sk, struct sk_buff * skb, int (*)(void *, char *, int, int, int, struct sk_buff *) getfrag, void * from, int length)'/>
<def f='linux-4.14.y/net/core/skbuff.c' l='3374' ll='3418' type='int skb_append_datato_frags(struct sock * sk, struct sk_buff * skb, int (*)(void *, char *, int, int, int, struct sk_buff *) getfrag, void * from, int length)'/>
<dec f='linux-4.14.y/net/core/skbuff.c' l='3419' type='int skb_append_datato_frags(struct sock * , struct sk_buff * , int (*)(void *, char *, int, int, int, struct sk_buff *) , void * , int )'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='3419' c='skb_append_datato_frags'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='3419' u='a'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='3419' u='a'/>
<doc f='linux-4.14.y/net/core/skbuff.c' l='3363'>/**
 * skb_append_datato_frags - append the user data to a skb
 * @sk: sock  structure
 * @skb: skb structure to be appended with user data.
 * @getfrag: call back function to be used for getting the user data
 * @from: pointer to user message iov
 * @length: length of the iov message
 *
 * Description: This procedure append the user data in the fragment part
 * of the skb if any page alloc fails user this procedure returns  -ENOMEM
 */</doc>
