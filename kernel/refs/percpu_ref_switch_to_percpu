<dec f='linux-4.18.y/include/linux/percpu-refcount.h' l='108' type='void percpu_ref_switch_to_percpu(struct percpu_ref * ref)'/>
<use f='linux-4.18.y/block/blk-sysfs.c' l='897' u='c' c='blk_register_queue'/>
<use f='linux-4.18.y/drivers/md/md.c' l='2370' u='c' c='set_in_sync'/>
<def f='linux-4.18.y/lib/percpu-refcount.c' l='298' ll='308' type='void percpu_ref_switch_to_percpu(struct percpu_ref * ref)'/>
<dec f='linux-4.18.y/lib/percpu-refcount.c' l='309' type='void percpu_ref_switch_to_percpu(struct percpu_ref * )'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='309' c='percpu_ref_switch_to_percpu'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='309' u='a'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='309' u='a'/>
<doc f='linux-4.18.y/lib/percpu-refcount.c' l='280'>/**
 * percpu_ref_switch_to_percpu - switch a percpu_ref to percpu mode
 * @ref: percpu_ref to switch to percpu mode
 *
 * There&apos;s no reason to use this function for the usual reference counting.
 * To re-use an expired ref, use percpu_ref_reinit().
 *
 * Switch @ref to percpu mode.  This function may be invoked concurrently
 * with all the get/put operations and can safely be mixed with kill and
 * reinit operations.  This function reverses the sticky atomic state set
 * by PERCPU_REF_INIT_ATOMIC or percpu_ref_switch_to_atomic().  If @ref is
 * dying or dead, the actual switching takes place on the following
 * percpu_ref_reinit().
 *
 * This function may block if @ref is in the process of switching to atomic
 * mode.  If the caller ensures that @ref is not in the process of
 * switching to atomic mode, this function can be called from any context.
 */</doc>
