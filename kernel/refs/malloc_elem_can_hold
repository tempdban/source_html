<dec f='linux-4.18.y/lib/librte_eal/common/malloc_elem.h' l='129' type='int malloc_elem_can_hold(struct malloc_elem * elem, size_t size, unsigned int align, size_t bound, _Bool contig)'/>
<doc f='linux-4.18.y/lib/librte_eal/common/malloc_elem.h' l='124'>/*
 * return true if the current malloc_elem can hold a block of data
 * of the requested size and with the requested alignment
 */</doc>
<def f='linux-4.18.y/lib/librte_eal/common/malloc_elem.c' l='259' ll='264' type='int malloc_elem_can_hold(struct malloc_elem * elem, size_t size, unsigned int align, size_t bound, _Bool contig)'/>
<doc f='linux-4.18.y/lib/librte_eal/common/malloc_elem.c' l='255'>/*
 * use elem_start_pt to determine if we get meet the size and
 * alignment request from the current element
 */</doc>
<use f='linux-4.18.y/lib/librte_eal/common/malloc_heap.c' l='134' u='c' c='find_suitable_element'/>
