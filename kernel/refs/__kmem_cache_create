<dec f='linux-4.14.y/mm/slab.h' l='95' type='int __kmem_cache_create(struct kmem_cache * , unsigned long flags)'/>
<doc f='linux-4.14.y/mm/slab.h' l='94'>/* Functions provided by the slab allocators */</doc>
<def f='linux-4.14.y/mm/slab.c' l='2000' ll='2163' type='int __kmem_cache_create(struct kmem_cache * cachep, unsigned long flags)'/>
<doc f='linux-4.14.y/mm/slab.c' l='1979'>/**
 * __kmem_cache_create - Create a cache.
 * @cachep: cache management descriptor
 * @flags: SLAB flags
 *
 * Returns a ptr to the cache on success, NULL on failure.
 * Cannot be called within a int, but can be interrupted.
 * The @ctor is run when new pages are allocated by the cache.
 *
 * The flags are
 *
 * %SLAB_POISON - Poison the slab with a known test pattern (a5a5a5a5)
 * to catch references to uninitialised memory.
 *
 * %SLAB_RED_ZONE - Insert `Red&apos; zones around the allocated memory to check
 * for buffer overruns.
 *
 * %SLAB_HWCACHE_ALIGN - Align the objects in this cache to a hardware
 * cacheline.  This can be beneficial if you&apos;re counting cycles as closely
 * as davem.
 */</doc>
<use f='linux-4.14.y/mm/slab_common.c' l='390' u='c' c='create_cache'/>
<use f='linux-4.14.y/mm/slab_common.c' l='896' u='c' c='create_boot_cache'/>
<dec f='linux-4.14.y/mm/slab.h' l='95' type='int __kmem_cache_create(struct kmem_cache * , unsigned long flags)'/>
<doc f='linux-4.14.y/mm/slab.h' l='94'>/* Functions provided by the slab allocators */</doc>
<def f='linux-4.14.y/mm/slab.c' l='2000' ll='2163' type='int __kmem_cache_create(struct kmem_cache * cachep, unsigned long flags)'/>
<doc f='linux-4.14.y/mm/slab.c' l='1979'>/**
 * __kmem_cache_create - Create a cache.
 * @cachep: cache management descriptor
 * @flags: SLAB flags
 *
 * Returns a ptr to the cache on success, NULL on failure.
 * Cannot be called within a int, but can be interrupted.
 * The @ctor is run when new pages are allocated by the cache.
 *
 * The flags are
 *
 * %SLAB_POISON - Poison the slab with a known test pattern (a5a5a5a5)
 * to catch references to uninitialised memory.
 *
 * %SLAB_RED_ZONE - Insert `Red&apos; zones around the allocated memory to check
 * for buffer overruns.
 *
 * %SLAB_HWCACHE_ALIGN - Align the objects in this cache to a hardware
 * cacheline.  This can be beneficial if you&apos;re counting cycles as closely
 * as davem.
 */</doc>
<use f='linux-4.14.y/mm/slab_common.c' l='390' u='c' c='create_cache'/>
<use f='linux-4.14.y/mm/slab_common.c' l='896' u='c' c='create_boot_cache'/>
