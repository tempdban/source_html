<def f='linux-4.14.y/include/crypto/kpp.h' l='286' ll='292' type='int crypto_kpp_set_secret(struct crypto_kpp * tfm, const void * buffer, unsigned int len)'/>
<doc f='linux-4.14.y/include/crypto/kpp.h' l='271'>/**
 * crypto_kpp_set_secret() - Invoke kpp operation
 *
 * Function invokes the specific kpp operation for a given alg.
 *
 * @tfm:	tfm handle
 * @buffer:	Buffer holding the packet representation of the private
 *		key. The structure of the packet key depends on the particular
 *		KPP implementation. Packing and unpacking helpers are provided
 *		for ECDH and DH (see the respective header files for those
 *		implementations).
 * @len:	Length of the packet private key buffer.
 *
 * Return: zero on success; error code in case of error
 */</doc>
<def f='linux-4.14.y/include/crypto/kpp.h' l='286' ll='292' type='int crypto_kpp_set_secret(struct crypto_kpp * tfm, const void * buffer, unsigned int len)'/>
<doc f='linux-4.14.y/include/crypto/kpp.h' l='271'>/**
 * crypto_kpp_set_secret() - Invoke kpp operation
 *
 * Function invokes the specific kpp operation for a given alg.
 *
 * @tfm:	tfm handle
 * @buffer:	Buffer holding the packet representation of the private
 *		key. The structure of the packet key depends on the particular
 *		KPP implementation. Packing and unpacking helpers are provided
 *		for ECDH and DH (see the respective header files for those
 *		implementations).
 * @len:	Length of the packet private key buffer.
 *
 * Return: zero on success; error code in case of error
 */</doc>
