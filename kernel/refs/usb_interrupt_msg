<dec f='linux-4.14.y/include/linux/usb.h' l='1762' type='int usb_interrupt_msg(struct usb_device * usb_dev, unsigned int pipe, void * data, int len, int * actual_length, int timeout)'/>
<use f='linux-4.14.y/drivers/hid/usbhid/hid-core.c' l='944' u='c' c='usbhid_output_report'/>
<def f='linux-4.14.y/drivers/usb/core/message.c' l='189' ll='193' type='int usb_interrupt_msg(struct usb_device * usb_dev, unsigned int pipe, void * data, int len, int * actual_length, int timeout)'/>
<dec f='linux-4.14.y/drivers/usb/core/message.c' l='194' type='int usb_interrupt_msg(struct usb_device * , unsigned int , void * , int , int * , int )'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='194' c='usb_interrupt_msg'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='194' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='194' u='a'/>
<doc f='linux-4.14.y/drivers/usb/core/message.c' l='163'>/**
 * usb_interrupt_msg - Builds an interrupt urb, sends it off and waits for completion
 * @usb_dev: pointer to the usb device to send the message to
 * @pipe: endpoint &quot;pipe&quot; to send the message to
 * @data: pointer to the data to send
 * @len: length in bytes of the data to send
 * @actual_length: pointer to a location to put the actual length transferred
 *	in bytes
 * @timeout: time in msecs to wait for the message to complete before
 *	timing out (if 0 the wait is forever)
 *
 * Context: !in_interrupt ()
 *
 * This function sends a simple interrupt message to a specified endpoint and
 * waits for the message to complete, or timeout.
 *
 * Don&apos;t use this function from within an interrupt context. If you need
 * an asynchronous message, or need to send a message from within interrupt
 * context, use usb_submit_urb() If a thread in your driver uses this call,
 * make sure your disconnect() method can wait for it to complete. Since you
 * don&apos;t have a handle on the URB used, you can&apos;t cancel the request.
 *
 * Return:
 * If successful, 0. Otherwise a negative error number. The number of actual
 * bytes transferred will be stored in the @actual_length parameter.
 */</doc>
