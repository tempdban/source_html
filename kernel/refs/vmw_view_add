<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.h' l='137' type='int vmw_view_add(struct vmw_cmdbuf_res_manager * man, struct vmw_resource * ctx, struct vmw_resource * srf, enum vmw_view_type view_type, u32 user_key, const void * cmd, size_t cmd_size, struct list_head * list)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.h' l='134'>/*
 * View management - vmwgfx_so.c
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='2749' u='c' c='vmw_cmd_dx_view_define'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.c' l='314' ll='391' type='int vmw_view_add(struct vmw_cmdbuf_res_manager * man, struct vmw_resource * ctx, struct vmw_resource * srf, enum vmw_view_type view_type, u32 user_key, const void * cmd, size_t cmd_size, struct list_head * list)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.c' l='299'>/**
 * vmw_view_add - Create a view resource and stage it for addition
 * as a command buffer managed resource.
 *
 * @man: Pointer to the compat shader manager identifying the shader namespace.
 * @ctx: Pointer to a struct vmw_resource identifying the active context.
 * @srf: Pointer to a struct vmw_resource identifying the surface the view
 * points to.
 * @view_type: The view type deduced from the view create command.
 * @user_key: The key that is used to identify the shader. The key is
 * unique to the view type and to the context.
 * @cmd: Pointer to the view create command in the command stream.
 * @cmd_size: Size of the view create command in the command stream.
 * @list: Caller&apos;s list of staged command buffer resource actions.
 */</doc>
<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.h' l='137' type='int vmw_view_add(struct vmw_cmdbuf_res_manager * man, struct vmw_resource * ctx, struct vmw_resource * srf, enum vmw_view_type view_type, u32 user_key, const void * cmd, size_t cmd_size, struct list_head * list)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.h' l='134'>/*
 * View management - vmwgfx_so.c
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='2749' u='c' c='vmw_cmd_dx_view_define'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.c' l='314' ll='391' type='int vmw_view_add(struct vmw_cmdbuf_res_manager * man, struct vmw_resource * ctx, struct vmw_resource * srf, enum vmw_view_type view_type, u32 user_key, const void * cmd, size_t cmd_size, struct list_head * list)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.c' l='299'>/**
 * vmw_view_add - Create a view resource and stage it for addition
 * as a command buffer managed resource.
 *
 * @man: Pointer to the compat shader manager identifying the shader namespace.
 * @ctx: Pointer to a struct vmw_resource identifying the active context.
 * @srf: Pointer to a struct vmw_resource identifying the surface the view
 * points to.
 * @view_type: The view type deduced from the view create command.
 * @user_key: The key that is used to identify the shader. The key is
 * unique to the view type and to the context.
 * @cmd: Pointer to the view create command in the command stream.
 * @cmd_size: Size of the view create command in the command stream.
 * @list: Caller&apos;s list of staged command buffer resource actions.
 */</doc>
