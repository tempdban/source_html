<dec f='linux-4.18.y/include/linux/acpi.h' l='592' type='const struct acpi_device_id * acpi_match_device(const struct acpi_device_id * ids, const struct device * dev)'/>
<def f='linux-4.18.y/drivers/acpi/bus.c' l='823' ll='830' type='const struct acpi_device_id * acpi_match_device(const struct acpi_device_id * ids, const struct device * dev)'/>
<dec f='linux-4.18.y/drivers/acpi/bus.c' l='831' type='const struct acpi_device_id * acpi_match_device(const struct acpi_device_id * , const struct device * )'/>
<use f='linux-4.18.y/drivers/acpi/bus.c' l='831' c='acpi_match_device'/>
<use f='linux-4.18.y/drivers/acpi/bus.c' l='831' u='a'/>
<use f='linux-4.18.y/drivers/acpi/bus.c' l='831' u='a'/>
<use f='linux-4.18.y/drivers/acpi/bus.c' l='837' u='c' c='acpi_device_get_match_data'/>
<doc f='linux-4.18.y/drivers/acpi/bus.c' l='812'>/**
 * acpi_match_device - Match a struct device against a given list of ACPI IDs
 * @ids: Array of struct acpi_device_id object to match against.
 * @dev: The device structure to match.
 *
 * Check if @dev has a valid ACPI handle and if there is a struct acpi_device
 * object for that handle and use that object to match against a given list of
 * device IDs.
 *
 * Return a pointer to the first matching ID on success or %NULL on failure.
 */</doc>
<use f='linux-4.18.y/drivers/i2c/i2c-core-acpi.c' l='240' u='c' c='i2c_acpi_match_device'/>
<use f='linux-4.18.y/drivers/net/ethernet/amd/xgbe/xgbe-platform.c' l='144' u='c' c='xgbe_acpi_vdata'/>
