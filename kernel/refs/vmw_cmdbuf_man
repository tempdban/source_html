<def f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf.c' l='106' ll='133'/>
<size>664</size>
<doc f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf.c' l='57'>/**
 * struct vmw_cmdbuf_man: - Command buffer manager
 *
 * @cur_mutex: Mutex protecting the command buffer used for incremental small
 * kernel command submissions, @cur.
 * @space_mutex: Mutex to protect against starvation when we allocate
 * main pool buffer space.
 * @error_mutex: Mutex to serialize the work queue error handling.
 * Note this is not needed if the same workqueue handler
 * can&apos;t race with itself...
 * @work: A struct work_struct implementeing command buffer error handling.
 * Immutable.
 * @dev_priv: Pointer to the device private struct. Immutable.
 * @ctx: Array of command buffer context queues. The queues and the context
 * data is protected by @lock.
 * @error: List of command buffers that have caused device errors.
 * Protected by @lock.
 * @mm: Range manager for the command buffer space. Manager allocations and
 * frees are protected by @lock.
 * @cmd_space: Buffer object for the command buffer space, unless we were
 * able to make a contigous coherent DMA memory allocation, @handle. Immutable.
 * @map_obj: Mapping state for @cmd_space. Immutable.
 * @map: Pointer to command buffer space. May be a mapped buffer object or
 * a contigous coherent DMA memory allocation. Immutable.
 * @cur: Command buffer for small kernel command submissions. Protected by
 * the @cur_mutex.
 * @cur_pos: Space already used in @cur. Protected by @cur_mutex.
 * @default_size: Default size for the @cur command buffer. Immutable.
 * @max_hw_submitted: Max number of in-flight command buffers the device can
 * handle. Immutable.
 * @lock: Spinlock protecting command submission queues.
 * @header: Pool of DMA memory for device command buffer headers.
 * Internal protection.
 * @dheaders: Pool of DMA memory for device command buffer headers with trailing
 * space for inline data. Internal protection.
 * @alloc_queue: Wait queue for processes waiting to allocate command buffer
 * space.
 * @idle_queue: Wait queue for processes waiting for command buffer idle.
 * @irq_on: Whether the process function has requested irq to be turned on.
 * Protected by @lock.
 * @using_mob: Whether the command buffer space is a MOB or a contigous DMA
 * allocation. Immutable.
 * @has_pool: Has a large pool of DMA memory which allows larger allocations.
 * Typically this is false only during bootstrap.
 * @handle: DMA address handle for the command buffer space if @using_mob is
 * false. Immutable.
 * @size: The size of the command buffer space. Immutable.
 * @num_contexts: Number of contexts actually enabled.
 */</doc>
<mbr r='vmw_cmdbuf_man::cur_mutex' o='0' t='struct mutex'/>
<mbr r='vmw_cmdbuf_man::space_mutex' o='256' t='struct mutex'/>
<mbr r='vmw_cmdbuf_man::error_mutex' o='512' t='struct mutex'/>
<mbr r='vmw_cmdbuf_man::work' o='768' t='struct work_struct'/>
<mbr r='vmw_cmdbuf_man::dev_priv' o='1024' t='struct vmw_private *'/>
<mbr r='vmw_cmdbuf_man::ctx' o='1088' t='struct vmw_cmdbuf_context [2]'/>
<mbr r='vmw_cmdbuf_man::error' o='1984' t='struct list_head'/>
<mbr r='vmw_cmdbuf_man::mm' o='2112' t='struct drm_mm'/>
<mbr r='vmw_cmdbuf_man::cmd_space' o='3904' t='struct ttm_buffer_object *'/>
<mbr r='vmw_cmdbuf_man::map_obj' o='3968' t='struct ttm_bo_kmap_obj'/>
<mbr r='vmw_cmdbuf_man::map' o='4224' t='u8 *'/>
<mbr r='vmw_cmdbuf_man::cur' o='4288' t='struct vmw_cmdbuf_header *'/>
<mbr r='vmw_cmdbuf_man::cur_pos' o='4352' t='size_t'/>
<mbr r='vmw_cmdbuf_man::default_size' o='4416' t='size_t'/>
<mbr r='vmw_cmdbuf_man::max_hw_submitted' o='4480' t='unsigned int'/>
<mbr r='vmw_cmdbuf_man::lock' o='4512' t='spinlock_t'/>
<mbr r='vmw_cmdbuf_man::headers' o='4544' t='struct dma_pool *'/>
<mbr r='vmw_cmdbuf_man::dheaders' o='4608' t='struct dma_pool *'/>
<mbr r='vmw_cmdbuf_man::alloc_queue' o='4672' t='wait_queue_head_t'/>
<mbr r='vmw_cmdbuf_man::idle_queue' o='4864' t='wait_queue_head_t'/>
<mbr r='vmw_cmdbuf_man::irq_on' o='5056' t='bool'/>
<mbr r='vmw_cmdbuf_man::using_mob' o='5064' t='bool'/>
<mbr r='vmw_cmdbuf_man::has_pool' o='5072' t='bool'/>
<mbr r='vmw_cmdbuf_man::handle' o='5120' t='dma_addr_t'/>
<mbr r='vmw_cmdbuf_man::size' o='5184' t='size_t'/>
<mbr r='vmw_cmdbuf_man::num_contexts' o='5248' t='u32'/>
