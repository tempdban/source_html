<def f='linux-4.14.y/include/linux/zutil.h' l='78' ll='104' type='uLong zlib_adler32(uLong adler, const Byte * buf, uInt len)'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='376' u='c' c='zlib_inflate'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='390' u='c' c='zlib_inflate'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='163' u='c' c='zlib_inflate'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='163' u='c' c='zlib_inflate'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='163' u='c' c='zlib_inflateIncomp'/>
<doc f='linux-4.14.y/include/linux/zutil.h' l='64'>/*
     Update a running Adler-32 checksum with the bytes buf[0..len-1] and
   return the updated checksum. If buf is NULL, this function returns
   the required initial value for the checksum.
   An Adler-32 checksum is almost as reliable as a CRC32 but can be computed
   much faster. Usage example:

     uLong adler = zlib_adler32(0L, NULL, 0);

     while (read_buffer(buffer, length) != EOF) {
       adler = zlib_adler32(adler, buffer, length);
     }
     if (adler != original_adler) error();
*/</doc>
<def f='linux-4.14.y/include/linux/zutil.h' l='78' ll='104' type='uLong zlib_adler32(uLong adler, const Byte * buf, uInt len)'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='376' u='c' c='zlib_inflate'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='390' u='c' c='zlib_inflate'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='163' u='c' c='zlib_inflate'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='163' u='c' c='zlib_inflate'/>
<use f='linux-4.14.y/lib/zlib_inflate/inflate.c' l='163' u='c' c='zlib_inflateIncomp'/>
<doc f='linux-4.14.y/include/linux/zutil.h' l='64'>/*
     Update a running Adler-32 checksum with the bytes buf[0..len-1] and
   return the updated checksum. If buf is NULL, this function returns
   the required initial value for the checksum.
   An Adler-32 checksum is almost as reliable as a CRC32 but can be computed
   much faster. Usage example:

     uLong adler = zlib_adler32(0L, NULL, 0);

     while (read_buffer(buffer, length) != EOF) {
       adler = zlib_adler32(adler, buffer, length);
     }
     if (adler != original_adler) error();
*/</doc>
