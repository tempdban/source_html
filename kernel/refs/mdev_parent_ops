<def f='linux-4.18.y/include/linux/mdev.h' l='67' ll='84'/>
<size>96</size>
<doc f='linux-4.18.y/include/linux/mdev.h' l='18'>/**
 * struct mdev_parent_ops - Structure to be registered for each parent device to
 * register the device to mdev module.
 *
 * @owner:		The module owner.
 * @dev_attr_groups:	Attributes of the parent device.
 * @mdev_attr_groups:	Attributes of the mediated device.
 * @supported_type_groups: Attributes to define supported types. It is mandatory
 *			to provide supported types.
 * @create:		Called to allocate basic resources in parent device&apos;s
 *			driver for a particular mediated device. It is
 *			mandatory to provide create ops.
 *			@kobj: kobject of type for which &apos;create&apos; is called.
 *			@mdev: mdev_device structure on of mediated device
 *			      that is being created
 *			Returns integer: success (0) or error (&lt; 0)
 * @remove:		Called to free resources in parent device&apos;s driver for a
 *			a mediated device. It is mandatory to provide &apos;remove&apos;
 *			ops.
 *			@mdev: mdev_device device structure which is being
 *			       destroyed
 *			Returns integer: success (0) or error (&lt; 0)
 * @open:		Open mediated device.
 *			@mdev: mediated device.
 *			Returns integer: success (0) or error (&lt; 0)
 * @release:		release mediated device
 *			@mdev: mediated device.
 * @read:		Read emulation callback
 *			@mdev: mediated device structure
 *			@buf: read buffer
 *			@count: number of bytes to read
 *			@ppos: address.
 *			Retuns number on bytes read on success or error.
 * @write:		Write emulation callback
 *			@mdev: mediated device structure
 *			@buf: write buffer
 *			@count: number of bytes to be written
 *			@ppos: address.
 *			Retuns number on bytes written on success or error.
 * @ioctl:		IOCTL callback
 *			@mdev: mediated device structure
 *			@cmd: ioctl command
 *			@arg: arguments to ioctl
 * @mmap:		mmap callback
 *			@mdev: mediated device structure
 *			@vma: vma structure
 * Parent device that support mediated device should be registered with mdev
 * module with mdev_parent_ops structure.
 **/</doc>
<mbr r='mdev_parent_ops::owner' o='0' t='struct module *'/>
<mbr r='mdev_parent_ops::dev_attr_groups' o='64' t='const struct attribute_group **'/>
<mbr r='mdev_parent_ops::mdev_attr_groups' o='128' t='const struct attribute_group **'/>
<mbr r='mdev_parent_ops::supported_type_groups' o='192' t='struct attribute_group **'/>
<mbr r='mdev_parent_ops::create' o='256' t='int (*)(struct kobject *, struct mdev_device *)'/>
<mbr r='mdev_parent_ops::remove' o='320' t='int (*)(struct mdev_device *)'/>
<mbr r='mdev_parent_ops::open' o='384' t='int (*)(struct mdev_device *)'/>
<mbr r='mdev_parent_ops::release' o='448' t='void (*)(struct mdev_device *)'/>
<mbr r='mdev_parent_ops::read' o='512' t='ssize_t (*)(struct mdev_device *, char *, size_t, loff_t *)'/>
<mbr r='mdev_parent_ops::write' o='576' t='ssize_t (*)(struct mdev_device *, const char *, size_t, loff_t *)'/>
<mbr r='mdev_parent_ops::ioctl' o='640' t='long (*)(struct mdev_device *, unsigned int, unsigned long)'/>
<mbr r='mdev_parent_ops::mmap' o='704' t='int (*)(struct mdev_device *, struct vm_area_struct *)'/>
