<dec f='linux-4.14.y/include/linux/usb.h' l='1764' type='int usb_bulk_msg(struct usb_device * usb_dev, unsigned int pipe, void * data, int len, int * actual_length, int timeout)'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='1210' u='c' c='proc_bulk'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='1230' u='c' c='proc_bulk'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='192' u='c' c='usb_interrupt_msg'/>
<def f='linux-4.14.y/drivers/usb/core/message.c' l='228' ll='253' type='int usb_bulk_msg(struct usb_device * usb_dev, unsigned int pipe, void * data, int len, int * actual_length, int timeout)'/>
<dec f='linux-4.14.y/drivers/usb/core/message.c' l='254' type='int usb_bulk_msg(struct usb_device * , unsigned int , void * , int , int * , int )'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='254' c='usb_bulk_msg'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='254' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='254' u='a'/>
<doc f='linux-4.14.y/drivers/usb/core/message.c' l='196'>/**
 * usb_bulk_msg - Builds a bulk urb, sends it off and waits for completion
 * @usb_dev: pointer to the usb device to send the message to
 * @pipe: endpoint &quot;pipe&quot; to send the message to
 * @data: pointer to the data to send
 * @len: length in bytes of the data to send
 * @actual_length: pointer to a location to put the actual length transferred
 *	in bytes
 * @timeout: time in msecs to wait for the message to complete before
 *	timing out (if 0 the wait is forever)
 *
 * Context: !in_interrupt ()
 *
 * This function sends a simple bulk message to a specified endpoint
 * and waits for the message to complete, or timeout.
 *
 * Don&apos;t use this function from within an interrupt context. If you need
 * an asynchronous message, or need to send a message from within interrupt
 * context, use usb_submit_urb() If a thread in your driver uses this call,
 * make sure your disconnect() method can wait for it to complete. Since you
 * don&apos;t have a handle on the URB used, you can&apos;t cancel the request.
 *
 * Because there is no usb_interrupt_msg() and no USBDEVFS_INTERRUPT ioctl,
 * users are forced to abuse this routine by using it to submit URBs for
 * interrupt endpoints.  We will take the liberty of creating an interrupt URB
 * (with the default interval) if the target is an interrupt endpoint.
 *
 * Return:
 * If successful, 0. Otherwise a negative error number. The number of actual
 * bytes transferred will be stored in the @actual_length parameter.
 *
 */</doc>
