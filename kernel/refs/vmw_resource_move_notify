<dec f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='675' type='void vmw_resource_move_notify(struct ttm_buffer_object * bo, struct ttm_mem_reg * mem)'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_buffer.c' l='855' u='c' c='vmw_move_notify'/>
<def f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c' l='1230' ll='1270' type='void vmw_resource_move_notify(struct ttm_buffer_object * bo, struct ttm_mem_reg * mem)'/>
<doc f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c' l='1211'>/**
 * vmw_resource_move_notify - TTM move_notify_callback
 *
 * @bo: The TTM buffer object about to move.
 * @mem: The struct ttm_mem_reg indicating to what memory
 *       region the move is taking place.
 *
 * Evicts the Guest Backed hardware resource if the backup
 * buffer is being moved out of MOB memory.
 * Note that this function should not race with the resource
 * validation code as long as it accesses only members of struct
 * resource that remain static while bo::res is !NULL and
 * while we have @bo reserved. struct resource::backup is *not* a
 * static member. The resource validation code will take care
 * to set @bo::res to NULL, while having @bo reserved when the
 * buffer is no longer bound to the resource, so @bo:res can be
 * used to determine whether there is a need to unbind and whether
 * it is safe to unbind.
 */</doc>
