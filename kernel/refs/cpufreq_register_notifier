<dec f='linux-4.14.y/include/linux/cpufreq.h' l='442' type='int cpufreq_register_notifier(struct notifier_block * nb, unsigned int list)'/>
<use f='linux-4.14.y/arch/x86/kernel/tsc.c' l='965' u='c' c='cpufreq_register_tsc_scaling'/>
<use f='linux-4.14.y/drivers/acpi/processor_perflib.c' l='202' u='c' c='acpi_processor_ppc_init'/>
<use f='linux-4.14.y/drivers/acpi/processor_thermal.c' l='148' u='c' c='acpi_thermal_cpufreq_init'/>
<def f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1749' ll='1782' type='int cpufreq_register_notifier(struct notifier_block * nb, unsigned int list)'/>
<dec f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1783' type='int cpufreq_register_notifier(struct notifier_block * , unsigned int )'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1783' c='cpufreq_register_notifier'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1783' u='a'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1783' u='a'/>
<doc f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1736'>/**
 *	cpufreq_register_notifier - register a driver with cpufreq
 *	@nb: notifier function to register
 *      @list: CPUFREQ_TRANSITION_NOTIFIER or CPUFREQ_POLICY_NOTIFIER
 *
 *	Add a driver to one of two lists: either a list of drivers that
 *      are notified about clock rate changes (once before and once after
 *      the transition), or a list of drivers that are notified about
 *      changes in cpufreq policy.
 *
 *	This function may sleep, and has the same return conditions as
 *	blocking_notifier_chain_register.
 */</doc>
<dec f='linux-4.14.y/include/linux/cpufreq.h' l='442' type='int cpufreq_register_notifier(struct notifier_block * nb, unsigned int list)'/>
<use f='linux-4.14.y/arch/x86/kernel/tsc.c' l='965' u='c' c='cpufreq_register_tsc_scaling'/>
<use f='linux-4.14.y/drivers/acpi/processor_perflib.c' l='202' u='c' c='acpi_processor_ppc_init'/>
<use f='linux-4.14.y/drivers/acpi/processor_thermal.c' l='148' u='c' c='acpi_thermal_cpufreq_init'/>
<def f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1749' ll='1782' type='int cpufreq_register_notifier(struct notifier_block * nb, unsigned int list)'/>
<dec f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1783' type='int cpufreq_register_notifier(struct notifier_block * , unsigned int )'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1783' c='cpufreq_register_notifier'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1783' u='a'/>
<use f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1783' u='a'/>
<doc f='linux-4.14.y/drivers/cpufreq/cpufreq.c' l='1736'>/**
 *	cpufreq_register_notifier - register a driver with cpufreq
 *	@nb: notifier function to register
 *      @list: CPUFREQ_TRANSITION_NOTIFIER or CPUFREQ_POLICY_NOTIFIER
 *
 *	Add a driver to one of two lists: either a list of drivers that
 *      are notified about clock rate changes (once before and once after
 *      the transition), or a list of drivers that are notified about
 *      changes in cpufreq policy.
 *
 *	This function may sleep, and has the same return conditions as
 *	blocking_notifier_chain_register.
 */</doc>
