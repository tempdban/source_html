<dec f='linux-4.14.y/include/net/netlink.h' l='264' type='struct nlattr * nla_reserve_64bit(struct sk_buff * skb, int attrtype, int attrlen, int padattr)'/>
<use f='linux-4.14.y/kernel/taskstats.c' l='390' u='c' c='mk_reply'/>
<def f='linux-4.14.y/lib/nlattr.c' l='495' ll='508' type='struct nlattr * nla_reserve_64bit(struct sk_buff * skb, int attrtype, int attrlen, int padattr)'/>
<dec f='linux-4.14.y/lib/nlattr.c' l='509' type='struct nlattr * nla_reserve_64bit(struct sk_buff * , int , int , int )'/>
<use f='linux-4.14.y/lib/nlattr.c' l='509' c='nla_reserve_64bit'/>
<use f='linux-4.14.y/lib/nlattr.c' l='509' u='a'/>
<use f='linux-4.14.y/lib/nlattr.c' l='509' u='a'/>
<doc f='linux-4.14.y/lib/nlattr.c' l='481'>/**
 * nla_reserve_64bit - reserve room for attribute on the skb and align it
 * @skb: socket buffer to reserve room on
 * @attrtype: attribute type
 * @attrlen: length of attribute payload
 * @padattr: attribute type for the padding
 *
 * Adds a netlink attribute header to a socket buffer and reserves
 * room for the payload but does not copy it. It also ensure that this
 * attribute will have a 64-bit aligned nla_data() area.
 *
 * Returns NULL if the tailroom of the skb is insufficient to store
 * the attribute header and payload.
 */</doc>
<use f='linux-4.14.y/net/bridge/br_netlink.c' l='1504' u='c' c='br_fill_linkxstats'/>
<use f='linux-4.14.y/net/core/rtnetlink.c' l='1073' u='c' c='rtnl_fill_stats'/>
<use f='linux-4.14.y/net/core/rtnetlink.c' l='3795' u='c' c='rtnl_get_offload_stats'/>
<use f='linux-4.14.y/net/core/rtnetlink.c' l='3872' u='c' c='rtnl_fill_statsinfo'/>
<use f='linux-4.14.y/net/ipv4/inet_diag.c' l='250' u='c' c='inet_sk_diag_fill'/>
<use f='linux-4.14.y/net/ipv4/inet_diag.c' l='1204' u='c' c='inet_diag_handler_get_info'/>
