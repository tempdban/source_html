<def f='linux-4.18.y/include/linux/irqbypass.h' l='48' ll='58'/>
<size>64</size>
<doc f='linux-4.18.y/include/linux/irqbypass.h' l='34'>/**
 * struct irq_bypass_producer - IRQ bypass producer definition
 * @node: IRQ bypass manager private list management
 * @token: opaque token to match between producer and consumer (non-NULL)
 * @irq: Linux IRQ number for the producer device
 * @add_consumer: Connect the IRQ producer to an IRQ consumer (optional)
 * @del_consumer: Disconnect the IRQ producer from an IRQ consumer (optional)
 * @stop: Perform any quiesce operations necessary prior to add/del (optional)
 * @start: Perform any startup operations necessary after add/del (optional)
 *
 * The IRQ bypass producer structure represents an interrupt source for
 * participation in possible host bypass, for instance an interrupt vector
 * for a physical device assigned to a VM.
 */</doc>
<mbr r='irq_bypass_producer::node' o='0' t='struct list_head'/>
<mbr r='irq_bypass_producer::token' o='128' t='void *'/>
<mbr r='irq_bypass_producer::irq' o='192' t='int'/>
<mbr r='irq_bypass_producer::add_consumer' o='256' t='int (*)(struct irq_bypass_producer *, struct irq_bypass_consumer *)'/>
<mbr r='irq_bypass_producer::del_consumer' o='320' t='void (*)(struct irq_bypass_producer *, struct irq_bypass_consumer *)'/>
<mbr r='irq_bypass_producer::stop' o='384' t='void (*)(struct irq_bypass_producer *)'/>
<mbr r='irq_bypass_producer::start' o='448' t='void (*)(struct irq_bypass_producer *)'/>
