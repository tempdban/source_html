<def f='linux-4.14.y/include/linux/crypto.h' l='1408' ll='1416' type='struct crypto_cipher * crypto_alloc_cipher(const char * alg_name, u32 type, u32 mask)'/>
<doc f='linux-4.14.y/include/linux/crypto.h' l='1394'>/**
 * crypto_alloc_cipher() - allocate single block cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	     single block cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for a single block cipher. The returned struct
 * crypto_cipher is the cipher handle that is required for any subsequent API
 * invocation for that single block cipher.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-4.14.y/crypto/ansi_cprng.c' l='330' u='c' c='cprng_init'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='383' u='c' c='alloc_essiv_cipher'/>
<use f='linux-4.14.y/net/ipv4/tcp_fastopen.c' l='49' u='c' c='tcp_fastopen_reset_cipher'/>
