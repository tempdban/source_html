<dec f='linux-4.14.y/include/linux/assoc_array.h' l='84' type='void assoc_array_apply_edit(struct assoc_array_edit * edit)'/>
<def f='linux-4.14.y/lib/assoc_array.c' l='1360' ll='1412' type='void assoc_array_apply_edit(struct assoc_array_edit * edit)'/>
<use f='linux-4.14.y/lib/assoc_array.c' l='1725' u='c' c='assoc_array_gc'/>
<doc f='linux-4.14.y/lib/assoc_array.c' l='1347'>/**
 * assoc_array_apply_edit - Apply an edit script to an associative array
 * @edit: The script to apply.
 *
 * Apply an edit script to an associative array to effect an insertion,
 * deletion or clearance.  As the edit script includes preallocated memory,
 * this is guaranteed not to fail.
 *
 * The edit script, dead objects and dead metadata will be scheduled for
 * destruction after an RCU grace period to permit those doing read-only
 * accesses on the array to continue to do so under the RCU read lock whilst
 * the edit is taking place.
 */</doc>
<use f='linux-4.14.y/security/keys/keyring.c' l='1301' u='c' c='__key_link'/>
<use f='linux-4.14.y/security/keys/keyring.c' l='1429' u='c' c='key_unlink'/>
<use f='linux-4.14.y/security/keys/keyring.c' l='1462' u='c' c='keyring_clear'/>
<use f='linux-4.14.y/security/keys/keyring.c' l='1484' u='c' c='keyring_revoke'/>
