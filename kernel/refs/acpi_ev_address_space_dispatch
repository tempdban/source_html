<dec f='linux-4.18.y/drivers/acpi/acpica/acevents.h' l='175' type='acpi_status acpi_ev_address_space_dispatch(union acpi_operand_object * region_obj, union acpi_operand_object * field_obj, u32 function, u32 region_offset, u32 bit_width, u64 * value)'/>
<def f='linux-4.18.y/drivers/acpi/acpica/evregion.c' l='101' ll='289' type='acpi_status acpi_ev_address_space_dispatch(union acpi_operand_object * region_obj, union acpi_operand_object * field_obj, u32 function, u32 region_offset, u32 bit_width, u64 * value)'/>
<doc f='linux-4.18.y/drivers/acpi/acpica/evregion.c' l='76'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ev_address_space_dispatch
 *
 * PARAMETERS:  region_obj          - Internal region object
 *              field_obj           - Corresponding field. Can be NULL.
 *              function            - Read or Write operation
 *              region_offset       - Where in the region to read or write
 *              bit_width           - Field width in bits (8, 16, 32, or 64)
 *              value               - Pointer to in or out value, must be
 *                                    a full 64-bit integer
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Dispatch an address space or operation region access to
 *              a previously installed handler.
 *
 * NOTE: During early initialization, we always install the default region
 * handlers for Memory, I/O and PCI_Config. This ensures that these operation
 * region address spaces are always available as per the ACPI specification.
 * This is especially needed in order to support the execution of
 * module-level AML code during loading of the ACPI tables.
 *
 ******************************************************************************/</doc>
<use f='linux-4.18.y/drivers/acpi/acpica/exconfig.c' l='233' u='c' c='acpi_ex_region_read'/>
<use f='linux-4.18.y/drivers/acpi/acpica/exfldio.c' l='246' u='c' c='acpi_ex_access_region'/>
