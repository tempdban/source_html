<def f='linux-4.18.y/include/linux/dma-fence.h' l='537' ll='548' type='long dma_fence_wait(struct dma_fence * fence, bool intr)'/>
<doc f='linux-4.18.y/include/linux/dma-fence.h' l='522'>/**
 * dma_fence_wait - sleep until the fence gets signaled
 * @fence: the fence to wait on
 * @intr: if true, do an interruptible wait
 *
 * This function will return -ERESTARTSYS if interrupted by a signal,
 * or 0 if the fence was signaled. Other error values may be
 * returned on custom implementations.
 *
 * Performs a synchronous wait on this fence. It is assumed the caller
 * directly or indirectly holds a reference to the fence, otherwise the
 * fence might be freed before return, resulting in undefined behavior.
 *
 * See also dma_fence_wait_timeout() and dma_fence_wait_any_timeout().
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='1297' u='c' c='drm_atomic_helper_wait_for_fences'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1336' u='c' c='ttm_bo_force_list_clean'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_vm.c' l='72' u='c' c='ttm_bo_vm_fault_idle'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_vm.c' l='81' u='c' c='ttm_bo_vm_fault_idle'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_fence.c' l='672' u='c' c='vmw_wait_dma_fence'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_fence.c' l='686' u='c' c='vmw_wait_dma_fence'/>
