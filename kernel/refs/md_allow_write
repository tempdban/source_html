<dec f='linux-4.18.y/drivers/md/md.h' l='697' type='void md_allow_write(struct mddev * mddev)'/>
<use f='linux-4.18.y/drivers/md/md.c' l='5725' u='c' c='do_md_run'/>
<def f='linux-4.18.y/drivers/md/md.c' l='8193' ll='8218' type='void md_allow_write(struct mddev * mddev)'/>
<dec f='linux-4.18.y/drivers/md/md.c' l='8219' type='void md_allow_write(struct mddev * )'/>
<use f='linux-4.18.y/drivers/md/md.c' l='8219' c='md_allow_write'/>
<use f='linux-4.18.y/drivers/md/md.c' l='8219' u='a'/>
<use f='linux-4.18.y/drivers/md/md.c' l='8219' u='a'/>
<doc f='linux-4.18.y/drivers/md/md.c' l='8187'>/* md_allow_write(mddev)
 * Calling this ensures that the array is marked &apos;active&apos; so that writes
 * may proceed without blocking.  It is important to call this before
 * attempting a GFP_KERNEL allocation while holding the mddev lock.
 * Must be called with mddev_lock held.
 */</doc>
<use f='linux-4.18.y/drivers/md/raid1.c' l='3219' u='c' c='raid1_reshape'/>
<use f='linux-4.18.y/drivers/md/raid5.c' l='2334' u='c' c='resize_stripes'/>
<use f='linux-4.18.y/drivers/md/raid5.c' l='6374' u='c' c='raid5_set_cache_size'/>
