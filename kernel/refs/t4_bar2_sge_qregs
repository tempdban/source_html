<dec f='linux-4.18.y/drivers/net/cxgbe/base/common.h' l='523' type='int t4_bar2_sge_qregs(struct adapter * adapter, unsigned int qid, unsigned int qtype, u64 * pbar2_qoffset, unsigned int * pbar2_qid)'/>
<def f='linux-4.18.y/drivers/net/cxgbe/base/t4_hw.c' l='5105' ll='5170' type='int t4_bar2_sge_qregs(struct adapter * adapter, unsigned int qid, enum t4_bar2_qtype qtype, u64 * pbar2_qoffset, unsigned int * pbar2_qid)'/>
<doc f='linux-4.18.y/drivers/net/cxgbe/base/t4_hw.c' l='5080'>/**
 * t4_bar2_sge_qregs - return BAR2 SGE Queue register information
 * @adapter: the adapter
 * @qid: the Queue ID
 * @qtype: the Ingress or Egress type for @qid
 * @pbar2_qoffset: BAR2 Queue Offset
 * @pbar2_qid: BAR2 Queue ID or 0 for Queue ID inferred SGE Queues
 *
 * Returns the BAR2 SGE Queue Registers information associated with the
 * indicated Absolute Queue ID.  These are passed back in return value
 * pointers.  @qtype should be T4_BAR2_QTYPE_EGRESS for Egress Queue
 * and T4_BAR2_QTYPE_INGRESS for Ingress Queues.
 *
 * This may return an error which indicates that BAR2 SGE Queue
 * registers aren&apos;t available.  If an error is not returned, then the
 * following values are returned:
 *
 *   *@pbar2_qoffset: the BAR2 Offset of the @qid Registers
 *   *@pbar2_qid: the BAR2 SGE Queue ID or 0 of @qid
 *
 * If the returned BAR2 Queue ID is 0, then BAR2 SGE registers which
 * require the &quot;Inferred Queue ID&quot; ability may be used.  E.g. the
 * Write Combining Doorbell Buffer. If the BAR2 Queue ID is not 0,
 * then these &quot;Inferred Queue ID&quot; register may not be used.
 */</doc>
<use f='linux-4.18.y/drivers/net/cxgbe/sge.c' l='1830' u='c' c='bar2_address'/>
