<dec f='linux-4.18.y/arch/x86/include/asm/checksum_64.h' l='144' type='__wsum csum_partial_copy_to_user(const void * src, void * dst, int len, __wsum isum, int * errp)'/>
<def f='linux-4.18.y/arch/x86/lib/csum-wrappers_64.c' l='84' ll='118' type='__wsum csum_partial_copy_to_user(const void * src, void * dst, int len, __wsum isum, int * errp)'/>
<dec f='linux-4.18.y/arch/x86/lib/csum-wrappers_64.c' l='119' type='__wsum csum_partial_copy_to_user(const void * , void * , int , __wsum , int * )'/>
<use f='linux-4.18.y/arch/x86/lib/csum-wrappers_64.c' l='119' c='csum_partial_copy_to_user'/>
<use f='linux-4.18.y/arch/x86/lib/csum-wrappers_64.c' l='119' u='a'/>
<use f='linux-4.18.y/arch/x86/lib/csum-wrappers_64.c' l='119' u='a'/>
<doc f='linux-4.18.y/arch/x86/lib/csum-wrappers_64.c' l='73'>/**
 * csum_partial_copy_to_user - Copy and checksum to user space.
 * @src: source address
 * @dst: destination address (user space)
 * @len: number of bytes to be copied.
 * @isum: initial sum that is added into the result (32bit unfolded)
 * @errp: set to -EFAULT for an bad destination address.
 *
 * Returns an 32bit unfolded checksum of the buffer.
 * src and dst are best aligned to 64bits.
 */</doc>
<use f='linux-4.18.y/lib/iov_iter.c' l='1407' macro='1' u='c'/>
<use f='linux-4.18.y/lib/iov_iter.c' l='1407' macro='1' u='c'/>
