<dec f='linux-4.18.y/include/linux/audit.h' l='232' type='void __audit_inode_child(struct inode * parent, const struct dentry * dentry, const unsigned char type)'/>
<use f='linux-4.18.y/include/linux/audit.h' l='313' u='c' c='audit_inode_child'/>
<def f='linux-4.18.y/kernel/auditsc.c' l='1871' ll='1972' type='void __audit_inode_child(struct inode * parent, const struct dentry * dentry, const unsigned char type)'/>
<dec f='linux-4.18.y/kernel/auditsc.c' l='1973' type='void __audit_inode_child(struct inode * , const struct dentry * , const unsigned char )'/>
<use f='linux-4.18.y/kernel/auditsc.c' l='1973' c='__audit_inode_child'/>
<use f='linux-4.18.y/kernel/auditsc.c' l='1973' u='a'/>
<use f='linux-4.18.y/kernel/auditsc.c' l='1973' u='a'/>
<doc f='linux-4.18.y/kernel/auditsc.c' l='1857'>/**
 * __audit_inode_child - collect inode info for created/removed objects
 * @parent: inode of dentry parent
 * @dentry: dentry being audited
 * @type:   AUDIT_TYPE_* value that we&apos;re looking for
 *
 * For syscalls that create or remove filesystem objects, audit_inode
 * can only collect information for the filesystem object&apos;s parent.
 * This call updates the audit context with the child&apos;s information.
 * Syscalls that create a new filesystem object must be hooked after
 * the object is created.  Syscalls that remove a filesystem object
 * must be hooked prior, in order to capture the target inode during
 * unsuccessful attempts.
 */</doc>
