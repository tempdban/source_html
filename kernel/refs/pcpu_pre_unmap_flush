<def f='linux-4.14.y/mm/percpu-vm.c' l='127' ll='133' type='void pcpu_pre_unmap_flush(struct pcpu_chunk * chunk, int page_start, int page_end)'/>
<use f='linux-4.14.y/mm/percpu-vm.c' l='323' u='c' c='pcpu_depopulate_chunk'/>
<doc f='linux-4.14.y/mm/percpu-vm.c' l='115'>/**
 * pcpu_pre_unmap_flush - flush cache prior to unmapping
 * @chunk: chunk the regions to be flushed belongs to
 * @page_start: page index of the first page to be flushed
 * @page_end: page index of the last page to be flushed + 1
 *
 * Pages in [@page_start,@page_end) of @chunk are about to be
 * unmapped.  Flush cache.  As each flushing trial can be very
 * expensive, issue flush on the whole region at once rather than
 * doing it for each cpu.  This could be an overkill but is more
 * scalable.
 */</doc>
<def f='linux-4.14.y/mm/percpu-vm.c' l='127' ll='133' type='void pcpu_pre_unmap_flush(struct pcpu_chunk * chunk, int page_start, int page_end)'/>
<use f='linux-4.14.y/mm/percpu-vm.c' l='323' u='c' c='pcpu_depopulate_chunk'/>
<doc f='linux-4.14.y/mm/percpu-vm.c' l='115'>/**
 * pcpu_pre_unmap_flush - flush cache prior to unmapping
 * @chunk: chunk the regions to be flushed belongs to
 * @page_start: page index of the first page to be flushed
 * @page_end: page index of the last page to be flushed + 1
 *
 * Pages in [@page_start,@page_end) of @chunk are about to be
 * unmapped.  Flush cache.  As each flushing trial can be very
 * expensive, issue flush on the whole region at once rather than
 * doing it for each cpu.  This could be an overkill but is more
 * scalable.
 */</doc>
