<dec f='linux-4.14.y/include/linux/pagemap.h' l='387' type='struct page * read_cache_page(struct address_space * mapping, unsigned long index, filler_t * filler, void * data)'/>
<use f='linux-4.14.y/include/linux/pagemap.h' l='398' u='c' c='read_mapping_page'/>
<def f='linux-4.14.y/mm/filemap.c' l='2773' ll='2779' type='struct page * read_cache_page(struct address_space * mapping, unsigned long index, int (*)(void *, struct page *) filler, void * data)'/>
<dec f='linux-4.14.y/mm/filemap.c' l='2780' type='struct page * read_cache_page(struct address_space * , unsigned long , filler_t * , void * )'/>
<use f='linux-4.14.y/mm/filemap.c' l='2780' c='read_cache_page'/>
<use f='linux-4.14.y/mm/filemap.c' l='2780' u='a'/>
<use f='linux-4.14.y/mm/filemap.c' l='2780' u='a'/>
<doc f='linux-4.14.y/mm/filemap.c' l='2761'>/**
 * read_cache_page - read into page cache, fill it if needed
 * @mapping:	the page&apos;s address_space
 * @index:	the page index
 * @filler:	function to perform the read
 * @data:	first arg to filler(data, page) function, often left as NULL
 *
 * Read into the page cache. If a page already exists, and PageUptodate() is
 * not set, try to fill the page and wait for it to become unlocked.
 *
 * If the page does not get brought uptodate, return -EIO.
 */</doc>
<dec f='linux-4.14.y/include/linux/pagemap.h' l='387' type='struct page * read_cache_page(struct address_space * mapping, unsigned long index, filler_t * filler, void * data)'/>
<use f='linux-4.14.y/include/linux/pagemap.h' l='398' u='c' c='read_mapping_page'/>
<def f='linux-4.14.y/mm/filemap.c' l='2773' ll='2779' type='struct page * read_cache_page(struct address_space * mapping, unsigned long index, int (*)(void *, struct page *) filler, void * data)'/>
<dec f='linux-4.14.y/mm/filemap.c' l='2780' type='struct page * read_cache_page(struct address_space * , unsigned long , filler_t * , void * )'/>
<use f='linux-4.14.y/mm/filemap.c' l='2780' c='read_cache_page'/>
<use f='linux-4.14.y/mm/filemap.c' l='2780' u='a'/>
<use f='linux-4.14.y/mm/filemap.c' l='2780' u='a'/>
<doc f='linux-4.14.y/mm/filemap.c' l='2761'>/**
 * read_cache_page - read into page cache, fill it if needed
 * @mapping:	the page&apos;s address_space
 * @index:	the page index
 * @filler:	function to perform the read
 * @data:	first arg to filler(data, page) function, often left as NULL
 *
 * Read into the page cache. If a page already exists, and PageUptodate() is
 * not set, try to fill the page and wait for it to become unlocked.
 *
 * If the page does not get brought uptodate, return -EIO.
 */</doc>
