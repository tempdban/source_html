<dec f='linux-4.18.y/include/linux/crc32.h' l='59' type='u32 __crc32c_le_shift(u32 crc, size_t len)'/>
<use f='linux-4.18.y/include/linux/crc32.h' l='63' u='c' c='__crc32c_le_combine'/>
<doc f='linux-4.18.y/include/linux/crc32.h' l='41'>/**
 * __crc32c_le_combine - Combine two crc32c check values into one. For two
 * 			 sequences of bytes, seq1 and seq2 with lengths len1
 * 			 and len2, __crc32c_le() check values were calculated
 * 			 for each, crc1 and crc2.
 *
 * @crc1: crc32c of the first block
 * @crc2: crc32c of the second block
 * @len2: length of the second block
 *
 * Return: The __crc32c_le() check value of seq1 and seq2 concatenated,
 * 	   requiring only crc1, crc2, and len2. Note: If seq_full denotes
 * 	   the concatenated memory area of seq1 with seq2, and crc_full
 * 	   the __crc32c_le() value of seq_full, then crc_full ==
 * 	   __crc32c_le_combine(crc1, crc2, len2) when crc_full was
 * 	   seeded with the same initializer as crc1, and crc2 seed
 * 	   was 0. See also crc32c_combine_test().
 */</doc>
<def f='linux-4.18.y/lib/crc32.c' l='274' ll='277' type='u32 __crc32c_le_shift(u32 crc, size_t len)'/>
<dec f='linux-4.18.y/lib/crc32.c' l='279' type='u32 __crc32c_le_shift(u32 , size_t )'/>
<use f='linux-4.18.y/lib/crc32.c' l='279' c='__crc32c_le_shift'/>
<use f='linux-4.18.y/lib/crc32.c' l='279' u='a'/>
<use f='linux-4.18.y/lib/crc32.c' l='279' u='a'/>
