<dec f='linux-4.14.y/fs/ntfs/ntfs.h' l='129' type='int ntfs_ucstonls(const ntfs_volume * vol, const ntfschar * ins, const int ins_len, unsigned char ** outs, int outs_len)'/>
<use f='linux-4.14.y/fs/ntfs/dir.c' l='1048' u='c' c='ntfs_filldir'/>
<use f='linux-4.14.y/fs/ntfs/namei.c' l='187' u='c' c='ntfs_lookup'/>
<use f='linux-4.14.y/fs/ntfs/namei.c' l='241' u='c' c='ntfs_lookup'/>
<def f='linux-4.14.y/fs/ntfs/unistr.c' l='336' ll='398' type='int ntfs_ucstonls(const ntfs_volume * vol, const ntfschar * ins, const int ins_len, unsigned char ** outs, int outs_len)'/>
<doc f='linux-4.14.y/fs/ntfs/unistr.c' l='311'>/**
 * ntfs_ucstonls - convert little endian Unicode string to NLS string
 * @vol:	ntfs volume which we are working with
 * @ins:	input Unicode string buffer
 * @ins_len:	length of input string in Unicode characters
 * @outs:	on return contains the (allocated) output NLS string buffer
 * @outs_len:	length of output string buffer in bytes
 *
 * Convert the input little endian, 2-byte Unicode string @ins, of length
 * @ins_len into the string format dictated by the loaded NLS.
 *
 * If *@outs is NULL, this function allocates the string and the caller is
 * responsible for calling kfree(*@outs); when finished with it. In this case
 * @outs_len is ignored and can be 0.
 *
 * On success the function returns the number of bytes written to the output
 * string *@outs (&gt;= 0), not counting the terminating NULL byte. If the output
 * string buffer was allocated, *@outs is set to it.
 *
 * On error, a negative number corresponding to the error code is returned. In
 * that case the output string is not allocated. The contents of *@outs are
 * then undefined.
 *
 * This might look a bit odd due to fast path optimization...
 */</doc>
