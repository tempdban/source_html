<dec f='linux-4.18.y/arch/x86/include/asm/mtrr.h' l='42' type='int mtrr_del(int reg, unsigned long base, unsigned long size)'/>
<use f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/if.c' l='255' u='c' c='mtrr_ioctl'/>
<use f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/if.c' l='364' u='c' c='mtrr_close'/>
<def f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/mtrr.c' l='543' ll='550' type='int mtrr_del(int reg, unsigned long base, unsigned long size)'/>
<use f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/mtrr.c' l='597' u='c' c='arch_phys_wc_del'/>
<doc f='linux-4.18.y/arch/x86/kernel/cpu/mtrr/mtrr.c' l='529'>/**
 * mtrr_del - delete a memory type region
 * @reg: Register returned by mtrr_add
 * @base: Physical base address
 * @size: Size of region
 *
 * If register is supplied then base and size are ignored. This is
 * how drivers should call it.
 *
 * Releases an MTRR region. If the usage count drops to zero the
 * register is freed and the region returns to default state.
 * On success the register is returned, on failure a negative error
 * code.
 */</doc>
