<dec f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_mac.h' l='34' type='s32 igb_write_8bit_ctrl_reg(struct e1000_hw * hw, u32 reg, u32 offset, u8 data)'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1828' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1829' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1830' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1831' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1834' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1835' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1838' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1839' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1840' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1841' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1844' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1845' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1846' u='c' c='igb_reset_init_script_82575'/>
<def f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_mac.c' l='1588' ll='1613' type='s32 igb_write_8bit_ctrl_reg(struct e1000_hw * hw, u32 reg, u32 offset, u8 data)'/>
<doc f='linux-4.18.y/drivers/net/ethernet/intel/igb/e1000_mac.c' l='1577'>/**
 *  igb_write_8bit_ctrl_reg - Write a 8bit CTRL register
 *  @hw: pointer to the HW structure
 *  @reg: 32bit register offset such as E1000_SCTL
 *  @offset: register offset to write to
 *  @data: data to write at register offset
 *
 *  Writes an address/data control type register.  There are several of these
 *  and they all have the format address &lt;&lt; 8 | data and bit 31 is polled for
 *  completion.
 **/</doc>
