<dec f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mac.h' l='54' type='s32 igb_write_8bit_ctrl_reg(struct e1000_hw * hw, u32 reg, u32 offset, u8 data)'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1848' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1849' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1850' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1851' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1854' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1855' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1858' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1859' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1860' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1861' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1864' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1865' u='c' c='igb_reset_init_script_82575'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_82575.c' l='1866' u='c' c='igb_reset_init_script_82575'/>
<def f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mac.c' l='1608' ll='1633' type='s32 igb_write_8bit_ctrl_reg(struct e1000_hw * hw, u32 reg, u32 offset, u8 data)'/>
<doc f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mac.c' l='1597'>/**
 *  igb_write_8bit_ctrl_reg - Write a 8bit CTRL register
 *  @hw: pointer to the HW structure
 *  @reg: 32bit register offset such as E1000_SCTL
 *  @offset: register offset to write to
 *  @data: data to write at register offset
 *
 *  Writes an address/data control type register.  There are several of these
 *  and they all have the format address &lt;&lt; 8 | data and bit 31 is polled for
 *  completion.
 **/</doc>
