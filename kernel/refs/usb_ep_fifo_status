<dec f='linux-4.18.y/include/linux/usb/gadget.h' l='250' type='int usb_ep_fifo_status(struct usb_ep * ep)'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_fs.c' l='1236' u='c' c='ffs_epfile_ioctl'/>
<def f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='395' ll='407' type='int usb_ep_fifo_status(struct usb_ep * ep)'/>
<dec f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='408' type='int usb_ep_fifo_status(struct usb_ep * )'/>
<use f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='408' c='usb_ep_fifo_status'/>
<use f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='408' u='a'/>
<use f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='408' u='a'/>
<doc f='linux-4.18.y/drivers/usb/gadget/udc/core.c' l='380'>/**
 * usb_ep_fifo_status - returns number of bytes in fifo, or error
 * @ep: the endpoint whose fifo status is being checked.
 *
 * FIFO endpoints may have &quot;unclaimed data&quot; in them in certain cases,
 * such as after aborted transfers.  Hosts may not have collected all
 * the IN data written by the gadget driver (and reported by a request
 * completion).  The gadget driver may not have collected all the data
 * written OUT to it by the host.  Drivers that need precise handling for
 * fault reporting or recovery may need to use this call.
 *
 * This returns the number of such bytes in the fifo, or a negative
 * errno if the endpoint doesn&apos;t use a FIFO or doesn&apos;t support such
 * precise handling.
 */</doc>
