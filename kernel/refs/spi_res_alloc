<dec f='linux-4.18.y/include/linux/spi/spi.h' l='667' type='void * spi_res_alloc(struct spi_device * spi, spi_res_release_t release, size_t size, gfp_t gfp)'/>
<def f='linux-4.18.y/drivers/spi/spi.c' l='2414' ll='2428' type='void * spi_res_alloc(struct spi_device * spi, spi_res_release_t release, size_t size, gfp_t gfp)'/>
<dec f='linux-4.18.y/drivers/spi/spi.c' l='2429' type='void * spi_res_alloc(struct spi_device * , spi_res_release_t , size_t , gfp_t )'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2429' c='spi_res_alloc'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2429' u='a'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2429' u='a'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2537' u='c' c='spi_replace_transfers'/>
<doc f='linux-4.18.y/drivers/spi/spi.c' l='2400'>/**
 * spi_res_alloc - allocate a spi resource that is life-cycle managed
 *                 during the processing of a spi_message while using
 *                 spi_transfer_one
 * @spi:     the spi device for which we allocate memory
 * @release: the release code to execute for this resource
 * @size:    size to alloc and return
 * @gfp:     GFP allocation flags
 *
 * Return: the pointer to the allocated data
 *
 * This may get enhanced in the future to allocate from a memory pool
 * of the @spi_device or @spi_controller to avoid repeated allocations.
 */</doc>
