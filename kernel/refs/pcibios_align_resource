<dec f='linux-4.14.y/include/linux/pci.h' l='871' type='resource_size_t pcibios_align_resource(void * , const struct resource * , resource_size_t , resource_size_t )'/>
<doc f='linux-4.14.y/include/linux/pci.h' l='870'>/* Used only when drivers/pci/setup.c is used */</doc>
<def f='linux-4.14.y/arch/x86/pci/i386.c' l='154' ll='172' type='resource_size_t pcibios_align_resource(void * data, const struct resource * res, resource_size_t size, resource_size_t align)'/>
<dec f='linux-4.14.y/arch/x86/pci/i386.c' l='173' type='resource_size_t pcibios_align_resource(void * , const struct resource * , resource_size_t , resource_size_t )'/>
<use f='linux-4.14.y/arch/x86/pci/i386.c' l='173' c='pcibios_align_resource'/>
<use f='linux-4.14.y/arch/x86/pci/i386.c' l='173' u='a'/>
<use f='linux-4.14.y/arch/x86/pci/i386.c' l='173' u='a'/>
<doc f='linux-4.14.y/arch/x86/pci/i386.c' l='141'>/*
 * We need to avoid collisions with `mirrored&apos; VGA ports
 * and other strange ISA hardware, so we always want the
 * addresses to be allocated in the 0x000-0x0ff region
 * modulo 0x400.
 *
 * Why? Because some silly external IO cards only decode
 * the low 10 bits of the IO address. The 0x00-0xff region
 * is reserved for motherboard devices that decode all 16
 * bits, so it&apos;s ok to allocate at, say, 0x2800-0x28ff,
 * but we want to try to avoid allocating at 0x2900-0x2bff
 * which might have be mirrored at 0x0100-0x03ff..
 */</doc>
<def f='linux-4.14.y/drivers/pci/setup-res.c' l='243' ll='249' type='resource_size_t pcibios_align_resource(void * data, const struct resource * res, resource_size_t size, resource_size_t align)'/>
<use f='linux-4.14.y/drivers/pci/setup-res.c' l='269' u='r' c='__pci_assign_resource'/>
<use f='linux-4.14.y/drivers/pci/setup-res.c' l='281' u='r' c='__pci_assign_resource'/>
<use f='linux-4.14.y/drivers/pci/setup-res.c' l='294' u='r' c='__pci_assign_resource'/>
<doc f='linux-4.14.y/drivers/pci/setup-res.c' l='238'>/*
 * We don&apos;t have to worry about legacy ISA devices, so nothing to do here.
 * This is marked as __weak because multiple architectures define it; it should
 * eventually go away.
 */</doc>
<dec f='linux-4.14.y/include/linux/pci.h' l='871' type='resource_size_t pcibios_align_resource(void * , const struct resource * , resource_size_t , resource_size_t )'/>
<doc f='linux-4.14.y/include/linux/pci.h' l='870'>/* Used only when drivers/pci/setup.c is used */</doc>
<def f='linux-4.14.y/arch/x86/pci/i386.c' l='154' ll='172' type='resource_size_t pcibios_align_resource(void * data, const struct resource * res, resource_size_t size, resource_size_t align)'/>
<dec f='linux-4.14.y/arch/x86/pci/i386.c' l='173' type='resource_size_t pcibios_align_resource(void * , const struct resource * , resource_size_t , resource_size_t )'/>
<use f='linux-4.14.y/arch/x86/pci/i386.c' l='173' c='pcibios_align_resource'/>
<use f='linux-4.14.y/arch/x86/pci/i386.c' l='173' u='a'/>
<use f='linux-4.14.y/arch/x86/pci/i386.c' l='173' u='a'/>
<doc f='linux-4.14.y/arch/x86/pci/i386.c' l='141'>/*
 * We need to avoid collisions with `mirrored&apos; VGA ports
 * and other strange ISA hardware, so we always want the
 * addresses to be allocated in the 0x000-0x0ff region
 * modulo 0x400.
 *
 * Why? Because some silly external IO cards only decode
 * the low 10 bits of the IO address. The 0x00-0xff region
 * is reserved for motherboard devices that decode all 16
 * bits, so it&apos;s ok to allocate at, say, 0x2800-0x28ff,
 * but we want to try to avoid allocating at 0x2900-0x2bff
 * which might have be mirrored at 0x0100-0x03ff..
 */</doc>
<def f='linux-4.14.y/drivers/pci/setup-res.c' l='243' ll='249' type='resource_size_t pcibios_align_resource(void * data, const struct resource * res, resource_size_t size, resource_size_t align)'/>
<use f='linux-4.14.y/drivers/pci/setup-res.c' l='269' u='r' c='__pci_assign_resource'/>
<use f='linux-4.14.y/drivers/pci/setup-res.c' l='281' u='r' c='__pci_assign_resource'/>
<use f='linux-4.14.y/drivers/pci/setup-res.c' l='294' u='r' c='__pci_assign_resource'/>
<doc f='linux-4.14.y/drivers/pci/setup-res.c' l='238'>/*
 * We don&apos;t have to worry about legacy ISA devices, so nothing to do here.
 * This is marked as __weak because multiple architectures define it; it should
 * eventually go away.
 */</doc>
