<dec f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='1133' type='int vmw_cmdbuf_res_remove(struct vmw_cmdbuf_res_manager * man, enum vmw_cmdbuf_res_type res_type, u32 user_key, struct list_head * list, struct vmw_resource ** res)'/>
<def f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf_res.c' l='241' ll='276' type='int vmw_cmdbuf_res_remove(struct vmw_cmdbuf_res_manager * man, enum vmw_cmdbuf_res_type res_type, u32 user_key, struct list_head * list, struct vmw_resource ** res_p)'/>
<doc f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf_res.c' l='225'>/**
 * vmw_cmdbuf_res_remove - Stage a command buffer managed resource for removal.
 *
 * @man: Pointer to the command buffer resource manager.
 * @res_type: The resource type.
 * @user_key: The user-space id of the resource.
 * @list: The staging list.
 * @res_p: If the resource is in an already committed state, points to the
 * struct vmw_resource on successful return. The pointer will be
 * non ref-counted.
 *
 * This function looks up the struct vmw_cmdbuf_res entry from the manager
 * hash table and, if it exists, removes it. Depending on its current staging
 * state it then either removes the entry from the staging list or adds it
 * to it with a staging state of removal.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_shader.c' l='959' u='c' c='vmw_shader_remove'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_so.c' l='419' u='c' c='vmw_view_remove'/>
