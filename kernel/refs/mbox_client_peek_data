<dec f='linux-4.14.y/include/linux/mailbox_client.h' l='48' type='bool mbox_client_peek_data(struct mbox_chan * chan)'/>
<doc f='linux-4.14.y/include/linux/mailbox_client.h' l='48'>/* atomic */</doc>
<def f='linux-4.14.y/drivers/mailbox/mailbox.c' l='218' ll='224' type='bool mbox_client_peek_data(struct mbox_chan * chan)'/>
<dec f='linux-4.14.y/drivers/mailbox/mailbox.c' l='225' type='bool mbox_client_peek_data(struct mbox_chan * )'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='225' c='mbox_client_peek_data'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='225' u='a'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='225' u='a'/>
<doc f='linux-4.14.y/drivers/mailbox/mailbox.c' l='203'>/**
 * mbox_client_peek_data - A way for client driver to pull data
 *			received from remote by the controller.
 * @chan: Mailbox channel assigned to this client.
 *
 * A poke to controller driver for any received data.
 * The data is actually passed onto client via the
 * mbox_chan_received_data()
 * The call can be made from atomic context, so the controller&apos;s
 * implementation of peek_data() must not sleep.
 *
 * Return: True, if controller has, and is going to push after this,
 *          some data.
 *         False, if controller doesn&apos;t have any data to be read.
 */</doc>
<dec f='linux-4.14.y/include/linux/mailbox_client.h' l='48' type='bool mbox_client_peek_data(struct mbox_chan * chan)'/>
<doc f='linux-4.14.y/include/linux/mailbox_client.h' l='48'>/* atomic */</doc>
<def f='linux-4.14.y/drivers/mailbox/mailbox.c' l='218' ll='224' type='bool mbox_client_peek_data(struct mbox_chan * chan)'/>
<dec f='linux-4.14.y/drivers/mailbox/mailbox.c' l='225' type='bool mbox_client_peek_data(struct mbox_chan * )'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='225' c='mbox_client_peek_data'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='225' u='a'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='225' u='a'/>
<doc f='linux-4.14.y/drivers/mailbox/mailbox.c' l='203'>/**
 * mbox_client_peek_data - A way for client driver to pull data
 *			received from remote by the controller.
 * @chan: Mailbox channel assigned to this client.
 *
 * A poke to controller driver for any received data.
 * The data is actually passed onto client via the
 * mbox_chan_received_data()
 * The call can be made from atomic context, so the controller&apos;s
 * implementation of peek_data() must not sleep.
 *
 * Return: True, if controller has, and is going to push after this,
 *          some data.
 *         False, if controller doesn&apos;t have any data to be read.
 */</doc>
