<dec f='linux-4.18.y/lib/librte_eal/common/include/rte_memory.h' l='366' type='int rte_memseg_get_fd_thread_unsafe(const struct rte_memseg * ms)'/>
<doc f='linux-4.18.y/lib/librte_eal/common/include/rte_memory.h' l='344'>/**
 * Return file descriptor associated with a particular memseg (if available).
 *
 * @note This function does not perform any locking, and is only safe to call
 *       from within memory-related callback functions.
 *
 * @note This returns an internal file descriptor. Performing any operations on
 *       this file descriptor is inherently dangerous, so it should be treated
 *       as read-only for all intents and purposes.
 *
 * @param ms
 *   A pointer to memseg for which to get file descriptor.
 *
 * @return
 *   Valid file descriptor in case of success.
 *   -1 in case of error, with ``rte_errno`` set to the following values:
 *     - EINVAL  - ``ms`` pointer was NULL or did not point to a valid memseg
 *     - ENODEV  - ``ms`` fd is not available
 *     - ENOENT  - ``ms`` is an unused segment
 *     - ENOTSUP - segment fd&apos;s are not supported
 */</doc>
<use f='linux-4.18.y/drivers/net/virtio/virtio_user/vhost_user.c' l='143' u='c' c='update_memory_region'/>
<def f='linux-4.18.y/lib/librte_eal/common/eal_common_memory.c' l='553' ll='587' type='int rte_memseg_get_fd_thread_unsafe(const struct rte_memseg * ms)'/>
<use f='linux-4.18.y/lib/librte_eal/common/eal_common_memory.c' l='596' u='c' c='rte_memseg_get_fd'/>
