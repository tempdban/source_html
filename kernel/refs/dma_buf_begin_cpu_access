<dec f='linux-4.14.y/include/linux/dma-buf.h' l='394' type='int dma_buf_begin_cpu_access(struct dma_buf * dma_buf, enum dma_data_direction dir)'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='314' u='c' c='dma_buf_ioctl'/>
<def f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='814' ll='833' type='int dma_buf_begin_cpu_access(struct dma_buf * dmabuf, enum dma_data_direction direction)'/>
<dec f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='834' type='int dma_buf_begin_cpu_access(struct dma_buf * , enum dma_data_direction )'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='834' c='dma_buf_begin_cpu_access'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='834' u='a'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='834' u='a'/>
<doc f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='800'>/**
 * dma_buf_begin_cpu_access - Must be called before accessing a dma_buf from the
 * cpu in the kernel context. Calls begin_cpu_access to allow exporter-specific
 * preparations. Coherency is only guaranteed in the specified range for the
 * specified access direction.
 * @dmabuf:	[in]	buffer to prepare cpu access for.
 * @direction:	[in]	length of range for cpu access.
 *
 * After the cpu access is complete the caller should call
 * dma_buf_end_cpu_access(). Only when cpu access is braketed by both calls is
 * it guaranteed to be coherent with other DMA access.
 *
 * Can return negative error values, returns 0 on success.
 */</doc>
