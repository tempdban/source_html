<def f='linux-4.18.y/include/linux/i2c.h' l='519' ll='539'/>
<size>24</size>
<doc f='linux-4.18.y/include/linux/i2c.h' l='497'>/**
 * struct i2c_algorithm - represent I2C transfer method
 * @master_xfer: Issue a set of i2c transactions to the given I2C adapter
 *   defined by the msgs array, with num messages available to transfer via
 *   the adapter specified by adap.
 * @smbus_xfer: Issue smbus transactions to the given I2C adapter. If this
 *   is not present, then the bus layer will try and convert the SMBus calls
 *   into I2C transfers instead.
 * @functionality: Return the flags that this algorithm/adapter pair supports
 *   from the I2C_FUNC_* flags.
 * @reg_slave: Register given client to I2C slave mode of this adapter
 * @unreg_slave: Unregister given client from I2C slave mode of this adapter
 *
 * The following structs are for those who like to implement new bus drivers:
 * i2c_algorithm is the interface to a class of hardware solutions which can
 * be addressed using the same bus algorithms - i.e. bit-banging or the PCF8584
 * to name two of the most common.
 *
 * The return codes from the @master_xfer field should indicate the type of
 * error code that occurred during the transfer, as documented in the kernel
 * Documentation file Documentation/i2c/fault-codes.
 */</doc>
<mbr r='i2c_algorithm::master_xfer' o='0' t='int (*)(struct i2c_adapter *, struct i2c_msg *, int)'/>
<mbr r='i2c_algorithm::smbus_xfer' o='64' t='int (*)(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *)'/>
<mbr r='i2c_algorithm::functionality' o='128' t='u32 (*)(struct i2c_adapter *)'/>
