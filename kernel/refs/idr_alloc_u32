<dec f='linux-4.18.y/include/linux/idr.h' l='104' type='int idr_alloc_u32(struct idr * , void * ptr, u32 * id, unsigned long max, gfp_t )'/>
<def f='linux-4.18.y/lib/idr.c' l='34' ll='59' type='int idr_alloc_u32(struct idr * idr, void * ptr, u32 * nextid, unsigned long max, gfp_t gfp)'/>
<dec f='linux-4.18.y/lib/idr.c' l='60' type='int idr_alloc_u32(struct idr * , void * , u32 * , unsigned long , gfp_t )'/>
<use f='linux-4.18.y/lib/idr.c' l='60' c='idr_alloc_u32'/>
<use f='linux-4.18.y/lib/idr.c' l='60' u='a'/>
<use f='linux-4.18.y/lib/idr.c' l='60' u='a'/>
<use f='linux-4.18.y/lib/idr.c' l='90' u='c' c='idr_alloc'/>
<use f='linux-4.18.y/lib/idr.c' l='128' u='c' c='idr_alloc_cyclic'/>
<use f='linux-4.18.y/lib/idr.c' l='131' u='c' c='idr_alloc_cyclic'/>
<doc f='linux-4.18.y/lib/idr.c' l='11'>/**
 * idr_alloc_u32() - Allocate an ID.
 * @idr: IDR handle.
 * @ptr: Pointer to be associated with the new ID.
 * @nextid: Pointer to an ID.
 * @max: The maximum ID to allocate (inclusive).
 * @gfp: Memory allocation flags.
 *
 * Allocates an unused ID in the range specified by @nextid and @max.
 * Note that @max is inclusive whereas the @end parameter to idr_alloc()
 * is exclusive.  The new ID is assigned to @nextid before the pointer
 * is inserted into the IDR, so if @nextid points into the object pointed
 * to by @ptr, a concurrent lookup will not find an uninitialised ID.
 *
 * The caller should provide their own locking to ensure that two
 * concurrent modifications to the IDR are not possible.  Read-only
 * accesses to the IDR may be done under the RCU read lock or may
 * exclude simultaneous writers.
 *
 * Return: 0 if an ID was allocated, -ENOMEM if memory allocation failed,
 * or -ENOSPC if no free IDs could be found.  If an error occurred,
 * @nextid is unchanged.
 */</doc>
