<dec f='linux-4.14.y/include/linux/reboot.h' l='42' type='int register_restart_handler(struct notifier_block * )'/>
<def f='linux-4.14.y/kernel/reboot.c' l='151' ll='154' type='int register_restart_handler(struct notifier_block * nb)'/>
<dec f='linux-4.14.y/kernel/reboot.c' l='155' type='int register_restart_handler(struct notifier_block * )'/>
<use f='linux-4.14.y/kernel/reboot.c' l='155' c='register_restart_handler'/>
<use f='linux-4.14.y/kernel/reboot.c' l='155' u='a'/>
<use f='linux-4.14.y/kernel/reboot.c' l='155' u='a'/>
<doc f='linux-4.14.y/kernel/reboot.c' l='113'>/**
 *	register_restart_handler - Register function to be called to reset
 *				   the system
 *	@nb: Info about handler function to be called
 *	@nb-&gt;priority:	Handler priority. Handlers should follow the
 *			following guidelines for setting priorities.
 *			0:	Restart handler of last resort,
 *				with limited restart capabilities
 *			128:	Default restart handler; use if no other
 *				restart handler is expected to be available,
 *				and/or if restart functionality is
 *				sufficient to restart the entire system
 *			255:	Highest priority restart handler, will
 *				preempt all other restart handlers
 *
 *	Registers a function with code to be called to restart the
 *	system.
 *
 *	Registered functions will be called from machine_restart as last
 *	step of the restart sequence (if the architecture specific
 *	machine_restart function calls do_kernel_restart - see below
 *	for details).
 *	Registered functions are expected to restart the system immediately.
 *	If more than one function is registered, the restart handler priority
 *	selects which function will be called first.
 *
 *	Restart handlers are expected to be registered from non-architecture
 *	code, typically from drivers. A typical use case would be a system
 *	where restart functionality is provided through a watchdog. Multiple
 *	restart handlers may exist; for example, one restart handler might
 *	restart the entire system, while another only restarts the CPU.
 *	In such cases, the restart handler which only restarts part of the
 *	hardware is expected to register with low priority to ensure that
 *	it only runs if no other means to restart the system is available.
 *
 *	Currently always returns zero, as atomic_notifier_chain_register()
 *	always returns zero.
 */</doc>
<dec f='linux-4.14.y/include/linux/reboot.h' l='42' type='int register_restart_handler(struct notifier_block * )'/>
<def f='linux-4.14.y/kernel/reboot.c' l='151' ll='154' type='int register_restart_handler(struct notifier_block * nb)'/>
<dec f='linux-4.14.y/kernel/reboot.c' l='155' type='int register_restart_handler(struct notifier_block * )'/>
<use f='linux-4.14.y/kernel/reboot.c' l='155' c='register_restart_handler'/>
<use f='linux-4.14.y/kernel/reboot.c' l='155' u='a'/>
<use f='linux-4.14.y/kernel/reboot.c' l='155' u='a'/>
<doc f='linux-4.14.y/kernel/reboot.c' l='113'>/**
 *	register_restart_handler - Register function to be called to reset
 *				   the system
 *	@nb: Info about handler function to be called
 *	@nb-&gt;priority:	Handler priority. Handlers should follow the
 *			following guidelines for setting priorities.
 *			0:	Restart handler of last resort,
 *				with limited restart capabilities
 *			128:	Default restart handler; use if no other
 *				restart handler is expected to be available,
 *				and/or if restart functionality is
 *				sufficient to restart the entire system
 *			255:	Highest priority restart handler, will
 *				preempt all other restart handlers
 *
 *	Registers a function with code to be called to restart the
 *	system.
 *
 *	Registered functions will be called from machine_restart as last
 *	step of the restart sequence (if the architecture specific
 *	machine_restart function calls do_kernel_restart - see below
 *	for details).
 *	Registered functions are expected to restart the system immediately.
 *	If more than one function is registered, the restart handler priority
 *	selects which function will be called first.
 *
 *	Restart handlers are expected to be registered from non-architecture
 *	code, typically from drivers. A typical use case would be a system
 *	where restart functionality is provided through a watchdog. Multiple
 *	restart handlers may exist; for example, one restart handler might
 *	restart the entire system, while another only restarts the CPU.
 *	In such cases, the restart handler which only restarts part of the
 *	hardware is expected to register with low priority to ensure that
 *	it only runs if no other means to restart the system is available.
 *
 *	Currently always returns zero, as atomic_notifier_chain_register()
 *	always returns zero.
 */</doc>
