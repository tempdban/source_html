<def f='linux-4.14.y/include/linux/device.h' l='539' ll='548'/>
<size>48</size>
<doc f='linux-4.14.y/include/linux/device.h' l='530'>/*
 * The type of device, &quot;struct device&quot; is embedded in. A class
 * or bus can contain devices of different types
 * like &quot;partitions&quot; and &quot;disks&quot;, &quot;mouse&quot; and &quot;event&quot;.
 * This identifies the device type and carries type-specific
 * information, equivalent to the kobj_type of a kobject.
 * If &quot;name&quot; is specified, the uevent will contain it in
 * the DEVTYPE variable.
 */</doc>
<mbr r='device_type::name' o='0' t='const char *'/>
<mbr r='device_type::groups' o='64' t='const struct attribute_group **'/>
<mbr r='device_type::uevent' o='128' t='int (*)(struct device *, struct kobj_uevent_env *)'/>
<mbr r='device_type::devnode' o='192' t='char *(*)(struct device *, umode_t *, kuid_t *, kgid_t *)'/>
<mbr r='device_type::release' o='256' t='void (*)(struct device *)'/>
<mbr r='device_type::pm' o='320' t='const struct dev_pm_ops *'/>
<def f='linux-4.14.y/include/linux/device.h' l='539' ll='548'/>
<size>48</size>
<doc f='linux-4.14.y/include/linux/device.h' l='530'>/*
 * The type of device, &quot;struct device&quot; is embedded in. A class
 * or bus can contain devices of different types
 * like &quot;partitions&quot; and &quot;disks&quot;, &quot;mouse&quot; and &quot;event&quot;.
 * This identifies the device type and carries type-specific
 * information, equivalent to the kobj_type of a kobject.
 * If &quot;name&quot; is specified, the uevent will contain it in
 * the DEVTYPE variable.
 */</doc>
<mbr r='device_type::name' o='0' t='const char *'/>
<mbr r='device_type::groups' o='64' t='const struct attribute_group **'/>
<mbr r='device_type::uevent' o='128' t='int (*)(struct device *, struct kobj_uevent_env *)'/>
<mbr r='device_type::devnode' o='192' t='char *(*)(struct device *, umode_t *, kuid_t *, kgid_t *)'/>
<mbr r='device_type::release' o='256' t='void (*)(struct device *)'/>
<mbr r='device_type::pm' o='320' t='const struct dev_pm_ops *'/>
