<def f='linux-4.18.y/include/uapi/linux/vfio.h' l='541' ll='564'/>
<size>64</size>
<doc f='linux-4.18.y/include/uapi/linux/vfio.h' l='516'>/**
 * VFIO_DEVICE_QUERY_GFX_PLANE - _IOW(VFIO_TYPE, VFIO_BASE + 14,
 *                                    struct vfio_device_query_gfx_plane)
 *
 * Set the drm_plane_type and flags, then retrieve the gfx plane info.
 *
 * flags supported:
 * - VFIO_GFX_PLANE_TYPE_PROBE and VFIO_GFX_PLANE_TYPE_DMABUF are set
 *   to ask if the mdev supports dma-buf. 0 on support, -EINVAL on no
 *   support for dma-buf.
 * - VFIO_GFX_PLANE_TYPE_PROBE and VFIO_GFX_PLANE_TYPE_REGION are set
 *   to ask if the mdev supports region. 0 on support, -EINVAL on no
 *   support for region.
 * - VFIO_GFX_PLANE_TYPE_DMABUF or VFIO_GFX_PLANE_TYPE_REGION is set
 *   with each call to query the plane info.
 * - Others are invalid and return -EINVAL.
 *
 * Note:
 * 1. Plane could be disabled by guest. In that case, success will be
 *    returned with zero-initialized drm_format, size, width and height
 *    fields.
 * 2. x_hot/y_hot is set to 0xFFFFFFFF if no hotspot information available
 *
 * Return: 0 on success, -errno on other failure.
 */</doc>
<mbr r='vfio_device_gfx_plane_info::argsz' o='0' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::flags' o='32' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::drm_plane_type' o='64' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::drm_format' o='96' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::drm_format_mod' o='128' t='__u64'/>
<mbr r='vfio_device_gfx_plane_info::width' o='192' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::height' o='224' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::stride' o='256' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::size' o='288' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::x_pos' o='320' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::y_pos' o='352' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::x_hot' o='384' t='__u32'/>
<mbr r='vfio_device_gfx_plane_info::y_hot' o='416' t='__u32'/>
