<dec f='linux-4.18.y/lib/librte_eal/common/include/generic/rte_spinlock.h' l='294' type='int rte_spinlock_recursive_trylock_tm(rte_spinlock_recursive_t * slr)'/>
<def f='linux-4.18.y/lib/librte_eal/common/include/arch/x86/rte_spinlock.h' l='154' ll='161' type='int rte_spinlock_recursive_trylock_tm(rte_spinlock_recursive_t * slr)'/>
<doc f='linux-4.18.y/lib/librte_eal/common/include/generic/rte_spinlock.h' l='278'>/**
 * Try to execute critical section in a hardware memory transaction,
 * if it fails or not available try to take the recursive lock
 *
 * NOTE: An attempt to perform a HW I/O operation inside a hardware memory
 * transaction always aborts the transaction since the CPU is not able to
 * roll-back should the transaction fail. Therefore, hardware transactional
 * locks are not advised to be used around rte_eth_rx_burst() and
 * rte_eth_tx_burst() calls.
 *
 * @param slr
 *   A pointer to the recursive spinlock.
 * @return
 *   1 if the hardware memory transaction is successfully started
 *   or lock is successfully taken; 0 otherwise.
 */</doc>
