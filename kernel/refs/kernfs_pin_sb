<dec f='linux-4.18.y/include/linux/kernfs.h' l='357' type='struct super_block * kernfs_pin_sb(struct kernfs_root * root, const void * ns)'/>
<def f='linux-4.18.y/fs/kernfs/mount.c' l='385' ll='401' type='struct super_block * kernfs_pin_sb(struct kernfs_root * root, const void * ns)'/>
<doc f='linux-4.18.y/fs/kernfs/mount.c' l='373'>/**
 * kernfs_pin_sb: try to pin the superblock associated with a kernfs_root
 * @kernfs_root: the kernfs_root in question
 * @ns: the namespace tag
 *
 * Pin the superblock so the superblock won&apos;t be destroyed in subsequent
 * operations.  This can be used to block -&gt;kill_sb() which may be useful
 * for kernfs users which dynamically manage superblocks.
 *
 * Returns NULL if there&apos;s no superblock associated to this kernfs_root, or
 * -EINVAL if the superblock is being freed.
 */</doc>
<use f='linux-4.18.y/kernel/cgroup/cgroup-v1.c' l='1192' u='c' c='cgroup1_mount'/>
