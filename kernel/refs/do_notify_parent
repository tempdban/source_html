<dec f='linux-4.14.y/include/linux/sched/signal.h' l='297' type='bool do_notify_parent(struct task_struct * , int )'/>
<use f='linux-4.14.y/kernel/exit.c' l='215' u='c' c='release_task'/>
<use f='linux-4.14.y/kernel/exit.c' l='644' u='c' c='reparent_leader'/>
<use f='linux-4.14.y/kernel/exit.c' l='716' u='c' c='exit_notify'/>
<use f='linux-4.14.y/kernel/exit.c' l='719' u='c' c='exit_notify'/>
<use f='linux-4.14.y/kernel/exit.c' l='1155' u='c' c='wait_task_zombie'/>
<use f='linux-4.14.y/kernel/ptrace.c' l='517' u='c' c='__ptrace_detach'/>
<def f='linux-4.14.y/kernel/signal.c' l='1601' ll='1689' type='bool do_notify_parent(struct task_struct * tsk, int sig)'/>
<doc f='linux-4.14.y/kernel/signal.c' l='1594'>/*
 * Let a parent know about the death of a child.
 * For a stopped/continued status change, use do_notify_parent_cldstop instead.
 *
 * Returns true if our parent ignored us and so we&apos;ve switched to
 * self-reaping.
 */</doc>
<dec f='linux-4.14.y/include/linux/sched/signal.h' l='297' type='bool do_notify_parent(struct task_struct * , int )'/>
<use f='linux-4.14.y/kernel/exit.c' l='215' u='c' c='release_task'/>
<use f='linux-4.14.y/kernel/exit.c' l='644' u='c' c='reparent_leader'/>
<use f='linux-4.14.y/kernel/exit.c' l='716' u='c' c='exit_notify'/>
<use f='linux-4.14.y/kernel/exit.c' l='719' u='c' c='exit_notify'/>
<use f='linux-4.14.y/kernel/exit.c' l='1155' u='c' c='wait_task_zombie'/>
<use f='linux-4.14.y/kernel/ptrace.c' l='517' u='c' c='__ptrace_detach'/>
<def f='linux-4.14.y/kernel/signal.c' l='1601' ll='1689' type='bool do_notify_parent(struct task_struct * tsk, int sig)'/>
<doc f='linux-4.14.y/kernel/signal.c' l='1594'>/*
 * Let a parent know about the death of a child.
 * For a stopped/continued status change, use do_notify_parent_cldstop instead.
 *
 * Returns true if our parent ignored us and so we&apos;ve switched to
 * self-reaping.
 */</doc>
