<dec f='linux-4.14.y/include/linux/usb/gadget.h' l='820' type='void usb_gadget_udc_reset(struct usb_gadget * gadget, struct usb_gadget_driver * driver)'/>
<doc f='linux-4.14.y/include/linux/usb/gadget.h' l='819'>/* utility to tell udc core that the bus reset occurs */</doc>
<def f='linux-4.14.y/drivers/usb/gadget/udc/core.c' l='1030' ll='1035' type='void usb_gadget_udc_reset(struct usb_gadget * gadget, struct usb_gadget_driver * driver)'/>
<dec f='linux-4.14.y/drivers/usb/gadget/udc/core.c' l='1036' type='void usb_gadget_udc_reset(struct usb_gadget * , struct usb_gadget_driver * )'/>
<use f='linux-4.14.y/drivers/usb/gadget/udc/core.c' l='1036' c='usb_gadget_udc_reset'/>
<use f='linux-4.14.y/drivers/usb/gadget/udc/core.c' l='1036' u='a'/>
<use f='linux-4.14.y/drivers/usb/gadget/udc/core.c' l='1036' u='a'/>
<doc f='linux-4.14.y/drivers/usb/gadget/udc/core.c' l='1021'>/**
 * usb_gadget_udc_reset - notifies the udc core that bus reset occurs
 * @gadget: The gadget which bus reset occurs
 * @driver: The gadget driver we want to notify
 *
 * If the udc driver has bus reset handler, it needs to call this when the bus
 * reset occurs, it notifies the gadget driver that the bus reset occurs as
 * well as updates gadget state.
 */</doc>
<use f='linux-4.14.y/drivers/usb/gadget/udc/pch_udc.c' l='2571' u='c' c='pch_udc_svc_ur_interrupt'/>
