<dec f='linux-4.18.y/include/linux/fsnotify_backend.h' l='445' type='void fsnotify_init_event(struct fsnotify_event * event, struct inode * to_tell, u32 mask)'/>
<doc f='linux-4.18.y/include/linux/fsnotify_backend.h' l='444'>/* put here because inotify does some weird stuff when destroying watches */</doc>
<use f='linux-4.18.y/fs/notify/fanotify/fanotify.c' l='168' u='c' c='fanotify_alloc_event'/>
<use f='linux-4.18.y/fs/notify/inotify/inotify_fsnotify.c' l='112' u='c' c='inotify_handle_event'/>
<use f='linux-4.18.y/fs/notify/inotify/inotify_user.c' l='633' u='c' c='inotify_new_group'/>
<def f='linux-4.18.y/fs/notify/notification.c' l='210' ll='216' type='void fsnotify_init_event(struct fsnotify_event * event, struct inode * inode, u32 mask)'/>
<doc f='linux-4.18.y/fs/notify/notification.c' l='198'>/*
 * fsnotify_create_event - Allocate a new event which will be sent to each
 * group&apos;s handle_event function if the group was interested in this
 * particular event.
 *
 * @inode the inode which is supposed to receive the event (sometimes a
 *	parent of the inode to which the event happened.
 * @mask what actually happened.
 * @data pointer to the object which was actually affected
 * @data_type flag indication if the data is a file, path, inode, nothing...
 * @name the filename, if available
 */</doc>
