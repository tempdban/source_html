<dec f='linux-4.14.y/security/tomoyo/common.h' l='1003' type='int tomoyo_update_policy(struct tomoyo_acl_head * new_entry, const int size, struct tomoyo_acl_param * param, bool (*)(const struct tomoyo_acl_head *, const struct tomoyo_acl_head *) check_duplicate)'/>
<use f='linux-4.14.y/security/tomoyo/common.c' l='859' u='c' c='tomoyo_update_manager_entry'/>
<def f='linux-4.14.y/security/tomoyo/domain.c' l='31' ll='62' type='int tomoyo_update_policy(struct tomoyo_acl_head * new_entry, const int size, struct tomoyo_acl_param * param, bool (*)(const struct tomoyo_acl_head *, const struct tomoyo_acl_head *) check_duplicate)'/>
<use f='linux-4.14.y/security/tomoyo/domain.c' l='269' u='c' c='tomoyo_write_transition_control'/>
<use f='linux-4.14.y/security/tomoyo/domain.c' l='406' u='c' c='tomoyo_write_aggregator'/>
<doc f='linux-4.14.y/security/tomoyo/domain.c' l='19'>/**
 * tomoyo_update_policy - Update an entry for exception policy.
 *
 * @new_entry:       Pointer to &quot;struct tomoyo_acl_info&quot;.
 * @size:            Size of @new_entry in bytes.
 * @param:           Pointer to &quot;struct tomoyo_acl_param&quot;.
 * @check_duplicate: Callback function to find duplicated entry.
 *
 * Returns 0 on success, negative value otherwise.
 *
 * Caller holds tomoyo_read_lock().
 */</doc>
<use f='linux-4.14.y/security/tomoyo/group.c' l='88' u='c' c='tomoyo_write_group'/>
<use f='linux-4.14.y/security/tomoyo/group.c' l='96' u='c' c='tomoyo_write_group'/>
<use f='linux-4.14.y/security/tomoyo/group.c' l='108' u='c' c='tomoyo_write_group'/>
