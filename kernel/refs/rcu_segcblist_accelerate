<dec f='linux-4.18.y/kernel/rcu/rcu_segcblist.h' l='136' type='bool rcu_segcblist_accelerate(struct rcu_segcblist * rsclp, unsigned long seq)'/>
<def f='linux-4.18.y/kernel/rcu/rcu_segcblist.c' l='355' ll='404' type='bool rcu_segcblist_accelerate(struct rcu_segcblist * rsclp, unsigned long seq)'/>
<doc f='linux-4.18.y/kernel/rcu/rcu_segcblist.c' l='340'>/*
 * &quot;Accelerate&quot; callbacks based on more-accurate grace-period information.
 * The reason for this is that RCU does not synchronize the beginnings and
 * ends of grace periods, and that callbacks are posted locally.  This in
 * turn means that the callbacks must be labelled conservatively early
 * on, as getting exact information would degrade both performance and
 * scalability.  When more accurate grace-period information becomes
 * available, previously posted callbacks can be &quot;accelerated&quot;, marking
 * them to complete at the end of the earlier grace period.
 *
 * This function operates on an rcu_segcblist structure, and also the
 * grace-period sequence number seq at which new callbacks would become
 * ready to invoke.  Returns true if there are callbacks that won&apos;t be
 * ready to invoke until seq, false otherwise.
 */</doc>
<use f='linux-4.18.y/kernel/rcu/srcutree.c' l='450' u='c' c='srcu_gp_start'/>
<use f='linux-4.18.y/kernel/rcu/srcutree.c' l='868' u='c' c='__call_srcu'/>
<use f='linux-4.18.y/kernel/rcu/srcutree.c' l='1201' u='c' c='srcu_invoke_callbacks'/>
<use f='linux-4.18.y/kernel/rcu/tree.c' l='1768' u='c' c='rcu_accelerate_cbs'/>
