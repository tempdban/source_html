<def f='linux-4.18.y/tools/lib/subcmd/parse-options.h' l='100' ll='115'/>
<size>96</size>
<doc f='linux-4.18.y/tools/lib/subcmd/parse-options.h' l='57'>/*
 * `type`::
 *   holds the type of the option, you must have an OPTION_END last in your
 *   array.
 *
 * `short_name`::
 *   the character to use as a short option name, &apos;\0&apos; if none.
 *
 * `long_name`::
 *   the long option name, without the leading dashes, NULL if none.
 *
 * `value`::
 *   stores pointers to the values to be filled.
 *
 * `argh`::
 *   token to explain the kind of argument this option wants. Keep it
 *   homogenous across the repository.
 *
 * `help`::
 *   the short help associated to what the option does.
 *   Must never be NULL (except for OPTION_END).
 *   OPTION_GROUP uses this pointer to store the group header.
 *
 * `flags`::
 *   mask of parse_opt_option_flags.
 *   PARSE_OPT_OPTARG: says that the argument is optionnal (not for BOOLEANs)
 *   PARSE_OPT_NOARG: says that this option takes no argument, for CALLBACKs
 *   PARSE_OPT_NONEG: says that this option cannot be negated
 *   PARSE_OPT_HIDDEN this option is skipped in the default usage, showed in
 *                    the long one.
 *
 * `callback`::
 *   pointer to the callback to use for OPTION_CALLBACK.
 *
 * `defval`::
 *   default value to fill (*-&gt;value) with for PARSE_OPT_OPTARG.
 *   OPTION_{BIT,SET_UINT,SET_PTR} store the {mask,integer,pointer} to put in
 *   the value when met.
 *   CALLBACKS can use it like they want.
 *
 * `set`::
 *   whether an option was set by the user
 */</doc>
<mbr r='option::type' o='0' t='enum parse_opt_type'/>
<mbr r='option::short_name' o='32' t='int'/>
<mbr r='option::long_name' o='64' t='const char *'/>
<mbr r='option::value' o='128' t='void *'/>
<mbr r='option::argh' o='192' t='const char *'/>
<mbr r='option::help' o='256' t='const char *'/>
<mbr r='option::build_opt' o='320' t='const char *'/>
<mbr r='option::flags' o='384' t='int'/>
<mbr r='option::callback' o='448' t='parse_opt_cb *'/>
<mbr r='option::defval' o='512' t='intptr_t'/>
<mbr r='option::set' o='576' t='_Bool *'/>
<mbr r='option::data' o='640' t='void *'/>
<mbr r='option::parent' o='704' t='const struct option *'/>
