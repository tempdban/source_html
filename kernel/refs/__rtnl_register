<dec f='linux-4.14.y/include/net/rtnetlink.h' l='16' type='int __rtnl_register(int protocol, int msgtype, rtnl_doit_func , rtnl_dumpit_func , unsigned int flags)'/>
<def f='linux-4.14.y/net/core/rtnetlink.c' l='165' ll='191' type='int __rtnl_register(int protocol, int msgtype, rtnl_doit_func doit, rtnl_dumpit_func dumpit, unsigned int flags)'/>
<dec f='linux-4.14.y/net/core/rtnetlink.c' l='192' type='int __rtnl_register(int , int , rtnl_doit_func , rtnl_dumpit_func , unsigned int )'/>
<use f='linux-4.14.y/net/core/rtnetlink.c' l='192' c='__rtnl_register'/>
<use f='linux-4.14.y/net/core/rtnetlink.c' l='192' u='a'/>
<use f='linux-4.14.y/net/core/rtnetlink.c' l='192' u='a'/>
<use f='linux-4.14.y/net/core/rtnetlink.c' l='207' u='c' c='rtnl_register'/>
<doc f='linux-4.14.y/net/core/rtnetlink.c' l='147'>/**
 * __rtnl_register - Register a rtnetlink message type
 * @protocol: Protocol family or PF_UNSPEC
 * @msgtype: rtnetlink message type
 * @doit: Function pointer called for each request message
 * @dumpit: Function pointer called for each dump request (NLM_F_DUMP) message
 * @flags: rtnl_link_flags to modifiy behaviour of doit/dumpit functions
 *
 * Registers the specified function pointers (at least one of them has
 * to be non-NULL) to be called whenever a request message for the
 * specified protocol family and message type is received.
 *
 * The special protocol family PF_UNSPEC may be used to define fallback
 * function pointers for the case when no entry for the specific protocol
 * family exists.
 *
 * Returns 0 on success or a negative error code.
 */</doc>
