<dec f='linux-4.14.y/include/drm/ttm/ttm_bo_api.h' l='535' type='int ttm_bo_init(struct ttm_bo_device * bdev, struct ttm_buffer_object * bo, unsigned long size, enum ttm_bo_type type, struct ttm_placement * placement, uint32_t page_alignment, bool interrubtible, struct file * persistent_swap_storage, size_t acc_size, struct sg_table * sg, struct reservation_object * resv, void (*)(struct ttm_buffer_object *) destroy)'/>
<doc f='linux-4.14.y/include/drm/ttm/ttm_bo_api.h' l='496'>/**
 * ttm_bo_init
 *
 * @bdev: Pointer to a ttm_bo_device struct.
 * @bo: Pointer to a ttm_buffer_object to be initialized.
 * @size: Requested size of buffer object.
 * @type: Requested type of buffer object.
 * @flags: Initial placement flags.
 * @page_alignment: Data alignment in pages.
 * @interruptible: If needing to sleep to wait for GPU resources,
 * sleep interruptible.
 * @persistent_swap_storage: Usually the swap storage is deleted for buffers
 * pinned in physical memory. If this behaviour is not desired, this member
 * holds a pointer to a persistent shmem object. Typically, this would
 * point to the shmem object backing a GEM object if TTM is used to back a
 * GEM user interface.
 * @acc_size: Accounted size for this object.
 * @resv: Pointer to a reservation_object, or NULL to let ttm allocate one.
 * @destroy: Destroy function. Use NULL for kfree().
 *
 * This function initializes a pre-allocated struct ttm_buffer_object.
 * As this object may be part of a larger structure, this function,
 * together with the @destroy function,
 * enables driver-specific objects derived from a ttm_buffer_object.
 *
 * On successful return, the caller owns an object kref to @bo. The kref and
 * list_kref are usually set to 1, but note that in some situations, other
 * tasks may already be holding references to @bo as well.
 *
 * If a failure occurs, the function will call the @destroy function, or
 * kfree() if @destroy is NULL. Thus, after a failure, dereferencing @bo is
 * illegal and will likely cause memory corruption.
 *
 * Returns
 * -ENOMEM: Out of memory.
 * -EINVAL: Invalid placement flags.
 * -ERESTARTSYS: Interrupted by signal while sleeping waiting for resources.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_mm.c' l='371' u='c' c='bochs_bo_create'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_ttm.c' l='343' u='c' c='cirrus_bo_create'/>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_object.c' l='111' u='c' c='qxl_bo_create'/>
<def f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1250' ll='1276' type='int ttm_bo_init(struct ttm_bo_device * bdev, struct ttm_buffer_object * bo, unsigned long size, enum ttm_bo_type type, struct ttm_placement * placement, uint32_t page_alignment, bool interruptible, struct file * persistent_swap_storage, size_t acc_size, struct sg_table * sg, struct reservation_object * resv, void (*)(struct ttm_buffer_object *) destroy)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1277' type='int ttm_bo_init(struct ttm_bo_device * , struct ttm_buffer_object * , unsigned long , enum ttm_bo_type , struct ttm_placement * , uint32_t , bool , struct file * , size_t , struct sg_table * , struct reservation_object * , void (*)(struct ttm_buffer_object *) )'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1277' c='ttm_bo_init'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1277' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1277' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1325' u='c' c='ttm_bo_create'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_object.c' l='91' u='c' c='virtio_gpu_object_create'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c' l='385' u='c' c='vmw_dmabuf_init'/>
