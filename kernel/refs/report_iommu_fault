<dec f='linux-4.18.y/include/linux/iommu.h' l='359' type='int report_iommu_fault(struct iommu_domain * domain, struct device * dev, unsigned long iova, int flags)'/>
<def f='linux-4.18.y/drivers/iommu/iommu.c' l='1727' ll='1742' type='int report_iommu_fault(struct iommu_domain * domain, struct device * dev, unsigned long iova, int flags)'/>
<dec f='linux-4.18.y/drivers/iommu/iommu.c' l='1743' type='int report_iommu_fault(struct iommu_domain * , struct device * , unsigned long , int )'/>
<use f='linux-4.18.y/drivers/iommu/iommu.c' l='1743' c='report_iommu_fault'/>
<use f='linux-4.18.y/drivers/iommu/iommu.c' l='1743' u='a'/>
<use f='linux-4.18.y/drivers/iommu/iommu.c' l='1743' u='a'/>
<doc f='linux-4.18.y/drivers/iommu/iommu.c' l='1703'>/**
 * report_iommu_fault() - report about an IOMMU fault to the IOMMU framework
 * @domain: the iommu domain where the fault has happened
 * @dev: the device where the fault has happened
 * @iova: the faulting address
 * @flags: mmu fault flags (e.g. IOMMU_FAULT_READ/IOMMU_FAULT_WRITE/...)
 *
 * This function should be called by the low-level IOMMU implementations
 * whenever IOMMU faults happen, to allow high-level users, that are
 * interested in such events, to know about them.
 *
 * This event may be useful for several possible use cases:
 * - mere logging of the event
 * - dynamic TLB/PTE loading
 * - if restarting of the faulting device is required
 *
 * Returns 0 on success and an appropriate error code otherwise (if dynamic
 * PTE/TLB loading will one day be supported, implementations will be able
 * to tell whether it succeeded or not according to this return value).
 *
 * Specifically, -ENOSYS is returned if a fault handler isn&apos;t installed
 * (though fault handlers can also return -ENOSYS, in case they want to
 * elicit the default behavior of the IOMMU drivers).
 */</doc>
