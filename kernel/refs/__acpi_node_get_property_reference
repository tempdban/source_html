<dec f='linux-4.14.y/include/linux/acpi.h' l='1038' type='int __acpi_node_get_property_reference(const struct fwnode_handle * fwnode, const char * name, size_t index, size_t num_args, struct acpi_reference_args * args)'/>
<use f='linux-4.14.y/include/linux/acpi.h' l='1047' u='c' c='acpi_node_get_property_reference'/>
<def f='linux-4.14.y/drivers/acpi/property.c' l='580' ll='681' type='int __acpi_node_get_property_reference(const struct fwnode_handle * fwnode, const char * propname, size_t index, size_t num_args, struct acpi_reference_args * args)'/>
<dec f='linux-4.14.y/drivers/acpi/property.c' l='682' type='int __acpi_node_get_property_reference(const struct fwnode_handle * , const char * , size_t , size_t , struct acpi_reference_args * )'/>
<use f='linux-4.14.y/drivers/acpi/property.c' l='682' c='__acpi_node_get_property_reference'/>
<use f='linux-4.14.y/drivers/acpi/property.c' l='682' u='a'/>
<use f='linux-4.14.y/drivers/acpi/property.c' l='682' u='a'/>
<use f='linux-4.14.y/drivers/acpi/property.c' l='1216' u='c' c='acpi_fwnode_get_reference_args'/>
<doc f='linux-4.14.y/drivers/acpi/property.c' l='545'>/**
 * __acpi_node_get_property_reference - returns handle to the referenced object
 * @fwnode: Firmware node to get the property from
 * @propname: Name of the property
 * @index: Index of the reference to return
 * @num_args: Maximum number of arguments after each reference
 * @args: Location to store the returned reference with optional arguments
 *
 * Find property with @name, verifify that it is a package containing at least
 * one object reference and if so, store the ACPI device object pointer to the
 * target object in @args-&gt;adev.  If the reference includes arguments, store
 * them in the @args-&gt;args[] array.
 *
 * If there&apos;s more than one reference in the property value package, @index is
 * used to select the one to return.
 *
 * It is possible to leave holes in the property value set like in the
 * example below:
 *
 * Package () {
 *     &quot;cs-gpios&quot;,
 *     Package () {
 *        ^GPIO, 19, 0, 0,
 *        ^GPIO, 20, 0, 0,
 *        0,
 *        ^GPIO, 21, 0, 0,
 *     }
 * }
 *
 * Calling this function with index %2 or index %3 return %-ENOENT. If the
 * property does not contain any more values %-ENOENT is returned. The NULL
 * entry must be single integer and preferably contain value %0.
 *
 * Return: %0 on success, negative error code on failure.
 */</doc>
