<dec f='linux-4.18.y/include/linux/mmu_notifier.h' l='65' type='void (*)(struct mmu_notifier *, struct mm_struct *)'/>
<offset>64</offset>
<doc f='linux-4.18.y/include/linux/mmu_notifier.h' l='42'>/*
	 * Called either by mmu_notifier_unregister or when the mm is
	 * being destroyed by exit_mmap, always before all pages are
	 * freed. This can run concurrently with other mmu notifier
	 * methods (the ones invoked outside the mm context) and it
	 * should tear down all secondary mmu mappings and freeze the
	 * secondary mmu. If this method isn&apos;t implemented you&apos;ve to
	 * be sure that nothing could possibly write to the pages
	 * through the secondary mmu by the time the last thread with
	 * tsk-&gt;mm == mm exits.
	 *
	 * As side note: the pages freed after -&gt;release returns could
	 * be immediately reallocated by the gart at an alias physical
	 * address with a different cache model, so if -&gt;release isn&apos;t
	 * implemented because all _software_ driven memory accesses
	 * through the secondary mmu are terminated by the time the
	 * last thread of this mm quits, you&apos;ve also to be sure that
	 * speculative _hardware_ operations can&apos;t allocate dirty
	 * cachelines in the cpu that could not be snooped and made
	 * coherent with the other read and write operations happening
	 * through the gart alias address, so leading to memory
	 * corruption.
	 */</doc>
<use f='linux-4.18.y/drivers/iommu/amd_iommu_v2.c' l='431' u='w'/>
<use f='linux-4.18.y/drivers/iommu/intel-svm.c' l='295' u='w'/>
<use f='linux-4.18.y/mm/mmu_notifier.c' l='74' u='r' c='__mmu_notifier_release'/>
<use f='linux-4.18.y/mm/mmu_notifier.c' l='75' u='r' c='__mmu_notifier_release'/>
<use f='linux-4.18.y/mm/mmu_notifier.c' l='384' u='r' c='mmu_notifier_unregister'/>
<use f='linux-4.18.y/mm/mmu_notifier.c' l='385' u='r' c='mmu_notifier_unregister'/>
<use f='linux-4.18.y/virt/kvm/kvm_main.c' l='503' u='w'/>
