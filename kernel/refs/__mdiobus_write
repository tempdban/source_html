<dec f='linux-4.18.y/include/linux/mdio.h' l='265' type='int __mdiobus_write(struct mii_bus * bus, int addr, u32 regnum, u16 val)'/>
<use f='linux-4.18.y/include/linux/phy.h' l='759' u='c' c='__phy_write'/>
<def f='linux-4.18.y/drivers/net/phy/mdio_bus.c' l='566' ll='577' type='int __mdiobus_write(struct mii_bus * bus, int addr, u32 regnum, u16 val)'/>
<dec f='linux-4.18.y/drivers/net/phy/mdio_bus.c' l='578' type='int __mdiobus_write(struct mii_bus * , int , u32 , u16 )'/>
<use f='linux-4.18.y/drivers/net/phy/mdio_bus.c' l='578' c='__mdiobus_write'/>
<use f='linux-4.18.y/drivers/net/phy/mdio_bus.c' l='578' u='a'/>
<use f='linux-4.18.y/drivers/net/phy/mdio_bus.c' l='578' u='a'/>
<use f='linux-4.18.y/drivers/net/phy/mdio_bus.c' l='652' u='c' c='mdiobus_write_nested'/>
<use f='linux-4.18.y/drivers/net/phy/mdio_bus.c' l='677' u='c' c='mdiobus_write'/>
<doc f='linux-4.18.y/drivers/net/phy/mdio_bus.c' l='555'>/**
 * __mdiobus_write - Unlocked version of the mdiobus_write function
 * @bus: the mii_bus struct
 * @addr: the phy address
 * @regnum: register number to write
 * @val: value to write to @regnum
 *
 * Write a MDIO bus register. Caller must hold the mdio bus lock.
 *
 * NOTE: MUST NOT be called from interrupt context.
 */</doc>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='239' u='c' c='mmd_phy_indirect'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='242' u='c' c='mmd_phy_indirect'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='245' u='c' c='mmd_phy_indirect'/>
<use f='linux-4.18.y/drivers/net/phy/phy-core.c' l='318' u='c' c='phy_write_mmd'/>
