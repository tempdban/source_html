<dec f='linux-4.18.y/include/linux/kernel.h' l='315' type='int kstrtoll(const char * s, unsigned int base, long long * res)'/>
<use f='linux-4.18.y/include/linux/kernel.h' l='370' u='c' c='kstrtol'/>
<use f='linux-4.18.y/include/linux/kernel.h' l='385' u='c' c='kstrtos64'/>
<use f='linux-4.18.y/drivers/md/md-bitmap.c' l='2321' u='c' c='location_store'/>
<use f='linux-4.18.y/drivers/md/md-bitmap.c' l='2323' u='c' c='location_store'/>
<use f='linux-4.18.y/kernel/cgroup/cgroup.c' l='3466' u='c' c='cgroup_file_write'/>
<use f='linux-4.18.y/kernel/trace/trace_events_filter.c' l='1343' u='c' c='parse_pred'/>
<def f='linux-4.18.y/lib/kstrtox.c' l='145' ll='166' type='int kstrtoll(const char * s, unsigned int base, long long * res)'/>
<dec f='linux-4.18.y/lib/kstrtox.c' l='167' type='int kstrtoll(const char * , unsigned int , long long * )'/>
<use f='linux-4.18.y/lib/kstrtox.c' l='167' c='kstrtoll'/>
<use f='linux-4.18.y/lib/kstrtox.c' l='167' u='a'/>
<use f='linux-4.18.y/lib/kstrtox.c' l='167' u='a'/>
<use f='linux-4.18.y/lib/kstrtox.c' l='191' u='c' c='_kstrtol'/>
<use f='linux-4.18.y/lib/kstrtox.c' l='253' u='c' c='kstrtoint'/>
<use f='linux-4.18.y/lib/kstrtox.c' l='283' u='c' c='kstrtos16'/>
<use f='linux-4.18.y/lib/kstrtox.c' l='313' u='c' c='kstrtos8'/>
<use f='linux-4.18.y/lib/kstrtox.c' l='402' u='c' c='kstrtoll_from_user'/>
<doc f='linux-4.18.y/lib/kstrtox.c' l='129'>/**
 * kstrtoll - convert a string to a long long
 * @s: The start of the string. The string must be null-terminated, and may also
 *  include a single newline before its terminating null. The first character
 *  may also be a plus sign or a minus sign.
 * @base: The number base to use. The maximum supported base is 16. If base is
 *  given as 0, then the base of the string is automatically detected with the
 *  conventional semantics - If it begins with 0x the number will be parsed as a
 *  hexadecimal (case insensitive), if it otherwise begins with 0, it will be
 *  parsed as an octal number. Otherwise it will be parsed as a decimal.
 * @res: Where to write the result of the conversion on success.
 *
 * Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error.
 * Used as a replacement for the obsolete simple_strtoull. Return code must
 * be checked.
 */</doc>
