<dec f='linux-4.14.y/include/linux/uprobes.h' l='138' type='bool uprobe_deny_signal()'/>
<def f='linux-4.14.y/kernel/events/uprobes.c' l='1657' ll='1679' type='bool uprobe_deny_signal()'/>
<doc f='linux-4.14.y/kernel/events/uprobes.c' l='1648'>/*
 * If we are singlestepping, then ensure this thread is not connected to
 * non-fatal signals until completion of singlestep.  When xol insn itself
 * triggers the signal,  restart the original insn even if the task is
 * already SIGKILL&apos;ed (since coredump should report the correct ip).  This
 * is even more important if the task has a handler for SIGSEGV/etc, The
 * _same_ instruction should be repeated again after return from the signal
 * handler, and SSTEP can never finish in this case.
 */</doc>
<use f='linux-4.14.y/kernel/signal.c' l='2180' u='c' c='get_signal'/>
<dec f='linux-4.14.y/include/linux/uprobes.h' l='138' type='bool uprobe_deny_signal()'/>
<def f='linux-4.14.y/kernel/events/uprobes.c' l='1657' ll='1679' type='bool uprobe_deny_signal()'/>
<doc f='linux-4.14.y/kernel/events/uprobes.c' l='1648'>/*
 * If we are singlestepping, then ensure this thread is not connected to
 * non-fatal signals until completion of singlestep.  When xol insn itself
 * triggers the signal,  restart the original insn even if the task is
 * already SIGKILL&apos;ed (since coredump should report the correct ip).  This
 * is even more important if the task has a handler for SIGSEGV/etc, The
 * _same_ instruction should be repeated again after return from the signal
 * handler, and SSTEP can never finish in this case.
 */</doc>
<use f='linux-4.14.y/kernel/signal.c' l='2180' u='c' c='get_signal'/>
