<def f='linux-4.14.y/drivers/android/binder_alloc.h' l='101' ll='115'/>
<size>128</size>
<doc f='linux-4.14.y/drivers/android/binder_alloc.h' l='77'>/**
 * struct binder_alloc - per-binder proc state for binder allocator
 * @vma:                vm_area_struct passed to mmap_handler
 *                      (invarient after mmap)
 * @tsk:                tid for task that called init for this proc
 *                      (invariant after init)
 * @vma_vm_mm:          copy of vma-&gt;vm_mm (invarient after mmap)
 * @buffer:             base of per-proc address space mapped via mmap
 * @user_buffer_offset: offset between user and kernel VAs for buffer
 * @buffers:            list of all buffers for this proc
 * @free_buffers:       rb tree of buffers available for allocation
 *                      sorted by size
 * @allocated_buffers:  rb tree of allocated buffers sorted by address
 * @free_async_space:   VA space available for async buffers. This is
 *                      initialized at mmap time to 1/2 the full VA space
 * @pages:              array of binder_lru_page
 * @buffer_size:        size of address space specified via mmap
 * @pid:                pid for associated binder_proc (invariant after init)
 *
 * Bookkeeping structure for per-proc address space management for binder
 * buffers. It is normally initialized during binder_init() and binder_mmap()
 * calls. The address space is used for both user-visible buffers and for
 * struct binder_buffer objects used to track the user buffers
 */</doc>
<mbr r='binder_alloc::mutex' o='0' t='struct mutex'/>
<mbr r='binder_alloc::vma' o='256' t='struct vm_area_struct *'/>
<mbr r='binder_alloc::vma_vm_mm' o='320' t='struct mm_struct *'/>
<mbr r='binder_alloc::buffer' o='384' t='void *'/>
<mbr r='binder_alloc::user_buffer_offset' o='448' t='ptrdiff_t'/>
<mbr r='binder_alloc::buffers' o='512' t='struct list_head'/>
<mbr r='binder_alloc::free_buffers' o='640' t='struct rb_root'/>
<mbr r='binder_alloc::allocated_buffers' o='704' t='struct rb_root'/>
<mbr r='binder_alloc::free_async_space' o='768' t='size_t'/>
<mbr r='binder_alloc::pages' o='832' t='struct binder_lru_page *'/>
<mbr r='binder_alloc::buffer_size' o='896' t='size_t'/>
<mbr r='binder_alloc::buffer_free' o='960' t='uint32_t'/>
<mbr r='binder_alloc::pid' o='992' t='int'/>
