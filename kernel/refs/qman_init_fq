<dec f='linux-4.18.y/drivers/bus/dpaa/include/fsl_qman.h' l='1609' type='int qman_init_fq(struct qman_fq * fq, u32 flags, struct qm_mcc_initfq * opts)'/>
<doc f='linux-4.18.y/drivers/bus/dpaa/include/fsl_qman.h' l='1575'>/**
 * qman_init_fq - Initialises FQ fields, leaves the FQ &quot;parked&quot; or &quot;scheduled&quot;
 * @fq: the frame queue object to modify, must be &apos;parked&apos; or new.
 * @flags: bit-mask of QMAN_INITFQ_FLAG_*** options
 * @opts: the FQ-modification settings, as defined in the low-level API
 *
 * The @opts parameter comes from the low-level portal API. Select
 * QMAN_INITFQ_FLAG_SCHED in @flags to cause the frame queue to be scheduled
 * rather than parked. NB, @opts can be NULL.
 *
 * Note that some fields and options within @opts may be ignored or overwritten
 * by the driver;
 * 1. the &apos;count&apos; and &apos;fqid&apos; fields are always ignored (this operation only
 * affects one frame queue: @fq).
 * 2. the QM_INITFQ_WE_CONTEXTB option of the &apos;we_mask&apos; field and the associated
 * &apos;fqd&apos; structure&apos;s &apos;context_b&apos; field are sometimes overwritten;
 *   - if @fq was not created with QMAN_FQ_FLAG_TO_DCPORTAL, then context_b is
 *     initialised to a value used by the driver for demux.
 *   - if context_b is initialised for demux, so is context_a in case stashing
 *     is requested (see item 4).
 * (So caller control of context_b is only possible for TO_DCPORTAL frame queue
 * objects.)
 * 3. if @flags contains QMAN_INITFQ_FLAG_LOCAL, the &apos;fqd&apos; structure&apos;s
 * &apos;dest::channel&apos; field will be overwritten to match the portal used to issue
 * the command. If the WE_DESTWQ write-enable bit had already been set by the
 * caller, the channel workqueue will be left as-is, otherwise the write-enable
 * bit is set and the workqueue is set to a default of 4. If the &quot;LOCAL&quot; flag
 * isn&apos;t set, the destination channel/workqueue fields and the write-enable bit
 * are left as-is.
 * 4. if the driver overwrites context_a/b for demux, then if
 * QM_INITFQ_WE_CONTEXTA is set, the driver will only overwrite
 * context_a.address fields and will leave the stashing fields provided by the
 * user alone, otherwise it will zero out the context_a.stashing fields.
 */</doc>
<def f='linux-4.18.y/drivers/bus/dpaa/base/qbman/qman.c' l='1509' ll='1603' type='int qman_init_fq(struct qman_fq * fq, u32 flags, struct qm_mcc_initfq * opts)'/>
<use f='linux-4.18.y/drivers/crypto/dpaa_sec/dpaa_sec.c' l='149' u='c' c='dpaa_sec_init_rx'/>
<use f='linux-4.18.y/drivers/crypto/dpaa_sec/dpaa_sec.c' l='223' u='c' c='dpaa_sec_init_tx'/>
<use f='linux-4.18.y/drivers/net/dpaa/dpaa_ethdev.c' l='658' u='c' c='dpaa_eth_rx_queue_setup'/>
<use f='linux-4.18.y/drivers/net/dpaa/dpaa_ethdev.c' l='742' u='c' c='dpaa_eth_eventq_attach'/>
<use f='linux-4.18.y/drivers/net/dpaa/dpaa_ethdev.c' l='774' u='c' c='dpaa_eth_eventq_detach'/>
<use f='linux-4.18.y/drivers/net/dpaa/dpaa_ethdev.c' l='1139' u='c' c='dpaa_rx_queue_init'/>
<use f='linux-4.18.y/drivers/net/dpaa/dpaa_ethdev.c' l='1170' u='c' c='dpaa_tx_queue_init'/>
