<dec f='linux-4.18.y/include/linux/key.h' l='273' type='struct key * request_key(struct key_type * type, const char * description, const char * callout_info)'/>
<use f='linux-4.18.y/drivers/md/dm-crypt.c' l='2035' u='c' c='crypt_set_keyring_key'/>
<use f='linux-4.18.y/fs/crypto/keyinfo.c' l='89' u='c' c='find_and_lock_process_key'/>
<def f='linux-4.18.y/security/keys/request_key.c' l='645' ll='665' type='struct key * request_key(struct key_type * type, const char * description, const char * callout_info)'/>
<dec f='linux-4.18.y/security/keys/request_key.c' l='666' type='struct key * request_key(struct key_type * , const char * , const char * )'/>
<use f='linux-4.18.y/security/keys/request_key.c' l='666' c='request_key'/>
<use f='linux-4.18.y/security/keys/request_key.c' l='666' u='a'/>
<use f='linux-4.18.y/security/keys/request_key.c' l='666' u='a'/>
<doc f='linux-4.18.y/security/keys/request_key.c' l='631'>/**
 * request_key - Request a key and wait for construction
 * @type: Type of key.
 * @description: The searchable description of the key.
 * @callout_info: The data to pass to the instantiation upcall (or NULL).
 *
 * As for request_key_and_link() except that it does not add the returned key
 * to a keyring if found, new keys are always allocated in the user&apos;s quota,
 * the callout_info must be a NUL-terminated string and no auxiliary data can
 * be passed.
 *
 * Furthermore, it then works as wait_for_key_construction() to wait for the
 * completion of keys undergoing construction with a non-interruptible wait.
 */</doc>
