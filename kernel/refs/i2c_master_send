<dec f='linux-4.14.y/include/linux/i2c.h' l='66' type='int i2c_master_send(const struct i2c_client * client, const char * buf, int count)'/>
<doc f='linux-4.14.y/include/linux/i2c.h' l='59'>/*
 * The master routines are the ones normally used to transmit data to devices
 * on a bus (or read from them). Apart from two basic transfer functions to
 * transmit one message at a time, a more complex version can be used to
 * transmit an arbitrary number of messages without interruption.
 * @count must be be less than 64k since msg.len is u16.
 */</doc>
<use f='linux-4.14.y/drivers/base/regmap/regmap-i2c.c' l='133' u='c' c='regmap_i2c_write'/>
<def f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1962' ll='1980' type='int i2c_master_send(const struct i2c_client * client, const char * buf, int count)'/>
<dec f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1981' type='int i2c_master_send(const struct i2c_client * , const char * , int )'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1981' c='i2c_master_send'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1981' u='a'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1981' u='a'/>
<doc f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1954'>/**
 * i2c_master_send - issue a single I2C message in master transmit mode
 * @client: Handle to slave device
 * @buf: Data that will be written to the slave
 * @count: How many bytes to write, must be less than 64k since msg.len is u16
 *
 * Returns negative errno, or else the number of bytes written.
 */</doc>
