<dec f='linux-4.14.y/include/linux/completion.h' l='137' type='int wait_for_completion_interruptible(struct completion * x)'/>
<use f='linux-4.14.y/crypto/algboss.c' l='197' u='c' c='cryptomgr_schedule_probe'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='2308' u='c' c='drm_atomic_helper_swap_state'/>
<def f='linux-4.14.y/kernel/sched/completion.c' l='210' ll='216' type='int wait_for_completion_interruptible(struct completion * x)'/>
<dec f='linux-4.14.y/kernel/sched/completion.c' l='217' type='int wait_for_completion_interruptible(struct completion * )'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='217' c='wait_for_completion_interruptible'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='217' u='a'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='217' u='a'/>
<doc f='linux-4.14.y/kernel/sched/completion.c' l='201'>/**
 * wait_for_completion_interruptible: - waits for completion of a task (w/intr)
 * @x:  holds the state of this particular completion
 *
 * This waits for completion of a specific task to be signaled. It is
 * interruptible.
 *
 * Return: -ERESTARTSYS if interrupted, 0 if completed.
 */</doc>
<dec f='linux-4.14.y/include/linux/completion.h' l='137' type='int wait_for_completion_interruptible(struct completion * x)'/>
<use f='linux-4.14.y/crypto/algboss.c' l='197' u='c' c='cryptomgr_schedule_probe'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='2308' u='c' c='drm_atomic_helper_swap_state'/>
<def f='linux-4.14.y/kernel/sched/completion.c' l='210' ll='216' type='int wait_for_completion_interruptible(struct completion * x)'/>
<dec f='linux-4.14.y/kernel/sched/completion.c' l='217' type='int wait_for_completion_interruptible(struct completion * )'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='217' c='wait_for_completion_interruptible'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='217' u='a'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='217' u='a'/>
<doc f='linux-4.14.y/kernel/sched/completion.c' l='201'>/**
 * wait_for_completion_interruptible: - waits for completion of a task (w/intr)
 * @x:  holds the state of this particular completion
 *
 * This waits for completion of a specific task to be signaled. It is
 * interruptible.
 *
 * Return: -ERESTARTSYS if interrupted, 0 if completed.
 */</doc>
