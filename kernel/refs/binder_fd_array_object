<def f='linux-4.18.y/include/uapi/linux/android/binder.h' l='155' ll='161'/>
<size>32</size>
<doc f='linux-4.18.y/include/uapi/linux/android/binder.h' l='134'>/* struct binder_fd_array_object - object describing an array of fds in a buffer
 * @hdr:		common header structure
 * @pad:		padding to ensure correct alignment
 * @num_fds:		number of file descriptors in the buffer
 * @parent:		index in offset array to buffer holding the fd array
 * @parent_offset:	start offset of fd array in the buffer
 *
 * A binder_fd_array object represents an array of file
 * descriptors embedded in a binder_buffer_object. It is
 * different from a regular binder_buffer_object because it
 * describes a list of file descriptors to fix up, not an opaque
 * blob of memory, and hence the kernel needs to treat it differently.
 *
 * An example of how this would be used is with Android&apos;s
 * native_handle_t object, which is a struct with a list of integers
 * and a list of file descriptors. The native_handle_t struct itself
 * will be represented by a struct binder_buffer_objct, whereas the
 * embedded list of file descriptors is represented by a
 * struct binder_fd_array_object with that binder_buffer_object as
 * a parent.
 */</doc>
<mbr r='binder_fd_array_object::hdr' o='0' t='struct binder_object_header'/>
<mbr r='binder_fd_array_object::pad' o='32' t='__u32'/>
<mbr r='binder_fd_array_object::num_fds' o='64' t='binder_size_t'/>
<mbr r='binder_fd_array_object::parent' o='128' t='binder_size_t'/>
<mbr r='binder_fd_array_object::parent_offset' o='192' t='binder_size_t'/>
