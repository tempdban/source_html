<dec f='linux-4.14.y/include/linux/netdevice.h' l='3319' type='int dev_forward_skb(struct net_device * dev, struct sk_buff * skb)'/>
<use f='linux-4.14.y/drivers/net/macvlan.c' l='528' u='c' c='macvlan_queue_xmit'/>
<use f='linux-4.14.y/drivers/net/veth.c' l='114' u='c' c='veth_xmit'/>
<def f='linux-4.14.y/net/core/dev.c' l='1846' ll='1849' type='int dev_forward_skb(struct net_device * dev, struct sk_buff * skb)'/>
<dec f='linux-4.14.y/net/core/dev.c' l='1850' type='int dev_forward_skb(struct net_device * , struct sk_buff * )'/>
<use f='linux-4.14.y/net/core/dev.c' l='1850' c='dev_forward_skb'/>
<use f='linux-4.14.y/net/core/dev.c' l='1850' u='a'/>
<use f='linux-4.14.y/net/core/dev.c' l='1850' u='a'/>
<doc f='linux-4.14.y/net/core/dev.c' l='1828'>/**
 * dev_forward_skb - loopback an skb to another netif
 *
 * @dev: destination network device
 * @skb: buffer to forward
 *
 * return values:
 *	NET_RX_SUCCESS	(no congestion)
 *	NET_RX_DROP     (packet was dropped, but freed)
 *
 * dev_forward_skb can be used for injecting an skb from the
 * start_xmit function of one device into the receive queue
 * of another device.
 *
 * The receiving device may be in another namespace, so
 * we have to clear all information in the skb that could
 * impact namespace isolation.
 */</doc>
<use f='linux-4.14.y/net/core/filter.c' l='1679' u='c' c='__bpf_rx_skb'/>
