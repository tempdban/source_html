<def f='linux-4.18.y/include/drm/drm_property.h' l='71' ll='188'/>
<size>120</size>
<doc f='linux-4.18.y/include/drm/drm_property.h' l='45'>/**
 * struct drm_property - modeset object property
 *
 * This structure represent a modeset object property. It combines both the name
 * of the property with the set of permissible values. This means that when a
 * driver wants to use a property with the same name on different objects, but
 * with different value ranges, then it must create property for each one. An
 * example would be rotation of &amp;drm_plane, when e.g. the primary plane cannot
 * be rotated. But if both the name and the value range match, then the same
 * property structure can be instantiated multiple times for the same object.
 * Userspace must be able to cope with this and cannot assume that the same
 * symbolic property will have the same modeset object ID on all modeset
 * objects.
 *
 * Properties are created by one of the special functions, as explained in
 * detail in the @flags structure member.
 *
 * To actually expose a property it must be attached to each object using
 * drm_object_attach_property(). Currently properties can only be attached to
 * &amp;drm_connector, &amp;drm_crtc and &amp;drm_plane.
 *
 * Properties are also used as the generic metadatatransport for the atomic
 * IOCTL. Everything that was set directly in structures in the legacy modeset
 * IOCTLs (like the plane source or destination windows, or e.g. the links to
 * the CRTC) is exposed as a property with the DRM_MODE_PROP_ATOMIC flag set.
 */</doc>
<mbr r='drm_property::head' o='0' t='struct list_head'/>
<mbr r='drm_property::base' o='128' t='struct drm_mode_object'/>
<mbr r='drm_property::flags' o='384' t='uint32_t'/>
<mbr r='drm_property::name' o='416' t='char [32]'/>
<mbr r='drm_property::num_values' o='672' t='uint32_t'/>
<mbr r='drm_property::values' o='704' t='uint64_t *'/>
<mbr r='drm_property::dev' o='768' t='struct drm_device *'/>
<mbr r='drm_property::enum_list' o='832' t='struct list_head'/>
