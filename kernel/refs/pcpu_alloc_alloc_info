<dec f='linux-4.18.y/include/linux/percpu.h' l='110' type='struct pcpu_alloc_info * pcpu_alloc_alloc_info(int nr_groups, int nr_units)'/>
<def f='linux-4.18.y/mm/percpu.c' l='1868' ll='1895' type='struct pcpu_alloc_info * pcpu_alloc_alloc_info(int nr_groups, int nr_units)'/>
<use f='linux-4.18.y/mm/percpu.c' l='2354' u='c' c='pcpu_build_alloc_info'/>
<doc f='linux-4.18.y/mm/percpu.c' l='1853'>/**
 * pcpu_alloc_alloc_info - allocate percpu allocation info
 * @nr_groups: the number of groups
 * @nr_units: the number of units
 *
 * Allocate ai which is large enough for @nr_groups groups containing
 * @nr_units units.  The returned ai&apos;s groups[0].cpu_map points to the
 * cpu_map array which is long enough for @nr_units and filled with
 * NR_CPUS.  It&apos;s the caller&apos;s responsibility to initialize cpu_map
 * pointer of other groups.
 *
 * RETURNS:
 * Pointer to the allocated pcpu_alloc_info on success, NULL on
 * failure.
 */</doc>
