<dec f='linux-4.14.y/include/linux/workqueue.h' l='472' type='bool workqueue_congested(int cpu, struct workqueue_struct * wq)'/>
<def f='linux-4.14.y/kernel/workqueue.c' l='4236' ll='4255' type='bool workqueue_congested(int cpu, struct workqueue_struct * wq)'/>
<dec f='linux-4.14.y/kernel/workqueue.c' l='4256' type='bool workqueue_congested(int , struct workqueue_struct * )'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4256' c='workqueue_congested'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4256' u='a'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4256' u='a'/>
<doc f='linux-4.14.y/kernel/workqueue.c' l='4218'>/**
 * workqueue_congested - test whether a workqueue is congested
 * @cpu: CPU in question
 * @wq: target workqueue
 *
 * Test whether @wq&apos;s cpu workqueue for @cpu is congested.  There is
 * no synchronization around this function and the test result is
 * unreliable and only useful as advisory hints or for debugging.
 *
 * If @cpu is WORK_CPU_UNBOUND, the test is performed on the local CPU.
 * Note that both per-cpu and unbound workqueues may be associated with
 * multiple pool_workqueues which have separate congested states.  A
 * workqueue being congested on one CPU doesn&apos;t mean the workqueue is also
 * contested on other CPUs / NUMA nodes.
 *
 * Return:
 * %true if congested, %false otherwise.
 */</doc>
