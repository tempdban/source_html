<def f='linux-4.18.y/include/linux/rculist.h' l='584' ll='592' type='void hlist_add_behind_rcu(struct hlist_node * n, struct hlist_node * prev)'/>
<doc f='linux-4.18.y/include/linux/rculist.h' l='566'>/**
 * hlist_add_behind_rcu
 * @n: the new element to add to the hash list.
 * @prev: the existing element to add the new element after.
 *
 * Description:
 * Adds the specified element to the specified hlist
 * after the specified node while permitting racing traversals.
 *
 * The caller must take whatever precautions are necessary
 * (such as holding appropriate locks) to avoid racing
 * with another list-mutation primitive, such as hlist_add_head_rcu()
 * or hlist_del_rcu(), running on this same list.
 * However, it is perfectly legal to run concurrently with
 * the _rcu list-traversal primitives, such as
 * hlist_for_each_entry_rcu(), used to prevent memory-consistency
 * problems on Alpha CPUs.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_hashtab.c' l='128' u='c' c='drm_ht_insert_item'/>
<use f='linux-4.18.y/fs/notify/mark.c' l='558' u='c' c='fsnotify_add_mark_list'/>
<use f='linux-4.18.y/net/bridge/br_multicast.c' l='1381' u='c' c='br_multicast_add_router'/>
<use f='linux-4.18.y/net/ipv4/fib_trie.c' l='1093' u='c' c='fib_insert_alias'/>
