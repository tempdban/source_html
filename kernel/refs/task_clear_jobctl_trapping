<dec f='linux-4.14.y/include/linux/sched/jobctl.h' l='34' type='void task_clear_jobctl_trapping(struct task_struct * task)'/>
<use f='linux-4.14.y/kernel/ptrace.c' l='133' u='c' c='__ptrace_unlink'/>
<def f='linux-4.14.y/kernel/signal.c' l='284' ll='291' type='void task_clear_jobctl_trapping(struct task_struct * task)'/>
<use f='linux-4.14.y/kernel/signal.c' l='318' u='c' c='task_clear_jobctl_pending'/>
<use f='linux-4.14.y/kernel/signal.c' l='1872' u='c' c='ptrace_stop'/>
<doc f='linux-4.14.y/kernel/signal.c' l='272'>/**
 * task_clear_jobctl_trapping - clear jobctl trapping bit
 * @task: target task
 *
 * If JOBCTL_TRAPPING is set, a ptracer is waiting for us to enter TRACED.
 * Clear it and wake up the ptracer.  Note that we don&apos;t need any further
 * locking.  @task-&gt;siglock guarantees that @task-&gt;parent points to the
 * ptracer.
 *
 * CONTEXT:
 * Must be called with @task-&gt;sighand-&gt;siglock held.
 */</doc>
<dec f='linux-4.14.y/include/linux/sched/jobctl.h' l='34' type='void task_clear_jobctl_trapping(struct task_struct * task)'/>
<use f='linux-4.14.y/kernel/ptrace.c' l='133' u='c' c='__ptrace_unlink'/>
<def f='linux-4.14.y/kernel/signal.c' l='284' ll='291' type='void task_clear_jobctl_trapping(struct task_struct * task)'/>
<use f='linux-4.14.y/kernel/signal.c' l='318' u='c' c='task_clear_jobctl_pending'/>
<use f='linux-4.14.y/kernel/signal.c' l='1872' u='c' c='ptrace_stop'/>
<doc f='linux-4.14.y/kernel/signal.c' l='272'>/**
 * task_clear_jobctl_trapping - clear jobctl trapping bit
 * @task: target task
 *
 * If JOBCTL_TRAPPING is set, a ptracer is waiting for us to enter TRACED.
 * Clear it and wake up the ptracer.  Note that we don&apos;t need any further
 * locking.  @task-&gt;siglock guarantees that @task-&gt;parent points to the
 * ptracer.
 *
 * CONTEXT:
 * Must be called with @task-&gt;sighand-&gt;siglock held.
 */</doc>
