<def f='linux-4.14.y/include/linux/kgdb.h' l='244' ll='257'/>
<size>80</size>
<doc f='linux-4.14.y/include/linux/kgdb.h' l='224'>/**
 * struct kgdb_arch - Describe architecture specific values.
 * @gdb_bpt_instr: The instruction to trigger a breakpoint.
 * @flags: Flags for the breakpoint, currently just %KGDB_HW_BREAKPOINT.
 * @set_breakpoint: Allow an architecture to specify how to set a software
 * breakpoint.
 * @remove_breakpoint: Allow an architecture to specify how to remove a
 * software breakpoint.
 * @set_hw_breakpoint: Allow an architecture to specify how to set a hardware
 * breakpoint.
 * @remove_hw_breakpoint: Allow an architecture to specify how to remove a
 * hardware breakpoint.
 * @disable_hw_break: Allow an architecture to specify how to disable
 * hardware breakpoints for a single cpu.
 * @remove_all_hw_break: Allow an architecture to specify how to remove all
 * hardware breakpoints.
 * @correct_hw_break: Allow an architecture to specify how to correct the
 * hardware debug registers.
 * @enable_nmi: Manage NMI-triggered entry to KGDB
 */</doc>
<mbr r='kgdb_arch::gdb_bpt_instr' o='0' t='unsigned char [1]'/>
<mbr r='kgdb_arch::flags' o='64' t='unsigned long'/>
<mbr r='kgdb_arch::set_breakpoint' o='128' t='int (*)(unsigned long, char *)'/>
<mbr r='kgdb_arch::remove_breakpoint' o='192' t='int (*)(unsigned long, char *)'/>
<mbr r='kgdb_arch::set_hw_breakpoint' o='256' t='int (*)(unsigned long, int, enum kgdb_bptype)'/>
<mbr r='kgdb_arch::remove_hw_breakpoint' o='320' t='int (*)(unsigned long, int, enum kgdb_bptype)'/>
<mbr r='kgdb_arch::disable_hw_break' o='384' t='void (*)(struct pt_regs *)'/>
<mbr r='kgdb_arch::remove_all_hw_break' o='448' t='void (*)(void)'/>
<mbr r='kgdb_arch::correct_hw_break' o='512' t='void (*)(void)'/>
<mbr r='kgdb_arch::enable_nmi' o='576' t='void (*)(bool)'/>
<def f='linux-4.14.y/include/linux/kgdb.h' l='244' ll='257'/>
<size>80</size>
<doc f='linux-4.14.y/include/linux/kgdb.h' l='224'>/**
 * struct kgdb_arch - Describe architecture specific values.
 * @gdb_bpt_instr: The instruction to trigger a breakpoint.
 * @flags: Flags for the breakpoint, currently just %KGDB_HW_BREAKPOINT.
 * @set_breakpoint: Allow an architecture to specify how to set a software
 * breakpoint.
 * @remove_breakpoint: Allow an architecture to specify how to remove a
 * software breakpoint.
 * @set_hw_breakpoint: Allow an architecture to specify how to set a hardware
 * breakpoint.
 * @remove_hw_breakpoint: Allow an architecture to specify how to remove a
 * hardware breakpoint.
 * @disable_hw_break: Allow an architecture to specify how to disable
 * hardware breakpoints for a single cpu.
 * @remove_all_hw_break: Allow an architecture to specify how to remove all
 * hardware breakpoints.
 * @correct_hw_break: Allow an architecture to specify how to correct the
 * hardware debug registers.
 * @enable_nmi: Manage NMI-triggered entry to KGDB
 */</doc>
<mbr r='kgdb_arch::gdb_bpt_instr' o='0' t='unsigned char [1]'/>
<mbr r='kgdb_arch::flags' o='64' t='unsigned long'/>
<mbr r='kgdb_arch::set_breakpoint' o='128' t='int (*)(unsigned long, char *)'/>
<mbr r='kgdb_arch::remove_breakpoint' o='192' t='int (*)(unsigned long, char *)'/>
<mbr r='kgdb_arch::set_hw_breakpoint' o='256' t='int (*)(unsigned long, int, enum kgdb_bptype)'/>
<mbr r='kgdb_arch::remove_hw_breakpoint' o='320' t='int (*)(unsigned long, int, enum kgdb_bptype)'/>
<mbr r='kgdb_arch::disable_hw_break' o='384' t='void (*)(struct pt_regs *)'/>
<mbr r='kgdb_arch::remove_all_hw_break' o='448' t='void (*)(void)'/>
<mbr r='kgdb_arch::correct_hw_break' o='512' t='void (*)(void)'/>
<mbr r='kgdb_arch::enable_nmi' o='576' t='void (*)(bool)'/>
