<dec f='linux-4.18.y/include/linux/ring_buffer.h' l='87' type='struct ring_buffer * __ring_buffer_alloc(unsigned long size, unsigned int flags, struct lock_class_key * key)'/>
<doc f='linux-4.18.y/include/linux/ring_buffer.h' l='83'>/*
 * size is in bytes for each per CPU buffer.
 */</doc>
<def f='linux-4.18.y/kernel/trace/ring_buffer.c' l='1351' ll='1416' type='struct ring_buffer * __ring_buffer_alloc(unsigned long size, unsigned int flags, struct lock_class_key * key)'/>
<dec f='linux-4.18.y/kernel/trace/ring_buffer.c' l='1417' type='struct ring_buffer * __ring_buffer_alloc(unsigned long , unsigned int , struct lock_class_key * )'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='1417' c='__ring_buffer_alloc'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='1417' u='a'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='1417' u='a'/>
<doc f='linux-4.18.y/kernel/trace/ring_buffer.c' l='1341'>/**
 * __ring_buffer_alloc - allocate a new ring_buffer
 * @size: the size in bytes per cpu that is needed.
 * @flags: attributes to set for the ring buffer.
 *
 * Currently the only flag that is available is the RB_FL_OVERWRITE
 * flag. This flag means that the buffer will overwrite old data
 * when the buffer wraps. If this flag is not set, the buffer will
 * drop data when the tail hits the head.
 */</doc>
<use f='linux-4.18.y/kernel/trace/trace.c' l='7672' macro='1' u='c'/>
<use f='linux-4.18.y/kernel/trace/trace.c' l='8511' macro='1' u='c'/>
