<def f='linux-4.18.y/include/linux/srcu.h' l='106' ll='109' type='void cleanup_srcu_struct_quiesced(struct srcu_struct * sp)'/>
<doc f='linux-4.18.y/include/linux/srcu.h' l='89'>/**
 * cleanup_srcu_struct_quiesced - deconstruct a quiesced sleep-RCU structure
 * @sp: structure to clean up.
 *
 * Must invoke this after you are finished using a given srcu_struct that
 * was initialized via init_srcu_struct(), else you leak memory.  Also,
 * all grace-period processing must have completed.
 *
 * &quot;Completed&quot; means that the last synchronize_srcu() and
 * synchronize_srcu_expedited() calls must have returned before the call
 * to cleanup_srcu_struct_quiesced().  It also means that the callback
 * from the last call_srcu() must have been invoked before the call to
 * cleanup_srcu_struct_quiesced(), but you can use srcu_barrier() to help
 * with this last.  Violating these rules will get you a WARN_ON() splat
 * (with high probability, anyway), and will also cause the srcu_struct
 * to be leaked.
 */</doc>
