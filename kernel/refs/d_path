<dec f='linux-4.14.y/include/linux/dcache.h' l='302' type='char * d_path(const struct path * , char * , int )'/>
<def f='linux-4.14.y/fs/dcache.c' l='3315' ll='3344' type='char * d_path(const struct path * path, char * buf, int buflen)'/>
<dec f='linux-4.14.y/fs/dcache.c' l='3345' type='char * d_path(const struct path * , char * , int )'/>
<use f='linux-4.14.y/fs/dcache.c' l='3345' c='d_path'/>
<use f='linux-4.14.y/fs/dcache.c' l='3345' u='a'/>
<use f='linux-4.14.y/fs/dcache.c' l='3345' u='a'/>
<doc f='linux-4.14.y/fs/dcache.c' l='3299'>/**
 * d_path - return the path of a dentry
 * @path: path to report
 * @buf: buffer to return value in
 * @buflen: buffer length
 *
 * Convert a dentry into an ASCII path name. If the entry has been deleted
 * the string &quot; (deleted)&quot; is appended. Note that this is ambiguous.
 *
 * Returns a pointer into the buffer or an error code if the path was
 * too long. Note: Callers should use the returned pointer, not the passed
 * in buffer, to use the name! The implementation often starts at an offset
 * into the buffer, and may leave 0 bytes at the start.
 *
 * &quot;buflen&quot; should be positive.
 */</doc>
<use f='linux-4.14.y/fs/ext4/file.c' l='388' u='c' c='ext4_file_open'/>
<use f='linux-4.14.y/fs/open.c' l='847' u='c' c='file_path'/>
<use f='linux-4.14.y/fs/proc/base.c' l='1643' u='c' c='do_proc_readlink'/>
<use f='linux-4.14.y/fs/seq_file.c' l='468' u='c' c='seq_path'/>
<use f='linux-4.14.y/kernel/audit.c' l='1978' u='c' c='audit_log_d_path'/>
<use f='linux-4.14.y/lib/seq_buf.c' l='270' u='c' c='seq_buf_path'/>
