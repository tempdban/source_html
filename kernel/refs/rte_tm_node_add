<dec f='linux-4.18.y/lib/librte_ethdev/rte_tm.h' l='1444' type='int rte_tm_node_add(uint16_t port_id, uint32_t node_id, uint32_t parent_node_id, uint32_t priority, uint32_t weight, uint32_t level_id, struct rte_tm_node_params * params, struct rte_tm_error * error)'/>
<use f='linux-4.18.y/app/test-pmd/cmdline_tm.c' l='1626' u='c' c='cmd_add_port_tm_nonleaf_node_parsed'/>
<use f='linux-4.18.y/app/test-pmd/cmdline_tm.c' l='1788' u='c' c='cmd_add_port_tm_leaf_node_parsed'/>
<doc f='linux-4.18.y/lib/librte_ethdev/rte_tm.h' l='1380'>/**
 * Traffic manager node add
 *
 * Create new node and connect it as child of an existing node. The new node is
 * further identified by *node_id*, which needs to be unused by any of the
 * existing nodes. The parent node is identified by *parent_node_id*, which
 * needs to be the valid ID of an existing non-leaf node. The parent node is
 * going to use the provided SP *priority* and WFQ *weight* to schedule its new
 * child node.
 *
 * This function has to be called for both leaf and non-leaf nodes. In the case
 * of leaf nodes (i.e. *node_id* is within the range of 0 .. (N-1), with N as
 * the number of configured TX queues of the current port), the leaf node is
 * configured rather than created (as the set of leaf nodes is predefined) and
 * it is also connected as child of an existing node.
 *
 * The first node that is added becomes the root node and all the nodes that
 * are subsequently added have to be added as descendants of the root node. The
 * parent of the root node has to be specified as RTE_TM_NODE_ID_NULL and there
 * can only be one node with this parent ID (i.e. the root node). Further
 * restrictions for root node: needs to be non-leaf, its private shaper profile
 * needs to be valid and single rate, cannot use any shared shapers.
 *
 * When called before rte_tm_hierarchy_commit() invocation, this function is
 * typically used to define the initial start-up hierarchy for the port.
 * Provided that dynamic hierarchy updates are supported by the current port (as
 * advertised in the port capability set), this function can be also called
 * after the rte_tm_hierarchy_commit() invocation.
 *
 * @param[in] port_id
 *   The port identifier of the Ethernet device.
 * @param[in] node_id
 *   Node ID. Needs to be unused by any of the existing nodes.
 * @param[in] parent_node_id
 *   Parent node ID. Needs to be the valid.
 * @param[in] priority
 *   Node priority. The highest node priority is zero. Used by the SP algorithm
 *   running on the parent of the current node for scheduling this child node.
 * @param[in] weight
 *   Node weight. The node weight is relative to the weight sum of all siblings
 *   that have the same priority. The lowest weight is one. Used by the WFQ
 *   algorithm running on the parent of the current node for scheduling this
 *   child node.
 * @param[in] level_id
 *   Level ID that should be met by this node. The hierarchy level of the
 *   current node is already fully specified through its parent node (i.e. the
 *   level of this node is equal to the level of its parent node plus one),
 *   therefore the reason for providing this parameter is to enable the
 *   application to perform step-by-step checking of the node level during
 *   successive invocations of this function. When not desired, this check can
 *   be disabled by assigning value RTE_TM_NODE_LEVEL_ID_ANY to this parameter.
 * @param[in] params
 *   Node parameters. Needs to be pre-allocated and valid.
 * @param[out] error
 *   Error details. Filled in only on error, when not NULL.
 * @return
 *   0 on success, non-zero error code otherwise.
 *
 * @see rte_tm_hierarchy_commit()
 * @see RTE_TM_UPDATE_NODE_ADD_DELETE
 * @see RTE_TM_NODE_LEVEL_ID_ANY
 * @see struct rte_tm_capabilities
 */</doc>
<use f='linux-4.18.y/app/test-pmd/softnicfwd.c' l='223' u='c' c='softport_tm_root_node_add'/>
<use f='linux-4.18.y/app/test-pmd/softnicfwd.c' l='281' u='c' c='softport_tm_subport_node_add'/>
<use f='linux-4.18.y/app/test-pmd/softnicfwd.c' l='352' u='c' c='softport_tm_pipe_node_add'/>
<use f='linux-4.18.y/app/test-pmd/softnicfwd.c' l='464' u='c' c='softport_tm_tc_node_add'/>
<use f='linux-4.18.y/app/test-pmd/softnicfwd.c' l='519' u='c' c='softport_tm_queue_node_add'/>
<use f='linux-4.18.y/drivers/net/softnic/rte_eth_softnic_cli.c' l='491' u='c' c='cmd_tmgr_node'/>
<use f='linux-4.18.y/drivers/net/softnic/rte_eth_softnic_cli.c' l='674' u='c' c='tmgr_hierarchy_default'/>
<use f='linux-4.18.y/drivers/net/softnic/rte_eth_softnic_cli.c' l='689' u='c' c='tmgr_hierarchy_default'/>
<use f='linux-4.18.y/drivers/net/softnic/rte_eth_softnic_cli.c' l='704' u='c' c='tmgr_hierarchy_default'/>
<use f='linux-4.18.y/drivers/net/softnic/rte_eth_softnic_cli.c' l='719' u='c' c='tmgr_hierarchy_default'/>
<use f='linux-4.18.y/drivers/net/softnic/rte_eth_softnic_cli.c' l='732' u='c' c='tmgr_hierarchy_default'/>
<def f='linux-4.18.y/lib/librte_ethdev/rte_tm.c' l='214' ll='227' type='int rte_tm_node_add(uint16_t port_id, uint32_t node_id, uint32_t parent_node_id, uint32_t priority, uint32_t weight, uint32_t level_id, struct rte_tm_node_params * params, struct rte_tm_error * error)'/>
<doc f='linux-4.18.y/lib/librte_ethdev/rte_tm.c' l='213'>/* Add node to port traffic manager hierarchy */</doc>
