<dec f='linux-4.18.y/include/linux/livepatch.h' l='195' type='void * klp_shadow_alloc(void * obj, unsigned long id, size_t size, gfp_t gfp_flags, klp_shadow_ctor_t ctor, void * ctor_data)'/>
<def f='linux-4.18.y/kernel/livepatch/shadow.c' l='208' ll='214' type='void * klp_shadow_alloc(void * obj, unsigned long id, size_t size, gfp_t gfp_flags, klp_shadow_ctor_t ctor, void * ctor_data)'/>
<dec f='linux-4.18.y/kernel/livepatch/shadow.c' l='215' type='void * klp_shadow_alloc(void * , unsigned long , size_t , gfp_t , klp_shadow_ctor_t , void * )'/>
<use f='linux-4.18.y/kernel/livepatch/shadow.c' l='215' c='klp_shadow_alloc'/>
<use f='linux-4.18.y/kernel/livepatch/shadow.c' l='215' u='a'/>
<use f='linux-4.18.y/kernel/livepatch/shadow.c' l='215' u='a'/>
<doc f='linux-4.18.y/kernel/livepatch/shadow.c' l='184'>/**
 * klp_shadow_alloc() - allocate and add a new shadow variable
 * @obj:	pointer to parent object
 * @id:		data identifier
 * @size:	size of attached data
 * @gfp_flags:	GFP mask for allocation
 * @ctor:	custom constructor to initialize the shadow data (optional)
 * @ctor_data:	pointer to any data needed by @ctor (optional)
 *
 * Allocates @size bytes for new shadow variable data using @gfp_flags.
 * The data are zeroed by default.  They are further initialized by @ctor
 * function if it is not NULL.  The new shadow variable is then added
 * to the global hashtable.
 *
 * If an existing &lt;obj, id&gt; shadow variable can be found, this routine will
 * issue a WARN, exit early and return NULL.
 *
 * This function guarantees that the constructor function is called only when
 * the variable did not exist before.  The cost is that @ctor is called
 * in atomic context under a spin lock.
 *
 * Return: the shadow variable data element, NULL on duplicate or
 * failure.
 */</doc>
