<dec f='linux-4.18.y/kernel/locking/rtmutex_common.h' l='148' type='bool rt_mutex_cleanup_proxy_lock(struct rt_mutex * lock, struct rt_mutex_waiter * waiter)'/>
<use f='linux-4.18.y/kernel/futex.c' l='2829' u='c' c='futex_lock_pi'/>
<use f='linux-4.18.y/kernel/futex.c' l='3219' u='c' c='futex_wait_requeue_pi'/>
<def f='linux-4.18.y/kernel/locking/rtmutex.c' l='1862' ll='1897' type='bool rt_mutex_cleanup_proxy_lock(struct rt_mutex * lock, struct rt_mutex_waiter * waiter)'/>
<doc f='linux-4.18.y/kernel/locking/rtmutex.c' l='1843'>/**
 * rt_mutex_cleanup_proxy_lock() - Cleanup failed lock acquisition
 * @lock:		the rt_mutex we were woken on
 * @waiter:		the pre-initialized rt_mutex_waiter
 *
 * Attempt to clean up after a failed rt_mutex_wait_proxy_lock().
 *
 * Unless we acquired the lock; we&apos;re still enqueued on the wait-list and can
 * in fact still be granted ownership until we&apos;re removed. Therefore we can
 * find we are in fact the owner and must disregard the
 * rt_mutex_wait_proxy_lock() failure.
 *
 * Returns:
 *  true  - did the cleanup, we done.
 *  false - we acquired the lock after rt_mutex_wait_proxy_lock() returned,
 *          caller should disregards its return value.
 *
 * Special API call for PI-futex support
 */</doc>
