<dec f='linux-4.14.y/drivers/scsi/scsi_priv.h' l='88' type='void scsi_queue_insert(struct scsi_cmnd * cmd, int reason)'/>
<use f='linux-4.14.y/drivers/scsi/scsi_error.c' l='149' u='c' c='scmd_eh_abort_handler'/>
<use f='linux-4.14.y/drivers/scsi/scsi_error.c' l='2051' u='c' c='scsi_eh_flush_done_q'/>
<def f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='221' ll='224' type='void scsi_queue_insert(struct scsi_cmnd * cmd, int reason)'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='1665' u='c' c='scsi_softirq_done'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='1668' u='c' c='scsi_softirq_done'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='1877' u='c' c='scsi_request_fn'/>
<doc f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='202'>/*
 * Function:    scsi_queue_insert()
 *
 * Purpose:     Insert a command in the midlevel queue.
 *
 * Arguments:   cmd    - command that we are adding to queue.
 *              reason - why we are inserting command to queue.
 *
 * Lock status: Assumed that lock is not held upon entry.
 *
 * Returns:     Nothing.
 *
 * Notes:       We do this for one of two cases.  Either the host is busy
 *              and it cannot accept any more commands for the time being,
 *              or the device returned QUEUE_FULL and can accept no more
 *              commands.
 * Notes:       This could be called either from an interrupt context or a
 *              normal process context.
 */</doc>
