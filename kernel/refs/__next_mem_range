<dec f='linux-4.14.y/include/linux/memblock.h' l='99' type='void __next_mem_range(u64 * idx, int nid, ulong flags, struct memblock_type * type_a, struct memblock_type * type_b, phys_addr_t * out_start, phys_addr_t * out_end, int * out_nid)'/>
<use f='linux-4.14.y/arch/x86/mm/init.c' l='836' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/mm/init.c' l='836' macro='1' u='c'/>
<use f='linux-4.14.y/mm/memblock.c' l='116' macro='1' u='c'/>
<use f='linux-4.14.y/mm/memblock.c' l='116' macro='1' u='c'/>
<def f='linux-4.14.y/mm/memblock.c' l='870' ll='960' type='void __next_mem_range(u64 * idx, int nid, ulong flags, struct memblock_type * type_a, struct memblock_type * type_b, phys_addr_t * out_start, phys_addr_t * out_end, int * out_nid)'/>
<doc f='linux-4.14.y/mm/memblock.c' l='844'>/**
 * __next__mem_range - next function for for_each_free_mem_range() etc.
 * @idx: pointer to u64 loop variable
 * @nid: node selector, %NUMA_NO_NODE for all nodes
 * @flags: pick from blocks based on memory attributes
 * @type_a: pointer to memblock_type from where the range is taken
 * @type_b: pointer to memblock_type which excludes memory from being taken
 * @out_start: ptr to phys_addr_t for start address of the range, can be %NULL
 * @out_end: ptr to phys_addr_t for end address of the range, can be %NULL
 * @out_nid: ptr to int for nid of the range, can be %NULL
 *
 * Find the first area from *@idx which matches @nid, fill the out
 * parameters, and update *@idx for the next iteration.  The lower 32bit of
 * *@idx contains index into type_a and the upper 32bit indexes the
 * areas before each region in type_b.	For example, if type_b regions
 * look like the following,
 *
 *	0:[0-16), 1:[32-48), 2:[128-130)
 *
 * The upper 32bit indexes the following regions.
 *
 *	0:[0-0), 1:[16-32), 2:[48-128), 3:[130-MAX)
 *
 * As both region arrays are sorted, the function advances the two indices
 * in lockstep and returns each intersection.
 */</doc>
<use f='linux-4.14.y/mm/nobootmem.c' l='146' macro='1' u='c'/>
<use f='linux-4.14.y/mm/nobootmem.c' l='146' macro='1' u='c'/>
