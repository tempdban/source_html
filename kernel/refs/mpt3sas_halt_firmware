<dec f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.h' l='1288' type='void mpt3sas_halt_firmware(struct MPT3SAS_ADAPTER * ioc)'/>
<def f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='325' ll='349' type='void mpt3sas_halt_firmware(struct MPT3SAS_ADAPTER * ioc)'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='5725' u='c' c='mpt3sas_base_hard_reset_handler'/>
<doc f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='316'>/**
 * mpt3sas_halt_firmware - halt&apos;s mpt controller firmware
 * @ioc: per adapter object
 *
 * For debugging timeout related issues.  Writing 0xCOFFEE00
 * to the doorbell register will halt controller firmware. With
 * the purpose to stop both driver and firmware, the enduser can
 * obtain a ring buffer from controller UART.
 */</doc>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_ctl.c' l='1034' u='c' c='_ctl_do_mpt_command'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='2501' u='c' c='scsih_abort'/>
<dec f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.h' l='1288' type='void mpt3sas_halt_firmware(struct MPT3SAS_ADAPTER * ioc)'/>
<def f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='325' ll='349' type='void mpt3sas_halt_firmware(struct MPT3SAS_ADAPTER * ioc)'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='5725' u='c' c='mpt3sas_base_hard_reset_handler'/>
<doc f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='316'>/**
 * mpt3sas_halt_firmware - halt&apos;s mpt controller firmware
 * @ioc: per adapter object
 *
 * For debugging timeout related issues.  Writing 0xCOFFEE00
 * to the doorbell register will halt controller firmware. With
 * the purpose to stop both driver and firmware, the enduser can
 * obtain a ring buffer from controller UART.
 */</doc>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_ctl.c' l='1034' u='c' c='_ctl_do_mpt_command'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='2501' u='c' c='scsih_abort'/>
