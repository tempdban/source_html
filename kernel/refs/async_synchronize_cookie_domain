<dec f='linux-4.18.y/include/linux/async.h' l='47' type='void async_synchronize_cookie_domain(async_cookie_t cookie, struct async_domain * domain)'/>
<use f='linux-4.18.y/kernel/async.c' l='274' u='c' c='async_synchronize_full_domain'/>
<def f='linux-4.18.y/kernel/async.c' l='287' ll='306' type='void async_synchronize_cookie_domain(async_cookie_t cookie, struct async_domain * domain)'/>
<dec f='linux-4.18.y/kernel/async.c' l='307' type='void async_synchronize_cookie_domain(async_cookie_t , struct async_domain * )'/>
<use f='linux-4.18.y/kernel/async.c' l='307' c='async_synchronize_cookie_domain'/>
<use f='linux-4.18.y/kernel/async.c' l='307' u='a'/>
<use f='linux-4.18.y/kernel/async.c' l='307' u='a'/>
<use f='linux-4.18.y/kernel/async.c' l='318' u='c' c='async_synchronize_cookie'/>
<doc f='linux-4.18.y/kernel/async.c' l='278'>/**
 * async_synchronize_cookie_domain - synchronize asynchronous function calls within a certain domain with cookie checkpointing
 * @cookie: async_cookie_t to use as checkpoint
 * @domain: the domain to synchronize (%NULL for all registered domains)
 *
 * This function waits until all asynchronous function calls for the
 * synchronization domain specified by @domain submitted prior to @cookie
 * have been done.
 */</doc>
