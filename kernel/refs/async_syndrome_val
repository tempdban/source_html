<dec f='linux-4.14.y/include/linux/async_tx.h' l='195' type='struct dma_async_tx_descriptor * async_syndrome_val(struct page ** blocks, unsigned int offset, int src_cnt, size_t len, enum sum_check_flags * pqres, struct page * spare, struct async_submit_ctl * submit)'/>
<def f='linux-4.14.y/crypto/async_tx/async_pq.c' l='294' ll='429' type='struct dma_async_tx_descriptor * async_syndrome_val(struct page ** blocks, unsigned int offset, int disks, size_t len, enum sum_check_flags * pqres, struct page * spare, struct async_submit_ctl * submit)'/>
<dec f='linux-4.14.y/crypto/async_tx/async_pq.c' l='430' type='struct dma_async_tx_descriptor * async_syndrome_val(struct page ** , unsigned int , int , size_t , enum sum_check_flags * , struct page * , struct async_submit_ctl * )'/>
<use f='linux-4.14.y/crypto/async_tx/async_pq.c' l='430' c='async_syndrome_val'/>
<use f='linux-4.14.y/crypto/async_tx/async_pq.c' l='430' u='a'/>
<use f='linux-4.14.y/crypto/async_tx/async_pq.c' l='430' u='a'/>
<doc f='linux-4.14.y/crypto/async_tx/async_pq.c' l='279'>/**
 * async_syndrome_val - asynchronously validate a raid6 syndrome
 * @blocks: source blocks from idx 0..disks-3, P @ disks-2 and Q @ disks-1
 * @offset: common offset into each block (src and dest) to start transaction
 * @disks: number of blocks (including missing P or Q, see below)
 * @len: length of operation in bytes
 * @pqres: on val failure SUM_CHECK_P_RESULT and/or SUM_CHECK_Q_RESULT are set
 * @spare: temporary result buffer for the synchronous case
 * @submit: submission / completion modifiers
 *
 * The same notes from async_gen_syndrome apply to the &apos;blocks&apos;,
 * and &apos;disks&apos; parameters of this routine.  The synchronous path
 * requires a temporary result buffer and submit-&gt;scribble to be
 * specified.
 */</doc>
<use f='linux-4.14.y/drivers/md/raid5.c' l='2057' u='c' c='ops_run_check_pq'/>
