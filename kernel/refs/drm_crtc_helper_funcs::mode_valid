<dec f='linux-4.14.y/include/drm/drm_modeset_helper_vtables.h' l='139' type='enum drm_mode_status (*)(struct drm_crtc *, const struct drm_display_mode *)'/>
<offset>192</offset>
<doc f='linux-4.14.y/include/drm/drm_modeset_helper_vtables.h' l='108'>/**
	 * @mode_valid:
	 *
	 * This callback is used to check if a specific mode is valid in this
	 * crtc. This should be implemented if the crtc has some sort of
	 * restriction in the modes it can display. For example, a given crtc
	 * may be responsible to set a clock value. If the clock can not
	 * produce all the values for the available modes then this callback
	 * can be used to restrict the number of modes to only the ones that
	 * can be displayed.
	 *
	 * This hook is used by the probe helpers to filter the mode list in
	 * drm_helper_probe_single_connector_modes(), and it is used by the
	 * atomic helpers to validate modes supplied by userspace in
	 * drm_atomic_helper_check_modeset().
	 *
	 * This function is optional.
	 *
	 * NOTE:
	 *
	 * Since this function is both called from the check phase of an atomic
	 * commit, and the mode validation in the probe paths it is not allowed
	 * to look at anything else but the passed-in mode, and validate it
	 * against configuration-invariant hardward constraints. Any further
	 * limits which depend upon the configuration can only be checked in
	 * @mode_fixup or @atomic_check.
	 *
	 * RETURNS:
	 *
	 * drm_mode_status Enum
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_probe_helper.c' l='179' u='r' c='drm_crtc_mode_valid'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_probe_helper.c' l='182' u='r' c='drm_crtc_mode_valid'/>
