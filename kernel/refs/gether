<def f='linux-4.14.y/drivers/usb/gadget/function/u_ether.h' l='56' ll='86'/>
<size>296</size>
<doc f='linux-4.14.y/drivers/usb/gadget/function/u_ether.h' l='45'>/*
 * This represents the USB side of an &quot;ethernet&quot; link, managed by a USB
 * function which provides control and (maybe) framing.  Two functions
 * in different configurations could share the same ethernet link/netdev,
 * using different host interaction models.
 *
 * There is a current limitation that only one instance of this link may
 * be present in any given configuration.  When that&apos;s a problem, network
 * layer facilities can be used to package multiple logical links on this
 * single &quot;physical&quot; one.
 */</doc>
<mbr r='gether::func' o='0' t='struct usb_function'/>
<mbr r='gether::ioport' o='1728' t='struct eth_dev *'/>
<mbr r='gether::in_ep' o='1792' t='struct usb_ep *'/>
<mbr r='gether::out_ep' o='1856' t='struct usb_ep *'/>
<mbr r='gether::is_zlp_ok' o='1920' t='bool'/>
<mbr r='gether::cdc_filter' o='1936' t='u16'/>
<mbr r='gether::header_len' o='1952' t='u32'/>
<mbr r='gether::is_fixed' o='1984' t='bool'/>
<mbr r='gether::fixed_out_len' o='2016' t='u32'/>
<mbr r='gether::fixed_in_len' o='2048' t='u32'/>
<mbr r='gether::supports_multi_frame' o='2080' t='bool'/>
<mbr r='gether::wrap' o='2112' t='struct sk_buff *(*)(struct gether *, struct sk_buff *)'/>
<mbr r='gether::unwrap' o='2176' t='int (*)(struct gether *, struct sk_buff *, struct sk_buff_head *)'/>
<mbr r='gether::open' o='2240' t='void (*)(struct gether *)'/>
<mbr r='gether::close' o='2304' t='void (*)(struct gether *)'/>
