<dec f='linux-4.14.y/include/drm/drm_encoder_slave.h' l='105' type='int drm_i2c_encoder_init(struct drm_device * dev, struct drm_encoder_slave * encoder, struct i2c_adapter * adap, const struct i2c_board_info * info)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='52' ll='100' type='int drm_i2c_encoder_init(struct drm_device * dev, struct drm_encoder_slave * encoder, struct i2c_adapter * adap, const struct i2c_board_info * info)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='101' type='int drm_i2c_encoder_init(struct drm_device * , struct drm_encoder_slave * , struct i2c_adapter * , const struct i2c_board_info * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='101' c='drm_i2c_encoder_init'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='101' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='101' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='31'>/**
 * drm_i2c_encoder_init - Initialize an I2C slave encoder
 * @dev:	DRM device.
 * @encoder:    Encoder to be attached to the I2C device. You aren&apos;t
 *		required to have called drm_encoder_init() before.
 * @adap:	I2C adapter that will be used to communicate with
 *		the device.
 * @info:	Information that will be used to create the I2C device.
 *		Required fields are @addr and @type.
 *
 * Create an I2C device on the specified bus (the module containing its
 * driver is transparently loaded) and attach it to the specified
 * &amp;drm_encoder_slave. The @slave_funcs field will be initialized with
 * the hooks provided by the slave driver.
 *
 * If @info.platform_data is non-NULL it will be used as the initial
 * slave config.
 *
 * Returns 0 on success or a negative errno on failure, in particular,
 * -ENODEV is returned when no matching driver is found.
 */</doc>
<dec f='linux-4.14.y/include/drm/drm_encoder_slave.h' l='105' type='int drm_i2c_encoder_init(struct drm_device * dev, struct drm_encoder_slave * encoder, struct i2c_adapter * adap, const struct i2c_board_info * info)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='52' ll='100' type='int drm_i2c_encoder_init(struct drm_device * dev, struct drm_encoder_slave * encoder, struct i2c_adapter * adap, const struct i2c_board_info * info)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='101' type='int drm_i2c_encoder_init(struct drm_device * , struct drm_encoder_slave * , struct i2c_adapter * , const struct i2c_board_info * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='101' c='drm_i2c_encoder_init'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='101' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='101' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_encoder_slave.c' l='31'>/**
 * drm_i2c_encoder_init - Initialize an I2C slave encoder
 * @dev:	DRM device.
 * @encoder:    Encoder to be attached to the I2C device. You aren&apos;t
 *		required to have called drm_encoder_init() before.
 * @adap:	I2C adapter that will be used to communicate with
 *		the device.
 * @info:	Information that will be used to create the I2C device.
 *		Required fields are @addr and @type.
 *
 * Create an I2C device on the specified bus (the module containing its
 * driver is transparently loaded) and attach it to the specified
 * &amp;drm_encoder_slave. The @slave_funcs field will be initialized with
 * the hooks provided by the slave driver.
 *
 * If @info.platform_data is non-NULL it will be used as the initial
 * slave config.
 *
 * Returns 0 on success or a negative errno on failure, in particular,
 * -ENODEV is returned when no matching driver is found.
 */</doc>
