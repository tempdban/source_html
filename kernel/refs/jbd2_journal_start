<dec f='linux-4.14.y/include/linux/jbd2.h' l='1345' type='handle_t * jbd2_journal_start(journal_t * , int nblocks)'/>
<doc f='linux-4.14.y/include/linux/jbd2.h' l='1339'>/* The journaling code user interface:
 *
 * Create and destroy handles
 * Register buffer modifications against the current transaction.
 */</doc>
<def f='linux-4.14.y/fs/jbd2/transaction.c' l='481' ll='484' type='handle_t * jbd2_journal_start(journal_t * journal, int nblocks)'/>
<dec f='linux-4.14.y/fs/jbd2/transaction.c' l='485' type='handle_t * jbd2_journal_start(journal_t * , int )'/>
<use f='linux-4.14.y/fs/jbd2/transaction.c' l='485' c='jbd2_journal_start'/>
<use f='linux-4.14.y/fs/jbd2/transaction.c' l='485' u='a'/>
<use f='linux-4.14.y/fs/jbd2/transaction.c' l='485' u='a'/>
<doc f='linux-4.14.y/fs/jbd2/transaction.c' l='462'>/**
 * handle_t *jbd2_journal_start() - Obtain a new handle.
 * @journal: Journal to start transaction on.
 * @nblocks: number of block buffer we might modify
 *
 * We make sure that the transaction can guarantee at least nblocks of
 * modified buffers in the log.  We block until the log can guarantee
 * that much space. Additionally, if rsv_blocks &gt; 0, we also create another
 * handle with rsv_blocks reserved blocks in the journal. This handle is
 * is stored in h_rsv_handle. It is not attached to any particular transaction
 * and thus doesn&apos;t block transaction commit. If the caller uses this reserved
 * handle, it has to set h_rsv_handle to NULL as otherwise jbd2_journal_stop()
 * on the parent handle will dispose the reserved one. Reserved handle has to
 * be converted to a normal handle using jbd2_journal_start_reserved() before
 * it can be used.
 *
 * Return a pointer to a newly allocated handle, or an ERR_PTR() value
 * on failure.
 */</doc>
