<dec f='linux-4.18.y/include/drm/drm_atomic_helper.h' l='126' type='void drm_atomic_helper_shutdown(struct drm_device * dev)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='3018' ll='3040' type='void drm_atomic_helper_shutdown(struct drm_device * dev)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='3041' type='void drm_atomic_helper_shutdown(struct drm_device * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='3041' c='drm_atomic_helper_shutdown'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='3041' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='3041' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='3007'>/**
 * drm_atomic_helper_shutdown - shutdown all CRTC
 * @dev: DRM device
 *
 * This shuts down all CRTC, which is useful for driver unloading. Shutdown on
 * suspend should instead be handled with drm_atomic_helper_suspend(), since
 * that also takes a snapshot of the modeset state to be restored on resume.
 *
 * This is just a convenience wrapper around drm_atomic_helper_disable_all(),
 * and it is the atomic version of drm_crtc_force_disable_all().
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2925' u='c' c='vmw_kms_lost_device'/>
