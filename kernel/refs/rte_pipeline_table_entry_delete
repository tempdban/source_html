<dec f='linux-4.18.y/lib/librte_pipeline/rte_pipeline.h' l='441' type='int rte_pipeline_table_entry_delete(struct rte_pipeline * p, uint32_t table_id, void * key, int * key_found, struct rte_pipeline_table_entry * entry)'/>
<doc f='linux-4.18.y/lib/librte_pipeline/rte_pipeline.h' l='421'>/**
 * Pipeline table entry delete
 *
 * @param p
 *   Handle to pipeline instance
 * @param table_id
 *   Table ID (returned by previous invocation of pipeline table create)
 * @param key
 *   Table entry key
 * @param key_found
 *   On successful invocation, set to TRUE (value different than 0) if key was
 *   found in the table before the delete operation and to FALSE (value 0) if
 *   not
 * @param entry
 *   On successful invocation, when key is found in the table and entry points
 *   to a valid buffer, the table entry contents (as it was before the delete
 *   was performed) is copied to this buffer
 * @return
 *   0 on success, error code otherwise
 */</doc>
<use f='linux-4.18.y/drivers/net/softnic/rte_eth_softnic_thread.c' l='1528' u='c' c='softnic_pipeline_table_rule_delete'/>
<use f='linux-4.18.y/drivers/net/softnic/rte_eth_softnic_thread.c' l='2646' u='c' c='pipeline_msg_handle_table_rule_delete'/>
<def f='linux-4.18.y/lib/librte_pipeline/rte_pipeline.c' l='543' ll='580' type='int rte_pipeline_table_entry_delete(struct rte_pipeline * p, uint32_t table_id, void * key, int * key_found, struct rte_pipeline_table_entry * entry)'/>
