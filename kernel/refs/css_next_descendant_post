<dec f='linux-4.14.y/include/linux/cgroup.h' l='135' type='struct cgroup_subsys_state * css_next_descendant_post(struct cgroup_subsys_state * pos, struct cgroup_subsys_state * css)'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2760' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2760' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2833' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2833' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2917' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2917' macro='1' u='c'/>
<def f='linux-4.14.y/kernel/cgroup/cgroup.c' l='3916' ll='3939' type='struct cgroup_subsys_state * css_next_descendant_post(struct cgroup_subsys_state * pos, struct cgroup_subsys_state * root)'/>
<doc f='linux-4.14.y/kernel/cgroup/cgroup.c' l='3894'>/**
 * css_next_descendant_post - find the next descendant for post-order walk
 * @pos: the current position (%NULL to initiate traversal)
 * @root: css whose descendants to walk
 *
 * To be used by css_for_each_descendant_post().  Find the next descendant
 * to visit for post-order traversal of @root&apos;s descendants.  @root is
 * included in the iteration and the last node to be visited.
 *
 * While this function requires cgroup_mutex or RCU read locking, it
 * doesn&apos;t require the whole traversal to be contained in a single critical
 * section.  This function will return the correct next descendant as long
 * as both @pos and @cgroup are accessible and @pos is a descendant of
 * @cgroup.
 *
 * If a subsystem synchronizes -&gt;css_online() and the start of iteration, a
 * css which finished -&gt;css_online() is guaranteed to be visible in the
 * future iterations and will stay visible until the last reference is put.
 * A css which hasn&apos;t finished -&gt;css_online() or already finished
 * -&gt;css_offline() may show up during traversal.  It&apos;s each subsystem&apos;s
 * responsibility to synchronize against on/offlining.
 */</doc>
