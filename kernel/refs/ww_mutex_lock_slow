<def f='linux-4.14.y/include/linux/ww_mutex.h' l='277' ll='286' type='void ww_mutex_lock_slow(struct ww_mutex * lock, struct ww_acquire_ctx * ctx)'/>
<doc f='linux-4.14.y/include/linux/ww_mutex.h' l='254'>/**
 * ww_mutex_lock_slow - slowpath acquiring of the w/w mutex
 * @lock: the mutex to be acquired
 * @ctx: w/w acquire context
 *
 * Acquires a w/w mutex with the given context after a wound case. This function
 * will sleep until the lock becomes available.
 *
 * The caller must have released all w/w mutexes already acquired with the
 * context and then call this function on the contended lock.
 *
 * Afterwards the caller may continue to (re)acquire the other w/w mutexes it
 * needs with ww_mutex_lock. Note that the -EALREADY return code from
 * ww_mutex_lock can be used to avoid locking this contended mutex twice.
 *
 * It is forbidden to call this function with any other w/w mutexes associated
 * with the context held. It is forbidden to call this on anything else than the
 * contending mutex.
 *
 * Note that the slowpath lock acquiring can also be done by calling
 * ww_mutex_lock directly. This function here is simply to help w/w mutex
 * locking code readability by clearly denoting the slowpath.
 */</doc>
<use f='linux-4.14.y/include/drm/ttm/ttm_bo_driver.h' l='933' u='c' c='ttm_bo_reserve_slowpath'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modeset_lock.c' l='242' u='c' c='modeset_lock'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_execbuf_util.c' l='146' u='c' c='ttm_eu_reserve_buffers'/>
