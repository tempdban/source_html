<def f='linux-4.14.y/arch/x86/kernel/tsc.c' l='1365' ll='1378' type='unsigned long calibrate_delay_is_known()'/>
<doc f='linux-4.14.y/arch/x86/kernel/tsc.c' l='1359'>/*
 * If we have a constant TSC and are using the TSC for the delay loop,
 * we can skip clock calibration if another cpu in the same socket has already
 * been calibrated. This assumes that CONSTANT_TSC applies to all
 * cpus in the socket - this should be a safe assumption.
 */</doc>
<def f='linux-4.14.y/init/calibrate.c' l='261' ll='264' type='unsigned long calibrate_delay_is_known()'/>
<use f='linux-4.14.y/init/calibrate.c' l='295' u='c' c='calibrate_delay'/>
<doc f='linux-4.14.y/init/calibrate.c' l='253'>/*
 * Check if cpu calibration delay is already known. For example,
 * some processors with multi-core sockets may have all cores
 * with the same calibration delay.
 *
 * Architectures should override this function if a faster calibration
 * method is available.
 */</doc>
<def f='linux-4.14.y/arch/x86/kernel/tsc.c' l='1365' ll='1378' type='unsigned long calibrate_delay_is_known()'/>
<doc f='linux-4.14.y/arch/x86/kernel/tsc.c' l='1359'>/*
 * If we have a constant TSC and are using the TSC for the delay loop,
 * we can skip clock calibration if another cpu in the same socket has already
 * been calibrated. This assumes that CONSTANT_TSC applies to all
 * cpus in the socket - this should be a safe assumption.
 */</doc>
<def f='linux-4.14.y/init/calibrate.c' l='261' ll='264' type='unsigned long calibrate_delay_is_known()'/>
<use f='linux-4.14.y/init/calibrate.c' l='295' u='c' c='calibrate_delay'/>
<doc f='linux-4.14.y/init/calibrate.c' l='253'>/*
 * Check if cpu calibration delay is already known. For example,
 * some processors with multi-core sockets may have all cores
 * with the same calibration delay.
 *
 * Architectures should override this function if a faster calibration
 * method is available.
 */</doc>
