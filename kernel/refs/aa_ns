<def f='linux-4.14.y/security/apparmor/include/policy_ns.h' l='62' ll='79'/>
<size>320</size>
<doc f='linux-4.14.y/security/apparmor/include/policy_ns.h' l='39'>/* struct aa_ns - namespace for a set of profiles
 * @base: common policy
 * @parent: parent of namespace
 * @lock: lock for modifying the object
 * @acct: accounting for the namespace
 * @unconfined: special unconfined profile for the namespace
 * @sub_ns: list of namespaces under the current namespace.
 * @uniq_null: uniq value used for null learning profiles
 * @uniq_id: a unique id count for the profiles in the namespace
 * @level: level of ns within the tree hierarchy
 * @dents: dentries for the namespaces file entries in apparmorfs
 *
 * An aa_ns defines the set profiles that are searched to determine which
 * profile to attach to a task.  Profiles can not be shared between aa_ns
 * and profile names within a namespace are guaranteed to be unique.  When
 * profiles in separate namespaces have the same name they are NOT considered
 * to be equivalent.
 *
 * Namespaces are hierarchical and only namespaces and profiles below the
 * current namespace are visible.
 *
 * Namespace names must be unique and can not contain the characters :/\0
 */</doc>
<mbr r='aa_ns::base' o='0' t='struct aa_policy'/>
<mbr r='aa_ns::parent' o='384' t='struct aa_ns *'/>
<mbr r='aa_ns::lock' o='448' t='struct mutex'/>
<mbr r='aa_ns::acct' o='704' t='struct aa_ns_acct'/>
<mbr r='aa_ns::unconfined' o='832' t='struct aa_profile *'/>
<mbr r='aa_ns::sub_ns' o='896' t='struct list_head'/>
<mbr r='aa_ns::uniq_null' o='1024' t='atomic_t'/>
<mbr r='aa_ns::uniq_id' o='1088' t='long'/>
<mbr r='aa_ns::level' o='1152' t='int'/>
<mbr r='aa_ns::revision' o='1216' t='long'/>
<mbr r='aa_ns::wait' o='1280' t='wait_queue_head_t'/>
<mbr r='aa_ns::labels' o='1472' t='struct aa_labelset'/>
<mbr r='aa_ns::rawdata_list' o='1600' t='struct list_head'/>
<mbr r='aa_ns::dents' o='1728' t='struct dentry *[13]'/>
<def f='linux-4.14.y/security/apparmor/include/policy_ns.h' l='62' ll='79'/>
<size>320</size>
<doc f='linux-4.14.y/security/apparmor/include/policy_ns.h' l='39'>/* struct aa_ns - namespace for a set of profiles
 * @base: common policy
 * @parent: parent of namespace
 * @lock: lock for modifying the object
 * @acct: accounting for the namespace
 * @unconfined: special unconfined profile for the namespace
 * @sub_ns: list of namespaces under the current namespace.
 * @uniq_null: uniq value used for null learning profiles
 * @uniq_id: a unique id count for the profiles in the namespace
 * @level: level of ns within the tree hierarchy
 * @dents: dentries for the namespaces file entries in apparmorfs
 *
 * An aa_ns defines the set profiles that are searched to determine which
 * profile to attach to a task.  Profiles can not be shared between aa_ns
 * and profile names within a namespace are guaranteed to be unique.  When
 * profiles in separate namespaces have the same name they are NOT considered
 * to be equivalent.
 *
 * Namespaces are hierarchical and only namespaces and profiles below the
 * current namespace are visible.
 *
 * Namespace names must be unique and can not contain the characters :/\0
 */</doc>
<mbr r='aa_ns::base' o='0' t='struct aa_policy'/>
<mbr r='aa_ns::parent' o='384' t='struct aa_ns *'/>
<mbr r='aa_ns::lock' o='448' t='struct mutex'/>
<mbr r='aa_ns::acct' o='704' t='struct aa_ns_acct'/>
<mbr r='aa_ns::unconfined' o='832' t='struct aa_profile *'/>
<mbr r='aa_ns::sub_ns' o='896' t='struct list_head'/>
<mbr r='aa_ns::uniq_null' o='1024' t='atomic_t'/>
<mbr r='aa_ns::uniq_id' o='1088' t='long'/>
<mbr r='aa_ns::level' o='1152' t='int'/>
<mbr r='aa_ns::revision' o='1216' t='long'/>
<mbr r='aa_ns::wait' o='1280' t='wait_queue_head_t'/>
<mbr r='aa_ns::labels' o='1472' t='struct aa_labelset'/>
<mbr r='aa_ns::rawdata_list' o='1600' t='struct list_head'/>
<mbr r='aa_ns::dents' o='1728' t='struct dentry *[13]'/>
