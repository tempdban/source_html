<dec f='linux-4.14.y/include/linux/netdevice.h' l='3266' type='int netif_rx(struct sk_buff * skb)'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/igb_main.c' l='8034' u='c' c='igb_deliver_wake_packet'/>
<use f='linux-4.14.y/drivers/net/loopback.c' l='91' u='c' c='loopback_xmit'/>
<use f='linux-4.14.y/drivers/net/macvlan.c' l='418' u='c' c='macvlan_forward_source_one'/>
<use f='linux-4.14.y/drivers/net/macvlan.c' l='465' u='c' c='macvlan_handle_frame'/>
<use f='linux-4.14.y/drivers/usb/gadget/function/u_ether.c' l='303' u='c' c='rx_complete'/>
<use f='linux-4.14.y/net/bridge/br_multicast.c' l='929' u='c' c='__br_multicast_send_query'/>
<def f='linux-4.14.y/net/core/dev.c' l='4074' ll='4079' type='int netif_rx(struct sk_buff * skb)'/>
<dec f='linux-4.14.y/net/core/dev.c' l='4080' type='int netif_rx(struct sk_buff * )'/>
<use f='linux-4.14.y/net/core/dev.c' l='4080' c='netif_rx'/>
<use f='linux-4.14.y/net/core/dev.c' l='4080' u='a'/>
<use f='linux-4.14.y/net/core/dev.c' l='4080' u='a'/>
<doc f='linux-4.14.y/net/core/dev.c' l='4059'>/**
 *	netif_rx	-	post buffer to the network code
 *	@skb: buffer to post
 *
 *	This function receives a packet from a device driver and queues it for
 *	the upper (protocol) levels to process.  It always succeeds. The buffer
 *	may be dropped during processing for congestion control or by the
 *	protocol layers.
 *
 *	return values:
 *	NET_RX_SUCCESS	(no congestion)
 *	NET_RX_DROP     (packet was dropped)
 *
 */</doc>
<use f='linux-4.14.y/net/core/filter.c' l='1689' u='c' c='__bpf_rx_skb_no_mac'/>
<use f='linux-4.14.y/net/openvswitch/vport-internal_dev.c' l='267' u='c' c='internal_dev_recv'/>
