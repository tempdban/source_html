<dec f='linux-4.14.y/include/linux/rcutree.h' l='85' type='void rcu_irq_exit()'/>
<def f='linux-4.14.y/kernel/rcu/tree.c' l='879' ll='898' type='void rcu_irq_exit()'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='908' u='c' c='rcu_irq_exit_irqson'/>
<doc f='linux-4.14.y/kernel/rcu/tree.c' l='863'>/**
 * rcu_irq_exit - inform RCU that current CPU is exiting irq towards idle
 *
 * Exit from an interrupt handler, which might possibly result in entering
 * idle mode, in other words, leaving the mode in which read-side critical
 * sections can occur.  The caller must have disabled interrupts.
 *
 * This code assumes that the idle loop never does anything that might
 * result in unbalanced calls to irq_enter() and irq_exit().  If your
 * architecture violates this assumption, RCU will give you what you
 * deserve, good and hard.  But very infrequently and irreproducibly.
 *
 * Use things like work queues to work around this limitation.
 *
 * You have been warned.
 */</doc>
<use f='linux-4.14.y/kernel/softirq.c' l='408' u='c' c='irq_exit'/>
