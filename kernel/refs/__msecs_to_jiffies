<dec f='linux-4.18.y/include/linux/jiffies.h' l='301' type='unsigned long __msecs_to_jiffies(const unsigned int m)'/>
<use f='linux-4.18.y/include/linux/jiffies.h' l='370' u='c' c='msecs_to_jiffies'/>
<def f='linux-4.18.y/kernel/time/time.c' l='588' ll='596' type='unsigned long __msecs_to_jiffies(const unsigned int m)'/>
<dec f='linux-4.18.y/kernel/time/time.c' l='597' type='unsigned long __msecs_to_jiffies(const unsigned int )'/>
<use f='linux-4.18.y/kernel/time/time.c' l='597' c='__msecs_to_jiffies'/>
<use f='linux-4.18.y/kernel/time/time.c' l='597' u='a'/>
<use f='linux-4.18.y/kernel/time/time.c' l='597' u='a'/>
<doc f='linux-4.18.y/kernel/time/time.c' l='564'>/**
 * msecs_to_jiffies: - convert milliseconds to jiffies
 * @m:	time in milliseconds
 *
 * conversion is done as follows:
 *
 * - negative values mean &apos;infinite timeout&apos; (MAX_JIFFY_OFFSET)
 *
 * - &apos;too large&apos; values [that would result in larger than
 *   MAX_JIFFY_OFFSET values] mean &apos;infinite timeout&apos; too.
 *
 * - all other values are converted to jiffies by either multiplying
 *   the input value by a factor or dividing it with a factor and
 *   handling any 32-bit overflows.
 *   for the details see __msecs_to_jiffies()
 *
 * msecs_to_jiffies() checks for the passed in value being a constant
 * via __builtin_constant_p() allowing gcc to eliminate most of the
 * code, __msecs_to_jiffies() is called if the value passed does not
 * allow constant folding and the actual conversion must be done at
 * runtime.
 * the _msecs_to_jiffies helpers are the HZ dependent conversion
 * routines found in include/linux/jiffies.h
 */</doc>
