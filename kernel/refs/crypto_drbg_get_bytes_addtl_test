<def f='linux-4.14.y/include/crypto/drbg.h' l='232' ll='241' type='int crypto_drbg_get_bytes_addtl_test(struct crypto_rng * drng, unsigned char * outbuf, unsigned int outlen, struct drbg_string * addtl, struct drbg_test_data * test_data)'/>
<doc f='linux-4.14.y/include/crypto/drbg.h' l='215'>/*
 * TEST code
 *
 * This is a wrapper to the kernel crypto API function of
 * crypto_rng_generate() to allow the caller to provide additional data and
 * allow furnishing of test_data
 *
 * @drng DRBG handle -- see crypto_rng_get_bytes
 * @outbuf output buffer -- see crypto_rng_get_bytes
 * @outlen length of output buffer -- see crypto_rng_get_bytes
 * @addtl_input additional information string input buffer
 * @addtllen length of additional information string buffer
 * @test_data filled test data
 *
 * return
 *	see crypto_rng_get_bytes
 */</doc>
<def f='linux-4.14.y/include/crypto/drbg.h' l='232' ll='241' type='int crypto_drbg_get_bytes_addtl_test(struct crypto_rng * drng, unsigned char * outbuf, unsigned int outlen, struct drbg_string * addtl, struct drbg_test_data * test_data)'/>
<doc f='linux-4.14.y/include/crypto/drbg.h' l='215'>/*
 * TEST code
 *
 * This is a wrapper to the kernel crypto API function of
 * crypto_rng_generate() to allow the caller to provide additional data and
 * allow furnishing of test_data
 *
 * @drng DRBG handle -- see crypto_rng_get_bytes
 * @outbuf output buffer -- see crypto_rng_get_bytes
 * @outlen length of output buffer -- see crypto_rng_get_bytes
 * @addtl_input additional information string input buffer
 * @addtllen length of additional information string buffer
 * @test_data filled test data
 *
 * return
 *	see crypto_rng_get_bytes
 */</doc>
