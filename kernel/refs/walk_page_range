<dec f='linux-4.14.y/include/linux/mm.h' l='1296' type='int walk_page_range(unsigned long addr, unsigned long end, struct mm_walk * walk)'/>
<use f='linux-4.14.y/fs/proc/task_mmu.c' l='1164' u='c' c='clear_refs_write'/>
<use f='linux-4.14.y/fs/proc/task_mmu.c' l='1525' u='c' c='pagemap_read'/>
<use f='linux-4.14.y/mm/madvise.c' l='237' u='c' c='force_swapin_readahead'/>
<use f='linux-4.14.y/mm/madvise.c' l='454' u='c' c='madvise_free_page_range'/>
<use f='linux-4.14.y/mm/mincore.c' l='194' u='c' c='do_mincore'/>
<def f='linux-4.14.y/mm/pagewalk.c' l='289' ll='336' type='int walk_page_range(unsigned long start, unsigned long end, struct mm_walk * walk)'/>
<doc f='linux-4.14.y/mm/pagewalk.c' l='259'>/**
 * walk_page_range - walk page table with caller specific callbacks
 *
 * Recursively walk the page table tree of the process represented by @walk-&gt;mm
 * within the virtual address range [@start, @end). During walking, we can do
 * some caller-specific works for each entry, by setting up pmd_entry(),
 * pte_entry(), and/or hugetlb_entry(). If you don&apos;t set up for some of these
 * callbacks, the associated entries/pages are just ignored.
 * The return values of these callbacks are commonly defined like below:
 *  - 0  : succeeded to handle the current entry, and if you don&apos;t reach the
 *         end address yet, continue to walk.
 *  - &gt;0 : succeeded to handle the current entry, and return to the caller
 *         with caller specific value.
 *  - &lt;0 : failed to handle the current entry, and return to the caller
 *         with error code.
 *
 * Before starting to walk page table, some callers want to check whether
 * they really want to walk over the current vma, typically by checking
 * its vm_flags. walk_page_test() and @walk-&gt;test_walk() are used for this
 * purpose.
 *
 * struct mm_walk keeps current values of some common data like vma and pmd,
 * which are useful for the access from callbacks. If you want to pass some
 * caller-specific data to callbacks, @walk-&gt;private should be helpful.
 *
 * Locking:
 *   Callers of walk_page_range() and walk_page_vma() should hold
 *   @walk-&gt;mm-&gt;mmap_sem, because these function traverse vma list and/or
 *   access to vma&apos;s data.
 */</doc>
<dec f='linux-4.14.y/include/linux/mm.h' l='1296' type='int walk_page_range(unsigned long addr, unsigned long end, struct mm_walk * walk)'/>
<use f='linux-4.14.y/fs/proc/task_mmu.c' l='1164' u='c' c='clear_refs_write'/>
<use f='linux-4.14.y/fs/proc/task_mmu.c' l='1525' u='c' c='pagemap_read'/>
<use f='linux-4.14.y/mm/madvise.c' l='237' u='c' c='force_swapin_readahead'/>
<use f='linux-4.14.y/mm/madvise.c' l='454' u='c' c='madvise_free_page_range'/>
<use f='linux-4.14.y/mm/mincore.c' l='194' u='c' c='do_mincore'/>
<def f='linux-4.14.y/mm/pagewalk.c' l='289' ll='336' type='int walk_page_range(unsigned long start, unsigned long end, struct mm_walk * walk)'/>
<doc f='linux-4.14.y/mm/pagewalk.c' l='259'>/**
 * walk_page_range - walk page table with caller specific callbacks
 *
 * Recursively walk the page table tree of the process represented by @walk-&gt;mm
 * within the virtual address range [@start, @end). During walking, we can do
 * some caller-specific works for each entry, by setting up pmd_entry(),
 * pte_entry(), and/or hugetlb_entry(). If you don&apos;t set up for some of these
 * callbacks, the associated entries/pages are just ignored.
 * The return values of these callbacks are commonly defined like below:
 *  - 0  : succeeded to handle the current entry, and if you don&apos;t reach the
 *         end address yet, continue to walk.
 *  - &gt;0 : succeeded to handle the current entry, and return to the caller
 *         with caller specific value.
 *  - &lt;0 : failed to handle the current entry, and return to the caller
 *         with error code.
 *
 * Before starting to walk page table, some callers want to check whether
 * they really want to walk over the current vma, typically by checking
 * its vm_flags. walk_page_test() and @walk-&gt;test_walk() are used for this
 * purpose.
 *
 * struct mm_walk keeps current values of some common data like vma and pmd,
 * which are useful for the access from callbacks. If you want to pass some
 * caller-specific data to callbacks, @walk-&gt;private should be helpful.
 *
 * Locking:
 *   Callers of walk_page_range() and walk_page_vma() should hold
 *   @walk-&gt;mm-&gt;mmap_sem, because these function traverse vma list and/or
 *   access to vma&apos;s data.
 */</doc>
