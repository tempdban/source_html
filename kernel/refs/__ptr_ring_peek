<def f='linux-4.14.y/include/linux/ptr_ring.h' l='178' ll='183' type='void * __ptr_ring_peek(struct ptr_ring * r)'/>
<use f='linux-4.14.y/include/linux/ptr_ring.h' l='191' u='c' c='__ptr_ring_empty'/>
<use f='linux-4.14.y/include/linux/ptr_ring.h' l='280' u='c' c='__ptr_ring_consume'/>
<use f='linux-4.14.y/include/linux/skb_array.h' l='72' u='c' c='__skb_array_empty'/>
<use f='linux-4.14.y/include/linux/skb_array.h' l='156' macro='1' u='c'/>
<use f='linux-4.14.y/include/linux/skb_array.h' l='161' macro='1' u='c'/>
<use f='linux-4.14.y/include/linux/skb_array.h' l='166' macro='1' u='c'/>
<use f='linux-4.14.y/include/linux/skb_array.h' l='171' macro='1' u='c'/>
<doc f='linux-4.14.y/include/linux/ptr_ring.h' l='172'>/* Note: callers invoking this in a loop must use a compiler barrier,
 * for example cpu_relax(). Callers must take consumer_lock
 * if they dereference the pointer - see e.g. PTR_RING_PEEK_CALL.
 * If ring is never resized, and if the pointer is merely
 * tested, there&apos;s no need to take the lock - see e.g.  __ptr_ring_empty.
 */</doc>
