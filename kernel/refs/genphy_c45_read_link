<dec f='linux-4.14.y/include/linux/phy.h' l='886' type='int genphy_c45_read_link(struct phy_device * phydev, u32 mmd_mask)'/>
<def f='linux-4.14.y/drivers/net/phy/phy-c45.c' l='140' ll='162' type='int genphy_c45_read_link(struct phy_device * phydev, u32 mmd_mask)'/>
<dec f='linux-4.14.y/drivers/net/phy/phy-c45.c' l='163' type='int genphy_c45_read_link(struct phy_device * , u32 )'/>
<use f='linux-4.14.y/drivers/net/phy/phy-c45.c' l='163' c='genphy_c45_read_link'/>
<use f='linux-4.14.y/drivers/net/phy/phy-c45.c' l='163' u='a'/>
<use f='linux-4.14.y/drivers/net/phy/phy-c45.c' l='163' u='a'/>
<use f='linux-4.14.y/drivers/net/phy/phy-c45.c' l='255' u='c' c='gen10g_read_status'/>
<doc f='linux-4.14.y/drivers/net/phy/phy-c45.c' l='131'>/**
 * genphy_c45_read_link - read the overall link status from the MMDs
 * @phydev: target phy_device struct
 * @mmd_mask: MMDs to read status from
 *
 * Read the link status from the specified MMDs, and if they all indicate
 * that the link is up, return positive.  If an error is encountered,
 * a negative errno will be returned, otherwise zero.
 */</doc>
