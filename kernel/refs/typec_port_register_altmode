<dec f='linux-4.18.y/include/linux/usb/typec.h' l='138' type='struct typec_altmode * typec_port_register_altmode(struct typec_port * port, const struct typec_altmode_desc * desc)'/>
<def f='linux-4.18.y/drivers/usb/typec/class.c' l='1308' ll='1313' type='struct typec_altmode * typec_port_register_altmode(struct typec_port * port, const struct typec_altmode_desc * desc)'/>
<dec f='linux-4.18.y/drivers/usb/typec/class.c' l='1314' type='struct typec_altmode * typec_port_register_altmode(struct typec_port * , const struct typec_altmode_desc * )'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='1314' c='typec_port_register_altmode'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='1314' u='a'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='1314' u='a'/>
<doc f='linux-4.18.y/drivers/usb/typec/class.c' l='1298'>/**
 * typec_port_register_altmode - Register USB Type-C Port Alternate Mode
 * @port: USB Type-C Port that supports the alternate mode
 * @desc: Description of the alternate mode
 *
 * This routine is used to register an alternate mode that @port is capable of
 * supporting.
 *
 * Returns handle to the alternate mode on success or ERR_PTR on failure.
 */</doc>
<use f='linux-4.18.y/drivers/usb/typec/tcpm.c' l='4619' u='c' c='tcpm_register_port'/>
