<dec f='linux-4.14.y/include/drm/drm_pci.h' l='49' type='int drm_get_pci_dev(struct pci_dev * pdev, const struct pci_device_id * ent, struct drm_driver * driver)'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_drv.c' l='178' u='c' c='bochs_pci_probe'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_drv.c' l='75' u='c' c='cirrus_pci_probe'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='236' ll='279' type='int drm_get_pci_dev(struct pci_dev * pdev, const struct pci_device_id * ent, struct drm_driver * driver)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='280' type='int drm_get_pci_dev(struct pci_dev * , const struct pci_device_id * , struct drm_driver * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='280' c='drm_get_pci_dev'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='280' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='280' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='322' u='c' c='drm_legacy_pci_init'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='221'>/**
 * drm_get_pci_dev - Register a PCI device with the DRM subsystem
 * @pdev: PCI device
 * @ent: entry from the PCI ID table that matches @pdev
 * @driver: DRM device driver
 *
 * Attempt to gets inter module &quot;drm&quot; information. If we are first
 * then register the character device and inter module information.
 * Try and register, if we fail to register, backout previous work.
 *
 * NOTE: This function is deprecated, please use drm_dev_alloc() and
 * drm_dev_register() instead and remove your &amp;drm_driver.load callback.
 *
 * Return: 0 on success or a negative error code on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1571' u='c' c='vmw_probe'/>
