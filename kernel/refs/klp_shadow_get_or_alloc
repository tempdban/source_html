<dec f='linux-4.18.y/include/linux/livepatch.h' l='198' type='void * klp_shadow_get_or_alloc(void * obj, unsigned long id, size_t size, gfp_t gfp_flags, klp_shadow_ctor_t ctor, void * ctor_data)'/>
<def f='linux-4.18.y/kernel/livepatch/shadow.c' l='237' ll='243' type='void * klp_shadow_get_or_alloc(void * obj, unsigned long id, size_t size, gfp_t gfp_flags, klp_shadow_ctor_t ctor, void * ctor_data)'/>
<dec f='linux-4.18.y/kernel/livepatch/shadow.c' l='244' type='void * klp_shadow_get_or_alloc(void * , unsigned long , size_t , gfp_t , klp_shadow_ctor_t , void * )'/>
<use f='linux-4.18.y/kernel/livepatch/shadow.c' l='244' c='klp_shadow_get_or_alloc'/>
<use f='linux-4.18.y/kernel/livepatch/shadow.c' l='244' u='a'/>
<use f='linux-4.18.y/kernel/livepatch/shadow.c' l='244' u='a'/>
<doc f='linux-4.18.y/kernel/livepatch/shadow.c' l='217'>/**
 * klp_shadow_get_or_alloc() - get existing or allocate a new shadow variable
 * @obj:	pointer to parent object
 * @id:		data identifier
 * @size:	size of attached data
 * @gfp_flags:	GFP mask for allocation
 * @ctor:	custom constructor to initialize the shadow data (optional)
 * @ctor_data:	pointer to any data needed by @ctor (optional)
 *
 * Returns a pointer to existing shadow data if an &lt;obj, id&gt; shadow
 * variable is already present.  Otherwise, it creates a new shadow
 * variable like klp_shadow_alloc().
 *
 * This function guarantees that only one shadow variable exists with the given
 * @id for the given @obj.  It also guarantees that the constructor function
 * will be called only when the variable did not exist before.  The cost is
 * that @ctor is called in atomic context under a spin lock.
 *
 * Return: the shadow variable data element, NULL on failure.
 */</doc>
