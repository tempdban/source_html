<dec f='linux-4.18.y/include/linux/fscrypt_supp.h' l='97' type='int fscrypt_fname_alloc_buffer(const struct inode * , u32 , struct fscrypt_str * )'/>
<def f='linux-4.18.y/fs/crypto/fname.c' l='207' ll='223' type='int fscrypt_fname_alloc_buffer(const struct inode * inode, u32 max_encrypted_len, struct fscrypt_str * crypto_str)'/>
<dec f='linux-4.18.y/fs/crypto/fname.c' l='224' type='int fscrypt_fname_alloc_buffer(const struct inode * , u32 , struct fscrypt_str * )'/>
<use f='linux-4.18.y/fs/crypto/fname.c' l='224' c='fscrypt_fname_alloc_buffer'/>
<use f='linux-4.18.y/fs/crypto/fname.c' l='224' u='a'/>
<use f='linux-4.18.y/fs/crypto/fname.c' l='224' u='a'/>
<doc f='linux-4.18.y/fs/crypto/fname.c' l='199'>/**
 * fscrypt_fname_alloc_buffer - allocate a buffer for presented filenames
 *
 * Allocate a buffer that is large enough to hold any decrypted or encoded
 * filename (null-terminated), for the given maximum encrypted filename length.
 *
 * Return: 0 on success, -errno on failure
 */</doc>
<use f='linux-4.18.y/fs/crypto/hooks.c' l='251' u='c' c='fscrypt_get_symlink'/>
<use f='linux-4.18.y/fs/ext4/dir.c' l='142' u='c' c='ext4_readdir'/>
<use f='linux-4.18.y/fs/ext4/namei.c' l='994' u='c' c='htree_dirblock_to_tree'/>
<use f='linux-4.18.y/fs/f2fs/dir.c' l='853' u='c' c='f2fs_readdir'/>
