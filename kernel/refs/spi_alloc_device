<dec f='linux-4.18.y/include/linux/spi/spi.h' l='1293' type='struct spi_device * spi_alloc_device(struct spi_controller * ctlr)'/>
<doc f='linux-4.18.y/include/linux/spi/spi.h' l='1281'>/* If you&apos;re hotplugging an adapter with devices (parport, usb, etc)
 * use spi_new_device() to describe each device.  You can also call
 * spi_unregister_device() to start making that device vanish, but
 * normally that would be handled by spi_unregister_controller().
 *
 * You can also use spi_alloc_device() and spi_add_device() to use a two
 * stage registration sequence for each spi_device.  This gives the caller
 * some more control over the spi_device structure before it is registered,
 * but requires that caller to initialize fields that would otherwise
 * be defined using the board info.
 */</doc>
<def f='linux-4.18.y/drivers/spi/spi.c' l='452' ll='475' type='struct spi_device * spi_alloc_device(struct spi_controller * ctlr)'/>
<dec f='linux-4.18.y/drivers/spi/spi.c' l='476' type='struct spi_device * spi_alloc_device(struct spi_controller * )'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='476' c='spi_alloc_device'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='476' u='a'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='476' u='a'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='596' u='c' c='spi_new_device'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='1796' u='c' c='acpi_register_spi_device'/>
<doc f='linux-4.18.y/drivers/spi/spi.c' l='435'>/**
 * spi_alloc_device - Allocate a new SPI device
 * @ctlr: Controller to which device is connected
 * Context: can sleep
 *
 * Allows a driver to allocate and initialize a spi_device without
 * registering it immediately.  This allows a driver to directly
 * fill the spi_device with device parameters before calling
 * spi_add_device() on it.
 *
 * Caller is responsible to call spi_add_device() on the returned
 * spi_device structure to add it to the SPI controller.  If the caller
 * needs to discard the spi_device without adding it, then it should
 * call spi_dev_put() on it.
 *
 * Return: a pointer to the new device, or NULL.
 */</doc>
