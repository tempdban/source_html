<dec f='linux-4.18.y/include/linux/spi/spi.h' l='500' type='int (*)(struct spi_device *, struct spi_message *)'/>
<offset>4992</offset>
<doc f='linux-4.18.y/include/linux/spi/spi.h' l='481'>/* bidirectional bulk transfers
	 *
	 * + The transfer() method may not sleep; its main role is
	 *   just to add the message to the queue.
	 * + For now there&apos;s no remove-from-queue operation, or
	 *   any other request management
	 * + To a given spi_device, message queueing is pure fifo
	 *
	 * + The controller&apos;s main job is to process its message queue,
	 *   selecting a chip (for masters), then transferring data
	 * + If there are multiple spi_device children, the i/o queue
	 *   arbitration algorithm is unspecified (round robin, fifo,
	 *   priority, reservations, preemption, etc)
	 *
	 * + Chipselect stays active during the entire message
	 *   (unless modified by spi_transfer.cs_change != 0).
	 * + The message transfers use clock and SPI mode parameters
	 *   previously established by setup() for this device
	 */</doc>
<use f='linux-4.18.y/drivers/spi/spi.c' l='1503' u='w' c='spi_controller_initialize_queue'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='1540' u='r' c='spi_flush_queue'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2086' u='r' c='spi_controller_check_ops'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2214' u='r' c='spi_register_controller'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2950' u='r' c='__spi_async'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2960' u='r' c='__spi_async'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='3104' u='r' c='__spi_sync'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='3120' u='r' c='__spi_sync'/>
