<dec f='linux-4.14.y/include/drm/drm_blend.h' l='50' type='int drm_atomic_normalize_zpos(struct drm_device * dev, struct drm_atomic_state * state)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='377' ll='406' type='int drm_atomic_normalize_zpos(struct drm_device * dev, struct drm_atomic_state * state)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='407' type='int drm_atomic_normalize_zpos(struct drm_device * , struct drm_atomic_state * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='407' c='drm_atomic_normalize_zpos'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='407' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='407' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='359'>/**
 * drm_atomic_normalize_zpos - calculate normalized zpos values for all crtcs
 * @dev: DRM device
 * @state: atomic state of DRM device
 *
 * This function calculates normalized zpos value for all modified planes in
 * the provided atomic state of DRM device.
 *
 * For every CRTC this function checks new states of all planes assigned to
 * it and calculates normalized zpos value for these planes. Planes are compared
 * first by their zpos values, then by plane id (if zpos is equal). The plane
 * with lowest zpos value is at the bottom. The &amp;drm_plane_state.normalized_zpos
 * is then filled with unique values from 0 to number of active planes in crtc
 * minus one.
 *
 * RETURNS
 * Zero for success or -errno
 */</doc>
<dec f='linux-4.14.y/include/drm/drm_blend.h' l='50' type='int drm_atomic_normalize_zpos(struct drm_device * dev, struct drm_atomic_state * state)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='377' ll='406' type='int drm_atomic_normalize_zpos(struct drm_device * dev, struct drm_atomic_state * state)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='407' type='int drm_atomic_normalize_zpos(struct drm_device * , struct drm_atomic_state * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='407' c='drm_atomic_normalize_zpos'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='407' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='407' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='359'>/**
 * drm_atomic_normalize_zpos - calculate normalized zpos values for all crtcs
 * @dev: DRM device
 * @state: atomic state of DRM device
 *
 * This function calculates normalized zpos value for all modified planes in
 * the provided atomic state of DRM device.
 *
 * For every CRTC this function checks new states of all planes assigned to
 * it and calculates normalized zpos value for these planes. Planes are compared
 * first by their zpos values, then by plane id (if zpos is equal). The plane
 * with lowest zpos value is at the bottom. The &amp;drm_plane_state.normalized_zpos
 * is then filled with unique values from 0 to number of active planes in crtc
 * minus one.
 *
 * RETURNS
 * Zero for success or -errno
 */</doc>
