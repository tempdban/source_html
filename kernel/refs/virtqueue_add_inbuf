<dec f='linux-4.18.y/include/linux/virtio.h' l='43' type='int virtqueue_add_inbuf(struct virtqueue * vq, struct scatterlist * sg, unsigned int num, void * data, gfp_t gfp)'/>
<use f='linux-4.18.y/drivers/char/virtio_console.c' l='511' u='c' c='add_inbuf'/>
<use f='linux-4.18.y/drivers/net/virtio_net.c' l='1082' u='c' c='add_recvbuf_big'/>
<use f='linux-4.18.y/drivers/scsi/virtio_scsi.c' l='281' u='c' c='virtscsi_kick_event'/>
<use f='linux-4.18.y/drivers/virtio/virtio_input.c' l='27' u='c' c='virtinput_queue_evtbuf'/>
<def f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='506' ll='512' type='int virtqueue_add_inbuf(struct virtqueue * vq, struct scatterlist * sg, unsigned int num, void * data, gfp_t gfp)'/>
<dec f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='513' type='int virtqueue_add_inbuf(struct virtqueue * , struct scatterlist * , unsigned int , void * , gfp_t )'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='513' c='virtqueue_add_inbuf'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='513' u='a'/>
<use f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='513' u='a'/>
<doc f='linux-4.18.y/drivers/virtio/virtio_ring.c' l='493'>/**
 * virtqueue_add_inbuf - expose input buffers to other end
 * @vq: the struct virtqueue we&apos;re talking about.
 * @sg: scatterlist (must be well-formed and terminated!)
 * @num: the number of entries in @sg writable by other side
 * @data: the token identifying the buffer.
 * @gfp: how to do memory allocations (if necessary).
 *
 * Caller must ensure we don&apos;t call this with other virtqueue operations
 * at the same time (except where noted).
 *
 * Returns zero or a negative error (ie. ENOSPC, ENOMEM, EIO).
 */</doc>
