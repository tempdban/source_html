<def f='linux-4.18.y/lib/librte_hash/rte_hash_crc.h' l='517' ll='526' type='uint32_t rte_hash_crc_4byte(uint32_t data, uint32_t init_val)'/>
<use f='linux-4.18.y/lib/librte_hash/rte_hash_crc.h' l='582' u='c' c='rte_hash_crc'/>
<doc f='linux-4.18.y/lib/librte_hash/rte_hash_crc.h' l='505'>/**
 * Use single crc32 instruction to perform a hash on a 4 byte value.
 * Fall back to software crc32 implementation in case SSE4.2 is
 * not supported
 *
 * @param data
 *   Data to perform hash on.
 * @param init_val
 *   Value to initialise hash generator.
 * @return
 *   32bit calculated hash value.
 */</doc>
<use f='linux-4.18.y/lib/librte_hash/rte_fbk_hash.c' l='137' u='r' c='rte_fbk_hash_create'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='49' u='c' c='ipv4_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='50' u='c' c='ipv4_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='51' u='c' c='ipv4_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='70' u='c' c='ipv6_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='71' u='c' c='ipv6_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='72' u='c' c='ipv6_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='73' u='c' c='ipv6_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='74' u='c' c='ipv6_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='75' u='c' c='ipv6_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='76' u='c' c='ipv6_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='77' u='c' c='ipv6_frag_hash'/>
<use f='linux-4.18.y/lib/librte_ip_frag/ip_frag_internal.c' l='78' u='c' c='ipv6_frag_hash'/>
