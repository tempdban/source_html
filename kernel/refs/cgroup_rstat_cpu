<def f='linux-4.18.y/include/linux/cgroup-defs.h' l='288' ll='315'/>
<size>64</size>
<doc f='linux-4.18.y/include/linux/cgroup-defs.h' l='268'>/*
 * rstat - cgroup scalable recursive statistics.  Accounting is done
 * per-cpu in cgroup_rstat_cpu which is then lazily propagated up the
 * hierarchy on reads.
 *
 * When a stat gets updated, the cgroup_rstat_cpu and its ancestors are
 * linked into the updated tree.  On the following read, propagation only
 * considers and consumes the updated tree.  This makes reading O(the
 * number of descendants which have been active since last read) instead of
 * O(the total number of descendants).
 *
 * This is important because there can be a lot of (draining) cgroups which
 * aren&apos;t active and stat may be read frequently.  The combination can
 * become very expensive.  By propagating selectively, increasing reading
 * frequency decreases the cost of each read.
 *
 * This struct hosts both the fields which implement the above -
 * updated_children and updated_next - and the fields which track basic
 * resource statistics on top of it - bsync, bstat and last_bstat.
 */</doc>
<mbr r='cgroup_rstat_cpu::bsync' o='0' t='struct u64_stats_sync'/>
<mbr r='cgroup_rstat_cpu::bstat' o='0' t='struct cgroup_base_stat'/>
<mbr r='cgroup_rstat_cpu::last_bstat' o='192' t='struct cgroup_base_stat'/>
<mbr r='cgroup_rstat_cpu::updated_children' o='384' t='struct cgroup *'/>
<mbr r='cgroup_rstat_cpu::updated_next' o='448' t='struct cgroup *'/>
