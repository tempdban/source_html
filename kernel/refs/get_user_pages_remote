<dec f='linux-4.14.y/include/linux/mm.h' l='1360' type='long get_user_pages_remote(struct task_struct * tsk, struct mm_struct * mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page ** pages, struct vm_area_struct ** vmas, int * locked)'/>
<use f='linux-4.14.y/fs/exec.c' l='216' u='c' c='get_arg_page'/>
<use f='linux-4.14.y/kernel/events/uprobes.c' l='311' u='c' c='uprobe_write_opcode'/>
<use f='linux-4.14.y/kernel/events/uprobes.c' l='1720' u='c' c='is_trap_at_addr'/>
<def f='linux-4.14.y/mm/gup.c' l='1073' ll='1081' type='long get_user_pages_remote(struct task_struct * tsk, struct mm_struct * mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page ** pages, struct vm_area_struct ** vmas, int * locked)'/>
<dec f='linux-4.14.y/mm/gup.c' l='1082' type='long get_user_pages_remote(struct task_struct * , struct mm_struct * , unsigned long , unsigned long , unsigned int , struct page ** , struct vm_area_struct ** , int * )'/>
<use f='linux-4.14.y/mm/gup.c' l='1082' c='get_user_pages_remote'/>
<use f='linux-4.14.y/mm/gup.c' l='1082' u='a'/>
<use f='linux-4.14.y/mm/gup.c' l='1082' u='a'/>
<doc f='linux-4.14.y/mm/gup.c' l='1017'>/*
 * get_user_pages_remote() - pin user pages in memory
 * @tsk:	the task_struct to use for page fault accounting, or
 *		NULL if faults are not to be recorded.
 * @mm:		mm_struct of target mm
 * @start:	starting user address
 * @nr_pages:	number of pages from start to pin
 * @gup_flags:	flags modifying lookup behaviour
 * @pages:	array that receives pointers to the pages pinned.
 *		Should be at least nr_pages long. Or NULL, if caller
 *		only intends to ensure the pages are faulted in.
 * @vmas:	array of pointers to vmas corresponding to each page.
 *		Or NULL if the caller does not require them.
 * @locked:	pointer to lock flag indicating whether lock is held and
 *		subsequently whether VM_FAULT_RETRY functionality can be
 *		utilised. Lock must initially be held.
 *
 * Returns number of pages pinned. This may be fewer than the number
 * requested. If nr_pages is 0 or negative, returns 0. If no pages
 * were pinned, returns -errno. Each page returned must be released
 * with a put_page() call when it is finished with. vmas will only
 * remain valid while mmap_sem is held.
 *
 * Must be called with mmap_sem held for read or write.
 *
 * get_user_pages walks a process&apos;s page tables and takes a reference to
 * each struct page that each user address corresponds to at a given
 * instant. That is, it takes the page that would be accessed if a user
 * thread accesses the given user virtual address at that instant.
 *
 * This does not guarantee that the page exists in the user mappings when
 * get_user_pages returns, and there may even be a completely different
 * page there in some cases (eg. if mmapped pagecache has been invalidated
 * and subsequently re faulted). However it does guarantee that the page
 * won&apos;t be freed completely. And mostly callers simply care that the page
 * contains data that was valid *at some point in time*. Typically, an IO
 * or similar operation cannot guarantee anything stronger anyway because
 * locks can&apos;t be held over the syscall boundary.
 *
 * If gup_flags &amp; FOLL_WRITE == 0, the page must not be written to. If the page
 * is written to, set_page_dirty (or set_page_dirty_lock, as appropriate) must
 * be called after the page is finished with, and before put_page is called.
 *
 * get_user_pages is typically used for fewer-copy IO operations, to get a
 * handle on the memory by some means other than accesses via the user virtual
 * addresses. The pages may be submitted for DMA to devices or accessed via
 * their kernel linear mapping (via the kmap APIs). Care should be taken to
 * use the correct cache flushing APIs.
 *
 * See also get_user_pages_fast, for performance critical applications.
 *
 * get_user_pages should be phased out in favor of
 * get_user_pages_locked|unlocked or get_user_pages_fast. Nothing
 * should use get_user_pages because it cannot pass
 * FAULT_FLAG_ALLOW_RETRY to handle_mm_fault.
 */</doc>
<use f='linux-4.14.y/mm/memory.c' l='4365' u='c' c='__access_remote_vm'/>
<use f='linux-4.14.y/mm/process_vm_access.c' l='113' u='c' c='process_vm_rw_single_vec'/>
<use f='linux-4.14.y/security/tomoyo/domain.c' l='886' u='c' c='tomoyo_dump_page'/>
