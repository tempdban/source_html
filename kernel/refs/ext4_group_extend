<dec f='linux-4.14.y/fs/ext4/ext4.h' l='2561' type='int ext4_group_extend(struct super_block * sb, struct ext4_super_block * es, ext4_fsblk_t n_blocks_count)'/>
<use f='linux-4.14.y/fs/ext4/ioctl.c' l='712' u='c' c='ext4_ioctl'/>
<def f='linux-4.14.y/fs/ext4/resize.c' l='1702' ll='1768' type='int ext4_group_extend(struct super_block * sb, struct ext4_super_block * es, ext4_fsblk_t n_blocks_count)'/>
<doc f='linux-4.14.y/fs/ext4/resize.c' l='1692'>/*
 * Extend the filesystem to the new number of blocks specified.  This entry
 * point is only used to extend the current filesystem to the end of the last
 * existing group.  It can be accessed via ioctl, or by &quot;remount,resize=&lt;size&gt;&quot;
 * for emergencies (because it has no dependencies on reserved blocks).
 *
 * If we _really_ wanted, we could use default values to call ext4_group_add()
 * allow the &quot;remount&quot; trick to work for arbitrary resizing, assuming enough
 * GDT blocks are reserved to grow to the desired size.
 */</doc>
<dec f='linux-4.14.y/fs/ext4/ext4.h' l='2561' type='int ext4_group_extend(struct super_block * sb, struct ext4_super_block * es, ext4_fsblk_t n_blocks_count)'/>
<use f='linux-4.14.y/fs/ext4/ioctl.c' l='712' u='c' c='ext4_ioctl'/>
<def f='linux-4.14.y/fs/ext4/resize.c' l='1702' ll='1768' type='int ext4_group_extend(struct super_block * sb, struct ext4_super_block * es, ext4_fsblk_t n_blocks_count)'/>
<doc f='linux-4.14.y/fs/ext4/resize.c' l='1692'>/*
 * Extend the filesystem to the new number of blocks specified.  This entry
 * point is only used to extend the current filesystem to the end of the last
 * existing group.  It can be accessed via ioctl, or by &quot;remount,resize=&lt;size&gt;&quot;
 * for emergencies (because it has no dependencies on reserved blocks).
 *
 * If we _really_ wanted, we could use default values to call ext4_group_add()
 * allow the &quot;remount&quot; trick to work for arbitrary resizing, assuming enough
 * GDT blocks are reserved to grow to the desired size.
 */</doc>
