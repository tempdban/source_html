<dec f='linux-4.14.y/include/drm/drm_blend.h' l='45' type='int drm_plane_create_zpos_property(struct drm_plane * plane, unsigned int zpos, unsigned int min, unsigned int max)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='235' ll='255' type='int drm_plane_create_zpos_property(struct drm_plane * plane, unsigned int zpos, unsigned int min, unsigned int max)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='256' type='int drm_plane_create_zpos_property(struct drm_plane * , unsigned int , unsigned int , unsigned int )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='256' c='drm_plane_create_zpos_property'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='256' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='256' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='207'>/**
 * drm_plane_create_zpos_property - create mutable zpos property
 * @plane: drm plane
 * @zpos: initial value of zpos property
 * @min: minimal possible value of zpos property
 * @max: maximal possible value of zpos property
 *
 * This function initializes generic mutable zpos property and enables support
 * for it in drm core. Drivers can then attach this property to planes to enable
 * support for configurable planes arrangement during blending operation.
 * Once mutable zpos property has been enabled, the DRM core will automatically
 * calculate &amp;drm_plane_state.normalized_zpos values. Usually min should be set
 * to 0 and max to maximal number of planes for given crtc - 1.
 *
 * If zpos of some planes cannot be changed (like fixed background or
 * cursor/topmost planes), driver should adjust min/max values and assign those
 * planes immutable zpos property with lower or higher values (for more
 * information, see drm_plane_create_zpos_immutable_property() function). In such
 * case driver should also assign proper initial zpos values for all planes in
 * its plane_reset() callback, so the planes will be always sorted properly.
 *
 * See also drm_atomic_normalize_zpos().
 *
 * The property exposed to userspace is called &quot;zpos&quot;.
 *
 * Returns:
 * Zero on success, negative errno on failure.
 */</doc>
<dec f='linux-4.14.y/include/drm/drm_blend.h' l='45' type='int drm_plane_create_zpos_property(struct drm_plane * plane, unsigned int zpos, unsigned int min, unsigned int max)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='235' ll='255' type='int drm_plane_create_zpos_property(struct drm_plane * plane, unsigned int zpos, unsigned int min, unsigned int max)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='256' type='int drm_plane_create_zpos_property(struct drm_plane * , unsigned int , unsigned int , unsigned int )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='256' c='drm_plane_create_zpos_property'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='256' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='256' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_blend.c' l='207'>/**
 * drm_plane_create_zpos_property - create mutable zpos property
 * @plane: drm plane
 * @zpos: initial value of zpos property
 * @min: minimal possible value of zpos property
 * @max: maximal possible value of zpos property
 *
 * This function initializes generic mutable zpos property and enables support
 * for it in drm core. Drivers can then attach this property to planes to enable
 * support for configurable planes arrangement during blending operation.
 * Once mutable zpos property has been enabled, the DRM core will automatically
 * calculate &amp;drm_plane_state.normalized_zpos values. Usually min should be set
 * to 0 and max to maximal number of planes for given crtc - 1.
 *
 * If zpos of some planes cannot be changed (like fixed background or
 * cursor/topmost planes), driver should adjust min/max values and assign those
 * planes immutable zpos property with lower or higher values (for more
 * information, see drm_plane_create_zpos_immutable_property() function). In such
 * case driver should also assign proper initial zpos values for all planes in
 * its plane_reset() callback, so the planes will be always sorted properly.
 *
 * See also drm_atomic_normalize_zpos().
 *
 * The property exposed to userspace is called &quot;zpos&quot;.
 *
 * Returns:
 * Zero on success, negative errno on failure.
 */</doc>
