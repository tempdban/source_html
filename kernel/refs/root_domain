<def f='linux-4.14.y/kernel/sched/sched.h' l='616' ll='656'/>
<size>1816</size>
<doc f='linux-4.14.y/kernel/sched/sched.h' l='608'>/*
 * We add the notion of a root-domain which will be used to define per-domain
 * variables. Each exclusive cpuset essentially defines an island domain by
 * fully partitioning the member cpus from any other cpuset. Whenever a new
 * exclusive cpuset is created, we also create and attach a new root-domain
 * object.
 *
 */</doc>
<mbr r='root_domain::refcount' o='0' t='atomic_t'/>
<mbr r='root_domain::rto_count' o='32' t='atomic_t'/>
<mbr r='root_domain::rcu' o='64' t='struct callback_head'/>
<mbr r='root_domain::span' o='192' t='cpumask_var_t'/>
<mbr r='root_domain::online' o='256' t='cpumask_var_t'/>
<mbr r='root_domain::overload' o='320' t='bool'/>
<mbr r='root_domain::dlo_mask' o='384' t='cpumask_var_t'/>
<mbr r='root_domain::dlo_count' o='448' t='atomic_t'/>
<mbr r='root_domain::dl_bw' o='512' t='struct dl_bw'/>
<mbr r='root_domain::cpudl' o='704' t='struct cpudl'/>
<mbr r='root_domain::rto_push_work' o='896' t='struct irq_work'/>
<mbr r='root_domain::rto_lock' o='1088' t='raw_spinlock_t'/>
<mbr r='root_domain::rto_loop' o='1120' t='int'/>
<mbr r='root_domain::rto_cpu' o='1152' t='int'/>
<mbr r='root_domain::rto_loop_next' o='1184' t='atomic_t'/>
<mbr r='root_domain::rto_loop_start' o='1216' t='atomic_t'/>
<mbr r='root_domain::rto_mask' o='1280' t='cpumask_var_t'/>
<mbr r='root_domain::cpupri' o='1344' t='struct cpupri'/>
<mbr r='root_domain::max_cpu_capacity' o='14464' t='unsigned long'/>
