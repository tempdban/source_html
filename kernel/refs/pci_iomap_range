<dec f='linux-4.14.y/include/asm-generic/pci_iomap.h' l='19' type='void * pci_iomap_range(struct pci_dev * dev, int bar, unsigned long offset, unsigned long maxlen)'/>
<use f='linux-4.14.y/drivers/virtio/virtio_pci_modern.c' l='134' u='c' c='map_capability'/>
<def f='linux-4.14.y/lib/pci_iomap.c' l='27' ll='48' type='void * pci_iomap_range(struct pci_dev * dev, int bar, unsigned long offset, unsigned long maxlen)'/>
<dec f='linux-4.14.y/lib/pci_iomap.c' l='49' type='void * pci_iomap_range(struct pci_dev * , int , unsigned long , unsigned long )'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='49' c='pci_iomap_range'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='49' u='a'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='49' u='a'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='112' u='c' c='pci_iomap'/>
<doc f='linux-4.14.y/lib/pci_iomap.c' l='12'>/**
 * pci_iomap_range - create a virtual mapping cookie for a PCI BAR
 * @dev: PCI device that owns the BAR
 * @bar: BAR number
 * @offset: map memory at the given offset in BAR
 * @maxlen: max length of the memory to map
 *
 * Using this function you will get a __iomem address to your device BAR.
 * You can access it using ioread*() and iowrite*(). These functions hide
 * the details if this is a MMIO or PIO address space and will just do what
 * you expect from them in the correct way.
 *
 * @maxlen specifies the maximum length to map. If you want to get access to
 * the complete BAR from offset to the end, pass %0 here.
 * */</doc>
<dec f='linux-4.14.y/include/asm-generic/pci_iomap.h' l='19' type='void * pci_iomap_range(struct pci_dev * dev, int bar, unsigned long offset, unsigned long maxlen)'/>
<use f='linux-4.14.y/drivers/virtio/virtio_pci_modern.c' l='134' u='c' c='map_capability'/>
<def f='linux-4.14.y/lib/pci_iomap.c' l='27' ll='48' type='void * pci_iomap_range(struct pci_dev * dev, int bar, unsigned long offset, unsigned long maxlen)'/>
<dec f='linux-4.14.y/lib/pci_iomap.c' l='49' type='void * pci_iomap_range(struct pci_dev * , int , unsigned long , unsigned long )'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='49' c='pci_iomap_range'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='49' u='a'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='49' u='a'/>
<use f='linux-4.14.y/lib/pci_iomap.c' l='112' u='c' c='pci_iomap'/>
<doc f='linux-4.14.y/lib/pci_iomap.c' l='12'>/**
 * pci_iomap_range - create a virtual mapping cookie for a PCI BAR
 * @dev: PCI device that owns the BAR
 * @bar: BAR number
 * @offset: map memory at the given offset in BAR
 * @maxlen: max length of the memory to map
 *
 * Using this function you will get a __iomem address to your device BAR.
 * You can access it using ioread*() and iowrite*(). These functions hide
 * the details if this is a MMIO or PIO address space and will just do what
 * you expect from them in the correct way.
 *
 * @maxlen specifies the maximum length to map. If you want to get access to
 * the complete BAR from offset to the end, pass %0 here.
 * */</doc>
