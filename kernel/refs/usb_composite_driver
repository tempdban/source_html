<def f='linux-4.14.y/include/linux/usb/composite.h' l='384' ll='400'/>
<size>296</size>
<doc f='linux-4.14.y/include/linux/usb/composite.h' l='348'>/**
 * struct usb_composite_driver - groups configurations into a gadget
 * @name: For diagnostics, identifies the driver.
 * @dev: Template descriptor for the device, including default device
 *	identifiers.
 * @strings: tables of strings, keyed by identifiers assigned during @bind
 *	and language IDs provided in control requests. Note: The first entries
 *	are predefined. The first entry that may be used is
 *	USB_GADGET_FIRST_AVAIL_IDX
 * @max_speed: Highest speed the driver supports.
 * @needs_serial: set to 1 if the gadget needs userspace to provide
 * 	a serial number.  If one is not provided, warning will be printed.
 * @bind: (REQUIRED) Used to allocate resources that are shared across the
 *	whole device, such as string IDs, and add its configurations using
 *	@usb_add_config(). This may fail by returning a negative errno
 *	value; it should return zero on successful initialization.
 * @unbind: Reverses @bind; called as a side effect of unregistering
 *	this driver.
 * @disconnect: optional driver disconnect method
 * @suspend: Notifies when the host stops sending USB traffic,
 *	after function notifications
 * @resume: Notifies configuration when the host restarts USB traffic,
 *	before function notifications
 * @gadget_driver: Gadget driver controlling this driver
 *
 * Devices default to reporting self powered operation.  Devices which rely
 * on bus powered operation should report this in their @bind method.
 *
 * Before returning from @bind, various fields in the template descriptor
 * may be overridden.  These include the idVendor/idProduct/bcdDevice values
 * normally to bind the appropriate host side driver, and the three strings
 * (iManufacturer, iProduct, iSerialNumber) normally used to provide user
 * meaningful device identifiers.  (The strings will not be defined unless
 * they are defined in @dev and @strings.)  The correct ep0 maxpacket size
 * is also reported, as defined by the underlying controller driver.
 */</doc>
<mbr r='usb_composite_driver::name' o='0' t='const char *'/>
<mbr r='usb_composite_driver::dev' o='64' t='const struct usb_device_descriptor *'/>
<mbr r='usb_composite_driver::strings' o='128' t='struct usb_gadget_strings **'/>
<mbr r='usb_composite_driver::max_speed' o='192' t='enum usb_device_speed'/>
<mbr r='usb_composite_driver::needs_serial' o='224' t='unsigned int'/>
<mbr r='usb_composite_driver::bind' o='256' t='int (*)(struct usb_composite_dev *)'/>
<mbr r='usb_composite_driver::unbind' o='320' t='int (*)(struct usb_composite_dev *)'/>
<mbr r='usb_composite_driver::disconnect' o='384' t='void (*)(struct usb_composite_dev *)'/>
<mbr r='usb_composite_driver::suspend' o='448' t='void (*)(struct usb_composite_dev *)'/>
<mbr r='usb_composite_driver::resume' o='512' t='void (*)(struct usb_composite_dev *)'/>
<mbr r='usb_composite_driver::gadget_driver' o='576' t='struct usb_gadget_driver'/>
