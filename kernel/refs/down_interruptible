<dec f='linux-4.14.y/include/linux/semaphore.h' l='40' type='int down_interruptible(struct semaphore * sem)'/>
<use f='linux-4.14.y/drivers/hid/hid-core.c' l='2493' u='c' c='hid_device_probe'/>
<use f='linux-4.14.y/drivers/hid/hid-core.c' l='2532' u='c' c='hid_device_remove'/>
<use f='linux-4.14.y/drivers/scsi/megaraid/megaraid_sas_base.c' l='7203' u='c' c='megasas_mgmt_ioctl_fw'/>
<def f='linux-4.14.y/kernel/locking/semaphore.c' l='76' ll='89' type='int down_interruptible(struct semaphore * sem)'/>
<dec f='linux-4.14.y/kernel/locking/semaphore.c' l='90' type='int down_interruptible(struct semaphore * )'/>
<use f='linux-4.14.y/kernel/locking/semaphore.c' l='90' c='down_interruptible'/>
<use f='linux-4.14.y/kernel/locking/semaphore.c' l='90' u='a'/>
<use f='linux-4.14.y/kernel/locking/semaphore.c' l='90' u='a'/>
<doc f='linux-4.14.y/kernel/locking/semaphore.c' l='67'>/**
 * down_interruptible - acquire the semaphore unless interrupted
 * @sem: the semaphore to be acquired
 *
 * Attempts to acquire the semaphore.  If no more tasks are allowed to
 * acquire the semaphore, calling this function will put the task to sleep.
 * If the sleep is interrupted by a signal, this function will return -EINTR.
 * If the semaphore is successfully acquired, this function returns 0.
 */</doc>
