<dec f='linux-4.18.y/include/drm/drm_atomic.h' l='331' type='void drm_atomic_state_clear(struct drm_atomic_state * state)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='225' ll='234' type='void drm_atomic_state_clear(struct drm_atomic_state * state)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='235' type='void drm_atomic_state_clear(struct drm_atomic_state * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='235' c='drm_atomic_state_clear'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='235' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='235' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='249' u='c' c='__drm_atomic_state_free'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='2453' u='c' c='drm_mode_atomic_ioctl'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='211'>/**
 * drm_atomic_state_clear - clear state object
 * @state: atomic state
 *
 * When the w/w mutex algorithm detects a deadlock we need to back off and drop
 * all locks. So someone else could sneak in and change the current modeset
 * configuration. Which means that all the state assembled in @state is no
 * longer an atomic update to the current state, but to some arbitrary earlier
 * state. Which could break assumptions the driver&apos;s
 * &amp;drm_mode_config_funcs.atomic_check likely relies on.
 *
 * Hence we must clear all cached state and completely start over, using this
 * function.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='446' u='c' c='restore_fbdev_mode_atomic'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='1458' u='c' c='setcmap_atomic'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_framebuffer.c' l='859' u='c' c='atomic_remove_fb'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_mode_object.c' l='486' u='c' c='set_property_atomic'/>
