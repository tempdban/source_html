<dec f='linux-4.14.y/include/linux/stop_machine.h' l='33' type='bool stop_one_cpu_nowait(unsigned int cpu, cpu_stop_fn_t fn, void * arg, struct cpu_stop_work * work_buf)'/>
<use f='linux-4.14.y/kernel/sched/fair.c' l='8285' u='c' c='load_balance'/>
<def f='linux-4.14.y/kernel/stop_machine.c' l='341' ll='346' type='bool stop_one_cpu_nowait(unsigned int cpu, cpu_stop_fn_t fn, void * arg, struct cpu_stop_work * work_buf)'/>
<doc f='linux-4.14.y/kernel/stop_machine.c' l='323'>/**
 * stop_one_cpu_nowait - stop a cpu but don&apos;t wait for completion
 * @cpu: cpu to stop
 * @fn: function to execute
 * @arg: argument to @fn
 * @work_buf: pointer to cpu_stop_work structure
 *
 * Similar to stop_one_cpu() but doesn&apos;t wait for completion.  The
 * caller is responsible for ensuring @work_buf is currently unused
 * and will remain untouched until stopper starts executing @fn.
 *
 * CONTEXT:
 * Don&apos;t care.
 *
 * RETURNS:
 * true if cpu_stop_work was queued successfully and @fn will be called,
 * false otherwise.
 */</doc>
