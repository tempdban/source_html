<dec f='linux-4.14.y/include/linux/kernel.h' l='295' type='void oops_enter()'/>
<use f='linux-4.14.y/arch/x86/kernel/dumpstack.c' l='253' u='c' c='oops_begin'/>
<def f='linux-4.14.y/kernel/panic.c' l='470' ll='476' type='void oops_enter()'/>
<doc f='linux-4.14.y/kernel/panic.c' l='456'>/*
 * Called when the architecture enters its oops handler, before it prints
 * anything.  If this is the first CPU to oops, and it&apos;s oopsing the first
 * time then let it proceed.
 *
 * This is all enabled by the pause_on_oops kernel boot option.  We do all
 * this to ensure that oopses don&apos;t scroll off the screen.  It has the
 * side-effect of preventing later-oopsing CPUs from mucking up the display,
 * too.
 *
 * It turns out that the CPU which is allowed to print ends up pausing for
 * the right duration, whereas all the other CPUs pause for twice as long:
 * once in oops_enter(), once in oops_exit().
 */</doc>
