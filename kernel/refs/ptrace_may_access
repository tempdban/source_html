<dec f='linux-4.18.y/include/linux/ptrace.h' l='88' type='bool ptrace_may_access(struct task_struct * task, unsigned int mode)'/>
<doc f='linux-4.18.y/include/linux/ptrace.h' l='74'>/**
 * ptrace_may_access - check whether the caller is permitted to access
 * a target task.
 * @task: target task
 * @mode: selects type of access and caller credentials
 *
 * Returns true on success, false on denial.
 *
 * One of the flags PTRACE_MODE_FSCREDS and PTRACE_MODE_REALCREDS must
 * be set in @mode to specify whether the access was requested through
 * a filesystem syscall (should use effective capabilities and fsuid
 * of the caller) or through an explicit syscall such as
 * process_vm_writev or ptrace (and should use the real credentials).
 */</doc>
<use f='linux-4.18.y/fs/proc/array.c' l='442' u='c' c='do_task_stat'/>
<use f='linux-4.18.y/fs/proc/base.c' l='367' u='c' c='proc_pid_wchan'/>
<use f='linux-4.18.y/fs/proc/base.c' l='387' u='c' c='lock_trace'/>
<use f='linux-4.18.y/fs/proc/base.c' l='638' u='c' c='proc_fd_access_allowed'/>
<use f='linux-4.18.y/fs/proc/base.c' l='673' u='c' c='has_pid_permissions'/>
<use f='linux-4.18.y/fs/proc/base.c' l='2089' u='c' c='proc_map_files_lookup'/>
<use f='linux-4.18.y/fs/proc/base.c' l='2142' u='c' c='proc_map_files_readdir'/>
<use f='linux-4.18.y/fs/proc/namespaces.c' l='54' u='c' c='proc_ns_get_link'/>
<use f='linux-4.18.y/fs/proc/namespaces.c' l='75' u='c' c='proc_ns_readlink'/>
<use f='linux-4.18.y/kernel/events/core.c' l='10497' u='c' c='__do_sys_perf_event_open'/>
<use f='linux-4.18.y/kernel/fork.c' l='1143' u='c' c='mm_access'/>
<use f='linux-4.18.y/kernel/futex.c' l='3343' u='c' c='__do_sys_get_robust_list'/>
<use f='linux-4.18.y/kernel/futex_compat.c' l='159' u='c' c='__do_compat_sys_get_robust_list'/>
<def f='linux-4.18.y/kernel/ptrace.c' l='334' ll='341' type='bool ptrace_may_access(struct task_struct * task, unsigned int mode)'/>
