<dec f='linux-4.14.y/include/linux/blk-cgroup.h' l='184' type='int blkcg_activate_policy(struct request_queue * q, const struct blkcg_policy * pol)'/>
<def f='linux-4.14.y/block/blk-cgroup.c' l='1295' ll='1353' type='int blkcg_activate_policy(struct request_queue * q, const struct blkcg_policy * pol)'/>
<dec f='linux-4.14.y/block/blk-cgroup.c' l='1354' type='int blkcg_activate_policy(struct request_queue * , const struct blkcg_policy * )'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='1354' c='blkcg_activate_policy'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='1354' u='a'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='1354' u='a'/>
<doc f='linux-4.14.y/block/blk-cgroup.c' l='1279'>/**
 * blkcg_activate_policy - activate a blkcg policy on a request_queue
 * @q: request_queue of interest
 * @pol: blkcg policy to activate
 *
 * Activate @pol on @q.  Requires %GFP_KERNEL context.  @q goes through
 * bypass mode to populate its blkgs with policy_data for @pol.
 *
 * Activation happens with @q bypassed, so nobody would be accessing blkgs
 * from IO path.  Update of each blkg is protected by both queue and blkcg
 * locks so that holding either lock and testing blkcg_policy_enabled() is
 * always enough for dereferencing policy data.
 *
 * The caller is responsible for synchronizing [de]activations and policy
 * [un]registerations.  Returns 0 on success, -errno on failure.
 */</doc>
<dec f='linux-4.14.y/include/linux/blk-cgroup.h' l='184' type='int blkcg_activate_policy(struct request_queue * q, const struct blkcg_policy * pol)'/>
<def f='linux-4.14.y/block/blk-cgroup.c' l='1295' ll='1353' type='int blkcg_activate_policy(struct request_queue * q, const struct blkcg_policy * pol)'/>
<dec f='linux-4.14.y/block/blk-cgroup.c' l='1354' type='int blkcg_activate_policy(struct request_queue * , const struct blkcg_policy * )'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='1354' c='blkcg_activate_policy'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='1354' u='a'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='1354' u='a'/>
<doc f='linux-4.14.y/block/blk-cgroup.c' l='1279'>/**
 * blkcg_activate_policy - activate a blkcg policy on a request_queue
 * @q: request_queue of interest
 * @pol: blkcg policy to activate
 *
 * Activate @pol on @q.  Requires %GFP_KERNEL context.  @q goes through
 * bypass mode to populate its blkgs with policy_data for @pol.
 *
 * Activation happens with @q bypassed, so nobody would be accessing blkgs
 * from IO path.  Update of each blkg is protected by both queue and blkcg
 * locks so that holding either lock and testing blkcg_policy_enabled() is
 * always enough for dereferencing policy data.
 *
 * The caller is responsible for synchronizing [de]activations and policy
 * [un]registerations.  Returns 0 on success, -errno on failure.
 */</doc>
