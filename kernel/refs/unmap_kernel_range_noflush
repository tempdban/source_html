<dec f='linux-4.18.y/include/linux/vmalloc.h' l='143' type='void unmap_kernel_range_noflush(unsigned long addr, unsigned long size)'/>
<use f='linux-4.18.y/mm/percpu-vm.c' l='137' u='c' c='__pcpu_unmap_pages'/>
<def f='linux-4.18.y/mm/vmalloc.c' l='1313' ll='1316' type='void unmap_kernel_range_noflush(unsigned long addr, unsigned long size)'/>
<dec f='linux-4.18.y/mm/vmalloc.c' l='1317' type='void unmap_kernel_range_noflush(unsigned long , unsigned long )'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='1317' c='unmap_kernel_range_noflush'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='1317' u='a'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='1317' u='a'/>
<doc f='linux-4.18.y/mm/vmalloc.c' l='1299'>/**
 * unmap_kernel_range_noflush - unmap kernel VM area
 * @addr: start of the VM area to unmap
 * @size: size of the VM area to unmap
 *
 * Unmap PFN_UP(@size) pages at @addr.  The VM area @addr and @size
 * specify should have been allocated using get_vm_area() and its
 * friends.
 *
 * NOTE:
 * This function does NOT do any cache flushing.  The caller is
 * responsible for calling flush_cache_vunmap() on to-be-mapped areas
 * before calling this function and flush_tlb_kernel_range() after.
 */</doc>
