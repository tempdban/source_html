<def f='linux-4.14.y/include/linux/vga_switcheroo.h' l='116' ll='123'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/vga_switcheroo.h' l='93'>/**
 * struct vga_switcheroo_handler - handler callbacks
 * @init: initialize handler.
 * 	Optional. This gets called when vga_switcheroo is enabled, i.e. when
 * 	two vga clients have registered. It allows the handler to perform
 * 	some delayed initialization that depends on the existence of the
 * 	vga clients. Currently only the radeon and amdgpu drivers use this.
 * 	The return value is ignored
 * @switchto: switch outputs to given client.
 * 	Mandatory. For muxless machines this should be a no-op. Returning 0
 * 	denotes success, anything else failure (in which case the switch is
 * 	aborted)
 * @switch_ddc: switch DDC lines to given client.
 * 	Optional. Should return the previous DDC owner on success or a
 * 	negative int on failure
 * @power_state: cut or reinstate power of given client.
 * 	Optional. The return value is ignored
 * @get_client_id: determine if given pci device is integrated or discrete GPU.
 * 	Mandatory
 *
 * Handler callbacks. The multiplexer itself. The @switchto and @get_client_id
 * methods are mandatory, all others may be set to NULL.
 */</doc>
<mbr r='vga_switcheroo_handler::init' o='0' t='int (*)(void)'/>
<mbr r='vga_switcheroo_handler::switchto' o='64' t='int (*)(enum vga_switcheroo_client_id)'/>
<mbr r='vga_switcheroo_handler::switch_ddc' o='128' t='int (*)(enum vga_switcheroo_client_id)'/>
<mbr r='vga_switcheroo_handler::power_state' o='192' t='int (*)(enum vga_switcheroo_client_id, enum vga_switcheroo_state)'/>
<mbr r='vga_switcheroo_handler::get_client_id' o='256' t='enum vga_switcheroo_client_id (*)(struct pci_dev *)'/>
<def f='linux-4.14.y/include/linux/vga_switcheroo.h' l='116' ll='123'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/vga_switcheroo.h' l='93'>/**
 * struct vga_switcheroo_handler - handler callbacks
 * @init: initialize handler.
 * 	Optional. This gets called when vga_switcheroo is enabled, i.e. when
 * 	two vga clients have registered. It allows the handler to perform
 * 	some delayed initialization that depends on the existence of the
 * 	vga clients. Currently only the radeon and amdgpu drivers use this.
 * 	The return value is ignored
 * @switchto: switch outputs to given client.
 * 	Mandatory. For muxless machines this should be a no-op. Returning 0
 * 	denotes success, anything else failure (in which case the switch is
 * 	aborted)
 * @switch_ddc: switch DDC lines to given client.
 * 	Optional. Should return the previous DDC owner on success or a
 * 	negative int on failure
 * @power_state: cut or reinstate power of given client.
 * 	Optional. The return value is ignored
 * @get_client_id: determine if given pci device is integrated or discrete GPU.
 * 	Mandatory
 *
 * Handler callbacks. The multiplexer itself. The @switchto and @get_client_id
 * methods are mandatory, all others may be set to NULL.
 */</doc>
<mbr r='vga_switcheroo_handler::init' o='0' t='int (*)(void)'/>
<mbr r='vga_switcheroo_handler::switchto' o='64' t='int (*)(enum vga_switcheroo_client_id)'/>
<mbr r='vga_switcheroo_handler::switch_ddc' o='128' t='int (*)(enum vga_switcheroo_client_id)'/>
<mbr r='vga_switcheroo_handler::power_state' o='192' t='int (*)(enum vga_switcheroo_client_id, enum vga_switcheroo_state)'/>
<mbr r='vga_switcheroo_handler::get_client_id' o='256' t='enum vga_switcheroo_client_id (*)(struct pci_dev *)'/>
