<dec f='linux-4.18.y/include/net/netlink.h' l='259' type='struct nlattr * __nla_reserve(struct sk_buff * skb, int attrtype, int attrlen)'/>
<def f='linux-4.18.y/lib/nlattr.c' l='429' ll='440' type='struct nlattr * __nla_reserve(struct sk_buff * skb, int attrtype, int attrlen)'/>
<dec f='linux-4.18.y/lib/nlattr.c' l='441' type='struct nlattr * __nla_reserve(struct sk_buff * , int , int )'/>
<use f='linux-4.18.y/lib/nlattr.c' l='441' c='__nla_reserve'/>
<use f='linux-4.18.y/lib/nlattr.c' l='441' u='a'/>
<use f='linux-4.18.y/lib/nlattr.c' l='441' u='a'/>
<use f='linux-4.18.y/lib/nlattr.c' l='463' u='c' c='__nla_reserve_64bit'/>
<use f='linux-4.18.y/lib/nlattr.c' l='500' u='c' c='nla_reserve'/>
<use f='linux-4.18.y/lib/nlattr.c' l='568' u='c' c='__nla_put'/>
<doc f='linux-4.18.y/lib/nlattr.c' l='417'>/**
 * __nla_reserve - reserve room for attribute on the skb
 * @skb: socket buffer to reserve room on
 * @attrtype: attribute type
 * @attrlen: length of attribute payload
 *
 * Adds a netlink attribute header to a socket buffer and reserves
 * room for the payload but does not copy it.
 *
 * The caller is responsible to ensure that the skb provides enough
 * tailroom for the attribute header and payload.
 */</doc>
<use f='linux-4.18.y/net/netfilter/nfnetlink_queue.c' l='488' u='c' c='nfqnl_build_packet_message'/>
