<def f='linux-4.18.y/include/linux/bpf.h' l='29' ll='53'/>
<size>120</size>
<doc f='linux-4.18.y/include/linux/bpf.h' l='28'>/* map is generic key/value storage optionally accesible by eBPF programs */</doc>
<mbr r='bpf_map_ops::map_alloc_check' o='0' t='int (*)(union bpf_attr *)'/>
<mbr r='bpf_map_ops::map_alloc' o='64' t='struct bpf_map *(*)(union bpf_attr *)'/>
<mbr r='bpf_map_ops::map_release' o='128' t='void (*)(struct bpf_map *, struct file *)'/>
<mbr r='bpf_map_ops::map_free' o='192' t='void (*)(struct bpf_map *)'/>
<mbr r='bpf_map_ops::map_get_next_key' o='256' t='int (*)(struct bpf_map *, void *, void *)'/>
<mbr r='bpf_map_ops::map_release_uref' o='320' t='void (*)(struct bpf_map *)'/>
<mbr r='bpf_map_ops::map_lookup_elem' o='384' t='void *(*)(struct bpf_map *, void *)'/>
<mbr r='bpf_map_ops::map_update_elem' o='448' t='int (*)(struct bpf_map *, void *, void *, u64)'/>
<mbr r='bpf_map_ops::map_delete_elem' o='512' t='int (*)(struct bpf_map *, void *)'/>
<mbr r='bpf_map_ops::map_fd_get_ptr' o='576' t='void *(*)(struct bpf_map *, struct file *, int)'/>
<mbr r='bpf_map_ops::map_fd_put_ptr' o='640' t='void (*)(void *)'/>
<mbr r='bpf_map_ops::map_gen_lookup' o='704' t='u32 (*)(struct bpf_map *, struct bpf_insn *)'/>
<mbr r='bpf_map_ops::map_fd_sys_lookup_elem' o='768' t='u32 (*)(void *)'/>
<mbr r='bpf_map_ops::map_seq_show_elem' o='832' t='void (*)(struct bpf_map *, void *, struct seq_file *)'/>
<mbr r='bpf_map_ops::map_check_btf' o='896' t='int (*)(const struct bpf_map *, const struct btf *, u32, u32)'/>
