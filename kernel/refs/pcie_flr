<dec f='linux-4.18.y/include/linux/pci.h' l='1091' type='int pcie_flr(struct pci_dev * dev)'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c' l='7366' u='c' c='ixgbe_check_for_bad_vf'/>
<use f='linux-4.18.y/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c' l='10867' u='c' c='ixgbe_io_error_detected'/>
<def f='linux-4.18.y/drivers/pci/pci.c' l='4127' ll='4142' type='int pcie_flr(struct pci_dev * dev)'/>
<dec f='linux-4.18.y/drivers/pci/pci.c' l='4143' type='int pcie_flr(struct pci_dev * )'/>
<use f='linux-4.18.y/drivers/pci/pci.c' l='4143' c='pcie_flr'/>
<use f='linux-4.18.y/drivers/pci/pci.c' l='4143' u='a'/>
<use f='linux-4.18.y/drivers/pci/pci.c' l='4143' u='a'/>
<use f='linux-4.18.y/drivers/pci/pci.c' l='4466' u='c' c='__pci_reset_function_locked'/>
<doc f='linux-4.18.y/drivers/pci/pci.c' l='4119'>/**
 * pcie_flr - initiate a PCIe function level reset
 * @dev:	device to reset
 *
 * Initiate a function level reset on @dev.  The caller should ensure the
 * device supports FLR before calling this function, e.g. by using the
 * pcie_has_flr() helper.
 */</doc>
<use f='linux-4.18.y/drivers/pci/quirks.c' l='3548' u='c' c='reset_intel_82599_sfp_virtfn'/>
<use f='linux-4.18.y/drivers/pci/quirks.c' l='3651' u='c' c='reset_chelsio_generic_dev'/>
