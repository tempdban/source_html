<def f='linux-4.18.y/include/linux/skbuff.h' l='1649' ll='1653' type='void __skb_queue_head_init(struct sk_buff_head * list)'/>
<use f='linux-4.18.y/include/linux/skbuff.h' l='1666' u='c' c='skb_queue_head_init'/>
<use f='linux-4.18.y/include/linux/skbuff.h' l='1735' u='c' c='skb_queue_splice_init'/>
<use f='linux-4.18.y/include/linux/skbuff.h' l='1767' u='c' c='skb_queue_splice_tail_init'/>
<doc f='linux-4.18.y/include/linux/skbuff.h' l='1639'>/**
 *	__skb_queue_head_init - initialize non-spinlock portions of sk_buff_head
 *	@list: queue to initialize
 *
 *	This initializes only the list and queue length aspects of
 *	an sk_buff_head object.  This allows to initialize the list
 *	aspects of an sk_buff_head without reinitializing things like
 *	the spinlock.  It can also be used for on-stack sk_buff_head
 *	objects where the spinlock is known to not be used.
 */</doc>
<use f='linux-4.18.y/drivers/net/ipvlan/ipvlan_core.c' l='243' u='c' c='ipvlan_process_multicast'/>
<use f='linux-4.18.y/drivers/net/macvlan.c' l='305' u='c' c='macvlan_process_broadcast'/>
<use f='linux-4.18.y/drivers/net/tun.c' l='282' u='c' c='tun_napi_receive'/>
<use f='linux-4.18.y/drivers/net/tun.c' l='1578' u='c' c='tun_rx_batched'/>
<use f='linux-4.18.y/net/core/neighbour.c' l='328' u='c' c='neigh_alloc'/>
<use f='linux-4.18.y/net/ipv4/ip_output.c' l='1495' u='c' c='ip_make_skb'/>
<use f='linux-4.18.y/net/ipv4/tcp_input.c' l='4877' u='c' c='tcp_collapse'/>
<use f='linux-4.18.y/net/sched/sch_generic.c' l='836' u='c' c='qdisc_alloc'/>
<use f='linux-4.18.y/net/sched/sch_generic.c' l='837' u='c' c='qdisc_alloc'/>
<use f='linux-4.18.y/net/sched/sch_generic.c' l='1248' u='c' c='dev_init_scheduler_queue'/>
<use f='linux-4.18.y/net/sched/sch_generic.c' l='1249' u='c' c='dev_init_scheduler_queue'/>
