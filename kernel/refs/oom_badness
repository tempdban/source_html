<dec f='linux-4.18.y/include/linux/oom.h' l='100' type='unsigned long oom_badness(struct task_struct * p, struct mem_cgroup * memcg, const nodemask_t * nodemask, unsigned long totalpages)'/>
<use f='linux-4.18.y/fs/proc/base.c' l='522' u='c' c='proc_oom_score'/>
<def f='linux-4.18.y/mm/oom_kill.c' l='195' ll='238' type='unsigned long oom_badness(struct task_struct * p, struct mem_cgroup * memcg, const nodemask_t * nodemask, unsigned long totalpages)'/>
<use f='linux-4.18.y/mm/oom_kill.c' l='336' u='c' c='oom_evaluate_task'/>
<use f='linux-4.18.y/mm/oom_kill.c' l='888' u='c' c='oom_kill_process'/>
<doc f='linux-4.18.y/mm/oom_kill.c' l='184'>/**
 * oom_badness - heuristic function to determine which candidate task to kill
 * @p: task struct of which task we should calculate
 * @totalpages: total present RAM allowed for page allocation
 * @memcg: task&apos;s memory controller, if constrained
 * @nodemask: nodemask passed to page allocator for mempolicy ooms
 *
 * The heuristic for determining which task to kill is made to be as simple and
 * predictable as possible.  The goal is to return the highest value for the
 * task consuming the most memory to avoid subsequent oom failures.
 */</doc>
