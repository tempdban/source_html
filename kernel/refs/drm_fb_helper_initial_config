<dec f='linux-4.18.y/include/drm/drm_fb_helper.h' l='310' type='int drm_fb_helper_initial_config(struct drm_fb_helper * fb_helper, int bpp_sel)'/>
<use f='linux-4.18.y/drivers/gpu/drm/bochs/bochs_fbdev.c' l='178' u='c' c='bochs_fbdev_init'/>
<use f='linux-4.18.y/drivers/gpu/drm/cirrus/cirrus_fbdev.c' l='299' u='c' c='cirrus_fbdev_init'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2722' ll='2733' type='int drm_fb_helper_initial_config(struct drm_fb_helper * fb_helper, int bpp_sel)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2734' type='int drm_fb_helper_initial_config(struct drm_fb_helper * , int )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2734' c='drm_fb_helper_initial_config'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2734' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2734' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2847' u='c' c='drm_fb_helper_fbdev_setup'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='2680'>/**
 * drm_fb_helper_initial_config - setup a sane initial connector configuration
 * @fb_helper: fb_helper device struct
 * @bpp_sel: bpp value to use for the framebuffer configuration
 *
 * Scans the CRTCs and connectors and tries to put together an initial setup.
 * At the moment, this is a cloned configuration across all heads with
 * a new framebuffer object as the backing store.
 *
 * Note that this also registers the fbdev and so allows userspace to call into
 * the driver through the fbdev interfaces.
 *
 * This function will call down into the &amp;drm_fb_helper_funcs.fb_probe callback
 * to let the driver allocate and initialize the fbdev info structure and the
 * drm framebuffer used to back the fbdev. drm_fb_helper_fill_var() and
 * drm_fb_helper_fill_fix() are provided as helpers to setup simple default
 * values for the fbdev info structure.
 *
 * HANG DEBUGGING:
 *
 * When you have fbcon support built-in or already loaded, this function will do
 * a full modeset to setup the fbdev console. Due to locking misdesign in the
 * VT/fbdev subsystem that entire modeset sequence has to be done while holding
 * console_lock. Until console_unlock is called no dmesg lines will be sent out
 * to consoles, not even serial console. This means when your driver crashes,
 * you will see absolutely nothing else but a system stuck in this function,
 * with no further output. Any kind of printk() you place within your own driver
 * or in the drm core modeset code will also never show up.
 *
 * Standard debug practice is to run the fbcon setup without taking the
 * console_lock as a hack, to be able to see backtraces and crashes on the
 * serial line. This can be done by setting the fb.lockless_register_fb=1 kernel
 * cmdline option.
 *
 * The other option is to just disable fbdev emulation since very likely the
 * first modeset from userspace will crash in the same way, and is even easier
 * to debug. This can be done by setting the drm_kms_helper.fbdev_emulation=0
 * kernel cmdline option.
 *
 * RETURNS:
 * Zero if everything went ok, nonzero otherwise.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/qxl/qxl_fb.c' l='393' u='c' c='qxl_fbdev_init'/>
<use f='linux-4.18.y/drivers/gpu/drm/virtio/virtgpu_fb.c' l='343' u='c' c='virtio_gpu_fbdev_init'/>
