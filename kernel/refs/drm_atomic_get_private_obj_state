<dec f='linux-4.18.y/include/drm/drm_atomic.h' l='384' type='struct drm_private_state * drm_atomic_get_private_obj_state(struct drm_atomic_state * state, struct drm_private_obj * obj)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1092' ll='1130' type='struct drm_private_state * drm_atomic_get_private_obj_state(struct drm_atomic_state * state, struct drm_private_obj * obj)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1131' type='struct drm_private_state * drm_atomic_get_private_obj_state(struct drm_atomic_state * , struct drm_private_obj * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1131' c='drm_atomic_get_private_obj_state'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1131' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1131' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1079'>/**
 * drm_atomic_get_private_obj_state - get private object state
 * @state: global atomic state
 * @obj: private object to get the state for
 *
 * This function returns the private object state for the given private object,
 * allocating the state if needed. It does not grab any locks as the caller is
 * expected to care of any required locking.
 *
 * RETURNS:
 *
 * Either the allocated state or the error code encoded into a pointer.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='3153' u='c' c='drm_atomic_get_mst_topology_state'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='3153' u='c' c='drm_atomic_get_mst_topology_state'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='3153' u='c' c='drm_atomic_get_mst_topology_state'/>
