<dec f='linux-4.14.y/fs/f2fs/f2fs.h' l='2612' type='struct page * get_new_data_page(struct inode * inode, struct page * ipage, unsigned long index, bool new_i_size)'/>
<def f='linux-4.14.y/fs/f2fs/data.c' l='736' ll='784' type='struct page * get_new_data_page(struct inode * inode, struct page * ipage, unsigned long index, bool new_i_size)'/>
<doc f='linux-4.14.y/fs/f2fs/data.c' l='727'>/*
 * Caller ensures that this data page is never allocated.
 * A new zero-filled data page is allocated in the page cache.
 *
 * Also, caller should grab and release a rwsem by calling f2fs_lock_op() and
 * f2fs_unlock_op().
 * Note that, ipage is set only by make_empty_dir, and if any error occur,
 * ipage should be released by this function.
 */</doc>
<use f='linux-4.14.y/fs/f2fs/dir.c' l='347' u='c' c='make_empty_dir'/>
<use f='linux-4.14.y/fs/f2fs/dir.c' l='544' u='c' c='f2fs_add_regular_entry'/>
<use f='linux-4.14.y/fs/f2fs/file.c' l='828' u='c' c='fill_zero'/>
<use f='linux-4.14.y/fs/f2fs/file.c' l='1058' u='c' c='__clone_blkaddrs'/>
