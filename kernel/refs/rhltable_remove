<def f='linux-4.18.y/include/linux/rhashtable.h' l='1159' ll='1164' type='int rhltable_remove(struct rhltable * hlt, struct rhlist_head * list, const struct rhashtable_params params)'/>
<doc f='linux-4.18.y/include/linux/rhashtable.h' l='1144'>/**
 * rhltable_remove - remove object from hash list table
 * @hlt:	hash list table
 * @list:	pointer to hash list head inside object
 * @params:	hash table parameters
 *
 * Since the hash chain is single linked, the removal operation needs to
 * walk the bucket chain upon removal. The removal operation is thus
 * considerable slow if the hash table is not correctly sized.
 *
 * Will automatically shrink the table if permitted when residency drops
 * below 30%
 *
 * Returns zero on success, -ENOENT if the entry could not be found.
 */</doc>
<use f='linux-4.18.y/net/netfilter/nf_tables_api.c' l='1575' u='c' c='nf_tables_addchain'/>
<use f='linux-4.18.y/net/netfilter/nf_tables_api.c' l='6087' u='c' c='nft_chain_commit_update'/>
<use f='linux-4.18.y/net/netfilter/nf_tables_api.c' l='6279' u='c' c='nft_chain_del'/>
