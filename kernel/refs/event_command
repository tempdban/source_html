<def f='linux-4.14.y/kernel/trace/trace.h' l='1676' ll='1697'/>
<size>80</size>
<doc f='linux-4.14.y/kernel/trace/trace.h' l='1601'>/**
 * struct event_command - callbacks and data members for event commands
 *
 * Event commands are invoked by users by writing the command name
 * into the &apos;trigger&apos; file associated with a trace event.  The
 * parameters associated with a specific invocation of an event
 * command are used to create an event trigger instance, which is
 * added to the list of trigger instances associated with that trace
 * event.  When the event is hit, the set of triggers associated with
 * that event is invoked.
 *
 * The data members in this structure provide per-event command data
 * for various event commands.
 *
 * All the data members below, except for @post_trigger, must be set
 * for each event command.
 *
 * @name: The unique name that identifies the event command.  This is
 *	the name used when setting triggers via trigger files.
 *
 * @trigger_type: A unique id that identifies the event command
 *	&apos;type&apos;.  This value has two purposes, the first to ensure that
 *	only one trigger of the same type can be set at a given time
 *	for a particular event e.g. it doesn&apos;t make sense to have both
 *	a traceon and traceoff trigger attached to a single event at
 *	the same time, so traceon and traceoff have the same type
 *	though they have different names.  The @trigger_type value is
 *	also used as a bit value for deferring the actual trigger
 *	action until after the current event is finished.  Some
 *	commands need to do this if they themselves log to the trace
 *	buffer (see the @post_trigger() member below).  @trigger_type
 *	values are defined by adding new values to the trigger_type
 *	enum in include/linux/trace_events.h.
 *
 * @flags: See the enum event_command_flags below.
 *
 * All the methods below, except for @set_filter() and @unreg_all(),
 * must be implemented.
 *
 * @func: The callback function responsible for parsing and
 *	registering the trigger written to the &apos;trigger&apos; file by the
 *	user.  It allocates the trigger instance and registers it with
 *	the appropriate trace event.  It makes use of the other
 *	event_command callback functions to orchestrate this, and is
 *	usually implemented by the generic utility function
 *	@event_trigger_callback() (see trace_event_triggers.c).
 *
 * @reg: Adds the trigger to the list of triggers associated with the
 *	event, and enables the event trigger itself, after
 *	initializing it (via the event_trigger_ops @init() function).
 *	This is also where commands can use the @trigger_type value to
 *	make the decision as to whether or not multiple instances of
 *	the trigger should be allowed.  This is usually implemented by
 *	the generic utility function @register_trigger() (see
 *	trace_event_triggers.c).
 *
 * @unreg: Removes the trigger from the list of triggers associated
 *	with the event, and disables the event trigger itself, after
 *	initializing it (via the event_trigger_ops @free() function).
 *	This is usually implemented by the generic utility function
 *	@unregister_trigger() (see trace_event_triggers.c).
 *
 * @unreg_all: An optional function called to remove all the triggers
 *	from the list of triggers associated with the event.  Called
 *	when a trigger file is opened in truncate mode.
 *
 * @set_filter: An optional function called to parse and set a filter
 *	for the trigger.  If no @set_filter() method is set for the
 *	event command, filters set by the user for the command will be
 *	ignored.  This is usually implemented by the generic utility
 *	function @set_trigger_filter() (see trace_event_triggers.c).
 *
 * @get_trigger_ops: The callback function invoked to retrieve the
 *	event_trigger_ops implementation associated with the command.
 */</doc>
<mbr r='event_command::list' o='0' t='struct list_head'/>
<mbr r='event_command::name' o='128' t='char *'/>
<mbr r='event_command::trigger_type' o='192' t='enum event_trigger_type'/>
<mbr r='event_command::flags' o='224' t='int'/>
<mbr r='event_command::func' o='256' t='int (*)(struct event_command *, struct trace_event_file *, char *, char *, char *)'/>
<mbr r='event_command::reg' o='320' t='int (*)(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *)'/>
<mbr r='event_command::unreg' o='384' t='void (*)(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *)'/>
<mbr r='event_command::unreg_all' o='448' t='void (*)(struct trace_event_file *)'/>
<mbr r='event_command::set_filter' o='512' t='int (*)(char *, struct event_trigger_data *, struct trace_event_file *)'/>
<mbr r='event_command::get_trigger_ops' o='576' t='struct event_trigger_ops *(*)(char *, char *)'/>
<def f='linux-4.14.y/kernel/trace/trace.h' l='1676' ll='1697'/>
<size>80</size>
<doc f='linux-4.14.y/kernel/trace/trace.h' l='1601'>/**
 * struct event_command - callbacks and data members for event commands
 *
 * Event commands are invoked by users by writing the command name
 * into the &apos;trigger&apos; file associated with a trace event.  The
 * parameters associated with a specific invocation of an event
 * command are used to create an event trigger instance, which is
 * added to the list of trigger instances associated with that trace
 * event.  When the event is hit, the set of triggers associated with
 * that event is invoked.
 *
 * The data members in this structure provide per-event command data
 * for various event commands.
 *
 * All the data members below, except for @post_trigger, must be set
 * for each event command.
 *
 * @name: The unique name that identifies the event command.  This is
 *	the name used when setting triggers via trigger files.
 *
 * @trigger_type: A unique id that identifies the event command
 *	&apos;type&apos;.  This value has two purposes, the first to ensure that
 *	only one trigger of the same type can be set at a given time
 *	for a particular event e.g. it doesn&apos;t make sense to have both
 *	a traceon and traceoff trigger attached to a single event at
 *	the same time, so traceon and traceoff have the same type
 *	though they have different names.  The @trigger_type value is
 *	also used as a bit value for deferring the actual trigger
 *	action until after the current event is finished.  Some
 *	commands need to do this if they themselves log to the trace
 *	buffer (see the @post_trigger() member below).  @trigger_type
 *	values are defined by adding new values to the trigger_type
 *	enum in include/linux/trace_events.h.
 *
 * @flags: See the enum event_command_flags below.
 *
 * All the methods below, except for @set_filter() and @unreg_all(),
 * must be implemented.
 *
 * @func: The callback function responsible for parsing and
 *	registering the trigger written to the &apos;trigger&apos; file by the
 *	user.  It allocates the trigger instance and registers it with
 *	the appropriate trace event.  It makes use of the other
 *	event_command callback functions to orchestrate this, and is
 *	usually implemented by the generic utility function
 *	@event_trigger_callback() (see trace_event_triggers.c).
 *
 * @reg: Adds the trigger to the list of triggers associated with the
 *	event, and enables the event trigger itself, after
 *	initializing it (via the event_trigger_ops @init() function).
 *	This is also where commands can use the @trigger_type value to
 *	make the decision as to whether or not multiple instances of
 *	the trigger should be allowed.  This is usually implemented by
 *	the generic utility function @register_trigger() (see
 *	trace_event_triggers.c).
 *
 * @unreg: Removes the trigger from the list of triggers associated
 *	with the event, and disables the event trigger itself, after
 *	initializing it (via the event_trigger_ops @free() function).
 *	This is usually implemented by the generic utility function
 *	@unregister_trigger() (see trace_event_triggers.c).
 *
 * @unreg_all: An optional function called to remove all the triggers
 *	from the list of triggers associated with the event.  Called
 *	when a trigger file is opened in truncate mode.
 *
 * @set_filter: An optional function called to parse and set a filter
 *	for the trigger.  If no @set_filter() method is set for the
 *	event command, filters set by the user for the command will be
 *	ignored.  This is usually implemented by the generic utility
 *	function @set_trigger_filter() (see trace_event_triggers.c).
 *
 * @get_trigger_ops: The callback function invoked to retrieve the
 *	event_trigger_ops implementation associated with the command.
 */</doc>
<mbr r='event_command::list' o='0' t='struct list_head'/>
<mbr r='event_command::name' o='128' t='char *'/>
<mbr r='event_command::trigger_type' o='192' t='enum event_trigger_type'/>
<mbr r='event_command::flags' o='224' t='int'/>
<mbr r='event_command::func' o='256' t='int (*)(struct event_command *, struct trace_event_file *, char *, char *, char *)'/>
<mbr r='event_command::reg' o='320' t='int (*)(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *)'/>
<mbr r='event_command::unreg' o='384' t='void (*)(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *)'/>
<mbr r='event_command::unreg_all' o='448' t='void (*)(struct trace_event_file *)'/>
<mbr r='event_command::set_filter' o='512' t='int (*)(char *, struct event_trigger_data *, struct trace_event_file *)'/>
<mbr r='event_command::get_trigger_ops' o='576' t='struct event_trigger_ops *(*)(char *, char *)'/>
