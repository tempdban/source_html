<dec f='linux-4.14.y/include/linux/kernfs.h' l='71' type='2'/>
<doc f='linux-4.14.y/include/linux/kernfs.h' l='62'>/*
	 * For regular flies, if the opener has CAP_DAC_OVERRIDE, open(2)
	 * succeeds regardless of the RW permissions.  sysfs had an extra
	 * layer of enforcement where open(2) fails with -EACCES regardless
	 * of CAP_DAC_OVERRIDE if the permission doesn&apos;t have the
	 * respective read or write access at all (none of S_IRUGO or
	 * S_IWUGO) or the respective operation isn&apos;t implemented.  The
	 * following flag enables that behavior.
	 */</doc>
<use f='linux-4.14.y/fs/kernfs/file.c' l='636' u='r' c='kernfs_fop_open'/>
<use f='linux-4.14.y/fs/sysfs/mount.c' l='68' u='r' c='sysfs_init'/>
<dec f='linux-4.14.y/include/linux/kernfs.h' l='71' type='2'/>
<doc f='linux-4.14.y/include/linux/kernfs.h' l='62'>/*
	 * For regular flies, if the opener has CAP_DAC_OVERRIDE, open(2)
	 * succeeds regardless of the RW permissions.  sysfs had an extra
	 * layer of enforcement where open(2) fails with -EACCES regardless
	 * of CAP_DAC_OVERRIDE if the permission doesn&apos;t have the
	 * respective read or write access at all (none of S_IRUGO or
	 * S_IWUGO) or the respective operation isn&apos;t implemented.  The
	 * following flag enables that behavior.
	 */</doc>
<use f='linux-4.14.y/fs/kernfs/file.c' l='636' u='r' c='kernfs_fop_open'/>
<use f='linux-4.14.y/fs/sysfs/mount.c' l='68' u='r' c='sysfs_init'/>
