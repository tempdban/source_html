<dec f='linux-4.14.y/include/linux/kernel.h' l='461' type='const char * kvasprintf_const(gfp_t gfp, const char * fmt, struct __va_list_tag * args)'/>
<def f='linux-4.14.y/lib/kasprintf.c' l='43' ll='50' type='const char * kvasprintf_const(gfp_t gfp, const char * fmt, struct __va_list_tag * ap)'/>
<dec f='linux-4.14.y/lib/kasprintf.c' l='51' type='const char * kvasprintf_const(gfp_t , const char * , struct __va_list_tag * )'/>
<use f='linux-4.14.y/lib/kasprintf.c' l='51' c='kvasprintf_const'/>
<use f='linux-4.14.y/lib/kasprintf.c' l='51' u='a'/>
<use f='linux-4.14.y/lib/kasprintf.c' l='51' u='a'/>
<doc f='linux-4.14.y/lib/kasprintf.c' l='37'>/*
 * If fmt contains no % (or is exactly %s), use kstrdup_const. If fmt
 * (or the sole vararg) points to rodata, we will then save a memory
 * allocation and string copy. In any case, the return value should be
 * freed using kfree_const().
 */</doc>
<use f='linux-4.14.y/lib/kobject.c' l='263' u='c' c='kobject_set_name_vargs'/>
<dec f='linux-4.14.y/include/linux/kernel.h' l='461' type='const char * kvasprintf_const(gfp_t gfp, const char * fmt, struct __va_list_tag * args)'/>
<def f='linux-4.14.y/lib/kasprintf.c' l='43' ll='50' type='const char * kvasprintf_const(gfp_t gfp, const char * fmt, struct __va_list_tag * ap)'/>
<dec f='linux-4.14.y/lib/kasprintf.c' l='51' type='const char * kvasprintf_const(gfp_t , const char * , struct __va_list_tag * )'/>
<use f='linux-4.14.y/lib/kasprintf.c' l='51' c='kvasprintf_const'/>
<use f='linux-4.14.y/lib/kasprintf.c' l='51' u='a'/>
<use f='linux-4.14.y/lib/kasprintf.c' l='51' u='a'/>
<doc f='linux-4.14.y/lib/kasprintf.c' l='37'>/*
 * If fmt contains no % (or is exactly %s), use kstrdup_const. If fmt
 * (or the sole vararg) points to rodata, we will then save a memory
 * allocation and string copy. In any case, the return value should be
 * freed using kfree_const().
 */</doc>
<use f='linux-4.14.y/lib/kobject.c' l='263' u='c' c='kobject_set_name_vargs'/>
