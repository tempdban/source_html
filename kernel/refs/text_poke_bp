<dec f='linux-4.18.y/arch/x86/include/asm/text-patching.h' l='39' type='void * text_poke_bp(void * addr, const void * opcode, size_t len, void * handler)'/>
<def f='linux-4.18.y/arch/x86/kernel/alternative.c' l='781' ll='822' type='void * text_poke_bp(void * addr, const void * opcode, size_t len, void * handler)'/>
<doc f='linux-4.18.y/arch/x86/kernel/alternative.c' l='759'>/**
 * text_poke_bp() -- update instructions on live kernel on SMP
 * @addr:	address to patch
 * @opcode:	opcode of new instruction
 * @len:	length to copy
 * @handler:	address to jump to when the temporary breakpoint is hit
 *
 * Modify multi-byte instruction by using int3 breakpoint on SMP.
 * We completely avoid stop_machine() here, and achieve the
 * synchronization using int3 breakpoint.
 *
 * The way it is done:
 *	- add a int3 trap to the address that will be patched
 *	- sync cores
 *	- update all but the first byte of the patched range
 *	- sync cores
 *	- replace the first byte (int3) by the first byte of
 *	  replacing opcode
 *	- sync cores
 *
 * Note: must be called under text_mutex.
 */</doc>
