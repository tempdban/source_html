<dec f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.h' l='125' type='void i40e_reset_all_vfs(struct i40e_pf * pf, bool flr)'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_main.c' l='7362' u='c' c='i40e_rebuild'/>
<def f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c' l='1090' ll='1178' type='void i40e_reset_all_vfs(struct i40e_pf * pf, bool flr)'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c' l='1302' u='c' c='i40e_alloc_vfs'/>
<doc f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c' l='1080'>/**
 * i40e_reset_all_vfs
 * @pf: pointer to the PF structure
 * @flr: VFLR was issued or not
 *
 * Reset all allocated VFs in one go. First, tell the hardware to reset each
 * VF, then do all the waiting in one chunk, and finally finish restoring each
 * VF after the wait. This is useful during PF routines which need to reset
 * all VFs, as otherwise it must perform these resets in a serialized fashion.
 **/</doc>
