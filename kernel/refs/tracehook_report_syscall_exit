<def f='linux-4.14.y/include/linux/tracehook.h' l='123' ll='133' type='void tracehook_report_syscall_exit(struct pt_regs * regs, int step)'/>
<use f='linux-4.14.y/arch/x86/entry/common.c' l='241' u='c' c='syscall_slow_exit_work'/>
<doc f='linux-4.14.y/include/linux/tracehook.h' l='106'>/**
 * tracehook_report_syscall_exit - task has just finished a system call
 * @regs:		user register state of current task
 * @step:		nonzero if simulating single-step or block-step
 *
 * This will be called if %TIF_SYSCALL_TRACE has been set, when the
 * current task has just finished an attempted system call.  Full
 * user register state is available here.  It is safe to block here,
 * preventing signals from being processed.
 *
 * If @step is nonzero, this report is also in lieu of the normal
 * trap that would follow the system call instruction because
 * user_enable_block_step() or user_enable_single_step() was used.
 * In this case, %TIF_SYSCALL_TRACE might not be set.
 *
 * Called without locks, just before checking for pending signals.
 */</doc>
