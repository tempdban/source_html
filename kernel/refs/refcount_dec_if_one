<dec f='linux-4.18.y/include/linux/refcount.h' l='97' type='bool refcount_dec_if_one(refcount_t * r)'/>
<def f='linux-4.18.y/lib/refcount.c' l='249' ll='254' type='bool refcount_dec_if_one(refcount_t * r)'/>
<dec f='linux-4.18.y/lib/refcount.c' l='255' type='bool refcount_dec_if_one(refcount_t * )'/>
<use f='linux-4.18.y/lib/refcount.c' l='255' c='refcount_dec_if_one'/>
<use f='linux-4.18.y/lib/refcount.c' l='255' u='a'/>
<use f='linux-4.18.y/lib/refcount.c' l='255' u='a'/>
<doc f='linux-4.18.y/lib/refcount.c' l='233'>/**
 * refcount_dec_if_one - decrement a refcount if it is 1
 * @r: the refcount
 *
 * No atomic_t counterpart, it attempts a 1 -&gt; 0 transition and returns the
 * success thereof.
 *
 * Like all decrement operations, it provides release memory order and provides
 * a control dependency.
 *
 * It can be used like a try-delete operator; this explicit case is provided
 * and not cmpxchg in generic, because that would allow implementing unsafe
 * operations.
 *
 * Return: true if the resulting refcount is 0, false otherwise
 */</doc>
<use f='linux-4.18.y/net/ipv4/inetpeer.c' l='164' u='c' c='inet_peer_gc'/>
<use f='linux-4.18.y/net/netfilter/nfnetlink_acct.c' l='333' u='c' c='nfnl_acct_try_del'/>
<use f='linux-4.18.y/net/netfilter/nfnetlink_cthelper.c' l='727' u='c' c='nfnl_cthelper_del'/>
<use f='linux-4.18.y/net/netfilter/nfnetlink_cttimeout.c' l='325' u='c' c='ctnl_timeout_try_del'/>
