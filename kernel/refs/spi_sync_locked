<dec f='linux-4.18.y/include/linux/spi/spi.h' l='1029' type='int spi_sync_locked(struct spi_device * spi, struct spi_message * message)'/>
<def f='linux-4.18.y/drivers/spi/spi.c' l='3184' ll='3187' type='int spi_sync_locked(struct spi_device * spi, struct spi_message * message)'/>
<dec f='linux-4.18.y/drivers/spi/spi.c' l='3188' type='int spi_sync_locked(struct spi_device * , struct spi_message * )'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='3188' c='spi_sync_locked'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='3188' u='a'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='3188' u='a'/>
<doc f='linux-4.18.y/drivers/spi/spi.c' l='3168'>/**
 * spi_sync_locked - version of spi_sync with exclusive bus usage
 * @spi: device with which data will be exchanged
 * @message: describes the data transfers
 * Context: can sleep
 *
 * This call may only be used from a context that may sleep.  The sleep
 * is non-interruptible, and has no timeout.  Low-overhead controller
 * drivers may DMA directly into and out of the message buffers.
 *
 * This call should be used by drivers that require exclusive access to the
 * SPI bus. It has to be preceded by a spi_bus_lock call. The SPI bus must
 * be released by a spi_bus_unlock call when the exclusive access is over.
 *
 * Return: zero on success, else a negative error code.
 */</doc>
