<dec f='linux-4.18.y/security/apparmor/include/perms.h' l='156' type='int aa_check_perms(struct aa_profile * profile, struct aa_perms * perms, u32 request, struct common_audit_data * sa, void (*)(struct audit_buffer *, void *) cb)'/>
<use f='linux-4.18.y/security/apparmor/ipc.c' l='79' u='c' c='profile_ptrace_perm'/>
<use f='linux-4.18.y/security/apparmor/ipc.c' l='208' u='c' c='profile_signal_perm'/>
<use f='linux-4.18.y/security/apparmor/lib.c' l='401' u='c' c='aa_profile_label_perm'/>
<def f='linux-4.18.y/security/apparmor/lib.c' l='422' ll='467' type='int aa_check_perms(struct aa_profile * profile, struct aa_perms * perms, u32 request, struct common_audit_data * sa, void (*)(struct audit_buffer *, void *) cb)'/>
<doc f='linux-4.18.y/security/apparmor/lib.c' l='404'>/**
 * aa_check_perms - do audit mode selection based on perms set
 * @profile: profile being checked
 * @perms: perms computed for the request
 * @request: requested perms
 * @deny: Returns: explicit deny set
 * @sa: initialized audit structure (MAY BE NULL if not auditing)
 * @cb: callback fn for type specific fields (MAY BE NULL)
 *
 * Returns: 0 if permission else error code
 *
 * Note: profile audit modes need to be set before calling by setting the
 *       perm masks appropriately.
 *
 *       If not auditing then complain mode is not enabled and the
 *       error code will indicate whether there was an explicit deny
 *	 with a positive value.
 */</doc>
<use f='linux-4.18.y/security/apparmor/net.c' l='132' u='c' c='aa_profile_af_perm'/>
