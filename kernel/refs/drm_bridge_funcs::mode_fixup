<dec f='linux-4.14.y/include/drm/drm_bridge.h' l='131' type='bool (*)(struct drm_bridge *, const struct drm_display_mode *, struct drm_display_mode *)'/>
<offset>192</offset>
<doc f='linux-4.14.y/include/drm/drm_bridge.h' l='96'>/**
	 * @mode_fixup:
	 *
	 * This callback is used to validate and adjust a mode. The paramater
	 * mode is the display mode that should be fed to the next element in
	 * the display chain, either the final &amp;drm_connector or the next
	 * &amp;drm_bridge. The parameter adjusted_mode is the input mode the bridge
	 * requires. It can be modified by this callback and does not need to
	 * match mode. See also &amp;drm_crtc_state.adjusted_mode for more details.
	 *
	 * This is the only hook that allows a bridge to reject a modeset. If
	 * this function passes all other callbacks must succeed for this
	 * configuration.
	 *
	 * The mode_fixup callback is optional.
	 *
	 * NOTE:
	 *
	 * This function is called in the check phase of atomic modesets, which
	 * can be aborted for any reason (including on userspace&apos;s request to
	 * just check whether a configuration would be possible). Drivers MUST
	 * NOT touch any persistent state (hardware or software) or data
	 * structures except the passed in @state parameter.
	 *
	 * Also beware that userspace can request its own custom modes, neither
	 * core nor helpers filter modes to the list of probe modes reported by
	 * the GETCONNECTOR IOCTL and stored in &amp;drm_connector.modes. To ensure
	 * that modes are filtered consistently put any bridge constraints and
	 * limits checks into @mode_valid.
	 *
	 * RETURNS:
	 *
	 * True if an acceptable configuration is possible, false if the modeset
	 * operation should be rejected.
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='199' u='r' c='drm_bridge_mode_fixup'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='200' u='r' c='drm_bridge_mode_fixup'/>
