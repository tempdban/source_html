<dec f='linux-4.14.y/include/acpi/acpixf.h' l='697' type='acpi_status acpi_acquire_global_lock(u16 timeout, u32 * handle)'/>
<doc f='linux-4.14.y/include/acpi/acpixf.h' l='693'>/*
 * Global Lock interfaces
 */</doc>
<def f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1051' ll='1076' type='acpi_status acpi_acquire_global_lock(u16 timeout, u32 * handle)'/>
<dec f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1078' type='acpi_status acpi_acquire_global_lock(u16 , u32 * )'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1078' c='acpi_acquire_global_lock'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1078' u='a'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1078' u='a'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1032'>/*******************************************************************************
 *
 * FUNCTION:    acpi_acquire_global_lock
 *
 * PARAMETERS:  timeout         - How long the caller is willing to wait
 *              handle          - Where the handle to the lock is returned
 *                                (if acquired)
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Acquire the ACPI Global Lock
 *
 * Note: Allows callers with the same thread ID to acquire the global lock
 * multiple times. In other words, externally, the behavior of the global lock
 * is identical to an AML mutex. On the first acquire, a new handle is
 * returned. On any subsequent calls to acquire by the same thread, the same
 * handle is returned.
 *
 ******************************************************************************/</doc>
<use f='linux-4.14.y/drivers/acpi/ec.c' l='826' u='c' c='acpi_ec_transaction'/>
<dec f='linux-4.14.y/include/acpi/acpixf.h' l='697' type='acpi_status acpi_acquire_global_lock(u16 timeout, u32 * handle)'/>
<doc f='linux-4.14.y/include/acpi/acpixf.h' l='693'>/*
 * Global Lock interfaces
 */</doc>
<def f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1051' ll='1076' type='acpi_status acpi_acquire_global_lock(u16 timeout, u32 * handle)'/>
<dec f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1078' type='acpi_status acpi_acquire_global_lock(u16 , u32 * )'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1078' c='acpi_acquire_global_lock'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1078' u='a'/>
<use f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1078' u='a'/>
<doc f='linux-4.14.y/drivers/acpi/acpica/evxface.c' l='1032'>/*******************************************************************************
 *
 * FUNCTION:    acpi_acquire_global_lock
 *
 * PARAMETERS:  timeout         - How long the caller is willing to wait
 *              handle          - Where the handle to the lock is returned
 *                                (if acquired)
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Acquire the ACPI Global Lock
 *
 * Note: Allows callers with the same thread ID to acquire the global lock
 * multiple times. In other words, externally, the behavior of the global lock
 * is identical to an AML mutex. On the first acquire, a new handle is
 * returned. On any subsequent calls to acquire by the same thread, the same
 * handle is returned.
 *
 ******************************************************************************/</doc>
<use f='linux-4.14.y/drivers/acpi/ec.c' l='826' u='c' c='acpi_ec_transaction'/>
