<dec f='linux-4.18.y/drivers/acpi/acpica/acevents.h' l='125' type='acpi_status acpi_ev_match_gpe_method(acpi_handle obj_handle, u32 level, void * context, void ** return_value)'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evgpeblk.c' l='364' u='r' c='acpi_ev_create_gpe_block'/>
<use f='linux-4.18.y/drivers/acpi/acpica/evgpeinit.c' l='236' u='r' c='acpi_ev_update_gpes'/>
<def f='linux-4.18.y/drivers/acpi/acpica/evgpeinit.c' l='283' ll='413' type='acpi_status acpi_ev_match_gpe_method(acpi_handle obj_handle, u32 level, void * context, void ** return_value)'/>
<doc f='linux-4.18.y/drivers/acpi/acpica/evgpeinit.c' l='257'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ev_match_gpe_method
 *
 * PARAMETERS:  Callback from walk_namespace
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Called from acpi_walk_namespace. Expects each object to be a
 *              control method under the _GPE portion of the namespace.
 *              Extract the name and GPE type from the object, saving this
 *              information for quick lookup during GPE dispatch. Allows a
 *              per-owner_id evaluation if execute_by_owner_id is TRUE in the
 *              walk_info parameter block.
 *
 *              The name of each GPE control method is of the form:
 *              &quot;_Lxx&quot; or &quot;_Exx&quot;, where:
 *                  L      - means that the GPE is level triggered
 *                  E      - means that the GPE is edge triggered
 *                  xx     - is the GPE number [in HEX]
 *
 * If walk_info-&gt;execute_by_owner_id is TRUE, we only execute examine GPE methods
 * with that owner.
 *
 ******************************************************************************/</doc>
