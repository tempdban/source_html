<dec f='linux-4.14.y/include/linux/buffer_head.h' l='222' type='int block_read_full_page(struct page * , get_block_t * )'/>
<use f='linux-4.14.y/fs/block_dev.c' l='583' u='c' c='blkdev_readpage'/>
<def f='linux-4.14.y/fs/buffer.c' l='2275' ll='2358' type='int block_read_full_page(struct page * page, get_block_t * get_block)'/>
<dec f='linux-4.14.y/fs/buffer.c' l='2359' type='int block_read_full_page(struct page * , get_block_t * )'/>
<use f='linux-4.14.y/fs/buffer.c' l='2359' c='block_read_full_page'/>
<use f='linux-4.14.y/fs/buffer.c' l='2359' u='a'/>
<use f='linux-4.14.y/fs/buffer.c' l='2359' u='a'/>
<doc f='linux-4.14.y/fs/buffer.c' l='2268'>/*
 * Generic &quot;read page&quot; function for block devices that have the normal
 * get_block functionality. This is most of the block device filesystems.
 * Reads the page asynchronously --- the unlock_buffer() and
 * set/clear_buffer_uptodate() functions propagate buffer state into the
 * page struct once IO has completed.
 */</doc>
<use f='linux-4.14.y/fs/ext4/readpage.c' l='283' u='c' c='ext4_mpage_readpages'/>
<use f='linux-4.14.y/fs/mpage.c' l='312' u='c' c='do_mpage_readpage'/>
