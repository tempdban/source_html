<dec f='linux-4.14.y/fs/ntfs/lcnalloc.h' l='48' type='s64 __ntfs_cluster_free(ntfs_inode * ni, const VCN start_vcn, s64 count, ntfs_attr_search_ctx * ctx, const bool is_rollback)'/>
<use f='linux-4.14.y/fs/ntfs/lcnalloc.h' l='110' u='c' c='ntfs_cluster_free'/>
<def f='linux-4.14.y/fs/ntfs/lcnalloc.c' l='849' ll='1012' type='s64 __ntfs_cluster_free(ntfs_inode * ni, const VCN start_vcn, s64 count, ntfs_attr_search_ctx * ctx, const bool is_rollback)'/>
<use f='linux-4.14.y/fs/ntfs/lcnalloc.c' l='1002' u='c' c='__ntfs_cluster_free'/>
<doc f='linux-4.14.y/fs/ntfs/lcnalloc.c' l='789'>/**
 * __ntfs_cluster_free - free clusters on an ntfs volume
 * @ni:		ntfs inode whose runlist describes the clusters to free
 * @start_vcn:	vcn in the runlist of @ni at which to start freeing clusters
 * @count:	number of clusters to free or -1 for all clusters
 * @ctx:	active attribute search context if present or NULL if not
 * @is_rollback:	true if this is a rollback operation
 *
 * Free @count clusters starting at the cluster @start_vcn in the runlist
 * described by the vfs inode @ni.
 *
 * If @count is -1, all clusters from @start_vcn to the end of the runlist are
 * deallocated.  Thus, to completely free all clusters in a runlist, use
 * @start_vcn = 0 and @count = -1.
 *
 * If @ctx is specified, it is an active search context of @ni and its base mft
 * record.  This is needed when __ntfs_cluster_free() encounters unmapped
 * runlist fragments and allows their mapping.  If you do not have the mft
 * record mapped, you can specify @ctx as NULL and __ntfs_cluster_free() will
 * perform the necessary mapping and unmapping.
 *
 * Note, __ntfs_cluster_free() saves the state of @ctx on entry and restores it
 * before returning.  Thus, @ctx will be left pointing to the same attribute on
 * return as on entry.  However, the actual pointers in @ctx may point to
 * different memory locations on return, so you must remember to reset any
 * cached pointers from the @ctx, i.e. after the call to __ntfs_cluster_free(),
 * you will probably want to do:
 *	m = ctx-&gt;mrec;
 *	a = ctx-&gt;attr;
 * Assuming you cache ctx-&gt;attr in a variable @a of type ATTR_RECORD * and that
 * you cache ctx-&gt;mrec in a variable @m of type MFT_RECORD *.
 *
 * @is_rollback should always be &apos;false&apos;, it is for internal use to rollback
 * errors.  You probably want to use ntfs_cluster_free() instead.
 *
 * Note, __ntfs_cluster_free() does not modify the runlist, so you have to
 * remove from the runlist or mark sparse the freed runs later.
 *
 * Return the number of deallocated clusters (not counting sparse ones) on
 * success and -errno on error.
 *
 * WARNING: If @ctx is supplied, regardless of whether success or failure is
 *	    returned, you need to check IS_ERR(@ctx-&gt;mrec) and if &apos;true&apos; the @ctx
 *	    is no longer valid, i.e. you need to either call
 *	    ntfs_attr_reinit_search_ctx() or ntfs_attr_put_search_ctx() on it.
 *	    In that case PTR_ERR(@ctx-&gt;mrec) will give you the error code for
 *	    why the mapping of the old inode failed.
 *
 * Locking: - The runlist described by @ni must be locked for writing on entry
 *	      and is locked on return.  Note the runlist may be modified when
 *	      needed runlist fragments need to be mapped.
 *	    - The volume lcn bitmap must be unlocked on entry and is unlocked
 *	      on return.
 *	    - This function takes the volume lcn bitmap lock for writing and
 *	      modifies the bitmap contents.
 *	    - If @ctx is NULL, the base mft record of @ni must not be mapped on
 *	      entry and it will be left unmapped on return.
 *	    - If @ctx is not NULL, the base mft record must be mapped on entry
 *	      and it will be left mapped on return.
 */</doc>
