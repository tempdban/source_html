<dec f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='17' type='unsigned long'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='22' c='native_read_cr0'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='28' c='native_write_cr0'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='34' c='native_read_cr2'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='40' c='native_write_cr2'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='46' c='__native_read_cr3'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='52' c='native_write_cr3'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='70' c='native_read_cr4'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='77' c='native_write_cr4'/>
<doc f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='10'>/*
 * Volatile isn&apos;t enough to prevent the compiler from reordering the
 * read/write functions for the control registers and messing everything up.
 * A memory clobber would solve the problem, but would prevent reordering of
 * all loads stores around it, which can hurt performance. Solution is to
 * use a variable and mimic reads and writes to it to enforce serialization
 */</doc>
<def f='linux-4.14.y/arch/x86/boot/compressed/pgtable_64.c' l='10' type='unsigned long'/>
<doc f='linux-4.14.y/arch/x86/boot/compressed/pgtable_64.c' l='3'>/*
 * __force_order is used by special_insns.h asm code to force instruction
 * serialization.
 *
 * It is not referenced from the code, but GCC &lt; 5 with -fPIE would fail
 * due to an undefined symbol. Define it to make these ancient GCCs work.
 */</doc>
<dec f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='17' type='unsigned long'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='22' c='native_read_cr0'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='28' c='native_write_cr0'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='34' c='native_read_cr2'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='40' c='native_write_cr2'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='46' c='__native_read_cr3'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='52' c='native_write_cr3'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='70' c='native_read_cr4'/>
<use f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='77' c='native_write_cr4'/>
<doc f='linux-4.14.y/arch/x86/include/asm/special_insns.h' l='10'>/*
 * Volatile isn&apos;t enough to prevent the compiler from reordering the
 * read/write functions for the control registers and messing everything up.
 * A memory clobber would solve the problem, but would prevent reordering of
 * all loads stores around it, which can hurt performance. Solution is to
 * use a variable and mimic reads and writes to it to enforce serialization
 */</doc>
<def f='linux-4.14.y/arch/x86/boot/compressed/pagetable.c' l='40' type='unsigned long'/>
<doc f='linux-4.14.y/arch/x86/boot/compressed/pagetable.c' l='39'>/* Used by pgtable.h asm code to force instruction serialization. */</doc>
<def f='linux-4.14.y/arch/x86/boot/compressed/pgtable_64.c' l='10' type='unsigned long'/>
<doc f='linux-4.14.y/arch/x86/boot/compressed/pgtable_64.c' l='3'>/*
 * __force_order is used by special_insns.h asm code to force instruction
 * serialization.
 *
 * It is not referenced from the code, but GCC &lt; 5 with -fPIE would fail
 * due to an undefined symbol. Define it to make these ancient GCCs work.
 */</doc>
