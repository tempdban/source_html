<def f='linux-4.18.y/include/linux/netdevice.h' l='1717' ll='1996'/>
<size>1728</size>
<doc f='linux-4.18.y/include/linux/netdevice.h' l='1500'>/**
 *	struct net_device - The DEVICE structure.
 *
 *	Actually, this whole structure is a big mistake.  It mixes I/O
 *	data with strictly &quot;high-level&quot; data, and it has to know about
 *	almost every data structure used in the INET module.
 *
 *	@name:	This is the first field of the &quot;visible&quot; part of this structure
 *		(i.e. as seen by users in the &quot;Space.c&quot; file).  It is the name
 *		of the interface.
 *
 *	@name_hlist: 	Device name hash chain, please keep it close to name[]
 *	@ifalias:	SNMP alias
 *	@mem_end:	Shared memory end
 *	@mem_start:	Shared memory start
 *	@base_addr:	Device I/O address
 *	@irq:		Device IRQ number
 *
 *	@state:		Generic network queuing layer state, see netdev_state_t
 *	@dev_list:	The global list of network devices
 *	@napi_list:	List entry used for polling NAPI devices
 *	@unreg_list:	List entry  when we are unregistering the
 *			device; see the function unregister_netdev
 *	@close_list:	List entry used when we are closing the device
 *	@ptype_all:     Device-specific packet handlers for all protocols
 *	@ptype_specific: Device-specific, protocol-specific packet handlers
 *
 *	@adj_list:	Directly linked devices, like slaves for bonding
 *	@features:	Currently active device features
 *	@hw_features:	User-changeable features
 *
 *	@wanted_features:	User-requested features
 *	@vlan_features:		Mask of features inheritable by VLAN devices
 *
 *	@hw_enc_features:	Mask of features inherited by encapsulating devices
 *				This field indicates what encapsulation
 *				offloads the hardware is capable of doing,
 *				and drivers will need to set them appropriately.
 *
 *	@mpls_features:	Mask of features inheritable by MPLS
 *
 *	@ifindex:	interface index
 *	@group:		The group the device belongs to
 *
 *	@stats:		Statistics struct, which was left as a legacy, use
 *			rtnl_link_stats64 instead
 *
 *	@rx_dropped:	Dropped packets by core network,
 *			do not use this in drivers
 *	@tx_dropped:	Dropped packets by core network,
 *			do not use this in drivers
 *	@rx_nohandler:	nohandler dropped packets by core network on
 *			inactive devices, do not use this in drivers
 *	@carrier_up_count:	Number of times the carrier has been up
 *	@carrier_down_count:	Number of times the carrier has been down
 *
 *	@wireless_handlers:	List of functions to handle Wireless Extensions,
 *				instead of ioctl,
 *				see &lt;net/iw_handler.h&gt; for details.
 *	@wireless_data:	Instance data managed by the core of wireless extensions
 *
 *	@netdev_ops:	Includes several pointers to callbacks,
 *			if one wants to override the ndo_*() functions
 *	@ethtool_ops:	Management operations
 *	@ndisc_ops:	Includes callbacks for different IPv6 neighbour
 *			discovery handling. Necessary for e.g. 6LoWPAN.
 *	@header_ops:	Includes callbacks for creating,parsing,caching,etc
 *			of Layer 2 headers.
 *
 *	@flags:		Interface flags (a la BSD)
 *	@priv_flags:	Like &apos;flags&apos; but invisible to userspace,
 *			see if.h for the definitions
 *	@gflags:	Global flags ( kept as legacy )
 *	@padded:	How much padding added by alloc_netdev()
 *	@operstate:	RFC2863 operstate
 *	@link_mode:	Mapping policy to operstate
 *	@if_port:	Selectable AUI, TP, ...
 *	@dma:		DMA channel
 *	@mtu:		Interface MTU value
 *	@min_mtu:	Interface Minimum MTU value
 *	@max_mtu:	Interface Maximum MTU value
 *	@type:		Interface hardware type
 *	@hard_header_len: Maximum hardware header length.
 *	@min_header_len:  Minimum hardware header length
 *
 *	@needed_headroom: Extra headroom the hardware may need, but not in all
 *			  cases can this be guaranteed
 *	@needed_tailroom: Extra tailroom the hardware may need, but not in all
 *			  cases can this be guaranteed. Some cases also use
 *			  LL_MAX_HEADER instead to allocate the skb
 *
 *	interface address info:
 *
 * 	@perm_addr:		Permanent hw address
 * 	@addr_assign_type:	Hw address assignment type
 * 	@addr_len:		Hardware address length
 *	@neigh_priv_len:	Used in neigh_alloc()
 * 	@dev_id:		Used to differentiate devices that share
 * 				the same link layer address
 * 	@dev_port:		Used to differentiate devices that share
 * 				the same function
 *	@addr_list_lock:	XXX: need comments on this one
 *	@uc_promisc:		Counter that indicates promiscuous mode
 *				has been enabled due to the need to listen to
 *				additional unicast addresses in a device that
 *				does not implement ndo_set_rx_mode()
 *	@uc:			unicast mac addresses
 *	@mc:			multicast mac addresses
 *	@dev_addrs:		list of device hw addresses
 *	@queues_kset:		Group of all Kobjects in the Tx and RX queues
 *	@promiscuity:		Number of times the NIC is told to work in
 *				promiscuous mode; if it becomes 0 the NIC will
 *				exit promiscuous mode
 *	@allmulti:		Counter, enables or disables allmulticast mode
 *
 *	@vlan_info:	VLAN info
 *	@dsa_ptr:	dsa specific data
 *	@tipc_ptr:	TIPC specific data
 *	@atalk_ptr:	AppleTalk link
 *	@ip_ptr:	IPv4 specific data
 *	@dn_ptr:	DECnet specific data
 *	@ip6_ptr:	IPv6 specific data
 *	@ax25_ptr:	AX.25 specific data
 *	@ieee80211_ptr:	IEEE 802.11 specific data, assign before registering
 *
 *	@dev_addr:	Hw address (before bcast,
 *			because most packets are unicast)
 *
 *	@_rx:			Array of RX queues
 *	@num_rx_queues:		Number of RX queues
 *				allocated at register_netdev() time
 *	@real_num_rx_queues: 	Number of RX queues currently active in device
 *
 *	@rx_handler:		handler for received packets
 *	@rx_handler_data: 	XXX: need comments on this one
 *	@miniq_ingress:		ingress/clsact qdisc specific data for
 *				ingress processing
 *	@ingress_queue:		XXX: need comments on this one
 *	@broadcast:		hw bcast address
 *
 *	@rx_cpu_rmap:	CPU reverse-mapping for RX completion interrupts,
 *			indexed by RX queue number. Assigned by driver.
 *			This must only be set if the ndo_rx_flow_steer
 *			operation is defined
 *	@index_hlist:		Device index hash chain
 *
 *	@_tx:			Array of TX queues
 *	@num_tx_queues:		Number of TX queues allocated at alloc_netdev_mq() time
 *	@real_num_tx_queues: 	Number of TX queues currently active in device
 *	@qdisc:			Root qdisc from userspace point of view
 *	@tx_queue_len:		Max frames per queue allowed
 *	@tx_global_lock: 	XXX: need comments on this one
 *
 *	@xps_maps:	XXX: need comments on this one
 *	@miniq_egress:		clsact qdisc specific data for
 *				egress processing
 *	@watchdog_timeo:	Represents the timeout that is used by
 *				the watchdog (see dev_watchdog())
 *	@watchdog_timer:	List of timers
 *
 *	@pcpu_refcnt:		Number of references to this device
 *	@todo_list:		Delayed register/unregister
 *	@link_watch_list:	XXX: need comments on this one
 *
 *	@reg_state:		Register/unregister state machine
 *	@dismantle:		Device is going to be freed
 *	@rtnl_link_state:	This enum represents the phases of creating
 *				a new link
 *
 *	@needs_free_netdev:	Should unregister perform free_netdev?
 *	@priv_destructor:	Called from unregister
 *	@npinfo:		XXX: need comments on this one
 * 	@nd_net:		Network namespace this network device is inside
 *
 * 	@ml_priv:	Mid-layer private
 * 	@lstats:	Loopback statistics
 * 	@tstats:	Tunnel statistics
 * 	@dstats:	Dummy statistics
 * 	@vstats:	Virtual ethernet statistics
 *
 *	@garp_port:	GARP
 *	@mrp_port:	MRP
 *
 *	@dev:		Class/net/name entry
 *	@sysfs_groups:	Space for optional device, statistics and wireless
 *			sysfs groups
 *
 *	@sysfs_rx_queue_group:	Space for optional per-rx queue attributes
 *	@rtnl_link_ops:	Rtnl_link_ops
 *
 *	@gso_max_size:	Maximum size of generic segmentation offload
 *	@gso_max_segs:	Maximum number of segments that can be passed to the
 *			NIC for GSO
 *
 *	@dcbnl_ops:	Data Center Bridging netlink ops
 *	@num_tc:	Number of traffic classes in the net device
 *	@tc_to_txq:	XXX: need comments on this one
 *	@prio_tc_map:	XXX: need comments on this one
 *
 *	@fcoe_ddp_xid:	Max exchange id for FCoE LRO by ddp
 *
 *	@priomap:	XXX: need comments on this one
 *	@phydev:	Physical device may attach itself
 *			for hardware timestamping
 *	@sfp_bus:	attached &amp;struct sfp_bus structure.
 *
 *	@qdisc_tx_busylock: lockdep class annotating Qdisc-&gt;busylock spinlock
 *	@qdisc_running_key: lockdep class annotating Qdisc-&gt;running seqcount
 *
 *	@proto_down:	protocol port state information can be sent to the
 *			switch driver and used to set the phys state of the
 *			switch port.
 *
 *	FIXME: cleanup struct net_device such that network protocol info
 *	moves out.
 */</doc>
<mbr r='net_device::name' o='0' t='char [16]'/>
<mbr r='net_device::name_hlist' o='128' t='struct hlist_node'/>
<mbr r='net_device::ifalias' o='256' t='struct dev_ifalias *'/>
<mbr r='net_device::mem_end' o='320' t='unsigned long'/>
<mbr r='net_device::mem_start' o='384' t='unsigned long'/>
<mbr r='net_device::base_addr' o='448' t='unsigned long'/>
<mbr r='net_device::irq' o='512' t='int'/>
<mbr r='net_device::state' o='576' t='unsigned long'/>
<mbr r='net_device::dev_list' o='640' t='struct list_head'/>
<mbr r='net_device::napi_list' o='768' t='struct list_head'/>
<mbr r='net_device::unreg_list' o='896' t='struct list_head'/>
<mbr r='net_device::close_list' o='1024' t='struct list_head'/>
<mbr r='net_device::ptype_all' o='1152' t='struct list_head'/>
<mbr r='net_device::ptype_specific' o='1280' t='struct list_head'/>
<mbr r='net_device::adj_list' o='1408' t='struct (anonymous struct at /home/tempdban/kernel/stable/./include/linux/netdevice.h:1745:2)'/>
<mbr r='net_device::features' o='1664' t='netdev_features_t'/>
<mbr r='net_device::hw_features' o='1728' t='netdev_features_t'/>
<mbr r='net_device::wanted_features' o='1792' t='netdev_features_t'/>
<mbr r='net_device::vlan_features' o='1856' t='netdev_features_t'/>
<mbr r='net_device::hw_enc_features' o='1920' t='netdev_features_t'/>
<mbr r='net_device::mpls_features' o='1984' t='netdev_features_t'/>
<mbr r='net_device::gso_partial_features' o='2048' t='netdev_features_t'/>
<mbr r='net_device::ifindex' o='2112' t='int'/>
<mbr r='net_device::group' o='2144' t='int'/>
<mbr r='net_device::stats' o='2176' t='struct net_device_stats'/>
<mbr r='net_device::rx_dropped' o='3648' t='atomic_long_t'/>
<mbr r='net_device::tx_dropped' o='3712' t='atomic_long_t'/>
<mbr r='net_device::rx_nohandler' o='3776' t='atomic_long_t'/>
<mbr r='net_device::carrier_up_count' o='3840' t='atomic_t'/>
<mbr r='net_device::carrier_down_count' o='3872' t='atomic_t'/>
<mbr r='net_device::netdev_ops' o='3904' t='const struct net_device_ops *'/>
<mbr r='net_device::ethtool_ops' o='3968' t='const struct ethtool_ops *'/>
<mbr r='net_device::switchdev_ops' o='4032' t='const struct switchdev_ops *'/>
<mbr r='net_device::l3mdev_ops' o='4096' t='const struct l3mdev_ops *'/>
<mbr r='net_device::header_ops' o='4160' t='const struct header_ops *'/>
<mbr r='net_device::flags' o='4224' t='unsigned int'/>
<mbr r='net_device::priv_flags' o='4256' t='unsigned int'/>
<mbr r='net_device::gflags' o='4288' t='unsigned short'/>
<mbr r='net_device::padded' o='4304' t='unsigned short'/>
<mbr r='net_device::operstate' o='4320' t='unsigned char'/>
<mbr r='net_device::link_mode' o='4328' t='unsigned char'/>
<mbr r='net_device::if_port' o='4336' t='unsigned char'/>
<mbr r='net_device::dma' o='4344' t='unsigned char'/>
<mbr r='net_device::mtu' o='4352' t='unsigned int'/>
<mbr r='net_device::min_mtu' o='4384' t='unsigned int'/>
<mbr r='net_device::max_mtu' o='4416' t='unsigned int'/>
<mbr r='net_device::type' o='4448' t='unsigned short'/>
<mbr r='net_device::hard_header_len' o='4464' t='unsigned short'/>
<mbr r='net_device::min_header_len' o='4480' t='unsigned char'/>
<mbr r='net_device::needed_headroom' o='4496' t='unsigned short'/>
<mbr r='net_device::needed_tailroom' o='4512' t='unsigned short'/>
<mbr r='net_device::perm_addr' o='4528' t='unsigned char [32]'/>
<mbr r='net_device::addr_assign_type' o='4784' t='unsigned char'/>
<mbr r='net_device::addr_len' o='4792' t='unsigned char'/>
<mbr r='net_device::neigh_priv_len' o='4800' t='unsigned short'/>
<mbr r='net_device::dev_id' o='4816' t='unsigned short'/>
<mbr r='net_device::dev_port' o='4832' t='unsigned short'/>
<mbr r='net_device::addr_list_lock' o='4864' t='spinlock_t'/>
<mbr r='net_device::name_assign_type' o='4896' t='unsigned char'/>
<mbr r='net_device::uc_promisc' o='4904' t='bool'/>
<mbr r='net_device::uc' o='4928' t='struct netdev_hw_addr_list'/>
<mbr r='net_device::mc' o='5120' t='struct netdev_hw_addr_list'/>
<mbr r='net_device::dev_addrs' o='5312' t='struct netdev_hw_addr_list'/>
<mbr r='net_device::queues_kset' o='5504' t='struct kset *'/>
<mbr r='net_device::promiscuity' o='5568' t='unsigned int'/>
<mbr r='net_device::allmulti' o='5600' t='unsigned int'/>
<mbr r='net_device::ip_ptr' o='5632' t='struct in_device *'/>
<mbr r='net_device::ip6_ptr' o='5696' t='struct inet6_dev *'/>
<mbr r='net_device::ieee80211_ptr' o='5760' t='struct wireless_dev *'/>
<mbr r='net_device::ieee802154_ptr' o='5824' t='struct wpan_dev *'/>
<mbr r='net_device::dev_addr' o='5888' t='unsigned char *'/>
<mbr r='net_device::_rx' o='5952' t='struct netdev_rx_queue *'/>
<mbr r='net_device::num_rx_queues' o='6016' t='unsigned int'/>
<mbr r='net_device::real_num_rx_queues' o='6048' t='unsigned int'/>
<mbr r='net_device::xdp_prog' o='6080' t='struct bpf_prog *'/>
<mbr r='net_device::gro_flush_timeout' o='6144' t='unsigned long'/>
<mbr r='net_device::rx_handler' o='6208' t='rx_handler_func_t *'/>
<mbr r='net_device::rx_handler_data' o='6272' t='void *'/>
<mbr r='net_device::ingress_queue' o='6336' t='struct netdev_queue *'/>
<mbr r='net_device::nf_hooks_ingress' o='6400' t='struct nf_hook_entries *'/>
<mbr r='net_device::broadcast' o='6464' t='unsigned char [32]'/>
<mbr r='net_device::rx_cpu_rmap' o='6720' t='struct cpu_rmap *'/>
<mbr r='net_device::index_hlist' o='6784' t='struct hlist_node'/>
<mbr r='net_device::_tx' o='7168' t='struct netdev_queue *'/>
<mbr r='net_device::num_tx_queues' o='7232' t='unsigned int'/>
<mbr r='net_device::real_num_tx_queues' o='7264' t='unsigned int'/>
<mbr r='net_device::qdisc' o='7296' t='struct Qdisc *'/>
<mbr r='net_device::tx_queue_len' o='7360' t='unsigned int'/>
<mbr r='net_device::tx_global_lock' o='7392' t='spinlock_t'/>
<mbr r='net_device::watchdog_timeo' o='7424' t='int'/>
<mbr r='net_device::xps_maps' o='7488' t='struct xps_dev_maps *'/>
<mbr r='net_device::watchdog_timer' o='7552' t='struct timer_list'/>
<mbr r='net_device::pcpu_refcnt' o='7872' t='int *'/>
<mbr r='net_device::todo_list' o='7936' t='struct list_head'/>
<mbr r='net_device::link_watch_list' o='8064' t='struct list_head'/>
<mbr r='net_device::reg_state' o='8192' t='enum (anonymous enum at /home/tempdban/kernel/stable/./include/linux/netdevice.h:1926:2)'/>
<mbr r='net_device::dismantle' o='8200' t='bool'/>
<mbr r='net_device::rtnl_link_state' o='8208' t='enum (anonymous enum at /home/tempdban/kernel/stable/./include/linux/netdevice.h:1936:2)'/>
<mbr r='net_device::needs_free_netdev' o='8224' t='bool'/>
<mbr r='net_device::priv_destructor' o='8256' t='void (*)(struct net_device *)'/>
<mbr r='net_device::nd_net' o='8320' t='possible_net_t'/>
<mbr r='net_device::dev' o='8448' t='struct device'/>
<mbr r='net_device::sysfs_groups' o='12288' t='const struct attribute_group *[4]'/>
<mbr r='net_device::sysfs_rx_queue_group' o='12544' t='const struct attribute_group *'/>
<mbr r='net_device::rtnl_link_ops' o='12608' t='const struct rtnl_link_ops *'/>
<mbr r='net_device::gso_max_size' o='12672' t='unsigned int'/>
<mbr r='net_device::gso_max_segs' o='12704' t='u16'/>
<mbr r='net_device::dcbnl_ops' o='12736' t='const struct dcbnl_rtnl_ops *'/>
<mbr r='net_device::num_tc' o='12800' t='u8'/>
<mbr r='net_device::tc_to_txq' o='12816' t='struct netdev_tc_txq [16]'/>
<mbr r='net_device::prio_tc_map' o='13328' t='u8 [16]'/>
<mbr r='net_device::phydev' o='13504' t='struct phy_device *'/>
<mbr r='net_device::sfp_bus' o='13568' t='struct sfp_bus *'/>
<mbr r='net_device::qdisc_tx_busylock' o='13632' t='struct lock_class_key *'/>
<mbr r='net_device::qdisc_running_key' o='13696' t='struct lock_class_key *'/>
<mbr r='net_device::proto_down' o='13760' t='bool'/>
