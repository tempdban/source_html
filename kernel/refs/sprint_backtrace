<dec f='linux-4.14.y/include/linux/kallsyms.h' l='41' type='int sprint_backtrace(char * buffer, unsigned long address)'/>
<def f='linux-4.14.y/kernel/kallsyms.c' l='457' ll='460' type='int sprint_backtrace(char * buffer, unsigned long address)'/>
<doc f='linux-4.14.y/kernel/kallsyms.c' l='443'>/**
 * sprint_backtrace - Look up a backtrace symbol and return it in a text buffer
 * @buffer: buffer to be stored
 * @address: address to lookup
 *
 * This function is for stack backtrace and does the same thing as
 * sprint_symbol() but with modified/decreased @address. If there is a
 * tail-call to the function marked &quot;noreturn&quot;, gcc optimized out code after
 * the call so that the stack-saved return address could point outside of the
 * caller. This function ensures that kallsyms will find the original caller
 * by decreasing @address.
 *
 * This function returns the number of bytes stored in @buffer.
 */</doc>
<use f='linux-4.14.y/lib/vsprintf.c' l='683' u='c' c='symbol_string'/>
<dec f='linux-4.14.y/include/linux/kallsyms.h' l='41' type='int sprint_backtrace(char * buffer, unsigned long address)'/>
<def f='linux-4.14.y/kernel/kallsyms.c' l='457' ll='460' type='int sprint_backtrace(char * buffer, unsigned long address)'/>
<doc f='linux-4.14.y/kernel/kallsyms.c' l='443'>/**
 * sprint_backtrace - Look up a backtrace symbol and return it in a text buffer
 * @buffer: buffer to be stored
 * @address: address to lookup
 *
 * This function is for stack backtrace and does the same thing as
 * sprint_symbol() but with modified/decreased @address. If there is a
 * tail-call to the function marked &quot;noreturn&quot;, gcc optimized out code after
 * the call so that the stack-saved return address could point outside of the
 * caller. This function ensures that kallsyms will find the original caller
 * by decreasing @address.
 *
 * This function returns the number of bytes stored in @buffer.
 */</doc>
<use f='linux-4.14.y/lib/vsprintf.c' l='683' u='c' c='symbol_string'/>
