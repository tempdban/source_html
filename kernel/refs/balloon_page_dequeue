<dec f='linux-4.18.y/include/linux/balloon_compaction.h' l='74' type='struct page * balloon_page_dequeue(struct balloon_dev_info * b_dev_info)'/>
<use f='linux-4.18.y/drivers/virtio/virtio_balloon.c' l='223' u='c' c='leak_balloon'/>
<def f='linux-4.18.y/mm/balloon_compaction.c' l='71' ll='118' type='struct page * balloon_page_dequeue(struct balloon_dev_info * b_dev_info)'/>
<dec f='linux-4.18.y/mm/balloon_compaction.c' l='119' type='struct page * balloon_page_dequeue(struct balloon_dev_info * )'/>
<use f='linux-4.18.y/mm/balloon_compaction.c' l='119' c='balloon_page_dequeue'/>
<use f='linux-4.18.y/mm/balloon_compaction.c' l='119' u='a'/>
<use f='linux-4.18.y/mm/balloon_compaction.c' l='119' u='a'/>
<doc f='linux-4.18.y/mm/balloon_compaction.c' l='60'>/*
 * balloon_page_dequeue - removes a page from balloon&apos;s page list and returns
 *			  the its address to allow the driver release the page.
 * @b_dev_info: balloon device decriptor where we will grab a page from.
 *
 * Driver must call it to properly de-allocate a previous enlisted balloon page
 * before definetively releasing it back to the guest system.
 * This function returns the page address for the recently dequeued page or
 * NULL in the case we find balloon&apos;s page list temporarily empty due to
 * compaction isolated pages.
 */</doc>
