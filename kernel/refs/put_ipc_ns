<dec f='linux-4.14.y/include/linux/ipc_namespace.h' l='130' type='void put_ipc_ns(struct ipc_namespace * ns)'/>
<use f='linux-4.14.y/ipc/mqueue.c' l='416' u='c' c='mqueue_evict_inode'/>
<use f='linux-4.14.y/ipc/mqueue.c' l='450' u='c' c='mqueue_create'/>
<use f='linux-4.14.y/ipc/mqueue.c' l='460' u='c' c='mqueue_create'/>
<def f='linux-4.14.y/ipc/namespace.c' l='158' ll='166' type='void put_ipc_ns(struct ipc_namespace * ns)'/>
<use f='linux-4.14.y/ipc/namespace.c' l='189' u='c' c='ipcns_put'/>
<use f='linux-4.14.y/ipc/namespace.c' l='201' u='c' c='ipcns_install'/>
<doc f='linux-4.14.y/ipc/namespace.c' l='142'>/*
 * put_ipc_ns - drop a reference to an ipc namespace.
 * @ns: the namespace to put
 *
 * If this is the last task in the namespace exiting, and
 * it is dropping the refcount to 0, then it can race with
 * a task in another ipc namespace but in a mounts namespace
 * which has this ipcns&apos;s mqueuefs mounted, doing some action
 * with one of the mqueuefs files.  That can raise the refcount.
 * So dropping the refcount, and raising the refcount when
 * accessing it through the VFS, are protected with mq_lock.
 *
 * (Clearly, a task raising the refcount on its own ipc_ns
 * needn&apos;t take mq_lock since it can&apos;t race with the last task
 * in the ipcns exiting).
 */</doc>
<use f='linux-4.14.y/ipc/shm.c' l='465' u='c' c='shm_release'/>
<use f='linux-4.14.y/ipc/util.c' l='867' u='c' c='sysvipc_proc_release'/>
<use f='linux-4.14.y/kernel/nsproxy.c' l='122' u='c' c='create_new_namespaces'/>
<use f='linux-4.14.y/kernel/nsproxy.c' l='180' u='c' c='free_nsproxy'/>
