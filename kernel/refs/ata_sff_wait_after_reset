<dec f='linux-4.14.y/include/linux/libata.h' l='1855' type='int ata_sff_wait_after_reset(struct ata_link * link, unsigned int devmask, unsigned long deadline)'/>
<def f='linux-4.14.y/drivers/ata/libata-sff.c' l='1919' ll='1976' type='int ata_sff_wait_after_reset(struct ata_link * link, unsigned int devmask, unsigned long deadline)'/>
<dec f='linux-4.14.y/drivers/ata/libata-sff.c' l='1977' type='int ata_sff_wait_after_reset(struct ata_link * , unsigned int , unsigned long )'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='1977' c='ata_sff_wait_after_reset'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='1977' u='a'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='1977' u='a'/>
<use f='linux-4.14.y/drivers/ata/libata-sff.c' l='1997' u='c' c='ata_bus_softreset'/>
<doc f='linux-4.14.y/drivers/ata/libata-sff.c' l='1902'>/**
 *	ata_sff_wait_after_reset - wait for devices to become ready after reset
 *	@link: SFF link which is just reset
 *	@devmask: mask of present devices
 *	@deadline: deadline jiffies for the operation
 *
 *	Wait devices attached to SFF @link to become ready after
 *	reset.  It contains preceding 150ms wait to avoid accessing TF
 *	status register too early.
 *
 *	LOCKING:
 *	Kernel thread context (may sleep).
 *
 *	RETURNS:
 *	0 on success, -ENODEV if some or all of devices in @devmask
 *	don&apos;t seem to exist.  -errno on other errors.
 */</doc>
