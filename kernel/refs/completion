<def f='linux-4.14.y/include/linux/completion.h' l='29' ll='35'/>
<size>32</size>
<doc f='linux-4.14.y/include/linux/completion.h' l='17'>/*
 * struct completion - structure used to maintain state for a &quot;completion&quot;
 *
 * This is the opaque structure used to maintain the state for a &quot;completion&quot;.
 * Completions currently use a FIFO to queue threads that have to wait for
 * the &quot;completion&quot; event.
 *
 * See also:  complete(), wait_for_completion() (and friends _timeout,
 * _interruptible, _interruptible_timeout, and _killable), init_completion(),
 * reinit_completion(), and macros DECLARE_COMPLETION(),
 * DECLARE_COMPLETION_ONSTACK().
 */</doc>
<mbr r='completion::done' o='0' t='unsigned int'/>
<mbr r='completion::wait' o='64' t='wait_queue_head_t'/>
<def f='linux-4.14.y/include/linux/completion.h' l='29' ll='35'/>
<size>32</size>
<doc f='linux-4.14.y/include/linux/completion.h' l='17'>/*
 * struct completion - structure used to maintain state for a &quot;completion&quot;
 *
 * This is the opaque structure used to maintain the state for a &quot;completion&quot;.
 * Completions currently use a FIFO to queue threads that have to wait for
 * the &quot;completion&quot; event.
 *
 * See also:  complete(), wait_for_completion() (and friends _timeout,
 * _interruptible, _interruptible_timeout, and _killable), init_completion(),
 * reinit_completion(), and macros DECLARE_COMPLETION(),
 * DECLARE_COMPLETION_ONSTACK().
 */</doc>
<mbr r='completion::done' o='0' t='unsigned int'/>
<mbr r='completion::wait' o='64' t='wait_queue_head_t'/>
