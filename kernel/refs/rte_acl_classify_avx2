<dec f='linux-4.18.y/lib/librte_acl/acl.h' l='201' type='int rte_acl_classify_avx2(const struct rte_acl_ctx * ctx, const uint8_t ** data, uint32_t * results, uint32_t num, uint32_t categories)'/>
<def f='linux-4.18.y/lib/librte_acl/acl_run_avx2.c' l='12' ll='25' type='int rte_acl_classify_avx2(const struct rte_acl_ctx * ctx, const uint8_t ** data, uint32_t * results, uint32_t num, uint32_t categories)'/>
<doc f='linux-4.18.y/lib/librte_acl/acl_run_avx2.c' l='8'>/*
 * Note, that to be able to use AVX2 classify method,
 * both compiler and target cpu have to support AVX2 instructions.
 */</doc>
<def f='linux-4.18.y/lib/librte_acl/rte_acl.c' l='19' ll='27' type='int rte_acl_classify_avx2(const struct rte_acl_ctx * ctx, const uint8_t ** data, uint32_t * results, uint32_t num, uint32_t categories)'/>
<use f='linux-4.18.y/lib/librte_acl/rte_acl.c' l='63'/>
<use f='linux-4.18.y/lib/librte_acl/rte_acl.c' l='63'/>
<doc f='linux-4.18.y/lib/librte_acl/rte_acl.c' l='15'>/*
 * If the compiler doesn&apos;t support AVX2 instructions,
 * then the dummy one would be used instead for AVX2 classify method.
 */</doc>
