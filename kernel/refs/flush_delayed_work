<dec f='linux-4.18.y/include/linux/workqueue.h' l='482' type='bool flush_delayed_work(struct delayed_work * dwork)'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_fb.c' l='848' u='c' c='vmw_fb_off'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_fb.c' l='849' u='c' c='vmw_fb_off'/>
<use f='linux-4.18.y/fs/notify/mark.c' l='776' u='c' c='fsnotify_wait_marks_destroyed'/>
<use f='linux-4.18.y/kernel/rcu/srcutree.c' l='382' u='c' c='_cleanup_srcu_struct'/>
<use f='linux-4.18.y/kernel/rcu/srcutree.c' l='389' u='c' c='_cleanup_srcu_struct'/>
<def f='linux-4.18.y/kernel/workqueue.c' l='3056' ll='3063' type='bool flush_delayed_work(struct delayed_work * dwork)'/>
<dec f='linux-4.18.y/kernel/workqueue.c' l='3064' type='bool flush_delayed_work(struct delayed_work * )'/>
<use f='linux-4.18.y/kernel/workqueue.c' l='3064' c='flush_delayed_work'/>
<use f='linux-4.18.y/kernel/workqueue.c' l='3064' u='a'/>
<use f='linux-4.18.y/kernel/workqueue.c' l='3064' u='a'/>
<doc f='linux-4.18.y/kernel/workqueue.c' l='3044'>/**
 * flush_delayed_work - wait for a dwork to finish executing the last queueing
 * @dwork: the delayed work to flush
 *
 * Delayed timer is cancelled and the pending work is queued for
 * immediate execution.  Like flush_work(), this function only
 * considers the last queueing instance of @dwork.
 *
 * Return:
 * %true if flush_work() waited for the work to finish execution,
 * %false if it was already idle.
 */</doc>
<use f='linux-4.18.y/mm/backing-dev.c' l='373' u='c' c='wb_shutdown'/>
