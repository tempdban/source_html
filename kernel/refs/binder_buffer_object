<def f='linux-4.14.y/include/uapi/linux/android/binder.h' l='121' ll='128'/>
<size>40</size>
<doc f='linux-4.14.y/include/uapi/linux/android/binder.h' l='102'>/* struct binder_buffer_object - object describing a userspace buffer
 * @hdr:		common header structure
 * @flags:		one or more BINDER_BUFFER_* flags
 * @buffer:		address of the buffer
 * @length:		length of the buffer
 * @parent:		index in offset array pointing to parent buffer
 * @parent_offset:	offset in @parent pointing to this buffer
 *
 * A binder_buffer object represents an object that the
 * binder kernel driver can copy verbatim to the target
 * address space. A buffer itself may be pointed to from
 * within another buffer, meaning that the pointer inside
 * that other buffer needs to be fixed up as well. This
 * can be done by setting the BINDER_BUFFER_FLAG_HAS_PARENT
 * flag in @flags, by setting @parent buffer to the index
 * in the offset array pointing to the parent binder_buffer_object,
 * and by setting @parent_offset to the offset in the parent buffer
 * at which the pointer to this buffer is located.
 */</doc>
<mbr r='binder_buffer_object::hdr' o='0' t='struct binder_object_header'/>
<mbr r='binder_buffer_object::flags' o='32' t='__u32'/>
<mbr r='binder_buffer_object::buffer' o='64' t='binder_uintptr_t'/>
<mbr r='binder_buffer_object::length' o='128' t='binder_size_t'/>
<mbr r='binder_buffer_object::parent' o='192' t='binder_size_t'/>
<mbr r='binder_buffer_object::parent_offset' o='256' t='binder_size_t'/>
