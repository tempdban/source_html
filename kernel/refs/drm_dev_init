<dec f='linux-4.14.y/include/drm/drm_drv.h' l='605' type='int drm_dev_init(struct drm_device * dev, struct drm_driver * driver, struct device * parent)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='496' ll='580' type='int drm_dev_init(struct drm_device * dev, struct drm_driver * driver, struct device * parent)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='581' type='int drm_dev_init(struct drm_device * , struct drm_driver * , struct device * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='581' c='drm_dev_init'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='581' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='581' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='650' u='c' c='drm_dev_alloc'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='466'>/**
 * drm_dev_init - Initialise new DRM device
 * @dev: DRM device
 * @driver: DRM driver
 * @parent: Parent device object
 *
 * Initialize a new DRM device. No device registration is done.
 * Call drm_dev_register() to advertice the device to user space and register it
 * with other core subsystems. This should be done last in the device
 * initialization sequence to make sure userspace can&apos;t access an inconsistent
 * state.
 *
 * The initial ref-count of the object is 1. Use drm_dev_ref() and
 * drm_dev_unref() to take and drop further ref-counts.
 *
 * Note that for purely virtual devices @parent can be NULL.
 *
 * Drivers that do not want to allocate their own device struct
 * embedding &amp;struct drm_device can call drm_dev_alloc() instead. For drivers
 * that do embed &amp;struct drm_device it must be placed first in the overall
 * structure, and the overall structure must be allocated using kmalloc(): The
 * drm core&apos;s release function unconditionally calls kfree() on the @dev pointer
 * when the final reference is released. To override this behaviour, and so
 * allow embedding of the drm_device inside the driver&apos;s device struct at an
 * arbitrary offset, you must supply a &amp;drm_driver.release callback and control
 * the finalization explicitly.
 *
 * RETURNS:
 * 0 on success, or error code on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_kms.c' l='104' u='c' c='qxl_device_init'/>
