<def f='linux-4.14.y/include/linux/ptr_ring.h' l='52' ll='55' type='bool __ptr_ring_full(struct ptr_ring * r)'/>
<use f='linux-4.14.y/include/linux/ptr_ring.h' l='62' u='c' c='ptr_ring_full'/>
<use f='linux-4.14.y/include/linux/ptr_ring.h' l='73' u='c' c='ptr_ring_full_irq'/>
<use f='linux-4.14.y/include/linux/ptr_ring.h' l='85' u='c' c='ptr_ring_full_any'/>
<use f='linux-4.14.y/include/linux/ptr_ring.h' l='96' u='c' c='ptr_ring_full_bh'/>
<use f='linux-4.14.y/include/linux/skb_array.h' l='38' u='c' c='__skb_array_full'/>
<doc f='linux-4.14.y/include/linux/ptr_ring.h' l='47'>/* Note: callers invoking this in a loop must use a compiler barrier,
 * for example cpu_relax().  If ring is ever resized, callers must hold
 * producer_lock - see e.g. ptr_ring_full.  Otherwise, if callers don&apos;t hold
 * producer_lock, the next call to __ptr_ring_produce may fail.
 */</doc>
