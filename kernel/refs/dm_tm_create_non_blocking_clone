<dec f='linux-4.18.y/drivers/md/persistent-data/dm-transaction-manager.h' l='36' type='struct dm_transaction_manager * dm_tm_create_non_blocking_clone(struct dm_transaction_manager * real)'/>
<doc f='linux-4.18.y/drivers/md/persistent-data/dm-transaction-manager.h' l='26'>/*
 * The non-blocking version of a transaction manager is intended for use in
 * fast path code that needs to do lookups e.g. a dm mapping function.
 * You create the non-blocking variant from a normal tm.  The interface is
 * the same, except that most functions will just return -EWOULDBLOCK.
 * Methods that return void yet may block should not be called on a clone
 * viz. dm_tm_inc, dm_tm_dec.  Call dm_tm_destroy() as you would with a normal
 * tm when you&apos;ve finished with it.  You may not destroy the original prior
 * to clones.
 */</doc>
<use f='linux-4.18.y/drivers/md/dm-thin-metadata.c' l='541' u='c' c='__format_metadata'/>
<use f='linux-4.18.y/drivers/md/dm-thin-metadata.c' l='650' u='c' c='__open_metadata'/>
<def f='linux-4.18.y/drivers/md/persistent-data/dm-transaction-manager.c' l='184' ll='195' type='struct dm_transaction_manager * dm_tm_create_non_blocking_clone(struct dm_transaction_manager * real)'/>
<dec f='linux-4.18.y/drivers/md/persistent-data/dm-transaction-manager.c' l='196' type='struct dm_transaction_manager * dm_tm_create_non_blocking_clone(struct dm_transaction_manager * )'/>
<use f='linux-4.18.y/drivers/md/persistent-data/dm-transaction-manager.c' l='196' c='dm_tm_create_non_blocking_clone'/>
<use f='linux-4.18.y/drivers/md/persistent-data/dm-transaction-manager.c' l='196' u='a'/>
<use f='linux-4.18.y/drivers/md/persistent-data/dm-transaction-manager.c' l='196' u='a'/>
