<def f='linux-4.18.y/include/asm-generic/qspinlock.h' l='48' ll='51' type='int queued_spin_value_unlocked(struct qspinlock lock)'/>
<doc f='linux-4.18.y/include/asm-generic/qspinlock.h' l='38'>/**
 * queued_spin_value_unlocked - is the spinlock structure unlocked?
 * @lock: queued spinlock structure
 * Return: 1 if it is unlocked, 0 otherwise
 *
 * N.B. Whenever there are tasks waiting for the lock, it is considered
 *      locked wrt the lockref code to avoid lock stealing by the lockref
 *      code and change things underneath the lock. This also allows some
 *      optimizations to be applied without conflict with lockref.
 */</doc>
<use f='linux-4.18.y/lib/lockref.c' l='43' macro='1' u='c'/>
<use f='linux-4.18.y/lib/lockref.c' l='64' macro='1' u='c'/>
<use f='linux-4.18.y/lib/lockref.c' l='92' macro='1' u='c'/>
<use f='linux-4.18.y/lib/lockref.c' l='119' macro='1' u='c'/>
<use f='linux-4.18.y/lib/lockref.c' l='145' macro='1' u='c'/>
<use f='linux-4.18.y/lib/lockref.c' l='163' macro='1' u='c'/>
<use f='linux-4.18.y/lib/lockref.c' l='200' macro='1' u='c'/>
