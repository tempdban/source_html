<dec f='linux-4.14.y/block/partitions/efi.h' l='131' type='int efi_partition(struct parsed_partitions * state)'/>
<use f='linux-4.14.y/block/partitions/check.c' l='74'/>
<use f='linux-4.14.y/block/partitions/check.c' l='74'/>
<doc f='linux-4.14.y/block/partitions/efi.h' l='130'>/* Functions */</doc>
<def f='linux-4.14.y/block/partitions/efi.c' l='692' ll='744' type='int efi_partition(struct parsed_partitions * state)'/>
<doc f='linux-4.14.y/block/partitions/efi.c' l='673'>/**
 * efi_partition(struct parsed_partitions *state)
 * @state: disk parsed partitions
 *
 * Description: called from check.c, if the disk contains GPT
 * partitions, sets up partition entries in the kernel.
 *
 * If the first block on the disk is a legacy MBR,
 * it will get handled by msdos_partition().
 * If it&apos;s a Protective MBR, we&apos;ll handle it here.
 *
 * We do not create a Linux partition for GPT, but
 * only for the actual data partitions.
 * Returns:
 * -1 if unable to read the partition table
 *  0 if this isn&apos;t our partition table
 *  1 if successful
 *
 */</doc>
