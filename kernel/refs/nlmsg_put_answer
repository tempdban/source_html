<def f='linux-4.14.y/include/net/netlink.h' l='492' ll='499' type='struct nlmsghdr * nlmsg_put_answer(struct sk_buff * skb, struct netlink_callback * cb, int type, int payload, int flags)'/>
<doc f='linux-4.14.y/include/net/netlink.h' l='481'>/**
 * nlmsg_put_answer - Add a new callback based netlink message to an skb
 * @skb: socket buffer to store message in
 * @cb: netlink callback
 * @type: message type
 * @payload: length of message payload
 * @flags: message flags
 *
 * Returns NULL if the tailroom of the skb is insufficient to store
 * the message header and payload.
 */</doc>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='2208' u='c' c='netlink_dump'/>
<def f='linux-4.14.y/include/net/netlink.h' l='492' ll='499' type='struct nlmsghdr * nlmsg_put_answer(struct sk_buff * skb, struct netlink_callback * cb, int type, int payload, int flags)'/>
<doc f='linux-4.14.y/include/net/netlink.h' l='481'>/**
 * nlmsg_put_answer - Add a new callback based netlink message to an skb
 * @skb: socket buffer to store message in
 * @cb: netlink callback
 * @type: message type
 * @payload: length of message payload
 * @flags: message flags
 *
 * Returns NULL if the tailroom of the skb is insufficient to store
 * the message header and payload.
 */</doc>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='2208' u='c' c='netlink_dump'/>
