<dec f='linux-4.14.y/include/linux/rcupdate.h' l='106' type='int'/>
<dec f='linux-4.14.y/include/linux/rcutree.h' l='93' type='int'/>
<use f='linux-4.14.y/kernel/rcu/srcutree.c' l='209' u='r' c='check_init_srcu_struct'/>
<use f='linux-4.14.y/kernel/rcu/srcutree.c' l='891' u='r' c='__synchronize_srcu'/>
<def f='linux-4.14.y/kernel/rcu/tree.c' l='141' type='int'/>
<dec f='linux-4.14.y/kernel/rcu/tree.c' l='142' type='typeof (rcu_scheduler_active)'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='142'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='142' u='a'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='142' u='a'/>
<use f='linux-4.14.y/kernel/rcu/tree.c' l='3993' u='w' c='rcu_scheduler_starting'/>
<use f='linux-4.14.y/kernel/rcu/tree_exp.h' l='600' u='r' c='_synchronize_rcu_expedited'/>
<doc f='linux-4.14.y/kernel/rcu/tree.c' l='129'>/*
 * The rcu_scheduler_active variable is initialized to the value
 * RCU_SCHEDULER_INACTIVE and transitions RCU_SCHEDULER_INIT just before the
 * first task is spawned.  So when this variable is RCU_SCHEDULER_INACTIVE,
 * RCU can assume that there is but one task, allowing RCU to (for example)
 * optimize synchronize_rcu() to a simple barrier().  When this variable
 * is RCU_SCHEDULER_INIT, RCU must actually do all the hard work required
 * to detect real grace periods.  This variable is also used to suppress
 * boot-time false positives from lockdep-RCU error checking.  Finally, it
 * transitions from RCU_SCHEDULER_INIT to RCU_SCHEDULER_RUNNING after RCU
 * is fully initialized, including all of its kthreads having been spawned.
 */</doc>
<use f='linux-4.14.y/kernel/rcu/update.c' l='135' u='r' c='rcu_gp_is_normal'/>
<use f='linux-4.14.y/kernel/rcu/update.c' l='151' u='r' c='rcu_gp_is_expedited'/>
<use f='linux-4.14.y/kernel/rcu/update.c' l='220' u='w' c='rcu_set_runtime_mode'/>
