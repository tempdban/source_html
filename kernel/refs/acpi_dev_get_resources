<dec f='linux-4.14.y/include/linux/acpi.h' l='423' type='int acpi_dev_get_resources(struct acpi_device * adev, struct list_head * list, int (*)(struct acpi_resource *, void *) preproc, void * preproc_data)'/>
<use f='linux-4.14.y/drivers/acpi/acpi_platform.c' l='81' u='c' c='acpi_create_platform_device'/>
<use f='linux-4.14.y/drivers/acpi/pci_root.c' l='771' u='c' c='acpi_pci_probe_root_resources'/>
<def f='linux-4.14.y/drivers/acpi/resource.c' l='629' ll='635' type='int acpi_dev_get_resources(struct acpi_device * adev, struct list_head * list, int (*)(struct acpi_resource *, void *) preproc, void * preproc_data)'/>
<dec f='linux-4.14.y/drivers/acpi/resource.c' l='636' type='int acpi_dev_get_resources(struct acpi_device * , struct list_head * , int (*)(struct acpi_resource *, void *) , void * )'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='636' c='acpi_dev_get_resources'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='636' u='a'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='636' u='a'/>
<use f='linux-4.14.y/drivers/acpi/resource.c' l='735' u='c' c='acpi_dev_consumes_res'/>
<doc f='linux-4.14.y/drivers/acpi/resource.c' l='605'>/**
 * acpi_dev_get_resources - Get current resources of a device.
 * @adev: ACPI device node to get the resources for.
 * @list: Head of the resultant list of resources (must be empty).
 * @preproc: The caller&apos;s preprocessing routine.
 * @preproc_data: Pointer passed to the caller&apos;s preprocessing routine.
 *
 * Evaluate the _CRS method for the given device node and process its output by
 * (1) executing the @preproc() rountine provided by the caller, passing the
 * resource pointer and @preproc_data to it as arguments, for each ACPI resource
 * returned and (2) converting all of the returned ACPI resources into struct
 * resource objects if possible.  If the return value of @preproc() in step (1)
 * is different from 0, step (2) is not applied to the given ACPI resource and
 * if that value is negative, the whole processing is aborted and that value is
 * returned as the final error code.
 *
 * The resultant struct resource objects are put on the list pointed to by
 * @list, that must be empty initially, as members of struct resource_entry
 * objects.  Callers of this routine should use %acpi_dev_free_resource_list() to
 * free that list.
 *
 * The number of resources in the output list is returned on success, an error
 * code reflecting the error condition is returned otherwise.
 */</doc>
<use f='linux-4.14.y/drivers/acpi/scan.c' l='1544' u='c' c='acpi_is_spi_i2c_slave'/>
<use f='linux-4.14.y/drivers/dma/acpi-dma.c' l='56' u='c' c='acpi_dma_parse_resource_group'/>
<use f='linux-4.14.y/drivers/dma/acpi-dma.c' l='378' u='c' c='acpi_dma_request_slave_chan_by_index'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-acpi.c' l='107' u='c' c='i2c_acpi_do_lookup'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-acpi.c' l='156' u='c' c='i2c_acpi_get_info'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-acpi.c' l='409' u='c' c='i2c_acpi_new_device'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='1799' u='c' c='acpi_register_spi_device'/>
