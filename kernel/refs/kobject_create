<dec f='linux-4.14.y/include/linux/kobject.h' l='105' type='struct kobject * kobject_create()'/>
<def f='linux-4.14.y/lib/kobject.c' l='719' ll='729' type='struct kobject * kobject_create()'/>
<use f='linux-4.14.y/lib/kobject.c' l='749' u='c' c='kobject_create_and_add'/>
<doc f='linux-4.14.y/lib/kobject.c' l='708'>/**
 * kobject_create - create a struct kobject dynamically
 *
 * This function creates a kobject structure dynamically and sets it up
 * to be a &quot;dynamic&quot; kobject with a default release function set up.
 *
 * If the kobject was not able to be created, NULL will be returned.
 * The kobject structure returned from here must be cleaned up with a
 * call to kobject_put() and not kfree(), as kobject_init() has
 * already been called on this structure.
 */</doc>
<dec f='linux-4.14.y/include/linux/kobject.h' l='105' type='struct kobject * kobject_create()'/>
<def f='linux-4.14.y/lib/kobject.c' l='719' ll='729' type='struct kobject * kobject_create()'/>
<use f='linux-4.14.y/lib/kobject.c' l='749' u='c' c='kobject_create_and_add'/>
<doc f='linux-4.14.y/lib/kobject.c' l='708'>/**
 * kobject_create - create a struct kobject dynamically
 *
 * This function creates a kobject structure dynamically and sets it up
 * to be a &quot;dynamic&quot; kobject with a default release function set up.
 *
 * If the kobject was not able to be created, NULL will be returned.
 * The kobject structure returned from here must be cleaned up with a
 * call to kobject_put() and not kfree(), as kobject_init() has
 * already been called on this structure.
 */</doc>
