<dec f='linux-4.18.y/kernel/locking/rtmutex_common.h' l='136' type='void rt_mutex_proxy_unlock(struct rt_mutex * lock, struct task_struct * proxy_owner)'/>
<use f='linux-4.18.y/kernel/futex.c' l='847' u='c' c='put_pi_state'/>
<def f='linux-4.18.y/kernel/locking/rtmutex.c' l='1722' ll='1727' type='void rt_mutex_proxy_unlock(struct rt_mutex * lock, struct task_struct * proxy_owner)'/>
<doc f='linux-4.18.y/kernel/locking/rtmutex.c' l='1710'>/**
 * rt_mutex_proxy_unlock - release a lock on behalf of owner
 *
 * @lock:	the rt_mutex to be locked
 *
 * No locking. Caller has to do serializing itself
 *
 * Special API call for PI-futex support. This merrily cleans up the rtmutex
 * (debugging) state. Concurrent operations on this rt_mutex are not
 * possible because it belongs to the pi_state which is about to be freed
 * and it is not longer visible to other tasks.
 */</doc>
