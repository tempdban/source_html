<dec f='linux-4.18.y/include/linux/clk.h' l='522' type='int clk_set_rate_exclusive(struct clk * clk, unsigned long rate)'/>
<doc f='linux-4.18.y/include/linux/clk.h' l='507'>/**
 * clk_set_rate_exclusive- set the clock rate and claim exclusivity over
 *                         clock source
 * @clk: clock source
 * @rate: desired clock rate in Hz
 *
 * This helper function allows drivers to atomically set the rate of a producer
 * and claim exclusivity over the rate control of the producer.
 *
 * It is essentially a combination of clk_set_rate() and
 * clk_rate_exclusite_get(). Caller must balance this call with a call to
 * clk_rate_exclusive_put()
 *
 * Returns success (0) or negative errno.
 */</doc>
<def f='linux-4.18.y/drivers/clk/clk.c' l='1986' ll='2011' type='int clk_set_rate_exclusive(struct clk * clk, unsigned long rate)'/>
<dec f='linux-4.18.y/drivers/clk/clk.c' l='2012' type='int clk_set_rate_exclusive(struct clk * , unsigned long )'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='2012' c='clk_set_rate_exclusive'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='2012' u='a'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='2012' u='a'/>
<doc f='linux-4.18.y/drivers/clk/clk.c' l='1967'>/**
 * clk_set_rate_exclusive - specify a new rate get exclusive control
 * @clk: the clk whose rate is being changed
 * @rate: the new rate for clk
 *
 * This is a combination of clk_set_rate() and clk_rate_exclusive_get()
 * within a critical section
 *
 * This can be used initially to ensure that at least 1 consumer is
 * statisfied when several consumers are competing for exclusivity over the
 * same clock provider.
 *
 * The exclusivity is not applied if setting the rate failed.
 *
 * Calls to clk_rate_exclusive_get() should be balanced with calls to
 * clk_rate_exclusive_put().
 *
 * Returns 0 on success, -EERROR otherwise.
 */</doc>
