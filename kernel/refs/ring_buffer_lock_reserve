<dec f='linux-4.18.y/include/linux/ring_buffer.h' l='113' type='struct ring_buffer_event * ring_buffer_lock_reserve(struct ring_buffer * buffer, unsigned long length)'/>
<def f='linux-4.18.y/kernel/trace/ring_buffer.c' l='2922' ll='2962' type='struct ring_buffer_event * ring_buffer_lock_reserve(struct ring_buffer * buffer, unsigned long length)'/>
<dec f='linux-4.18.y/kernel/trace/ring_buffer.c' l='2963' type='struct ring_buffer_event * ring_buffer_lock_reserve(struct ring_buffer * , unsigned long )'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='2963' c='ring_buffer_lock_reserve'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='2963' u='a'/>
<use f='linux-4.18.y/kernel/trace/ring_buffer.c' l='2963' u='a'/>
<doc f='linux-4.18.y/kernel/trace/ring_buffer.c' l='2907'>/**
 * ring_buffer_lock_reserve - reserve a part of the buffer
 * @buffer: the ring buffer to reserve from
 * @length: the length of the data to reserve (excluding event header)
 *
 * Returns a reserved event on the ring buffer to copy directly to.
 * The user of this interface will need to get the body to write into
 * and can use the ring_buffer_event_data() interface.
 *
 * The length is the length of the data needed, not the event length
 * which also includes the event header.
 *
 * Must be paired with ring_buffer_unlock_commit, unless NULL is returned.
 * If NULL is returned, then nothing has been allocated or locked.
 */</doc>
<use f='linux-4.18.y/kernel/trace/trace.c' l='752' u='c' c='__trace_buffer_lock_reserve'/>
