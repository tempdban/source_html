<dec f='linux-4.14.y/kernel/trace/trace.h' l='1533' type='void unregister_trigger(char * glob, struct event_trigger_ops * ops, struct event_trigger_data * test, struct trace_event_file * file)'/>
<def f='linux-4.14.y/kernel/trace/trace_events_trigger.c' l='583' ll='602' type='void unregister_trigger(char * glob, struct event_trigger_ops * ops, struct event_trigger_data * test, struct trace_event_file * file)'/>
<use f='linux-4.14.y/kernel/trace/trace_events_trigger.c' l='1026'/>
<use f='linux-4.14.y/kernel/trace/trace_events_trigger.c' l='1026'/>
<use f='linux-4.14.y/kernel/trace/trace_events_trigger.c' l='1037'/>
<use f='linux-4.14.y/kernel/trace/trace_events_trigger.c' l='1037'/>
<use f='linux-4.14.y/kernel/trace/trace_events_trigger.c' l='1193'/>
<use f='linux-4.14.y/kernel/trace/trace_events_trigger.c' l='1193'/>
<doc f='linux-4.14.y/kernel/trace/trace_events_trigger.c' l='571'>/**
 * unregister_trigger - Generic event_command @unreg implementation
 * @glob: The raw string used to register the trigger
 * @ops: The trigger ops associated with the trigger
 * @test: Trigger-specific data used to find the trigger to remove
 * @file: The trace_event_file associated with the event
 *
 * Common implementation for event trigger unregistration.
 *
 * Usually used directly as the @unreg method in event command
 * implementations.
 */</doc>
