<dec f='linux-4.18.y/include/linux/regmap.h' l='944' type='int regmap_raw_write_async(struct regmap * map, unsigned int reg, const void * val, size_t val_len)'/>
<def f='linux-4.18.y/drivers/base/regmap/regmap.c' l='2336' ll='2357' type='int regmap_raw_write_async(struct regmap * map, unsigned int reg, const void * val, size_t val_len)'/>
<dec f='linux-4.18.y/drivers/base/regmap/regmap.c' l='2358' type='int regmap_raw_write_async(struct regmap * , unsigned int , const void * , size_t )'/>
<use f='linux-4.18.y/drivers/base/regmap/regmap.c' l='2358' c='regmap_raw_write_async'/>
<use f='linux-4.18.y/drivers/base/regmap/regmap.c' l='2358' u='a'/>
<use f='linux-4.18.y/drivers/base/regmap/regmap.c' l='2358' u='a'/>
<doc f='linux-4.18.y/drivers/base/regmap/regmap.c' l='2314'>/**
 * regmap_raw_write_async() - Write raw values to one or more registers
 *                            asynchronously
 *
 * @map: Register map to write to
 * @reg: Initial register to write to
 * @val: Block of data to be written, laid out for direct transmission to the
 *       device.  Must be valid until regmap_async_complete() is called.
 * @val_len: Length of data pointed to by val.
 *
 * This function is intended to be used for things like firmware
 * download where a large block of data needs to be transferred to the
 * device.  No formatting will be done on the data provided.
 *
 * If supported by the underlying bus the write will be scheduled
 * asynchronously, helping maximise I/O speed on higher speed buses
 * like SPI.  regmap_async_complete() can be called to ensure that all
 * asynchrnous writes have been completed.
 *
 * A value of zero will be returned on success, a negative errno will
 * be returned in error cases.
 */</doc>
