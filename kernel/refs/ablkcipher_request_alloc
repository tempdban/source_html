<def f='linux-4.14.y/include/linux/crypto.h' l='947' ll='959' type='struct ablkcipher_request * ablkcipher_request_alloc(struct crypto_ablkcipher * tfm, gfp_t gfp)'/>
<doc f='linux-4.14.y/include/linux/crypto.h' l='936'>/**
 * ablkcipher_request_alloc() - allocate request data structure
 * @tfm: cipher handle to be registered with the request
 * @gfp: memory allocation flag that is handed to kmalloc by the API call.
 *
 * Allocate the request data structure that must be used with the ablkcipher
 * encrypt and decrypt API calls. During the allocation, the provided ablkcipher
 * handle is registered in the request data structure.
 *
 * Return: allocated request handle in case of success, or NULL if out of memory
 */</doc>
<def f='linux-4.14.y/include/linux/crypto.h' l='947' ll='959' type='struct ablkcipher_request * ablkcipher_request_alloc(struct crypto_ablkcipher * tfm, gfp_t gfp)'/>
<doc f='linux-4.14.y/include/linux/crypto.h' l='936'>/**
 * ablkcipher_request_alloc() - allocate request data structure
 * @tfm: cipher handle to be registered with the request
 * @gfp: memory allocation flag that is handed to kmalloc by the API call.
 *
 * Allocate the request data structure that must be used with the ablkcipher
 * encrypt and decrypt API calls. During the allocation, the provided ablkcipher
 * handle is registered in the request data structure.
 *
 * Return: allocated request handle in case of success, or NULL if out of memory
 */</doc>
