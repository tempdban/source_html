<dec f='linux-4.18.y/include/linux/mm.h' l='2155' type='void zero_resv_unavail()'/>
<def f='linux-4.18.y/mm/page_alloc.c' l='6394' ll='6423' type='void zero_resv_unavail()'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='6850' u='c' c='free_area_init_nodes'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='7048' u='c' c='free_area_init'/>
<doc f='linux-4.18.y/mm/page_alloc.c' l='6387'>/*
 * Only struct pages that are backed by physical memory are zeroed and
 * initialized by going through __init_single_page(). But, there are some
 * struct pages which are reserved in memblock allocator and their fields
 * may be accessed (for example page_to_pfn() on some configuration accesses
 * flags). We must explicitly zero those struct pages.
 */</doc>
