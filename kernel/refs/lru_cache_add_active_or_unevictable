<dec f='linux-4.14.y/include/linux/swap.h' l='331' type='void lru_cache_add_active_or_unevictable(struct page * page, struct vm_area_struct * vma)'/>
<use f='linux-4.14.y/kernel/events/uprobes.c' l='190' u='c' c='__replace_page'/>
<use f='linux-4.14.y/mm/memory.c' l='2512' u='c' c='wp_page_copy'/>
<use f='linux-4.14.y/mm/memory.c' l='2998' u='c' c='do_swap_page'/>
<use f='linux-4.14.y/mm/memory.c' l='3141' u='c' c='do_anonymous_page'/>
<use f='linux-4.14.y/mm/memory.c' l='3392' u='c' c='alloc_set_pte'/>
<def f='linux-4.14.y/mm/swap.c' l='482' ll='504' type='void lru_cache_add_active_or_unevictable(struct page * page, struct vm_area_struct * vma)'/>
<doc f='linux-4.14.y/mm/swap.c' l='472'>/**
 * lru_cache_add_active_or_unevictable
 * @page:  the page to be added to LRU
 * @vma:   vma in which page is mapped for determining reclaimability
 *
 * Place @page on the active or unevictable LRU list, depending on its
 * evictability.  Note that if the page is not evictable, it goes
 * directly back onto it&apos;s zone&apos;s unevictable list, it does NOT use a
 * per cpu pagevec.
 */</doc>
<use f='linux-4.14.y/mm/swapfile.c' l='1804' u='c' c='unuse_pte'/>
