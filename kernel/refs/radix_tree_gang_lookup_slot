<dec f='linux-4.18.y/include/linux/radix-tree.h' l='327' type='unsigned int radix_tree_gang_lookup_slot(const struct radix_tree_root * , void *** results, unsigned long * indices, unsigned long first_index, unsigned int max_items)'/>
<def f='linux-4.18.y/lib/radix-tree.c' l='1867' ll='1888' type='unsigned int radix_tree_gang_lookup_slot(const struct radix_tree_root * root, void *** results, unsigned long * indices, unsigned long first_index, unsigned int max_items)'/>
<dec f='linux-4.18.y/lib/radix-tree.c' l='1889' type='unsigned int radix_tree_gang_lookup_slot(const struct radix_tree_root * , void *** , unsigned long * , unsigned long , unsigned int )'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='1889' c='radix_tree_gang_lookup_slot'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='1889' u='a'/>
<use f='linux-4.18.y/lib/radix-tree.c' l='1889' u='a'/>
<doc f='linux-4.18.y/lib/radix-tree.c' l='1849'>/**
 *	radix_tree_gang_lookup_slot - perform multiple slot lookup on radix tree
 *	@root:		radix tree root
 *	@results:	where the results of the lookup are placed
 *	@indices:	where their indices should be placed (but usually NULL)
 *	@first_index:	start the lookup from this key
 *	@max_items:	place up to this many items at *results
 *
 *	Performs an index-ascending scan of the tree for present items.  Places
 *	their slots at *@results and returns the number of items which were
 *	placed at *@results.
 *
 *	The implementation is naive.
 *
 *	Like radix_tree_gang_lookup as far as RCU and locking goes. Slots must
 *	be dereferenced with radix_tree_deref_slot, and if using only RCU
 *	protection, radix_tree_deref_slot may fail requiring a retry.
 */</doc>
<use f='linux-4.18.y/mm/shmem.c' l='609' u='c' c='shmem_add_to_page_cache'/>
<use f='linux-4.18.y/mm/shmem.c' l='1467' u='c' c='shmem_alloc_hugepage'/>
