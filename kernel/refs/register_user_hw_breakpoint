<dec f='linux-4.14.y/include/linux/hw_breakpoint.h' l='48' type='struct perf_event * register_user_hw_breakpoint(struct perf_event_attr * attr, perf_overflow_handler_t triggered, void * context, struct task_struct * tsk)'/>
<use f='linux-4.14.y/arch/x86/kernel/ptrace.c' l='579' u='c' c='ptrace_register_breakpoint'/>
<def f='linux-4.14.y/kernel/events/hw_breakpoint.c' l='415' ll='423' type='struct perf_event * register_user_hw_breakpoint(struct perf_event_attr * attr, perf_overflow_handler_t triggered, void * context, struct task_struct * tsk)'/>
<dec f='linux-4.14.y/kernel/events/hw_breakpoint.c' l='424' type='struct perf_event * register_user_hw_breakpoint(struct perf_event_attr * , perf_overflow_handler_t , void * , struct task_struct * )'/>
<use f='linux-4.14.y/kernel/events/hw_breakpoint.c' l='424' c='register_user_hw_breakpoint'/>
<use f='linux-4.14.y/kernel/events/hw_breakpoint.c' l='424' u='a'/>
<use f='linux-4.14.y/kernel/events/hw_breakpoint.c' l='424' u='a'/>
<doc f='linux-4.14.y/kernel/events/hw_breakpoint.c' l='409'>/**
 * register_user_hw_breakpoint - register a hardware breakpoint for user space
 * @attr: breakpoint attributes
 * @triggered: callback to trigger when we hit the breakpoint
 * @tsk: pointer to &apos;task_struct&apos; of the process to which the address belongs
 */</doc>
