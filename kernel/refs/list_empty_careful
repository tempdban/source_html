<def f='linux-4.18.y/include/linux/list.h' l='219' ll='223' type='int list_empty_careful(const struct list_head * head)'/>
<doc f='linux-4.18.y/include/linux/list.h' l='206'>/**
 * list_empty_careful - tests whether a list is empty and not being modified
 * @head: the list to test
 *
 * Description:
 * tests whether a list is empty _and_ checks that no other CPU might be
 * in the process of modifying either member (next or prev)
 *
 * NOTE: using list_empty_careful() without synchronization
 * can only be safe if the only activity that can happen
 * to the list entry is list_del_init(). Eg. it cannot be used
 * if another CPU could re-list_add() it.
 */</doc>
<use f='linux-4.18.y/include/linux/fs.h' l='2321' u='c' c='break_lease'/>
<use f='linux-4.18.y/include/linux/fs.h' l='2335' u='c' c='break_deleg'/>
<use f='linux-4.18.y/include/linux/fs.h' l='2365' u='c' c='break_layout'/>
<use f='linux-4.18.y/arch/x86/kvm/mmu.c' l='5447' u='c' c='kvm_has_zapped_obsolete_pages'/>
<use f='linux-4.18.y/arch/x86/kvm/x86.c' l='9123' u='c' c='kvm_vcpu_has_events'/>
<use f='linux-4.18.y/block/blk-mq-sched.c' l='192' u='c' c='blk_mq_sched_dispatch_requests'/>
<use f='linux-4.18.y/block/blk-mq-sched.c' l='343' u='c' c='__blk_mq_sched_bio_merge'/>
<use f='linux-4.18.y/block/blk-mq.c' l='66' u='c' c='blk_mq_hctx_has_pending'/>
<use f='linux-4.18.y/block/blk-mq.c' l='1043' u='c' c='blk_mq_mark_tag_wait'/>
<use f='linux-4.18.y/block/blk-mq.c' l='1209' u='c' c='blk_mq_dispatch_rq_list'/>
<use f='linux-4.18.y/block/kyber-iosched.c' l='659' u='c' c='kyber_get_domain_token'/>
<use f='linux-4.18.y/block/kyber-iosched.c' l='679' u='c' c='kyber_get_domain_token'/>
<use f='linux-4.18.y/block/kyber-iosched.c' l='785' u='c' c='kyber_has_work'/>
<use f='linux-4.18.y/block/kyber-iosched.c' l='881' u='c' c='kyber_read_waiting_show'/>
<use f='linux-4.18.y/block/kyber-iosched.c' l='881' u='c' c='kyber_sync_write_waiting_show'/>
<use f='linux-4.18.y/block/kyber-iosched.c' l='881' u='c' c='kyber_other_waiting_show'/>
<use f='linux-4.18.y/block/mq-deadline.c' l='571' u='c' c='dd_has_work'/>
<use f='linux-4.18.y/block/mq-deadline.c' l='572' u='c' c='dd_has_work'/>
<use f='linux-4.18.y/block/mq-deadline.c' l='573' u='c' c='dd_has_work'/>
<use f='linux-4.18.y/drivers/md/raid1.c' l='2501' u='c' c='raid1d'/>
<use f='linux-4.18.y/drivers/md/raid10.c' l='2755' u='c' c='raid10d'/>
<use f='linux-4.18.y/drivers/md/raid5.c' l='340' u='c' c='release_inactive_stripe_list'/>
<use f='linux-4.18.y/fs/aio.c' l='1393' u='c' c='aio_complete_rw'/>
<use f='linux-4.18.y/fs/locks.c' l='829' u='c' c='posix_test_lock'/>
<use f='linux-4.18.y/fs/locks.c' l='1274' u='c' c='locks_mandatory_locked'/>
<use f='linux-4.18.y/fs/locks.c' l='1572' u='c' c='lease_get_mtime'/>
<use f='linux-4.18.y/fs/locks.c' l='1619' u='c' c='fcntl_getlease'/>
<use f='linux-4.18.y/kernel/sched/swait.c' l='114' u='c' c='finish_swait'/>
<use f='linux-4.18.y/kernel/sched/wait.c' l='363' u='c' c='finish_wait'/>
<use f='linux-4.18.y/mm/shmem.c' l='1066' u='c' c='shmem_setattr'/>
<use f='linux-4.18.y/mm/shmem.c' l='1861' u='c' c='shmem_getpage_gfp'/>
<use f='linux-4.18.y/security/selinux/hooks.c' l='367' u='c' c='inode_free_security'/>
<def f='linux-4.18.y/tools/include/linux/list.h' l='205' ll='209' type='int list_empty_careful(const struct list_head * head)'/>
<doc f='linux-4.18.y/tools/include/linux/list.h' l='192'>/**
 * list_empty_careful - tests whether a list is empty and not being modified
 * @head: the list to test
 *
 * Description:
 * tests whether a list is empty _and_ checks that no other CPU might be
 * in the process of modifying either member (next or prev)
 *
 * NOTE: using list_empty_careful() without synchronization
 * can only be safe if the only activity that can happen
 * to the list entry is list_del_init(). Eg. it cannot be used
 * if another CPU could re-list_add() it.
 */</doc>
<use f='linux-4.18.y/virt/kvm/async_pf.c' l='163' u='c' c='kvm_check_async_pf_completion'/>
<use f='linux-4.18.y/virt/kvm/async_pf.c' l='231' u='c' c='kvm_async_pf_wakeup_all'/>
