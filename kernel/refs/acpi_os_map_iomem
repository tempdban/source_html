<dec f='linux-4.18.y/include/acpi/acpi_io.h' l='20' type='void * acpi_os_map_iomem(acpi_physical_address phys, acpi_size size)'/>
<def f='linux-4.18.y/drivers/acpi/osl.c' l='318' ll='368' type='void * acpi_os_map_iomem(acpi_physical_address phys, acpi_size size)'/>
<dec f='linux-4.18.y/drivers/acpi/osl.c' l='369' type='void * acpi_os_map_iomem(acpi_physical_address , acpi_size )'/>
<use f='linux-4.18.y/drivers/acpi/osl.c' l='369' c='acpi_os_map_iomem'/>
<use f='linux-4.18.y/drivers/acpi/osl.c' l='369' u='a'/>
<use f='linux-4.18.y/drivers/acpi/osl.c' l='369' u='a'/>
<use f='linux-4.18.y/drivers/acpi/osl.c' l='373' u='c' c='acpi_os_map_memory'/>
<use f='linux-4.18.y/drivers/acpi/osl.c' l='448' u='c' c='acpi_os_map_generic_address'/>
<doc f='linux-4.18.y/drivers/acpi/osl.c' l='305'>/**
 * acpi_os_map_iomem - Get a virtual address for a given physical address range.
 * @phys: Start of the physical address range to map.
 * @size: Size of the physical address range to map.
 *
 * Look up the given physical address range in the list of existing ACPI memory
 * mappings.  If found, get a reference to it and return a pointer to it (its
 * virtual address).  If not found, map it, add it to that list and return a
 * pointer to it.
 *
 * During early init (when acpi_permanent_mmap has not been set yet) this
 * routine simply calls __acpi_map_table() to get the job done.
 */</doc>
