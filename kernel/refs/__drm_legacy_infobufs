<dec f='linux-4.14.y/drivers/gpu/drm/drm_legacy.h' l='77' type='int __drm_legacy_infobufs(struct drm_device * , void * , int * , int (*)(void *, int, struct drm_buf_entry *) )'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_bufs.c' l='1261' ll='1312' type='int __drm_legacy_infobufs(struct drm_device * dev, void * data, int * p, int (*)(void *, int, struct drm_buf_entry *) f)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_bufs.c' l='1329' u='c' c='drm_legacy_infobufs'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_bufs.c' l='1244'>/**
 * Get information about the buffer mappings.
 *
 * This was originally mean for debugging purposes, or by a sophisticated
 * client library to determine how best to use the available buffers (e.g.,
 * large buffers can be used for image transfer).
 *
 * \param inode device inode.
 * \param file_priv DRM file private.
 * \param cmd command.
 * \param arg pointer to a drm_buf_info structure.
 * \return zero on success or a negative number on failure.
 *
 * Increments drm_device::buf_use while holding the drm_device::buf_lock
 * lock, preventing of allocating more buffers after this call. Information
 * about each requested buffer is then copied into user space.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioc32.c' l='382' u='c' c='drm_legacy_infobufs32'/>
