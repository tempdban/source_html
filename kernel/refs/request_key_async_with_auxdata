<dec f='linux-4.18.y/include/linux/key.h' l='288' type='struct key * request_key_async_with_auxdata(struct key_type * type, const char * description, const void * callout_info, size_t callout_len, void * aux)'/>
<def f='linux-4.18.y/security/keys/request_key.c' l='743' ll='751' type='struct key * request_key_async_with_auxdata(struct key_type * type, const char * description, const void * callout_info, size_t callout_len, void * aux)'/>
<dec f='linux-4.18.y/security/keys/request_key.c' l='752' type='struct key * request_key_async_with_auxdata(struct key_type * , const char * , const void * , size_t , void * )'/>
<use f='linux-4.18.y/security/keys/request_key.c' l='752' c='request_key_async_with_auxdata'/>
<use f='linux-4.18.y/security/keys/request_key.c' l='752' u='a'/>
<use f='linux-4.18.y/security/keys/request_key.c' l='752' u='a'/>
<doc f='linux-4.18.y/security/keys/request_key.c' l='729'>/*
 * request a key with auxiliary data for the upcaller (allow async construction)
 * @type: Type of key.
 * @description: The searchable description of the key.
 * @callout_info: The data to pass to the instantiation upcall (or NULL).
 * @callout_len: The length of callout_info.
 * @aux: Auxiliary data for the upcall.
 *
 * As for request_key_and_link() except that it does not add the returned key
 * to a keyring if found and new keys are always allocated in the user&apos;s quota.
 *
 * The caller should call wait_for_key_construction() to wait for the
 * completion of the returned key if it is still undergoing construction.
 */</doc>
