<dec f='linux-4.14.y/include/linux/tty.h' l='556' type='int tty_release(struct inode * inode, struct file * filp)'/>
<use f='linux-4.14.y/drivers/tty/pty.c' l='868' u='c' c='ptmx_open'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='483'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='483'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='496'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='496'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='507'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='507'/>
<def f='linux-4.14.y/drivers/tty/tty_io.c' l='1625' ll='1763' type='int tty_release(struct inode * inode, struct file * filp)'/>
<use f='linux-4.14.y/drivers/tty/tty_io.c' l='2032' u='c' c='tty_open'/>
<doc f='linux-4.14.y/drivers/tty/tty_io.c' l='1606'>/**
 *	tty_release		-	vfs callback for close
 *	@inode: inode of tty
 *	@filp: file pointer for handle to tty
 *
 *	Called the last time each file handle is closed that references
 *	this tty. There may however be several such references.
 *
 *	Locking:
 *		Takes bkl. See tty_release_dev
 *
 * Even releasing the tty structures is a tricky business.. We have
 * to be very careful that the structures are all released at the
 * same time, as interrupts might otherwise get the wrong pointers.
 *
 * WSH 09/09/97: rewritten to avoid some nasty race conditions that could
 * lead to double frees or releasing memory still in use.
 */</doc>
