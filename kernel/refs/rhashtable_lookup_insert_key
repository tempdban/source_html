<def f='linux-4.18.y/include/linux/rhashtable.h' l='985' ll='998' type='int rhashtable_lookup_insert_key(struct rhashtable * ht, const void * key, struct rhash_head * obj, const struct rhashtable_params params)'/>
<doc f='linux-4.18.y/include/linux/rhashtable.h' l='964'>/**
 * rhashtable_lookup_insert_key - search and insert object to hash table
 *				  with explicit key
 * @ht:		hash table
 * @key:	key
 * @obj:	pointer to hash head inside object
 * @params:	hash table parameters
 *
 * Locks down the bucket chain in both the old and new table if a resize
 * is in progress to ensure that writers can&apos;t remove from the old table
 * and can&apos;t insert to the new table during the atomic operation of search
 * and insertion. Searches for duplicates in both the old and new table if
 * a resize is in progress.
 *
 * Lookups may occur in parallel with hashtable mutations and resizing.
 *
 * Will trigger an automatic deferred table resizing if residency in the
 * table grows beyond 70%.
 *
 * Returns zero on success.
 */</doc>
<use f='linux-4.18.y/net/netlink/af_netlink.c' l='521' u='c' c='__netlink_insert'/>
