<def f='linux-4.14.y/include/linux/i2c.h' l='461' ll='465'/>
<size>24</size>
<doc f='linux-4.14.y/include/linux/i2c.h' l='453'>/**
 * struct i2c_lock_operations - represent I2C locking operations
 * @lock_bus: Get exclusive access to an I2C bus segment
 * @trylock_bus: Try to get exclusive access to an I2C bus segment
 * @unlock_bus: Release exclusive access to an I2C bus segment
 *
 * The main operations are wrapped by i2c_lock_bus and i2c_unlock_bus.
 */</doc>
<mbr r='i2c_lock_operations::lock_bus' o='0' t='void (*)(struct i2c_adapter *, unsigned int)'/>
<mbr r='i2c_lock_operations::trylock_bus' o='64' t='int (*)(struct i2c_adapter *, unsigned int)'/>
<mbr r='i2c_lock_operations::unlock_bus' o='128' t='void (*)(struct i2c_adapter *, unsigned int)'/>
<def f='linux-4.14.y/include/linux/i2c.h' l='461' ll='465'/>
<size>24</size>
<doc f='linux-4.14.y/include/linux/i2c.h' l='453'>/**
 * struct i2c_lock_operations - represent I2C locking operations
 * @lock_bus: Get exclusive access to an I2C bus segment
 * @trylock_bus: Try to get exclusive access to an I2C bus segment
 * @unlock_bus: Release exclusive access to an I2C bus segment
 *
 * The main operations are wrapped by i2c_lock_bus and i2c_unlock_bus.
 */</doc>
<mbr r='i2c_lock_operations::lock_bus' o='0' t='void (*)(struct i2c_adapter *, unsigned int)'/>
<mbr r='i2c_lock_operations::trylock_bus' o='64' t='int (*)(struct i2c_adapter *, unsigned int)'/>
<mbr r='i2c_lock_operations::unlock_bus' o='128' t='void (*)(struct i2c_adapter *, unsigned int)'/>
