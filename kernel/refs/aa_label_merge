<dec f='linux-4.18.y/security/apparmor/include/label.h' l='303' type='struct aa_label * aa_label_merge(struct aa_label * a, struct aa_label * b, gfp_t gfp)'/>
<use f='linux-4.18.y/security/apparmor/domain.c' l='849' u='c' c='handle_onexec'/>
<use f='linux-4.18.y/security/apparmor/domain.c' l='849' u='c' c='handle_onexec'/>
<use f='linux-4.18.y/security/apparmor/domain.c' l='1444' u='c' c='aa_change_profile'/>
<use f='linux-4.18.y/security/apparmor/file.c' l='499' u='c' c='update_file_ctx'/>
<def f='linux-4.18.y/security/apparmor/label.c' l='1194' ll='1232' type='struct aa_label * aa_label_merge(struct aa_label * a, struct aa_label * b, gfp_t gfp)'/>
<doc f='linux-4.18.y/security/apparmor/label.c' l='1180'>/**
 * aa_label_merge - attempt to insert new merged label of @a and @b
 * @ls: set of labels to insert label into (NOT NULL)
 * @a: label to merge with @b  (NOT NULL)
 * @b: label to merge with @a  (NOT NULL)
 * @gfp: memory allocation type
 *
 * Requires: caller to hold valid refs on @a and @b
 *           labels be fully constructed with a valid ns
 *
 * Returns: ref counted new label if successful in inserting merge of a &amp; b
 *     else ref counted equivalent label that is already in the set.
 *     else NULL if could not create label (-ENOMEM)
 */</doc>
