<def f='linux-4.18.y/include/linux/jhash.h' l='70' ll='107' type='u32 jhash(const void * key, u32 length, u32 initval)'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='258' u='c' c='rht_key_get_hash'/>
<use f='linux-4.18.y/include/linux/rhashtable.h' l='267' u='c' c='rht_key_get_hash'/>
<doc f='linux-4.18.y/include/linux/jhash.h' l='60'>/* jhash - hash an arbitrary key
 * @k: sequence of bytes as key
 * @length: the length of the key
 * @initval: the previous hash, or an arbitray value
 *
 * The generic version, hashes an arbitrary sequence of bytes.
 * No alignment or length assumptions are made about the input key.
 *
 * Returns the hash value of the key. The result depends on endianness.
 */</doc>
<use f='linux-4.18.y/include/net/udp.h' l='230' u='c' c='udp_flow_src_port'/>
<use f='linux-4.18.y/kernel/workqueue.c' l='3262' u='c' c='wqattrs_hash'/>
<use f='linux-4.18.y/lib/rhashtable.c' l='1068' u='r' c='rhashtable_init'/>
<use f='linux-4.18.y/include/net/llc.h' l='80' u='c' c='llc_sk_laddr_hashfn'/>
<use f='linux-4.18.y/net/ipv4/cipso_ipv4.c' l='165' u='c' c='cipso_v4_map_cache_hash'/>
<use f='linux-4.18.y/net/ipv4/tcp_cong.c' l='80' u='c' c='tcp_register_congestion_control'/>
<use f='linux-4.18.y/net/netfilter/nf_tables_api.c' l='742' u='c' c='nft_chain_hash'/>
<use f='linux-4.18.y/net/netfilter/nft_hash.c' l='39' u='c' c='nft_jhash_eval'/>
<use f='linux-4.18.y/net/netfilter/nft_hash.c' l='56' u='c' c='nft_jhash_map_eval'/>
<use f='linux-4.18.y/net/netfilter/xt_RATEEST.c' l='36' u='c' c='xt_rateest_hash'/>
<use f='linux-4.18.y/net/openvswitch/flow_table.c' l='531' u='c' c='ufid_hash'/>
<use f='linux-4.18.y/net/openvswitch/vport.c' l='70' u='c' c='hash_bucket'/>
<use f='linux-4.18.y/security/apparmor/policy_unpack.c' l='602' u='c' c='strhash'/>
