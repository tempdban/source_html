<dec f='linux-4.18.y/include/linux/cgroup.h' l='227'/>
<doc f='linux-4.18.y/include/linux/cgroup.h' l='171'>/**
 * css_for_each_descendant_pre - pre-order walk of a css&apos;s descendants
 * @pos: the css * to use as the loop cursor
 * @root: css whose descendants to walk
 *
 * Walk @root&apos;s descendants.  @root is included in the iteration and the
 * first node to be visited.  Must be called under rcu_read_lock().
 *
 * If a subsystem synchronizes -&gt;css_online() and the start of iteration, a
 * css which finished -&gt;css_online() is guaranteed to be visible in the
 * future iterations and will stay visible until the last reference is put.
 * A css which hasn&apos;t finished -&gt;css_online() or already finished
 * -&gt;css_offline() may show up during traversal.  It&apos;s each subsystem&apos;s
 * responsibility to synchronize against on/offlining.
 *
 * For example, the following guarantees that a descendant can&apos;t escape
 * state updates of its ancestors.
 *
 * my_online(@css)
 * {
 *	Lock @css&apos;s parent and @css;
 *	Inherit state from the parent;
 *	Unlock both.
 * }
 *
 * my_update_state(@css)
 * {
 *	css_for_each_descendant_pre(@pos, @css) {
 *		Lock @pos;
 *		if (@pos == @css)
 *			Update @css&apos;s state;
 *		else
 *			Verify @pos is alive and inherit state from its parent;
 *		Unlock @pos;
 *	}
 * }
 *
 * As long as the inheriting step, including checking the parent state, is
 * enclosed inside @pos locking, double-locking the parent isn&apos;t necessary
 * while inheriting.  The state update to the parent is guaranteed to be
 * visible by walking order and, as long as inheriting operations to the
 * same @pos are atomic to each other, multiple updates racing each other
 * still result in the correct state.  It&apos;s guaranateed that at least one
 * inheritance happens for any css after the latest update to its parent.
 *
 * If checking parent&apos;s state requires locking the parent, each inheriting
 * iteration should lock and unlock both @pos-&gt;parent and @pos.
 *
 * Alternatively, a subsystem may choose to use a single global lock to
 * synchronize -&gt;css_online() and -&gt;css_offline() against tree-walking
 * operations.
 *
 * It is allowed to temporarily drop RCU read lock during iteration.  The
 * caller is responsible for ensuring that @pos remains accessible until
 * the start of the next iteration by, for example, bumping the css refcnt.
 */</doc>
<use f='linux-4.18.y/kernel/cgroup/cgroup.c' l='3641' u='c'/>
<use f='linux-4.18.y/security/device_cgroup.c' l='541' u='c'/>
