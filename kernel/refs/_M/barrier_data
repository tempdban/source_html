<dec f='linux-4.14.y/include/linux/compiler-gcc.h' l='30'/>
<use f='linux-4.14.y/include/linux/compiler.h' l='85' u='a'/>
<doc f='linux-4.14.y/include/linux/compiler-gcc.h' l='17'>/*
 * This version is i.e. to prevent dead stores elimination on @ptr
 * where gcc and llvm may behave differently when otherwise using
 * normal barrier(): while gcc behavior gets along with a normal
 * barrier(), llvm needs an explicit input variable to be assumed
 * clobbered. The issue is as follows: while the inline asm might
 * access any memory it wants, the compiler could have fit all of
 * @ptr into memory registers instead, and since @ptr never escaped
 * from that, it proved that the inline asm wasn&apos;t touching any of
 * it. This version works well with both compilers, i.e. we&apos;re telling
 * the compiler that the inline asm absolutely may see the contents
 * of @ptr. See also: https://llvm.org/bugs/show_bug.cgi?id=15495
 */</doc>
<use f='linux-4.14.y/lib/libcrc32c.c' l='57' u='c'/>
<use f='linux-4.14.y/lib/string.c' l='723' u='c'/>
