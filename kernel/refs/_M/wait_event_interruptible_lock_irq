<dec f='linux-4.18.y/include/linux/wait.h' l='1046'/>
<doc f='linux-4.18.y/include/linux/wait.h' l='1024'>/**
 * wait_event_interruptible_lock_irq - sleep until a condition gets true.
 *		The condition is checked under the lock. This is expected
 *		to be called with the lock taken.
 * @wq_head: the waitqueue to wait on
 * @condition: a C expression for the event to wait for
 * @lock: a locked spinlock_t, which will be released before schedule()
 *	  and reacquired afterwards.
 *
 * The process is put to sleep (TASK_INTERRUPTIBLE) until the
 * @condition evaluates to true or signal is received. The @condition is
 * checked each time the waitqueue @wq_head is woken up.
 *
 * wake_up() has to be called after changing any variable that could
 * change the result of the wait condition.
 *
 * This is supposed to be called while holding the lock. The lock is
 * dropped before going to sleep and is reacquired afterwards.
 *
 * The macro will return -ERESTARTSYS if it was interrupted by a signal
 * and 0 if @condition evaluated to true.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_debugfs_crc.c' l='209' u='c'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_debugfs_crc.c' l='273' u='c'/>
