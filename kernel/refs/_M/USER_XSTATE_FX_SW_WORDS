<dec f='linux-4.14.y/arch/x86/include/asm/user.h' l='51'/>
<use f='linux-4.14.y/arch/x86/include/asm/user.h' l='57' u='c'/>
<doc f='linux-4.14.y/arch/x86/include/asm/user.h' l='24'>/*
 * The structure layout of user_xstateregs, used for exporting the
 * extended register state through ptrace and core-dump (NT_X86_XSTATE note)
 * interfaces will be same as the memory layout of xsave used by the processor
 * (except for the bytes 464..511, which can be used by the software) and hence
 * the size of this structure varies depending on the features supported by the
 * processor and OS. The size of the structure that users need to use can be
 * obtained by doing:
 *     cpuid_count(0xd, 0, &amp;eax, &amp;ptrace_xstateregs_struct_size, &amp;ecx, &amp;edx);
 * i.e., cpuid.(eax=0xd,ecx=0).ebx will be the size that user (debuggers, etc.)
 * need to use.
 *
 * For now, only the first 8 bytes of the software usable bytes[464..471] will
 * be used and will be set to OS enabled xstate mask (which is same as the
 * 64bit mask returned by the xgetbv&apos;s xCR0).  Users (analyzing core dump
 * remotely, etc.) can use this mask as well as the mask saved in the
 * xstate_hdr bytes and interpret what states the processor/OS supports
 * and what states are in modified/initialized conditions for the
 * particular process/thread.
 *
 * Also when the user modifies certain state FP/SSE/etc through the
 * ptrace interface, they must ensure that the header.xfeatures
 * bytes[512..519] of the memory layout are updated correspondingly.
 * i.e., for example when FP state is modified to a non-init state,
 * header.xfeatures&apos;s bit 0 must be set to &apos;1&apos;, when SSE is modified to
 * non-init state, header.xfeatures&apos;s bit 1 must to be set to &apos;1&apos;, etc.
 */</doc>
<use f='linux-4.14.y/arch/x86/include/asm/fpu/xstate.h' l='43' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/ptrace.c' l='1346' u='c'/>
