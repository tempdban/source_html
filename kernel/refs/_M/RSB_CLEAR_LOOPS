<dec f='linux-4.14.y/arch/x86/include/asm/nospec-branch.h' l='28'/>
<use f='linux-4.14.y/arch/x86/include/asm/nospec-branch.h' l='244' u='c'/>
<doc f='linux-4.14.y/arch/x86/include/asm/nospec-branch.h' l='11'>/*
 * Fill the CPU return stack buffer.
 *
 * Each entry in the RSB, if used for a speculative &apos;ret&apos;, contains an
 * infinite &apos;pause; lfence; jmp&apos; loop to capture speculative execution.
 *
 * This is required in various cases for retpoline and IBRS-based
 * mitigations for the Spectre variant 2 vulnerability. Sometimes to
 * eliminate potentially bogus entries from the RSB, and sometimes
 * purely to ensure that it doesn&apos;t get empty, which on some CPUs would
 * allow predictions from other (unwanted!) sources to be used.
 *
 * We define a CPP macro such that it can be used from both .S files and
 * inline assembly. It&apos;s possible to do a .macro and then include that
 * from C via asm(&quot;.include &lt;asm/nospec-branch.h&gt;&quot;) but let&apos;s not go there.
 */</doc>
<use f='linux-4.14.y/arch/x86/entry/entry_64.S' l='363' u='c'/>
