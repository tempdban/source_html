<dec f='linux-4.14.y/include/linux/device.h' l='1526'/>
<doc f='linux-4.14.y/include/linux/device.h' l='1511'>/**
 * builtin_driver() - Helper macro for drivers that don&apos;t do anything
 * special in init and have no exit. This eliminates some boilerplate.
 * Each driver may only use this macro once, and calling it replaces
 * device_initcall (or in some cases, the legacy __initcall).  This is
 * meant to be a direct parallel of module_driver() above but without
 * the __exit stuff that is not used for builtin cases.
 *
 * @__driver: driver name
 * @__register: register function for this driver type
 * @...: Additional arguments to be passed to __register
 *
 * Use this macro to construct bus specific macros for registering
 * drivers, and do not use it on its own.
 */</doc>
<dec f='linux-4.14.y/include/linux/device.h' l='1526'/>
<doc f='linux-4.14.y/include/linux/device.h' l='1511'>/**
 * builtin_driver() - Helper macro for drivers that don&apos;t do anything
 * special in init and have no exit. This eliminates some boilerplate.
 * Each driver may only use this macro once, and calling it replaces
 * device_initcall (or in some cases, the legacy __initcall).  This is
 * meant to be a direct parallel of module_driver() above but without
 * the __exit stuff that is not used for builtin cases.
 *
 * @__driver: driver name
 * @__register: register function for this driver type
 * @...: Additional arguments to be passed to __register
 *
 * Use this macro to construct bus specific macros for registering
 * drivers, and do not use it on its own.
 */</doc>
