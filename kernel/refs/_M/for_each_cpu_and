<dec f='linux-4.18.y/include/linux/cpumask.h' l='276'/>
<doc f='linux-4.18.y/include/linux/cpumask.h' l='262'>/**
 * for_each_cpu_and - iterate over every cpu in both masks
 * @cpu: the (optionally unsigned) integer iterator
 * @mask: the first cpumask pointer
 * @and: the second cpumask pointer
 *
 * This saves a temporary CPU mask in many places.  It is equivalent to:
 *	struct cpumask tmp;
 *	cpumask_and(&amp;tmp, &amp;mask, &amp;and);
 *	for_each_cpu(cpu, &amp;tmp)
 *		...
 *
 * After the loop, cpu is &gt;= nr_cpu_ids.
 */</doc>
<use f='linux-4.18.y/drivers/acpi/processor_throttling.c' l='1122' u='c'/>
<use f='linux-4.18.y/drivers/acpi/processor_throttling.c' l='1145' u='c'/>
<use f='linux-4.18.y/drivers/acpi/processor_throttling.c' l='1181' u='c'/>
<use f='linux-4.18.y/drivers/scsi/mpt3sas/mpt3sas_base.c' l='2787' u='c'/>
<use f='linux-4.18.y/kernel/sched/sched.h' l='2086' u='c'/>
<use f='linux-4.18.y/kernel/sched/deadline.c' l='60' u='c'/>
<use f='linux-4.18.y/kernel/sched/fair.c' l='6153' u='c'/>
<use f='linux-4.18.y/kernel/sched/fair.c' l='7389' u='c'/>
<use f='linux-4.18.y/kernel/sched/fair.c' l='8130' u='c'/>
<use f='linux-4.18.y/kernel/sched/fair.c' l='8670' u='c'/>
<use f='linux-4.18.y/kernel/sched/fair.c' l='8793' u='c'/>
<use f='linux-4.18.y/kernel/smpboot.c' l='359' u='c'/>
<use f='linux-4.18.y/kernel/smpboot.c' l='364' u='c'/>
<use f='linux-4.18.y/lib/cpumask.c' l='215' u='c'/>
<use f='linux-4.18.y/net/core/dev.c' l='2233' u='c'/>
<use f='linux-4.18.y/net/core/net-sysfs.c' l='746' u='c'/>
