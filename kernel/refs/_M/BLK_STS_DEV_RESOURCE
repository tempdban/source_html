<dec f='linux-4.18.y/include/linux/blk_types.h' l='64'/>
<doc f='linux-4.18.y/include/linux/blk_types.h' l='48'>/*
 * BLK_STS_DEV_RESOURCE is returned from the driver to the block layer if
 * device related resources are unavailable, but the driver can guarantee
 * that the queue will be rerun in the future once resources become
 * available again. This is typically the case for device specific
 * resources that are consumed for IO. If the driver fails allocating these
 * resources, we know that inflight (or pending) IO will free these
 * resource upon completion.
 *
 * This is different from BLK_STS_RESOURCE in that it explicitly references
 * a device specific resource. For resources of wider scope, allocation
 * failure can happen without having pending IO. This means that we can&apos;t
 * rely on request completions freeing these resources, as IO may not be in
 * flight. Examples of that are kernel memory allocations, DMA mappings, or
 * any other system wide resources.
 */</doc>
<use f='linux-4.18.y/block/blk-core.c' l='218' u='c'/>
<use f='linux-4.18.y/block/blk-mq.c' l='1146' u='c'/>
<use f='linux-4.18.y/block/blk-mq.c' l='1221' u='c'/>
<use f='linux-4.18.y/block/blk-mq.c' l='1667' u='c'/>
<use f='linux-4.18.y/block/blk-mq.c' l='1730' u='c'/>
<use f='linux-4.18.y/drivers/block/virtio_blk.c' l='279' u='c'/>
<use f='linux-4.18.y/drivers/md/dm-rq.c' l='411' u='c'/>
<use f='linux-4.18.y/drivers/md/dm-rq.c' l='503' u='c'/>
<use f='linux-4.18.y/drivers/scsi/scsi_lib.c' l='2090' u='c'/>
