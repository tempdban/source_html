<dec f='linux-4.18.y/include/linux/page-flags.h' l='401'/>
<use f='linux-4.18.y/include/linux/page-flags.h' l='414' u='c'/>
<doc f='linux-4.18.y/include/linux/page-flags.h' l='384'>/*
 * On an anonymous page mapped into a user virtual memory area,
 * page-&gt;mapping points to its anon_vma, not to a struct address_space;
 * with the PAGE_MAPPING_ANON bit set to distinguish it.  See rmap.h.
 *
 * On an anonymous page in a VM_MERGEABLE area, if CONFIG_KSM is enabled,
 * the PAGE_MAPPING_MOVABLE bit may be set along with the PAGE_MAPPING_ANON
 * bit; and then page-&gt;mapping points, not to an anon_vma, but to a private
 * structure which KSM associates with that merged page.  See ksm.h.
 *
 * PAGE_MAPPING_KSM without PAGE_MAPPING_ANON is used for non-lru movable
 * page and then page-&gt;mapping points a struct address_space.
 *
 * Please note that, confusingly, &quot;page_mapping&quot; refers to the inode
 * address_space which maps the page from disk; whereas &quot;page_mapped&quot;
 * refers to user virtual address space into which the page is mapped.
 */</doc>
<use f='linux-4.18.y/mm/rmap.c' l='471' u='c'/>
<use f='linux-4.18.y/mm/rmap.c' l='476' u='c'/>
<use f='linux-4.18.y/mm/rmap.c' l='515' u='c'/>
<use f='linux-4.18.y/mm/rmap.c' l='520' u='c'/>
<use f='linux-4.18.y/mm/rmap.c' l='1009' u='c'/>
<use f='linux-4.18.y/mm/rmap.c' l='1043' u='c'/>
<use f='linux-4.18.y/mm/rmap.c' l='1900' u='c'/>
<use f='linux-4.18.y/mm/util.c' l='492' u='c'/>
<use f='linux-4.18.y/mm/util.c' l='515' u='c'/>
