<dec f='linux-4.14.y/include/linux/wait.h' l='859'/>
<doc f='linux-4.14.y/include/linux/wait.h' l='839'>/**
 * wait_event_lock_irq - sleep until a condition gets true. The
 *			 condition is checked under the lock. This
 *			 is expected to be called with the lock
 *			 taken.
 * @wq_head: the waitqueue to wait on
 * @condition: a C expression for the event to wait for
 * @lock: a locked spinlock_t, which will be released before schedule()
 *	  and reacquired afterwards.
 *
 * The process is put to sleep (TASK_UNINTERRUPTIBLE) until the
 * @condition evaluates to true. The @condition is checked each time
 * the waitqueue @wq_head is woken up.
 *
 * wake_up() has to be called after changing any variable that could
 * change the result of the wait condition.
 *
 * This is supposed to be called while holding the lock. The lock is
 * dropped before going to sleep and is reacquired afterwards.
 */</doc>
<use f='linux-4.14.y/drivers/md/md.c' l='492' u='c'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='854' u='c'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='877' u='c'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='948' u='c'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='982' u='c'/>
<use f='linux-4.14.y/drivers/md/raid10.c' l='953' u='c'/>
<use f='linux-4.14.y/drivers/md/raid10.c' l='960' u='c'/>
<use f='linux-4.14.y/drivers/md/raid10.c' l='991' u='c'/>
<use f='linux-4.14.y/drivers/md/raid5-cache.c' l='1539' u='c'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='650' u='c'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='670' u='c'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='5253' u='c'/>
<use f='linux-4.14.y/drivers/md/raid5.c' l='6212' u='c'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='3320' u='c'/>
<use f='linux-4.14.y/lib/percpu-refcount.c' l='222' u='c'/>
