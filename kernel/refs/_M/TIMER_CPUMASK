<dec f='linux-4.14.y/include/linux/timer.h' l='56'/>
<doc f='linux-4.14.y/include/linux/timer.h' l='42'>/*
 * A deferrable timer will work normally when the system is busy, but
 * will not cause a CPU to come out of idle just to service it; instead,
 * the timer will be serviced when the CPU eventually wakes up with a
 * subsequent non-deferrable timer.
 *
 * An irqsafe timer is executed with IRQ disabled and it&apos;s safe to wait for
 * the completion of the running instance from IRQ handlers, for example,
 * by calling del_timer_sync().
 *
 * Note: The irq disabled callback execution is a special case for
 * workqueue locking issues. It&apos;s not meant for executing random crap
 * with interrupts disabled. Abuse is monitored!
 */</doc>
<use f='linux-4.14.y/kernel/time/timer.c' l='840' u='c'/>
<dec f='linux-4.14.y/include/linux/timer.h' l='56'/>
<doc f='linux-4.14.y/include/linux/timer.h' l='42'>/*
 * A deferrable timer will work normally when the system is busy, but
 * will not cause a CPU to come out of idle just to service it; instead,
 * the timer will be serviced when the CPU eventually wakes up with a
 * subsequent non-deferrable timer.
 *
 * An irqsafe timer is executed with IRQ disabled and it&apos;s safe to wait for
 * the completion of the running instance from IRQ handlers, for example,
 * by calling del_timer_sync().
 *
 * Note: The irq disabled callback execution is a special case for
 * workqueue locking issues. It&apos;s not meant for executing random crap
 * with interrupts disabled. Abuse is monitored!
 */</doc>
<use f='linux-4.14.y/kernel/time/timer.c' l='840' u='c'/>
