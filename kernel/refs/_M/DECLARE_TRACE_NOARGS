<dec f='linux-4.14.y/include/linux/tracepoint.h' l='346'/>
<doc f='linux-4.14.y/include/linux/tracepoint.h' l='332'>/*
 * The need for the DECLARE_TRACE_NOARGS() is to handle the prototype
 * (void). &quot;void&quot; is a special value in a function prototype and can
 * not be combined with other arguments. Since the DECLARE_TRACE()
 * macro adds a data element at the beginning of the prototype,
 * we need a way to differentiate &quot;(void *data, proto)&quot; from
 * &quot;(void *data, void)&quot;. The second prototype is invalid.
 *
 * DECLARE_TRACE_NOARGS() passes &quot;void&quot; as the tracepoint prototype
 * and &quot;void *__data&quot; as the callback prototype.
 *
 * DECLARE_TRACE() passes &quot;proto&quot; as the tracepoint protoype and
 * &quot;void *__data, proto&quot; as the callback prototype.
 */</doc>
<dec f='linux-4.14.y/include/linux/tracepoint.h' l='346'/>
<doc f='linux-4.14.y/include/linux/tracepoint.h' l='332'>/*
 * The need for the DECLARE_TRACE_NOARGS() is to handle the prototype
 * (void). &quot;void&quot; is a special value in a function prototype and can
 * not be combined with other arguments. Since the DECLARE_TRACE()
 * macro adds a data element at the beginning of the prototype,
 * we need a way to differentiate &quot;(void *data, proto)&quot; from
 * &quot;(void *data, void)&quot;. The second prototype is invalid.
 *
 * DECLARE_TRACE_NOARGS() passes &quot;void&quot; as the tracepoint prototype
 * and &quot;void *__data&quot; as the callback prototype.
 *
 * DECLARE_TRACE() passes &quot;proto&quot; as the tracepoint protoype and
 * &quot;void *__data, proto&quot; as the callback prototype.
 */</doc>
