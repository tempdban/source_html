<dec f='linux-4.14.y/include/linux/device.h' l='1499'/>
<doc f='linux-4.14.y/include/linux/device.h' l='1485'>/**
 * module_driver() - Helper macro for drivers that don&apos;t do anything
 * special in module init/exit. This eliminates a lot of boilerplate.
 * Each module may only use this macro once, and calling it replaces
 * module_init() and module_exit().
 *
 * @__driver: driver name
 * @__register: register function for this driver type
 * @__unregister: unregister function for this driver type
 * @...: Additional arguments to be passed to __register and __unregister.
 *
 * Use this macro to construct bus specific macros for registering
 * drivers, and do not use it on its own.
 */</doc>
<use f='linux-4.14.y/drivers/acpi/button.c' l='619' u='c'/>
<dec f='linux-4.14.y/include/linux/device.h' l='1499'/>
<doc f='linux-4.14.y/include/linux/device.h' l='1485'>/**
 * module_driver() - Helper macro for drivers that don&apos;t do anything
 * special in module init/exit. This eliminates a lot of boilerplate.
 * Each module may only use this macro once, and calling it replaces
 * module_init() and module_exit().
 *
 * @__driver: driver name
 * @__register: register function for this driver type
 * @__unregister: unregister function for this driver type
 * @...: Additional arguments to be passed to __register and __unregister.
 *
 * Use this macro to construct bus specific macros for registering
 * drivers, and do not use it on its own.
 */</doc>
<use f='linux-4.14.y/drivers/acpi/button.c' l='619' u='c'/>
