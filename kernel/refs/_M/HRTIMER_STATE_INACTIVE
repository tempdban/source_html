<dec f='linux-4.18.y/include/linux/hrtimer.h' l='88'/>
<doc f='linux-4.18.y/include/linux/hrtimer.h' l='64'>/*
 * Values to track state of the timer
 *
 * Possible states:
 *
 * 0x00		inactive
 * 0x01		enqueued into rbtree
 *
 * The callback state is not part of the timer-&gt;state because clearing it would
 * mean touching the timer after the callback, this makes it impossible to free
 * the timer from the callback function.
 *
 * Therefore we track the callback state in:
 *
 *	timer-&gt;base-&gt;cpu_base-&gt;running == timer
 *
 * On SMP it is possible to have a &quot;callback function running and enqueued&quot;
 * status. It happens for example when a posix timer expired and the callback
 * queued a signal. Between dropping the lock which protects the posix timer
 * and reacquiring the base lock of the hrtimer, another CPU can deliver the
 * signal and rearm the timer.
 *
 * All state transitions are protected by cpu_base-&gt;lock.
 */</doc>
<use f='linux-4.18.y/kernel/time/hrtimer.c' l='1021' u='c'/>
<use f='linux-4.18.y/kernel/time/hrtimer.c' l='1329' u='c'/>
<use f='linux-4.18.y/kernel/time/hrtimer.c' l='1380' u='c'/>
