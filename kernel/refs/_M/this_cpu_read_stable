<dec f='linux-4.14.y/arch/x86/include/asm/percpu.h' l='392'/>
<use f='linux-4.14.y/arch/x86/include/asm/current.h' l='15' u='c'/>
<use f='linux-4.14.y/arch/x86/include/asm/processor.h' l='555' u='c'/>
<doc f='linux-4.14.y/arch/x86/include/asm/percpu.h' l='383'>/*
 * this_cpu_read() makes gcc load the percpu variable every time it is
 * accessed while this_cpu_read_stable() allows the value to be cached.
 * this_cpu_read_stable() is more efficient and can be used if its value
 * is guaranteed to be valid across cpus.  The current users include
 * get_current() and get_thread_info() both of which are actually
 * per-thread variables implemented as per-cpu variables and thus
 * stable for the duration of the respective task.
 */</doc>
<use f='linux-4.14.y/arch/x86/include/asm/fpu/internal.h' l='498' u='c'/>
<dec f='linux-4.14.y/arch/x86/include/asm/percpu.h' l='392'/>
<use f='linux-4.14.y/arch/x86/include/asm/current.h' l='15' u='c'/>
<use f='linux-4.14.y/arch/x86/include/asm/processor.h' l='555' u='c'/>
<doc f='linux-4.14.y/arch/x86/include/asm/percpu.h' l='383'>/*
 * this_cpu_read() makes gcc load the percpu variable every time it is
 * accessed while this_cpu_read_stable() allows the value to be cached.
 * this_cpu_read_stable() is more efficient and can be used if its value
 * is guaranteed to be valid across cpus.  The current users include
 * get_current() and get_thread_info() both of which are actually
 * per-thread variables implemented as per-cpu variables and thus
 * stable for the duration of the respective task.
 */</doc>
<use f='linux-4.14.y/arch/x86/include/asm/fpu/internal.h' l='498' u='c'/>
