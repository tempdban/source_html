<dec f='linux-4.14.y/include/linux/rcupdate.h' l='584'/>
<doc f='linux-4.14.y/include/linux/rcupdate.h' l='563'>/**
 * rcu_pointer_handoff() - Hand off a pointer from RCU to other mechanism
 * @p: The pointer to hand off
 *
 * This is simply an identity function, but it documents where a pointer
 * is handed off from RCU to some other synchronization mechanism, for
 * example, reference counting or locking.  In C11, it would map to
 * kill_dependency().  It could be used as follows:
 * ``
 *	rcu_read_lock();
 *	p = rcu_dereference(gp);
 *	long_lived = is_long_lived(p);
 *	if (long_lived) {
 *		if (!atomic_inc_not_zero(p-&gt;refcnt))
 *			long_lived = false;
 *		else
 *			p = rcu_pointer_handoff(p);
 *	}
 *	rcu_read_unlock();
 *``
 */</doc>
<use f='linux-4.14.y/include/linux/dma-fence.h' l='269' u='c'/>
<use f='linux-4.14.y/include/net/ipv6.h' l='272' u='c'/>
<dec f='linux-4.14.y/include/linux/rcupdate.h' l='584'/>
<doc f='linux-4.14.y/include/linux/rcupdate.h' l='563'>/**
 * rcu_pointer_handoff() - Hand off a pointer from RCU to other mechanism
 * @p: The pointer to hand off
 *
 * This is simply an identity function, but it documents where a pointer
 * is handed off from RCU to some other synchronization mechanism, for
 * example, reference counting or locking.  In C11, it would map to
 * kill_dependency().  It could be used as follows:
 * ``
 *	rcu_read_lock();
 *	p = rcu_dereference(gp);
 *	long_lived = is_long_lived(p);
 *	if (long_lived) {
 *		if (!atomic_inc_not_zero(p-&gt;refcnt))
 *			long_lived = false;
 *		else
 *			p = rcu_pointer_handoff(p);
 *	}
 *	rcu_read_unlock();
 *``
 */</doc>
<use f='linux-4.14.y/include/linux/dma-fence.h' l='269' u='c'/>
<use f='linux-4.14.y/include/net/ipv6.h' l='272' u='c'/>
