<dec f='linux-4.14.y/include/linux/intel-svm.h' l='54'/>
<use f='linux-4.14.y/drivers/iommu/intel-svm.c' l='308' u='c'/>
<doc f='linux-4.14.y/include/linux/intel-svm.h' l='43'>/*
 * The SVM_FLAG_SUPERVISOR_MODE flag requests a PASID which can be used only
 * for access to kernel addresses. No IOTLB flushes are automatically done
 * for kernel mappings; it is valid only for access to the kernel&apos;s static
 * 1:1 mapping of physical memory — not to vmalloc or even module mappings.
 * A future API addition may permit the use of such ranges, by means of an
 * explicit IOTLB flush call (akin to the DMA API&apos;s unmap method).
 *
 * It is unlikely that we will ever hook into flush_tlb_kernel_range() to
 * do such IOTLB flushes automatically.
 */</doc>
<dec f='linux-4.14.y/include/linux/intel-svm.h' l='54'/>
<use f='linux-4.14.y/drivers/iommu/intel-svm.c' l='308' u='c'/>
<doc f='linux-4.14.y/include/linux/intel-svm.h' l='43'>/*
 * The SVM_FLAG_SUPERVISOR_MODE flag requests a PASID which can be used only
 * for access to kernel addresses. No IOTLB flushes are automatically done
 * for kernel mappings; it is valid only for access to the kernel&apos;s static
 * 1:1 mapping of physical memory — not to vmalloc or even module mappings.
 * A future API addition may permit the use of such ranges, by means of an
 * explicit IOTLB flush call (akin to the DMA API&apos;s unmap method).
 *
 * It is unlikely that we will ever hook into flush_tlb_kernel_range() to
 * do such IOTLB flushes automatically.
 */</doc>
