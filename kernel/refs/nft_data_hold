<dec f='linux-4.14.y/include/net/netfilter/nf_tables.h' l='180' type='void nft_data_hold(const struct nft_data * data, enum nft_data_types type)'/>
<def f='linux-4.14.y/net/netfilter/nf_tables_api.c' l='4100' ll='4110' type='void nft_data_hold(const struct nft_data * data, enum nft_data_types type)'/>
<use f='linux-4.14.y/net/netfilter/nf_tables_api.c' l='4119' u='c' c='nft_set_elem_activate'/>
<doc f='linux-4.14.y/net/netfilter/nf_tables_api.c' l='4089'>/**
 *	nft_data_hold - hold a nft_data item
 *
 *	@data: struct nft_data to release
 *	@type: type of data
 *
 *	Hold a nft_data item. NFT_DATA_VALUE types can be silently discarded,
 *	NFT_DATA_VERDICT bumps the reference to chains in case of NFT_JUMP and
 *	NFT_GOTO verdicts. This function must be called on active data objects
 *	from the second phase of the commit protocol.
 */</doc>
<use f='linux-4.14.y/net/netfilter/nft_immediate.c' l='77' u='c' c='nft_immediate_activate'/>
<dec f='linux-4.14.y/include/net/netfilter/nf_tables.h' l='180' type='void nft_data_hold(const struct nft_data * data, enum nft_data_types type)'/>
<def f='linux-4.14.y/net/netfilter/nf_tables_api.c' l='4100' ll='4110' type='void nft_data_hold(const struct nft_data * data, enum nft_data_types type)'/>
<use f='linux-4.14.y/net/netfilter/nf_tables_api.c' l='4119' u='c' c='nft_set_elem_activate'/>
<doc f='linux-4.14.y/net/netfilter/nf_tables_api.c' l='4089'>/**
 *	nft_data_hold - hold a nft_data item
 *
 *	@data: struct nft_data to release
 *	@type: type of data
 *
 *	Hold a nft_data item. NFT_DATA_VALUE types can be silently discarded,
 *	NFT_DATA_VERDICT bumps the reference to chains in case of NFT_JUMP and
 *	NFT_GOTO verdicts. This function must be called on active data objects
 *	from the second phase of the commit protocol.
 */</doc>
<use f='linux-4.14.y/net/netfilter/nft_immediate.c' l='77' u='c' c='nft_immediate_activate'/>
