<dec f='linux-4.14.y/fs/ntfs/ntfs.h' l='103' type='int post_read_mst_fixup(NTFS_RECORD * b, const u32 size)'/>
<use f='linux-4.14.y/fs/ntfs/aops.c' l='152' u='c' c='ntfs_end_buffer_async_read'/>
<doc f='linux-4.14.y/fs/ntfs/ntfs.h' l='102'>/* From fs/ntfs/mst.c */</doc>
<use f='linux-4.14.y/fs/ntfs/inode.c' l='1848' u='c' c='ntfs_read_inode_mount'/>
<use f='linux-4.14.y/fs/ntfs/logfile.c' l='423' u='c' c='ntfs_check_and_load_restart_page'/>
<def f='linux-4.14.y/fs/ntfs/mst.c' l='42' ll='100' type='int post_read_mst_fixup(NTFS_RECORD * b, const u32 size)'/>
<doc f='linux-4.14.y/fs/ntfs/mst.c' l='25'>/**
 * post_read_mst_fixup - deprotect multi sector transfer protected data
 * @b:		pointer to the data to deprotect
 * @size:	size in bytes of @b
 *
 * Perform the necessary post read multi sector transfer fixup and detect the
 * presence of incomplete multi sector transfers. - In that case, overwrite the
 * magic of the ntfs record header being processed with &quot;BAAD&quot; (in memory only!)
 * and abort processing.
 *
 * Return 0 on success and -EINVAL on error (&quot;BAAD&quot; magic will be present).
 *
 * NOTE: We consider the absence / invalidity of an update sequence array to
 * mean that the structure is not protected at all and hence doesn&apos;t need to
 * be fixed up. Thus, we return success and not failure in this case. This is
 * in contrast to pre_write_mst_fixup(), see below.
 */</doc>
