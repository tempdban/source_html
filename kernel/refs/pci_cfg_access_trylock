<dec f='linux-4.14.y/include/linux/pci.h' l='1514' type='bool pci_cfg_access_trylock(struct pci_dev * dev)'/>
<def f='linux-4.14.y/drivers/pci/access.c' l='662' ll='675' type='bool pci_cfg_access_trylock(struct pci_dev * dev)'/>
<dec f='linux-4.14.y/drivers/pci/access.c' l='676' type='bool pci_cfg_access_trylock(struct pci_dev * )'/>
<use f='linux-4.14.y/drivers/pci/access.c' l='676' c='pci_cfg_access_trylock'/>
<use f='linux-4.14.y/drivers/pci/access.c' l='676' u='a'/>
<use f='linux-4.14.y/drivers/pci/access.c' l='676' u='a'/>
<doc f='linux-4.14.y/drivers/pci/access.c' l='654'>/**
 * pci_cfg_access_trylock - try to lock PCI config reads/writes
 * @dev:	pci device struct
 *
 * Same as pci_cfg_access_lock, but will return 0 if access is
 * already locked, 1 otherwise. This function can be used from
 * atomic contexts.
 */</doc>
<use f='linux-4.14.y/drivers/pci/pci.c' l='4103' u='c' c='pci_dev_trylock'/>
<dec f='linux-4.14.y/include/linux/pci.h' l='1514' type='bool pci_cfg_access_trylock(struct pci_dev * dev)'/>
<def f='linux-4.14.y/drivers/pci/access.c' l='662' ll='675' type='bool pci_cfg_access_trylock(struct pci_dev * dev)'/>
<dec f='linux-4.14.y/drivers/pci/access.c' l='676' type='bool pci_cfg_access_trylock(struct pci_dev * )'/>
<use f='linux-4.14.y/drivers/pci/access.c' l='676' c='pci_cfg_access_trylock'/>
<use f='linux-4.14.y/drivers/pci/access.c' l='676' u='a'/>
<use f='linux-4.14.y/drivers/pci/access.c' l='676' u='a'/>
<doc f='linux-4.14.y/drivers/pci/access.c' l='654'>/**
 * pci_cfg_access_trylock - try to lock PCI config reads/writes
 * @dev:	pci device struct
 *
 * Same as pci_cfg_access_lock, but will return 0 if access is
 * already locked, 1 otherwise. This function can be used from
 * atomic contexts.
 */</doc>
<use f='linux-4.14.y/drivers/pci/pci.c' l='4103' u='c' c='pci_dev_trylock'/>
