<dec f='linux-4.14.y/include/linux/configfs.h' l='280' type='int configfs_depend_item_unlocked(struct configfs_subsystem * caller_subsys, struct config_item * target)'/>
<def f='linux-4.14.y/fs/configfs/dir.c' l='1190' ll='1251' type='int configfs_depend_item_unlocked(struct configfs_subsystem * caller_subsys, struct config_item * target)'/>
<dec f='linux-4.14.y/fs/configfs/dir.c' l='1252' type='int configfs_depend_item_unlocked(struct configfs_subsystem * , struct config_item * )'/>
<use f='linux-4.14.y/fs/configfs/dir.c' l='1252' c='configfs_depend_item_unlocked'/>
<use f='linux-4.14.y/fs/configfs/dir.c' l='1252' u='a'/>
<use f='linux-4.14.y/fs/configfs/dir.c' l='1252' u='a'/>
<doc f='linux-4.14.y/fs/configfs/dir.c' l='1181'>/*
 * caller_subsys is a caller&apos;s subsystem not target&apos;s. This is used to
 * determine if we should lock root and check subsys or not. When we are
 * in the same subsystem as our target there is no need to do locking as
 * we know that subsys is valid and is not unregistered during this function
 * as we are called from callback of one of his children and VFS holds a lock
 * on some inode. Otherwise we have to lock our root to  ensure that target&apos;s
 * subsystem it is not unregistered during this function.
 */</doc>
<doc f='linux-4.14.y/include/linux/configfs.h' l='273'>/*
 * These functions can sleep and can alloc with GFP_KERNEL
 * NOTE: These should be called only underneath configfs callbacks.
 * NOTE: First parameter is a caller&apos;s subsystem, not target&apos;s.
 * WARNING: These cannot be called on newly created item
 *        (in make_group()/make_item() callback)
 */</doc>
<dec f='linux-4.14.y/include/linux/configfs.h' l='280' type='int configfs_depend_item_unlocked(struct configfs_subsystem * caller_subsys, struct config_item * target)'/>
<def f='linux-4.14.y/fs/configfs/dir.c' l='1190' ll='1251' type='int configfs_depend_item_unlocked(struct configfs_subsystem * caller_subsys, struct config_item * target)'/>
<dec f='linux-4.14.y/fs/configfs/dir.c' l='1252' type='int configfs_depend_item_unlocked(struct configfs_subsystem * , struct config_item * )'/>
<use f='linux-4.14.y/fs/configfs/dir.c' l='1252' c='configfs_depend_item_unlocked'/>
<use f='linux-4.14.y/fs/configfs/dir.c' l='1252' u='a'/>
<use f='linux-4.14.y/fs/configfs/dir.c' l='1252' u='a'/>
<doc f='linux-4.14.y/fs/configfs/dir.c' l='1181'>/*
 * caller_subsys is a caller&apos;s subsystem not target&apos;s. This is used to
 * determine if we should lock root and check subsys or not. When we are
 * in the same subsystem as our target there is no need to do locking as
 * we know that subsys is valid and is not unregistered during this function
 * as we are called from callback of one of his children and VFS holds a lock
 * on some inode. Otherwise we have to lock our root to  ensure that target&apos;s
 * subsystem it is not unregistered during this function.
 */</doc>
<doc f='linux-4.14.y/include/linux/configfs.h' l='273'>/*
 * These functions can sleep and can alloc with GFP_KERNEL
 * NOTE: These should be called only underneath configfs callbacks.
 * NOTE: First parameter is a caller&apos;s subsystem, not target&apos;s.
 * WARNING: These cannot be called on newly created item
 *        (in make_group()/make_item() callback)
 */</doc>
