<dec f='linux-4.18.y/include/scsi/scsi_device.h' l='405' type='int scsi_report_opcode(struct scsi_device * sdev, unsigned char * buffer, unsigned int len, unsigned char opcode)'/>
<def f='linux-4.18.y/drivers/scsi/scsi.c' l='507' ll='537' type='int scsi_report_opcode(struct scsi_device * sdev, unsigned char * buffer, unsigned int len, unsigned char opcode)'/>
<dec f='linux-4.18.y/drivers/scsi/scsi.c' l='538' type='int scsi_report_opcode(struct scsi_device * , unsigned char * , unsigned int , unsigned char )'/>
<use f='linux-4.18.y/drivers/scsi/scsi.c' l='538' c='scsi_report_opcode'/>
<use f='linux-4.18.y/drivers/scsi/scsi.c' l='538' u='a'/>
<use f='linux-4.18.y/drivers/scsi/scsi.c' l='538' u='a'/>
<doc f='linux-4.18.y/drivers/scsi/scsi.c' l='496'>/**
 * scsi_report_opcode - Find out if a given command opcode is supported
 * @sdev:	scsi device to query
 * @buffer:	scratch buffer (must be at least 20 bytes long)
 * @len:	length of buffer
 * @opcode:	opcode for command to look up
 *
 * Uses the REPORT SUPPORTED OPERATION CODES to look up the given
 * opcode. Returns -EINVAL if RSOC fails, 0 if the command opcode is
 * unsupported and 1 if the device claims to support the command.
 */</doc>
<use f='linux-4.18.y/drivers/scsi/sd.c' l='3023' u='c' c='sd_read_write_same'/>
<use f='linux-4.18.y/drivers/scsi/sd.c' l='3037' u='c' c='sd_read_write_same'/>
<use f='linux-4.18.y/drivers/scsi/sd.c' l='3040' u='c' c='sd_read_write_same'/>
<use f='linux-4.18.y/drivers/scsi/sd.c' l='3051' u='c' c='sd_read_security'/>
<use f='linux-4.18.y/drivers/scsi/sd.c' l='3053' u='c' c='sd_read_security'/>
