<dec f='linux-4.18.y/include/drm/drm_bridge.h' l='301' type='struct drm_bridge * drm_panel_bridge_add(struct drm_panel * panel, u32 connector_type)'/>
<def f='linux-4.18.y/drivers/gpu/drm/bridge/panel.c' l='156' ll='180' type='struct drm_bridge * drm_panel_bridge_add(struct drm_panel * panel, u32 connector_type)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/bridge/panel.c' l='181' type='struct drm_bridge * drm_panel_bridge_add(struct drm_panel * , u32 )'/>
<use f='linux-4.18.y/drivers/gpu/drm/bridge/panel.c' l='181' c='drm_panel_bridge_add'/>
<use f='linux-4.18.y/drivers/gpu/drm/bridge/panel.c' l='181' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/bridge/panel.c' l='181' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/bridge/panel.c' l='224' u='c' c='devm_drm_panel_bridge_add'/>
<doc f='linux-4.18.y/drivers/gpu/drm/bridge/panel.c' l='136'>/**
 * drm_panel_bridge_add - Creates a drm_bridge and drm_connector that
 * just calls the appropriate functions from drm_panel.
 *
 * @panel: The drm_panel being wrapped.  Must be non-NULL.
 * @connector_type: The DRM_MODE_CONNECTOR_* for the connector to be
 * created.
 *
 * For drivers converting from directly using drm_panel: The expected
 * usage pattern is that during either encoder module probe or DSI
 * host attach, a drm_panel will be looked up through
 * drm_of_find_panel_or_bridge().  drm_panel_bridge_add() is used to
 * wrap that panel in the new bridge, and the result can then be
 * passed to drm_bridge_attach().  The drm_panel_prepare() and related
 * functions can be dropped from the encoder driver (they&apos;re now
 * called by the KMS helpers before calling into the encoder), along
 * with connector creation.  When done with the bridge,
 * drm_bridge_detach() should be called as normal, then
 * drm_panel_bridge_remove() to free it.
 */</doc>
