<dec f='linux-4.14.y/include/drm/drm_atomic.h' l='526' type='int drm_atomic_set_mode_for_crtc(struct drm_crtc_state * state, const struct drm_display_mode * mode)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='341' ll='374' type='int drm_atomic_set_mode_for_crtc(struct drm_crtc_state * state, const struct drm_display_mode * mode)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='375' type='int drm_atomic_set_mode_for_crtc(struct drm_crtc_state * , const struct drm_display_mode * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='375' c='drm_atomic_set_mode_for_crtc'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='375' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='375' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='330'>/**
 * drm_atomic_set_mode_for_crtc - set mode for CRTC
 * @state: the CRTC whose incoming state to update
 * @mode: kernel-internal mode to use for the CRTC, or NULL to disable
 *
 * Set a mode (originating from the kernel) on the desired CRTC state and update
 * the enable property.
 *
 * RETURNS:
 * Zero on success, error code on failure. Cannot return -EDEADLK.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='2633' u='c' c='__drm_atomic_helper_set_config'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='2651' u='c' c='__drm_atomic_helper_set_config'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='1026' u='c' c='drm_helper_crtc_mode_set'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_framebuffer.c' l='816' u='c' c='atomic_remove_fb'/>
