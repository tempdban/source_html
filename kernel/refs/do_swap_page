<dec f='linux-4.14.y/mm/internal.h' l='41' type='int do_swap_page(struct vm_fault * vmf)'/>
<def f='linux-4.14.y/mm/memory.c' l='2842' ll='3044' type='int do_swap_page(struct vm_fault * vmf)'/>
<use f='linux-4.14.y/mm/memory.c' l='3914' u='c' c='handle_pte_fault'/>
<doc f='linux-4.14.y/mm/memory.c' l='2834'>/*
 * We enter with non-exclusive mmap_sem (to exclude vma changes,
 * but allow concurrent faults), and pte mapped but not yet locked.
 * We return with pte unmapped and unlocked.
 *
 * We return with the mmap_sem locked or unlocked in the same cases
 * as does filemap_fault().
 */</doc>
<dec f='linux-4.14.y/mm/internal.h' l='41' type='int do_swap_page(struct vm_fault * vmf)'/>
<def f='linux-4.14.y/mm/memory.c' l='2842' ll='3044' type='int do_swap_page(struct vm_fault * vmf)'/>
<use f='linux-4.14.y/mm/memory.c' l='3914' u='c' c='handle_pte_fault'/>
<doc f='linux-4.14.y/mm/memory.c' l='2834'>/*
 * We enter with non-exclusive mmap_sem (to exclude vma changes,
 * but allow concurrent faults), and pte mapped but not yet locked.
 * We return with pte unmapped and unlocked.
 *
 * We return with the mmap_sem locked or unlocked in the same cases
 * as does filemap_fault().
 */</doc>
