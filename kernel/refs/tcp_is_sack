<def f='linux-4.14.y/include/net/tcp.h' l='1106' ll='1109' type='int tcp_is_sack(const struct tcp_sock * tp)'/>
<use f='linux-4.14.y/include/net/tcp.h' l='1113' u='c' c='tcp_is_reno'/>
<doc f='linux-4.14.y/include/net/tcp.h' l='1098'>/* These functions determine how the current flow behaves in respect of SACK
 * handling. SACK is negotiated with the peer, and therefore it can vary
 * between different flows.
 *
 * tcp_is_sack - SACK enabled
 * tcp_is_reno - No SACK
 * tcp_is_fack - FACK enabled, implies SACK enabled
 */</doc>
<use f='linux-4.14.y/net/ipv4/tcp.c' l='2895' u='c' c='tcp_get_info'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='2209' u='c' c='tcp_mark_head_lost'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='2240' u='c' c='tcp_mark_head_lost'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='2465' u='c' c='tcp_try_undo_loss'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='3131' u='c' c='tcp_clean_rtx_queue'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='3242' u='c' c='tcp_clean_rtx_queue'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4097' u='c' c='tcp_fin'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4130' u='c' c='tcp_dsack_set'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4165' u='c' c='tcp_send_dupack'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4469' u='c' c='tcp_data_queue_ofo'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4568' u='c' c='tcp_data_queue_ofo'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='5325' u='c' c='tcp_validate_incoming'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='5760' u='c' c='tcp_rcv_synsent_state_process'/>
<use f='linux-4.14.y/net/ipv4/tcp_output.c' l='2403' u='c' c='tcp_schedule_loss_probe'/>
<use f='linux-4.14.y/net/ipv4/tcp_timer.c' l='473' u='c' c='tcp_retransmit_timer'/>
<use f='linux-4.14.y/net/ipv4/tcp_timer.c' l='481' u='c' c='tcp_retransmit_timer'/>
<def f='linux-4.14.y/include/net/tcp.h' l='1106' ll='1109' type='int tcp_is_sack(const struct tcp_sock * tp)'/>
<use f='linux-4.14.y/include/net/tcp.h' l='1113' u='c' c='tcp_is_reno'/>
<doc f='linux-4.14.y/include/net/tcp.h' l='1098'>/* These functions determine how the current flow behaves in respect of SACK
 * handling. SACK is negotiated with the peer, and therefore it can vary
 * between different flows.
 *
 * tcp_is_sack - SACK enabled
 * tcp_is_reno - No SACK
 * tcp_is_fack - FACK enabled, implies SACK enabled
 */</doc>
<use f='linux-4.14.y/net/ipv4/tcp.c' l='2895' u='c' c='tcp_get_info'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='2209' u='c' c='tcp_mark_head_lost'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='2240' u='c' c='tcp_mark_head_lost'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='2465' u='c' c='tcp_try_undo_loss'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='3131' u='c' c='tcp_clean_rtx_queue'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='3242' u='c' c='tcp_clean_rtx_queue'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4097' u='c' c='tcp_fin'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4130' u='c' c='tcp_dsack_set'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4165' u='c' c='tcp_send_dupack'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4469' u='c' c='tcp_data_queue_ofo'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4568' u='c' c='tcp_data_queue_ofo'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='5325' u='c' c='tcp_validate_incoming'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='5760' u='c' c='tcp_rcv_synsent_state_process'/>
<use f='linux-4.14.y/net/ipv4/tcp_output.c' l='2403' u='c' c='tcp_schedule_loss_probe'/>
<use f='linux-4.14.y/net/ipv4/tcp_timer.c' l='473' u='c' c='tcp_retransmit_timer'/>
<use f='linux-4.14.y/net/ipv4/tcp_timer.c' l='481' u='c' c='tcp_retransmit_timer'/>
