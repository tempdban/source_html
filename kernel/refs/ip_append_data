<dec f='linux-4.14.y/include/net/ip.h' l='141' type='int ip_append_data(struct sock * sk, struct flowi4 * fl4, int (*)(void *, char *, int, int, int, struct sk_buff *) getfrag, void * from, int len, int protolen, struct ipcm_cookie * ipc, struct rtable ** rt, unsigned int flags)'/>
<use f='linux-4.14.y/net/ipv4/icmp.c' l='375' u='c' c='icmp_push_reply'/>
<def f='linux-4.14.y/net/ipv4/ip_output.c' l='1152' ll='1176' type='int ip_append_data(struct sock * sk, struct flowi4 * fl4, int (*)(void *, char *, int, int, int, struct sk_buff *) getfrag, void * from, int length, int transhdrlen, struct ipcm_cookie * ipc, struct rtable ** rtp, unsigned int flags)'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='1567' u='c' c='ip_send_unicast_reply'/>
<doc f='linux-4.14.y/net/ipv4/ip_output.c' l='1141'>/*
 *	ip_append_data() and ip_append_page() can make one large IP datagram
 *	from many pieces of data. Each pieces will be holded on the socket
 *	until ip_push_pending_frames() is called. Each piece can be a page
 *	or non-page data.
 *
 *	Not only UDP, other transport protocols - e.g. raw sockets - can use
 *	this interface potentially.
 *
 *	LATER: length must be adjusted by pad at tail, when it is required.
 */</doc>
<use f='linux-4.14.y/net/ipv4/ping.c' l='837' u='c' c='ping_v4_sendmsg'/>
<use f='linux-4.14.y/net/ipv4/raw.c' l='663' u='c' c='raw_sendmsg'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='1079' u='c' c='udp_sendmsg'/>
<dec f='linux-4.14.y/include/net/ip.h' l='141' type='int ip_append_data(struct sock * sk, struct flowi4 * fl4, int (*)(void *, char *, int, int, int, struct sk_buff *) getfrag, void * from, int len, int protolen, struct ipcm_cookie * ipc, struct rtable ** rt, unsigned int flags)'/>
<use f='linux-4.14.y/net/ipv4/icmp.c' l='375' u='c' c='icmp_push_reply'/>
<def f='linux-4.14.y/net/ipv4/ip_output.c' l='1152' ll='1176' type='int ip_append_data(struct sock * sk, struct flowi4 * fl4, int (*)(void *, char *, int, int, int, struct sk_buff *) getfrag, void * from, int length, int transhdrlen, struct ipcm_cookie * ipc, struct rtable ** rtp, unsigned int flags)'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='1567' u='c' c='ip_send_unicast_reply'/>
<doc f='linux-4.14.y/net/ipv4/ip_output.c' l='1141'>/*
 *	ip_append_data() and ip_append_page() can make one large IP datagram
 *	from many pieces of data. Each pieces will be holded on the socket
 *	until ip_push_pending_frames() is called. Each piece can be a page
 *	or non-page data.
 *
 *	Not only UDP, other transport protocols - e.g. raw sockets - can use
 *	this interface potentially.
 *
 *	LATER: length must be adjusted by pad at tail, when it is required.
 */</doc>
<use f='linux-4.14.y/net/ipv4/ping.c' l='837' u='c' c='ping_v4_sendmsg'/>
<use f='linux-4.14.y/net/ipv4/raw.c' l='663' u='c' c='raw_sendmsg'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='1079' u='c' c='udp_sendmsg'/>
