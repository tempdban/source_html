<dec f='linux-4.18.y/include/drm/drm_fb_helper.h' l='279' type='int drm_fb_helper_defio_init(struct drm_fb_helper * fb_helper)'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='1048' ll='1072' type='int drm_fb_helper_defio_init(struct drm_fb_helper * fb_helper)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='1073' type='int drm_fb_helper_defio_init(struct drm_fb_helper * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='1073' c='drm_fb_helper_defio_init'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='1073' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='1073' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_fb_helper.c' l='1032'>/**
 * drm_fb_helper_defio_init - fbdev deferred I/O initialization
 * @fb_helper: driver-allocated fbdev helper
 *
 * This function allocates &amp;fb_deferred_io, sets callback to
 * drm_fb_helper_deferred_io(), delay to 50ms and calls fb_deferred_io_init().
 * It should be called from the &amp;drm_fb_helper_funcs-&gt;fb_probe callback.
 * drm_fb_helper_fbdev_teardown() cleans up deferred I/O.
 *
 * NOTE: A copy of &amp;fb_ops is made and assigned to &amp;info-&gt;fbops. This is done
 * because fb_deferred_io_cleanup() clears &amp;fbops-&gt;fb_mmap and would thereby
 * affect other instances of that &amp;fb_ops.
 *
 * Returns:
 * 0 on success or a negative error code on failure.
 */</doc>
