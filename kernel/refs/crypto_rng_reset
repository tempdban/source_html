<dec f='linux-4.18.y/include/crypto/rng.h' l='180' type='int crypto_rng_reset(struct crypto_rng * tfm, const u8 * seed, unsigned int slen)'/>
<doc f='linux-4.18.y/include/crypto/rng.h' l='163'>/**
 * crypto_rng_reset() - re-initialize the RNG
 * @tfm: cipher handle
 * @seed: seed input data
 * @slen: length of the seed input data
 *
 * The reset function completely re-initializes the random number generator
 * referenced by the cipher handle by clearing the current state. The new state
 * is initialized with the caller provided seed or automatically, depending
 * on the random number generator type (the ANSI X9.31 RNG requires
 * caller-provided seed, the SP800-90A DRBGs perform an automatic seeding).
 * The seed is provided as a parameter to this function call. The provided seed
 * should have the length of the seed size defined for the random number
 * generator as defined by crypto_rng_seedsize.
 *
 * Return: 0 if the setting of the key was successful; &lt; 0 if an error occurred
 */</doc>
<use f='linux-4.18.y/include/crypto/drbg.h' l='262' u='c' c='crypto_drbg_reset_test'/>
<def f='linux-4.18.y/crypto/rng.c' l='36' ll='56' type='int crypto_rng_reset(struct crypto_rng * tfm, const u8 * seed, unsigned int slen)'/>
<dec f='linux-4.18.y/crypto/rng.c' l='57' type='int crypto_rng_reset(struct crypto_rng * , const u8 * , unsigned int )'/>
<use f='linux-4.18.y/crypto/rng.c' l='57' c='crypto_rng_reset'/>
<use f='linux-4.18.y/crypto/rng.c' l='57' u='a'/>
<use f='linux-4.18.y/crypto/rng.c' l='57' u='a'/>
<use f='linux-4.18.y/crypto/rng.c' l='134' u='c' c='crypto_get_default_rng'/>
