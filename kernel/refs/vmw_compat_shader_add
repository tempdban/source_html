<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='1082' type='int vmw_compat_shader_add(struct vmw_private * dev_priv, struct vmw_cmdbuf_res_manager * man, u32 user_key, const void * bytecode, SVGA3dShaderType shader_type, size_t size, struct list_head * list)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='2190' u='c' c='vmw_cmd_shader_define'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_shader.c' l='966' ll='1024' type='int vmw_compat_shader_add(struct vmw_private * dev_priv, struct vmw_cmdbuf_res_manager * man, u32 user_key, const void * bytecode, SVGA3dShaderType shader_type, size_t size, struct list_head * list)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_shader.c' l='952'>/**
 * vmw_compat_shader_add - Create a compat shader and stage it for addition
 * as a command buffer managed resource.
 *
 * @man: Pointer to the compat shader manager identifying the shader namespace.
 * @user_key: The key that is used to identify the shader. The key is
 * unique to the shader type.
 * @bytecode: Pointer to the bytecode of the shader.
 * @shader_type: Shader type.
 * @tfile: Pointer to a struct ttm_object_file that the guest-backed shader is
 * to be created with.
 * @list: Caller&apos;s list of staged command buffer resource actions.
 *
 */</doc>
<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='1082' type='int vmw_compat_shader_add(struct vmw_private * dev_priv, struct vmw_cmdbuf_res_manager * man, u32 user_key, const void * bytecode, SVGA3dShaderType shader_type, size_t size, struct list_head * list)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='2190' u='c' c='vmw_cmd_shader_define'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_shader.c' l='966' ll='1024' type='int vmw_compat_shader_add(struct vmw_private * dev_priv, struct vmw_cmdbuf_res_manager * man, u32 user_key, const void * bytecode, SVGA3dShaderType shader_type, size_t size, struct list_head * list)'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_shader.c' l='952'>/**
 * vmw_compat_shader_add - Create a compat shader and stage it for addition
 * as a command buffer managed resource.
 *
 * @man: Pointer to the compat shader manager identifying the shader namespace.
 * @user_key: The key that is used to identify the shader. The key is
 * unique to the shader type.
 * @bytecode: Pointer to the bytecode of the shader.
 * @shader_type: Shader type.
 * @tfile: Pointer to a struct ttm_object_file that the guest-backed shader is
 * to be created with.
 * @list: Caller&apos;s list of staged command buffer resource actions.
 *
 */</doc>
