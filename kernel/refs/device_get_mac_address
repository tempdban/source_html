<dec f='linux-4.14.y/include/linux/property.h' l='280' type='void * device_get_mac_address(struct device * dev, char * addr, int alen)'/>
<def f='linux-4.14.y/drivers/base/property.c' l='1185' ll='1198' type='void * device_get_mac_address(struct device * dev, char * addr, int alen)'/>
<dec f='linux-4.14.y/drivers/base/property.c' l='1199' type='void * device_get_mac_address(struct device * , char * , int )'/>
<use f='linux-4.14.y/drivers/base/property.c' l='1199' c='device_get_mac_address'/>
<use f='linux-4.14.y/drivers/base/property.c' l='1199' u='a'/>
<use f='linux-4.14.y/drivers/base/property.c' l='1199' u='a'/>
<doc f='linux-4.14.y/drivers/base/property.c' l='1162'>/**
 * device_get_mac_address - Get the MAC for a given device
 * @dev:	Pointer to the device
 * @addr:	Address of buffer to store the MAC in
 * @alen:	Length of the buffer pointed to by addr, should be ETH_ALEN
 *
 * Search the firmware node for the best MAC address to use.  &apos;mac-address&apos; is
 * checked first, because that is supposed to contain to &quot;most recent&quot; MAC
 * address. If that isn&apos;t set, then &apos;local-mac-address&apos; is checked next,
 * because that is the default address.  If that isn&apos;t set, then the obsolete
 * &apos;address&apos; is checked, just in case we&apos;re using an old device tree.
 *
 * Note that the &apos;address&apos; property is supposed to contain a virtual address of
 * the register set, but some DTS files have redefined that property to be the
 * MAC address.
 *
 * All-zero MAC addresses are rejected, because those could be properties that
 * exist in the firmware tables, but were not updated by the firmware.  For
 * example, the DTS could define &apos;mac-address&apos; and &apos;local-mac-address&apos;, with
 * zero MAC addresses.  Some older U-Boots only initialized &apos;local-mac-address&apos;.
 * In this case, the real MAC is in &apos;local-mac-address&apos;, and &apos;mac-address&apos;
 * exists but is all zeros.
*/</doc>
