<dec f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='489' type='int nfp_cpp_area_fill(struct nfp_cpp_area * area, unsigned long offset, uint32_t value, size_t length)'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='479'>/*
 * Fill a NFP CPP area handle and offset with a value
 *
 * @param[in]	area	NFP CPP area handle
 * @param[in]	offset	Offset into the NFP CPP ID address space
 * @param[in]	value	32-bit value to fill area with
 * @param[in]	length	Size of the area to reserve
 *
 * @return bytes written on success, -1 on failure (and set errno accordingly).
 */</doc>
<def f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='744' ll='792' type='int nfp_cpp_area_fill(struct nfp_cpp_area * area, unsigned long offset, uint32_t value, size_t length)'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='737'>/*
 * nfp_cpp_area_fill - fill a CPP area with a value
 * @area:       CPP area
 * @offset:     offset into CPP area
 * @value:      value to fill with
 * @length:     length of area to fill
 */</doc>
