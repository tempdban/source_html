<dec f='linux-4.18.y/include/linux/sched/signal.h' l='375' type='void signal_wake_up_state(struct task_struct * t, unsigned int state)'/>
<use f='linux-4.18.y/include/linux/sched/signal.h' l='379' u='c' c='signal_wake_up'/>
<use f='linux-4.18.y/include/linux/sched/signal.h' l='383' u='c' c='ptrace_signal_wake_up'/>
<use f='linux-4.18.y/kernel/ptrace.c' l='422' u='c' c='ptrace_attach'/>
<def f='linux-4.18.y/kernel/signal.c' l='667' ll='679' type='void signal_wake_up_state(struct task_struct * t, unsigned int state)'/>
<doc f='linux-4.18.y/kernel/signal.c' l='656'>/*
 * Tell a process that it has a new active signal..
 *
 * NOTE! we rely on the previous spin_lock to
 * lock interrupts for us! We can only be called with
 * &quot;siglock&quot; held, and the local interrupt must
 * have been disabled when that got acquired!
 *
 * No need to set need_resched since signal event passing
 * goes through -&gt;blocked
 */</doc>
