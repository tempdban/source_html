<dec f='linux-4.18.y/include/linux/vmalloc.h' l='163' type='struct vm_struct * alloc_vm_area(size_t size, pte_t ** ptes)'/>
<doc f='linux-4.18.y/include/linux/vmalloc.h' l='162'>/* Allocate/destroy a &apos;vmalloc&apos; VM area. */</doc>
<def f='linux-4.18.y/mm/vmalloc.c' l='2330' ll='2350' type='struct vm_struct * alloc_vm_area(size_t size, pte_t ** ptes)'/>
<dec f='linux-4.18.y/mm/vmalloc.c' l='2351' type='struct vm_struct * alloc_vm_area(size_t , pte_t ** )'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='2351' c='alloc_vm_area'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='2351' u='a'/>
<use f='linux-4.18.y/mm/vmalloc.c' l='2351' u='a'/>
<doc f='linux-4.18.y/mm/vmalloc.c' l='2316'>/**
 *	alloc_vm_area - allocate a range of kernel address space
 *	@size:		size of the area
 *	@ptes:		returns the PTEs for the address space
 *
 *	Returns:	NULL on failure, vm_struct on success
 *
 *	This function reserves a range of kernel address space, and
 *	allocates pagetables to map that range.  No actual mappings
 *	are created.
 *
 *	If @ptes is non-NULL, pointers to the PTEs (in init_mm)
 *	allocated for the VM area are returned.
 */</doc>
