<dec f='linux-4.18.y/include/linux/rcutree.h' l='95' type='bool rcu_is_watching()'/>
<use f='linux-4.18.y/kernel/extable.c' l='140' u='c' c='kernel_text_address'/>
<def f='linux-4.18.y/kernel/rcu/tree.c' l='1030' ll='1038' type='bool rcu_is_watching()'/>
<dec f='linux-4.18.y/kernel/rcu/tree.c' l='1039' type='bool rcu_is_watching()'/>
<use f='linux-4.18.y/kernel/rcu/tree.c' l='1039' c='rcu_is_watching'/>
<use f='linux-4.18.y/kernel/rcu/tree.c' l='1039' u='a'/>
<use f='linux-4.18.y/kernel/rcu/tree.c' l='1039' u='a'/>
<use f='linux-4.18.y/kernel/rcu/tree.c' l='2842' u='c' c='__call_rcu_core'/>
<use f='linux-4.18.y/kernel/rcu/tree.c' l='2941' u='c' c='__call_rcu'/>
<doc f='linux-4.18.y/kernel/rcu/tree.c' l='1022'>/**
 * rcu_is_watching - see if RCU thinks that the current CPU is idle
 *
 * Return true if RCU is watching the running CPU, which means that this
 * CPU can safely enter RCU read-side critical sections.  In other words,
 * if the current CPU is in its idle loop and is neither in an interrupt
 * or NMI handler, return true.
 */</doc>
<use f='linux-4.18.y/kernel/trace/ftrace.c' l='6307' u='c' c='__ftrace_ops_list_func'/>
<use f='linux-4.18.y/kernel/trace/ftrace.c' l='6357' u='c' c='ftrace_ops_assist_func'/>
<use f='linux-4.18.y/kernel/trace/trace.c' l='2690' u='c' c='__trace_stack'/>
