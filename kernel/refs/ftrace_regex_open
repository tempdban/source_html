<dec f='linux-4.14.y/include/linux/ftrace.h' l='480' type='int ftrace_regex_open(struct ftrace_ops * ops, int flag, struct inode * inode, struct file * file)'/>
<def f='linux-4.14.y/kernel/trace/ftrace.c' l='3613' ll='3692' type='int ftrace_regex_open(struct ftrace_ops * ops, int flag, struct inode * inode, struct file * file)'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='3699' u='c' c='ftrace_filter_open'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='3709' u='c' c='ftrace_notrace_open'/>
<doc f='linux-4.14.y/kernel/trace/ftrace.c' l='3597'>/**
 * ftrace_regex_open - initialize function tracer filter files
 * @ops: The ftrace_ops that hold the hash filters
 * @flag: The type of filter to process
 * @inode: The inode, usually passed in to your open routine
 * @file: The file, usually passed in to your open routine
 *
 * ftrace_regex_open() initializes the filter files for the
 * @ops. Depending on @flag it may process the filter hash or
 * the notrace hash of @ops. With this called from the open
 * routine, you can use ftrace_filter_write() for the write
 * routine if @flag has FTRACE_ITER_FILTER set, or
 * ftrace_notrace_write() if @flag has FTRACE_ITER_NOTRACE set.
 * tracing_lseek() should be used as the lseek routine, and
 * release must call ftrace_regex_release().
 */</doc>
<dec f='linux-4.14.y/include/linux/ftrace.h' l='480' type='int ftrace_regex_open(struct ftrace_ops * ops, int flag, struct inode * inode, struct file * file)'/>
<def f='linux-4.14.y/kernel/trace/ftrace.c' l='3613' ll='3692' type='int ftrace_regex_open(struct ftrace_ops * ops, int flag, struct inode * inode, struct file * file)'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='3699' u='c' c='ftrace_filter_open'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='3709' u='c' c='ftrace_notrace_open'/>
<doc f='linux-4.14.y/kernel/trace/ftrace.c' l='3597'>/**
 * ftrace_regex_open - initialize function tracer filter files
 * @ops: The ftrace_ops that hold the hash filters
 * @flag: The type of filter to process
 * @inode: The inode, usually passed in to your open routine
 * @file: The file, usually passed in to your open routine
 *
 * ftrace_regex_open() initializes the filter files for the
 * @ops. Depending on @flag it may process the filter hash or
 * the notrace hash of @ops. With this called from the open
 * routine, you can use ftrace_filter_write() for the write
 * routine if @flag has FTRACE_ITER_FILTER set, or
 * ftrace_notrace_write() if @flag has FTRACE_ITER_NOTRACE set.
 * tracing_lseek() should be used as the lseek routine, and
 * release must call ftrace_regex_release().
 */</doc>
