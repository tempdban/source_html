<dec f='linux-4.14.y/include/linux/workqueue.h' l='442' type='int apply_workqueue_attrs(struct workqueue_struct * wq, const struct workqueue_attrs * attrs)'/>
<def f='linux-4.14.y/kernel/workqueue.c' l='3815' ll='3825' type='int apply_workqueue_attrs(struct workqueue_struct * wq, const struct workqueue_attrs * attrs)'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='3936' u='c' c='alloc_and_link_pwqs'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='3943' u='c' c='alloc_and_link_pwqs'/>
<doc f='linux-4.14.y/kernel/workqueue.c' l='3799'>/**
 * apply_workqueue_attrs - apply new workqueue_attrs to an unbound workqueue
 * @wq: the target workqueue
 * @attrs: the workqueue_attrs to apply, allocated with alloc_workqueue_attrs()
 *
 * Apply @attrs to an unbound workqueue @wq.  Unless disabled, on NUMA
 * machines, this function maps a separate pwq to each NUMA node with
 * possibles CPUs in @attrs-&gt;cpumask so that work items are affine to the
 * NUMA node it was issued on.  Older pwqs are released as in-flight work
 * items finish.  Note that a work item which repeatedly requeues itself
 * back-to-back will stay on its current pwq.
 *
 * Performs GFP_KERNEL allocations.
 *
 * Return: 0 on success and -errno on failure.
 */</doc>
