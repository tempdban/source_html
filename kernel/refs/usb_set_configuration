<dec f='linux-4.14.y/include/linux/usb.h' l='1787' type='int usb_set_configuration(struct usb_device * dev, int configuration)'/>
<dec f='linux-4.14.y/drivers/usb/core/usb.h' l='46' type='int usb_set_configuration(struct usb_device * dev, int configuration)'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='1414' u='c' c='proc_setconfig'/>
<use f='linux-4.14.y/drivers/usb/core/generic.c' l='174' u='c' c='generic_probe'/>
<use f='linux-4.14.y/drivers/usb/core/generic.c' l='196' u='c' c='generic_disconnect'/>
<use f='linux-4.14.y/drivers/usb/core/hcd-pci.c' l='106' u='c' c='ehci_pre_add'/>
<use f='linux-4.14.y/drivers/usb/core/hcd-pci.c' l='127' u='c' c='ehci_post_add'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='2526' u='c' c='usb_deauthorize_device'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='2564' u='c' c='usb_authorize_device'/>
<def f='linux-4.14.y/drivers/usb/core/message.c' l='1731' ll='1947' type='int usb_set_configuration(struct usb_device * dev, int configuration)'/>
<dec f='linux-4.14.y/drivers/usb/core/message.c' l='1948' type='int usb_set_configuration(struct usb_device * , int )'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1948' c='usb_set_configuration'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1948' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1948' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1973' u='c' c='driver_set_config_work'/>
<doc f='linux-4.14.y/drivers/usb/core/message.c' l='1686'>/*
 * usb_set_configuration - Makes a particular device setting be current
 * @dev: the device whose configuration is being updated
 * @configuration: the configuration being chosen.
 * Context: !in_interrupt(), caller owns the device lock
 *
 * This is used to enable non-default device modes.  Not all devices
 * use this kind of configurability; many devices only have one
 * configuration.
 *
 * @configuration is the value of the configuration to be installed.
 * According to the USB spec (e.g. section 9.1.1.5), configuration values
 * must be non-zero; a value of zero indicates that the device in
 * unconfigured.  However some devices erroneously use 0 as one of their
 * configuration values.  To help manage such devices, this routine will
 * accept @configuration = -1 as indicating the device should be put in
 * an unconfigured state.
 *
 * USB device configurations may affect Linux interoperability,
 * power consumption and the functionality available.  For example,
 * the default configuration is limited to using 100mA of bus power,
 * so that when certain device functionality requires more power,
 * and the device is bus powered, that functionality should be in some
 * non-default device configuration.  Other device modes may also be
 * reflected as configuration options, such as whether two ISDN
 * channels are available independently; and choosing between open
 * standard device protocols (like CDC) or proprietary ones.
 *
 * Note that a non-authorized device (dev-&gt;authorized == 0) will only
 * be put in unconfigured mode.
 *
 * Note that USB has an additional level of device configurability,
 * associated with interfaces.  That configurability is accessed using
 * usb_set_interface().
 *
 * This call is synchronous. The calling context must be able to sleep,
 * must own the device lock, and must not hold the driver model&apos;s USB
 * bus mutex; usb interface driver probe() methods cannot use this routine.
 *
 * Returns zero on success, or else the status code returned by the
 * underlying call that failed.  On successful completion, each interface
 * in the original device configuration has been destroyed, and each one
 * in the new configuration has been probed by all relevant usb device
 * drivers currently known to the kernel.
 */</doc>
<use f='linux-4.14.y/drivers/usb/core/sysfs.c' l='103' u='c' c='bConfigurationValue_store'/>
<use f='linux-4.14.y/drivers/usb/core/sysfs.c' l='763' u='c' c='remove_store'/>
