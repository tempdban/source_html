<def f='linux-4.14.y/include/linux/ethtool.h' l='318' ll='395'/>
<size>440</size>
<doc f='linux-4.14.y/include/linux/ethtool.h' l='174'>/**
 * struct ethtool_ops - optional netdev operations
 * @get_settings: DEPRECATED, use %get_link_ksettings/%set_link_ksettings
 *	API. Get various device settings including Ethernet link
 *	settings. The @cmd parameter is expected to have been cleared
 *	before get_settings is called. Returns a negative error code
 *	or zero.
 * @set_settings: DEPRECATED, use %get_link_ksettings/%set_link_ksettings
 *	API. Set various device settings including Ethernet link
 *	settings.  Returns a negative error code or zero.
 * @get_drvinfo: Report driver/device information.  Should only set the
 *	@driver, @version, @fw_version and @bus_info fields.  If not
 *	implemented, the @driver and @bus_info fields will be filled in
 *	according to the netdev&apos;s parent device.
 * @get_regs_len: Get buffer length required for @get_regs
 * @get_regs: Get device registers
 * @get_wol: Report whether Wake-on-Lan is enabled
 * @set_wol: Turn Wake-on-Lan on or off.  Returns a negative error code
 *	or zero.
 * @get_msglevel: Report driver message level.  This should be the value
 *	of the @msg_enable field used by netif logging functions.
 * @set_msglevel: Set driver message level
 * @nway_reset: Restart autonegotiation.  Returns a negative error code
 *	or zero.
 * @get_link: Report whether physical link is up.  Will only be called if
 *	the netdev is up.  Should usually be set to ethtool_op_get_link(),
 *	which uses netif_carrier_ok().
 * @get_eeprom: Read data from the device EEPROM.
 *	Should fill in the magic field.  Don&apos;t need to check len for zero
 *	or wraparound.  Fill in the data argument with the eeprom values
 *	from offset to offset + len.  Update len to the amount read.
 *	Returns an error or zero.
 * @set_eeprom: Write data to the device EEPROM.
 *	Should validate the magic field.  Don&apos;t need to check len for zero
 *	or wraparound.  Update len to the amount written.  Returns an error
 *	or zero.
 * @get_coalesce: Get interrupt coalescing parameters.  Returns a negative
 *	error code or zero.
 * @set_coalesce: Set interrupt coalescing parameters.  Returns a negative
 *	error code or zero.
 * @get_ringparam: Report ring sizes
 * @set_ringparam: Set ring sizes.  Returns a negative error code or zero.
 * @get_pauseparam: Report pause parameters
 * @set_pauseparam: Set pause parameters.  Returns a negative error code
 *	or zero.
 * @self_test: Run specified self-tests
 * @get_strings: Return a set of strings that describe the requested objects
 * @set_phys_id: Identify the physical devices, e.g. by flashing an LED
 *	attached to it.  The implementation may update the indicator
 *	asynchronously or synchronously, but in either case it must return
 *	quickly.  It is initially called with the argument %ETHTOOL_ID_ACTIVE,
 *	and must either activate asynchronous updates and return zero, return
 *	a negative error or return a positive frequency for synchronous
 *	indication (e.g. 1 for one on/off cycle per second).  If it returns
 *	a frequency then it will be called again at intervals with the
 *	argument %ETHTOOL_ID_ON or %ETHTOOL_ID_OFF and should set the state of
 *	the indicator accordingly.  Finally, it is called with the argument
 *	%ETHTOOL_ID_INACTIVE and must deactivate the indicator.  Returns a
 *	negative error code or zero.
 * @get_ethtool_stats: Return extended statistics about the device.
 *	This is only useful if the device maintains statistics not
 *	included in &amp;struct rtnl_link_stats64.
 * @begin: Function to be called before any other operation.  Returns a
 *	negative error code or zero.
 * @complete: Function to be called after any other operation except
 *	@begin.  Will be called even if the other operation failed.
 * @get_priv_flags: Report driver-specific feature flags.
 * @set_priv_flags: Set driver-specific feature flags.  Returns a negative
 *	error code or zero.
 * @get_sset_count: Get number of strings that @get_strings will write.
 * @get_rxnfc: Get RX flow classification rules.  Returns a negative
 *	error code or zero.
 * @set_rxnfc: Set RX flow classification rules.  Returns a negative
 *	error code or zero.
 * @flash_device: Write a firmware image to device&apos;s flash memory.
 *	Returns a negative error code or zero.
 * @reset: Reset (part of) the device, as specified by a bitmask of
 *	flags from &amp;enum ethtool_reset_flags.  Returns a negative
 *	error code or zero.
 * @get_rxfh_key_size: Get the size of the RX flow hash key.
 *	Returns zero if not supported for this specific device.
 * @get_rxfh_indir_size: Get the size of the RX flow hash indirection table.
 *	Returns zero if not supported for this specific device.
 * @get_rxfh: Get the contents of the RX flow hash indirection table, hash key
 *	and/or hash function.
 *	Returns a negative error code or zero.
 * @set_rxfh: Set the contents of the RX flow hash indirection table, hash
 *	key, and/or hash function.  Arguments which are set to %NULL or zero
 *	will remain unchanged.
 *	Returns a negative error code or zero. An error code must be returned
 *	if at least one unsupported change was requested.
 * @get_channels: Get number of channels.
 * @set_channels: Set number of channels.  Returns a negative error code or
 *	zero.
 * @get_dump_flag: Get dump flag indicating current dump length, version,
 * 		   and flag of the device.
 * @get_dump_data: Get dump data.
 * @set_dump: Set dump specific flags to the device.
 * @get_ts_info: Get the time stamping and PTP hardware clock capabilities.
 *	Drivers supporting transmit time stamps in software should set this to
 *	ethtool_op_get_ts_info().
 * @get_module_info: Get the size and type of the eeprom contained within
 *	a plug-in module.
 * @get_module_eeprom: Get the eeprom information from the plug-in module
 * @get_eee: Get Energy-Efficient (EEE) supported and status.
 * @set_eee: Set EEE status (enable/disable) as well as LPI timers.
 * @get_per_queue_coalesce: Get interrupt coalescing parameters per queue.
 *	It must check that the given queue number is valid. If neither a RX nor
 *	a TX queue has this number, return -EINVAL. If only a RX queue or a TX
 *	queue has this number, set the inapplicable fields to ~0 and return 0.
 *	Returns a negative error code or zero.
 * @set_per_queue_coalesce: Set interrupt coalescing parameters per queue.
 *	It must check that the given queue number is valid. If neither a RX nor
 *	a TX queue has this number, return -EINVAL. If only a RX queue or a TX
 *	queue has this number, ignore the inapplicable fields.
 *	Returns a negative error code or zero.
 * @get_link_ksettings: When defined, takes precedence over the
 *	%get_settings method. Get various device settings
 *	including Ethernet link settings. The %cmd and
 *	%link_mode_masks_nwords fields should be ignored (use
 *	%__ETHTOOL_LINK_MODE_MASK_NBITS instead of the latter), any
 *	change to them will be overwritten by kernel. Returns a
 *	negative error code or zero.
 * @set_link_ksettings: When defined, takes precedence over the
 *	%set_settings method. Set various device settings including
 *	Ethernet link settings. The %cmd and %link_mode_masks_nwords
 *	fields should be ignored (use %__ETHTOOL_LINK_MODE_MASK_NBITS
 *	instead of the latter), any change to them will be overwritten
 *	by kernel. Returns a negative error code or zero.
 * @get_fecparam: Get the network device Forward Error Correction parameters.
 * @set_fecparam: Set the network device Forward Error Correction parameters.
 *
 * All operations are optional (i.e. the function pointer may be set
 * to %NULL) and callers must take this into account.  Callers must
 * hold the RTNL lock.
 *
 * See the structures used by these operations for further documentation.
 * Note that for all operations using a structure ending with a zero-
 * length array, the array is allocated separately in the kernel and
 * is passed to the driver as an additional parameter.
 *
 * See &amp;struct net_device and &amp;struct net_device_ops for documentation
 * of the generic netdev features interface.
 */</doc>
<mbr r='ethtool_ops::get_settings' o='0' t='int (*)(struct net_device *, struct ethtool_cmd *)'/>
<mbr r='ethtool_ops::set_settings' o='64' t='int (*)(struct net_device *, struct ethtool_cmd *)'/>
<mbr r='ethtool_ops::get_drvinfo' o='128' t='void (*)(struct net_device *, struct ethtool_drvinfo *)'/>
<mbr r='ethtool_ops::get_regs_len' o='192' t='int (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_regs' o='256' t='void (*)(struct net_device *, struct ethtool_regs *, void *)'/>
<mbr r='ethtool_ops::get_wol' o='320' t='void (*)(struct net_device *, struct ethtool_wolinfo *)'/>
<mbr r='ethtool_ops::set_wol' o='384' t='int (*)(struct net_device *, struct ethtool_wolinfo *)'/>
<mbr r='ethtool_ops::get_msglevel' o='448' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::set_msglevel' o='512' t='void (*)(struct net_device *, u32)'/>
<mbr r='ethtool_ops::nway_reset' o='576' t='int (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_link' o='640' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_eeprom_len' o='704' t='int (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_eeprom' o='768' t='int (*)(struct net_device *, struct ethtool_eeprom *, u8 *)'/>
<mbr r='ethtool_ops::set_eeprom' o='832' t='int (*)(struct net_device *, struct ethtool_eeprom *, u8 *)'/>
<mbr r='ethtool_ops::get_coalesce' o='896' t='int (*)(struct net_device *, struct ethtool_coalesce *)'/>
<mbr r='ethtool_ops::set_coalesce' o='960' t='int (*)(struct net_device *, struct ethtool_coalesce *)'/>
<mbr r='ethtool_ops::get_ringparam' o='1024' t='void (*)(struct net_device *, struct ethtool_ringparam *)'/>
<mbr r='ethtool_ops::set_ringparam' o='1088' t='int (*)(struct net_device *, struct ethtool_ringparam *)'/>
<mbr r='ethtool_ops::get_pauseparam' o='1152' t='void (*)(struct net_device *, struct ethtool_pauseparam *)'/>
<mbr r='ethtool_ops::set_pauseparam' o='1216' t='int (*)(struct net_device *, struct ethtool_pauseparam *)'/>
<mbr r='ethtool_ops::self_test' o='1280' t='void (*)(struct net_device *, struct ethtool_test *, u64 *)'/>
<mbr r='ethtool_ops::get_strings' o='1344' t='void (*)(struct net_device *, u32, u8 *)'/>
<mbr r='ethtool_ops::set_phys_id' o='1408' t='int (*)(struct net_device *, enum ethtool_phys_id_state)'/>
<mbr r='ethtool_ops::get_ethtool_stats' o='1472' t='void (*)(struct net_device *, struct ethtool_stats *, u64 *)'/>
<mbr r='ethtool_ops::begin' o='1536' t='int (*)(struct net_device *)'/>
<mbr r='ethtool_ops::complete' o='1600' t='void (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_priv_flags' o='1664' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::set_priv_flags' o='1728' t='int (*)(struct net_device *, u32)'/>
<mbr r='ethtool_ops::get_sset_count' o='1792' t='int (*)(struct net_device *, int)'/>
<mbr r='ethtool_ops::get_rxnfc' o='1856' t='int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *)'/>
<mbr r='ethtool_ops::set_rxnfc' o='1920' t='int (*)(struct net_device *, struct ethtool_rxnfc *)'/>
<mbr r='ethtool_ops::flash_device' o='1984' t='int (*)(struct net_device *, struct ethtool_flash *)'/>
<mbr r='ethtool_ops::reset' o='2048' t='int (*)(struct net_device *, u32 *)'/>
<mbr r='ethtool_ops::get_rxfh_key_size' o='2112' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_rxfh_indir_size' o='2176' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_rxfh' o='2240' t='int (*)(struct net_device *, u32 *, u8 *, u8 *)'/>
<mbr r='ethtool_ops::set_rxfh' o='2304' t='int (*)(struct net_device *, const u32 *, const u8 *, const u8)'/>
<mbr r='ethtool_ops::get_channels' o='2368' t='void (*)(struct net_device *, struct ethtool_channels *)'/>
<mbr r='ethtool_ops::set_channels' o='2432' t='int (*)(struct net_device *, struct ethtool_channels *)'/>
<mbr r='ethtool_ops::get_dump_flag' o='2496' t='int (*)(struct net_device *, struct ethtool_dump *)'/>
<mbr r='ethtool_ops::get_dump_data' o='2560' t='int (*)(struct net_device *, struct ethtool_dump *, void *)'/>
<mbr r='ethtool_ops::set_dump' o='2624' t='int (*)(struct net_device *, struct ethtool_dump *)'/>
<mbr r='ethtool_ops::get_ts_info' o='2688' t='int (*)(struct net_device *, struct ethtool_ts_info *)'/>
<mbr r='ethtool_ops::get_module_info' o='2752' t='int (*)(struct net_device *, struct ethtool_modinfo *)'/>
<mbr r='ethtool_ops::get_module_eeprom' o='2816' t='int (*)(struct net_device *, struct ethtool_eeprom *, u8 *)'/>
<mbr r='ethtool_ops::get_eee' o='2880' t='int (*)(struct net_device *, struct ethtool_eee *)'/>
<mbr r='ethtool_ops::set_eee' o='2944' t='int (*)(struct net_device *, struct ethtool_eee *)'/>
<mbr r='ethtool_ops::get_tunable' o='3008' t='int (*)(struct net_device *, const struct ethtool_tunable *, void *)'/>
<mbr r='ethtool_ops::set_tunable' o='3072' t='int (*)(struct net_device *, const struct ethtool_tunable *, const void *)'/>
<mbr r='ethtool_ops::get_per_queue_coalesce' o='3136' t='int (*)(struct net_device *, u32, struct ethtool_coalesce *)'/>
<mbr r='ethtool_ops::set_per_queue_coalesce' o='3200' t='int (*)(struct net_device *, u32, struct ethtool_coalesce *)'/>
<mbr r='ethtool_ops::get_link_ksettings' o='3264' t='int (*)(struct net_device *, struct ethtool_link_ksettings *)'/>
<mbr r='ethtool_ops::set_link_ksettings' o='3328' t='int (*)(struct net_device *, const struct ethtool_link_ksettings *)'/>
<mbr r='ethtool_ops::get_fecparam' o='3392' t='int (*)(struct net_device *, struct ethtool_fecparam *)'/>
<mbr r='ethtool_ops::set_fecparam' o='3456' t='int (*)(struct net_device *, struct ethtool_fecparam *)'/>
<def f='linux-4.14.y/include/linux/ethtool.h' l='318' ll='395'/>
<size>440</size>
<doc f='linux-4.14.y/include/linux/ethtool.h' l='174'>/**
 * struct ethtool_ops - optional netdev operations
 * @get_settings: DEPRECATED, use %get_link_ksettings/%set_link_ksettings
 *	API. Get various device settings including Ethernet link
 *	settings. The @cmd parameter is expected to have been cleared
 *	before get_settings is called. Returns a negative error code
 *	or zero.
 * @set_settings: DEPRECATED, use %get_link_ksettings/%set_link_ksettings
 *	API. Set various device settings including Ethernet link
 *	settings.  Returns a negative error code or zero.
 * @get_drvinfo: Report driver/device information.  Should only set the
 *	@driver, @version, @fw_version and @bus_info fields.  If not
 *	implemented, the @driver and @bus_info fields will be filled in
 *	according to the netdev&apos;s parent device.
 * @get_regs_len: Get buffer length required for @get_regs
 * @get_regs: Get device registers
 * @get_wol: Report whether Wake-on-Lan is enabled
 * @set_wol: Turn Wake-on-Lan on or off.  Returns a negative error code
 *	or zero.
 * @get_msglevel: Report driver message level.  This should be the value
 *	of the @msg_enable field used by netif logging functions.
 * @set_msglevel: Set driver message level
 * @nway_reset: Restart autonegotiation.  Returns a negative error code
 *	or zero.
 * @get_link: Report whether physical link is up.  Will only be called if
 *	the netdev is up.  Should usually be set to ethtool_op_get_link(),
 *	which uses netif_carrier_ok().
 * @get_eeprom: Read data from the device EEPROM.
 *	Should fill in the magic field.  Don&apos;t need to check len for zero
 *	or wraparound.  Fill in the data argument with the eeprom values
 *	from offset to offset + len.  Update len to the amount read.
 *	Returns an error or zero.
 * @set_eeprom: Write data to the device EEPROM.
 *	Should validate the magic field.  Don&apos;t need to check len for zero
 *	or wraparound.  Update len to the amount written.  Returns an error
 *	or zero.
 * @get_coalesce: Get interrupt coalescing parameters.  Returns a negative
 *	error code or zero.
 * @set_coalesce: Set interrupt coalescing parameters.  Returns a negative
 *	error code or zero.
 * @get_ringparam: Report ring sizes
 * @set_ringparam: Set ring sizes.  Returns a negative error code or zero.
 * @get_pauseparam: Report pause parameters
 * @set_pauseparam: Set pause parameters.  Returns a negative error code
 *	or zero.
 * @self_test: Run specified self-tests
 * @get_strings: Return a set of strings that describe the requested objects
 * @set_phys_id: Identify the physical devices, e.g. by flashing an LED
 *	attached to it.  The implementation may update the indicator
 *	asynchronously or synchronously, but in either case it must return
 *	quickly.  It is initially called with the argument %ETHTOOL_ID_ACTIVE,
 *	and must either activate asynchronous updates and return zero, return
 *	a negative error or return a positive frequency for synchronous
 *	indication (e.g. 1 for one on/off cycle per second).  If it returns
 *	a frequency then it will be called again at intervals with the
 *	argument %ETHTOOL_ID_ON or %ETHTOOL_ID_OFF and should set the state of
 *	the indicator accordingly.  Finally, it is called with the argument
 *	%ETHTOOL_ID_INACTIVE and must deactivate the indicator.  Returns a
 *	negative error code or zero.
 * @get_ethtool_stats: Return extended statistics about the device.
 *	This is only useful if the device maintains statistics not
 *	included in &amp;struct rtnl_link_stats64.
 * @begin: Function to be called before any other operation.  Returns a
 *	negative error code or zero.
 * @complete: Function to be called after any other operation except
 *	@begin.  Will be called even if the other operation failed.
 * @get_priv_flags: Report driver-specific feature flags.
 * @set_priv_flags: Set driver-specific feature flags.  Returns a negative
 *	error code or zero.
 * @get_sset_count: Get number of strings that @get_strings will write.
 * @get_rxnfc: Get RX flow classification rules.  Returns a negative
 *	error code or zero.
 * @set_rxnfc: Set RX flow classification rules.  Returns a negative
 *	error code or zero.
 * @flash_device: Write a firmware image to device&apos;s flash memory.
 *	Returns a negative error code or zero.
 * @reset: Reset (part of) the device, as specified by a bitmask of
 *	flags from &amp;enum ethtool_reset_flags.  Returns a negative
 *	error code or zero.
 * @get_rxfh_key_size: Get the size of the RX flow hash key.
 *	Returns zero if not supported for this specific device.
 * @get_rxfh_indir_size: Get the size of the RX flow hash indirection table.
 *	Returns zero if not supported for this specific device.
 * @get_rxfh: Get the contents of the RX flow hash indirection table, hash key
 *	and/or hash function.
 *	Returns a negative error code or zero.
 * @set_rxfh: Set the contents of the RX flow hash indirection table, hash
 *	key, and/or hash function.  Arguments which are set to %NULL or zero
 *	will remain unchanged.
 *	Returns a negative error code or zero. An error code must be returned
 *	if at least one unsupported change was requested.
 * @get_channels: Get number of channels.
 * @set_channels: Set number of channels.  Returns a negative error code or
 *	zero.
 * @get_dump_flag: Get dump flag indicating current dump length, version,
 * 		   and flag of the device.
 * @get_dump_data: Get dump data.
 * @set_dump: Set dump specific flags to the device.
 * @get_ts_info: Get the time stamping and PTP hardware clock capabilities.
 *	Drivers supporting transmit time stamps in software should set this to
 *	ethtool_op_get_ts_info().
 * @get_module_info: Get the size and type of the eeprom contained within
 *	a plug-in module.
 * @get_module_eeprom: Get the eeprom information from the plug-in module
 * @get_eee: Get Energy-Efficient (EEE) supported and status.
 * @set_eee: Set EEE status (enable/disable) as well as LPI timers.
 * @get_per_queue_coalesce: Get interrupt coalescing parameters per queue.
 *	It must check that the given queue number is valid. If neither a RX nor
 *	a TX queue has this number, return -EINVAL. If only a RX queue or a TX
 *	queue has this number, set the inapplicable fields to ~0 and return 0.
 *	Returns a negative error code or zero.
 * @set_per_queue_coalesce: Set interrupt coalescing parameters per queue.
 *	It must check that the given queue number is valid. If neither a RX nor
 *	a TX queue has this number, return -EINVAL. If only a RX queue or a TX
 *	queue has this number, ignore the inapplicable fields.
 *	Returns a negative error code or zero.
 * @get_link_ksettings: When defined, takes precedence over the
 *	%get_settings method. Get various device settings
 *	including Ethernet link settings. The %cmd and
 *	%link_mode_masks_nwords fields should be ignored (use
 *	%__ETHTOOL_LINK_MODE_MASK_NBITS instead of the latter), any
 *	change to them will be overwritten by kernel. Returns a
 *	negative error code or zero.
 * @set_link_ksettings: When defined, takes precedence over the
 *	%set_settings method. Set various device settings including
 *	Ethernet link settings. The %cmd and %link_mode_masks_nwords
 *	fields should be ignored (use %__ETHTOOL_LINK_MODE_MASK_NBITS
 *	instead of the latter), any change to them will be overwritten
 *	by kernel. Returns a negative error code or zero.
 * @get_fecparam: Get the network device Forward Error Correction parameters.
 * @set_fecparam: Set the network device Forward Error Correction parameters.
 *
 * All operations are optional (i.e. the function pointer may be set
 * to %NULL) and callers must take this into account.  Callers must
 * hold the RTNL lock.
 *
 * See the structures used by these operations for further documentation.
 * Note that for all operations using a structure ending with a zero-
 * length array, the array is allocated separately in the kernel and
 * is passed to the driver as an additional parameter.
 *
 * See &amp;struct net_device and &amp;struct net_device_ops for documentation
 * of the generic netdev features interface.
 */</doc>
<mbr r='ethtool_ops::get_settings' o='0' t='int (*)(struct net_device *, struct ethtool_cmd *)'/>
<mbr r='ethtool_ops::set_settings' o='64' t='int (*)(struct net_device *, struct ethtool_cmd *)'/>
<mbr r='ethtool_ops::get_drvinfo' o='128' t='void (*)(struct net_device *, struct ethtool_drvinfo *)'/>
<mbr r='ethtool_ops::get_regs_len' o='192' t='int (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_regs' o='256' t='void (*)(struct net_device *, struct ethtool_regs *, void *)'/>
<mbr r='ethtool_ops::get_wol' o='320' t='void (*)(struct net_device *, struct ethtool_wolinfo *)'/>
<mbr r='ethtool_ops::set_wol' o='384' t='int (*)(struct net_device *, struct ethtool_wolinfo *)'/>
<mbr r='ethtool_ops::get_msglevel' o='448' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::set_msglevel' o='512' t='void (*)(struct net_device *, u32)'/>
<mbr r='ethtool_ops::nway_reset' o='576' t='int (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_link' o='640' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_eeprom_len' o='704' t='int (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_eeprom' o='768' t='int (*)(struct net_device *, struct ethtool_eeprom *, u8 *)'/>
<mbr r='ethtool_ops::set_eeprom' o='832' t='int (*)(struct net_device *, struct ethtool_eeprom *, u8 *)'/>
<mbr r='ethtool_ops::get_coalesce' o='896' t='int (*)(struct net_device *, struct ethtool_coalesce *)'/>
<mbr r='ethtool_ops::set_coalesce' o='960' t='int (*)(struct net_device *, struct ethtool_coalesce *)'/>
<mbr r='ethtool_ops::get_ringparam' o='1024' t='void (*)(struct net_device *, struct ethtool_ringparam *)'/>
<mbr r='ethtool_ops::set_ringparam' o='1088' t='int (*)(struct net_device *, struct ethtool_ringparam *)'/>
<mbr r='ethtool_ops::get_pauseparam' o='1152' t='void (*)(struct net_device *, struct ethtool_pauseparam *)'/>
<mbr r='ethtool_ops::set_pauseparam' o='1216' t='int (*)(struct net_device *, struct ethtool_pauseparam *)'/>
<mbr r='ethtool_ops::self_test' o='1280' t='void (*)(struct net_device *, struct ethtool_test *, u64 *)'/>
<mbr r='ethtool_ops::get_strings' o='1344' t='void (*)(struct net_device *, u32, u8 *)'/>
<mbr r='ethtool_ops::set_phys_id' o='1408' t='int (*)(struct net_device *, enum ethtool_phys_id_state)'/>
<mbr r='ethtool_ops::get_ethtool_stats' o='1472' t='void (*)(struct net_device *, struct ethtool_stats *, u64 *)'/>
<mbr r='ethtool_ops::begin' o='1536' t='int (*)(struct net_device *)'/>
<mbr r='ethtool_ops::complete' o='1600' t='void (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_priv_flags' o='1664' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::set_priv_flags' o='1728' t='int (*)(struct net_device *, u32)'/>
<mbr r='ethtool_ops::get_sset_count' o='1792' t='int (*)(struct net_device *, int)'/>
<mbr r='ethtool_ops::get_rxnfc' o='1856' t='int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *)'/>
<mbr r='ethtool_ops::set_rxnfc' o='1920' t='int (*)(struct net_device *, struct ethtool_rxnfc *)'/>
<mbr r='ethtool_ops::flash_device' o='1984' t='int (*)(struct net_device *, struct ethtool_flash *)'/>
<mbr r='ethtool_ops::reset' o='2048' t='int (*)(struct net_device *, u32 *)'/>
<mbr r='ethtool_ops::get_rxfh_key_size' o='2112' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_rxfh_indir_size' o='2176' t='u32 (*)(struct net_device *)'/>
<mbr r='ethtool_ops::get_rxfh' o='2240' t='int (*)(struct net_device *, u32 *, u8 *, u8 *)'/>
<mbr r='ethtool_ops::set_rxfh' o='2304' t='int (*)(struct net_device *, const u32 *, const u8 *, const u8)'/>
<mbr r='ethtool_ops::get_channels' o='2368' t='void (*)(struct net_device *, struct ethtool_channels *)'/>
<mbr r='ethtool_ops::set_channels' o='2432' t='int (*)(struct net_device *, struct ethtool_channels *)'/>
<mbr r='ethtool_ops::get_dump_flag' o='2496' t='int (*)(struct net_device *, struct ethtool_dump *)'/>
<mbr r='ethtool_ops::get_dump_data' o='2560' t='int (*)(struct net_device *, struct ethtool_dump *, void *)'/>
<mbr r='ethtool_ops::set_dump' o='2624' t='int (*)(struct net_device *, struct ethtool_dump *)'/>
<mbr r='ethtool_ops::get_ts_info' o='2688' t='int (*)(struct net_device *, struct ethtool_ts_info *)'/>
<mbr r='ethtool_ops::get_module_info' o='2752' t='int (*)(struct net_device *, struct ethtool_modinfo *)'/>
<mbr r='ethtool_ops::get_module_eeprom' o='2816' t='int (*)(struct net_device *, struct ethtool_eeprom *, u8 *)'/>
<mbr r='ethtool_ops::get_eee' o='2880' t='int (*)(struct net_device *, struct ethtool_eee *)'/>
<mbr r='ethtool_ops::set_eee' o='2944' t='int (*)(struct net_device *, struct ethtool_eee *)'/>
<mbr r='ethtool_ops::get_tunable' o='3008' t='int (*)(struct net_device *, const struct ethtool_tunable *, void *)'/>
<mbr r='ethtool_ops::set_tunable' o='3072' t='int (*)(struct net_device *, const struct ethtool_tunable *, const void *)'/>
<mbr r='ethtool_ops::get_per_queue_coalesce' o='3136' t='int (*)(struct net_device *, u32, struct ethtool_coalesce *)'/>
<mbr r='ethtool_ops::set_per_queue_coalesce' o='3200' t='int (*)(struct net_device *, u32, struct ethtool_coalesce *)'/>
<mbr r='ethtool_ops::get_link_ksettings' o='3264' t='int (*)(struct net_device *, struct ethtool_link_ksettings *)'/>
<mbr r='ethtool_ops::set_link_ksettings' o='3328' t='int (*)(struct net_device *, const struct ethtool_link_ksettings *)'/>
<mbr r='ethtool_ops::get_fecparam' o='3392' t='int (*)(struct net_device *, struct ethtool_fecparam *)'/>
<mbr r='ethtool_ops::set_fecparam' o='3456' t='int (*)(struct net_device *, struct ethtool_fecparam *)'/>
