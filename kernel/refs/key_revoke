<dec f='linux-4.18.y/include/linux/key.h' l='253' type='void key_revoke(struct key * key)'/>
<use f='linux-4.18.y/security/keys/key.c' l='461' u='c' c='__key_instantiate_and_link'/>
<use f='linux-4.18.y/security/keys/key.c' l='609' u='c' c='key_reject_and_link'/>
<def f='linux-4.18.y/security/keys/key.c' l='1023' ll='1047' type='void key_revoke(struct key * key)'/>
<dec f='linux-4.18.y/security/keys/key.c' l='1048' type='void key_revoke(struct key * )'/>
<use f='linux-4.18.y/security/keys/key.c' l='1048' c='key_revoke'/>
<use f='linux-4.18.y/security/keys/key.c' l='1048' u='a'/>
<use f='linux-4.18.y/security/keys/key.c' l='1048' u='a'/>
<doc f='linux-4.18.y/security/keys/key.c' l='1014'>/**
 * key_revoke - Revoke a key.
 * @key: The key to be revoked.
 *
 * Mark a key as being revoked and ask the type to free up its resources.  The
 * revocation timeout is set and the key and all its links will be
 * automatically garbage collected after key_gc_delay amount of time if they
 * are not manually dealt with first.
 */</doc>
<use f='linux-4.18.y/security/keys/keyctl.c' l='393' u='c' c='keyctl_revoke_key'/>
<use f='linux-4.18.y/security/keys/request_key.c' l='41' u='c' c='complete_request_key'/>
