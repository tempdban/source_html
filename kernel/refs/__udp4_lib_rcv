<dec f='linux-4.14.y/net/ipv4/udp_impl.h' l='9' type='int __udp4_lib_rcv(struct sk_buff * , struct udp_table * , int )'/>
<def f='linux-4.14.y/net/ipv4/udp.c' l='2056' ll='2170' type='int __udp4_lib_rcv(struct sk_buff * skb, struct udp_table * udptable, int proto)'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='2298' u='c' c='udp_rcv'/>
<doc f='linux-4.14.y/net/ipv4/udp.c' l='2052'>/*
 *	All we need to do is get the socket, and then do a checksum.
 */</doc>
<use f='linux-4.14.y/net/ipv4/udplite.c' l='24' u='c' c='udplite_rcv'/>
<dec f='linux-4.14.y/net/ipv4/udp_impl.h' l='9' type='int __udp4_lib_rcv(struct sk_buff * , struct udp_table * , int )'/>
<def f='linux-4.14.y/net/ipv4/udp.c' l='2056' ll='2170' type='int __udp4_lib_rcv(struct sk_buff * skb, struct udp_table * udptable, int proto)'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='2298' u='c' c='udp_rcv'/>
<doc f='linux-4.14.y/net/ipv4/udp.c' l='2052'>/*
 *	All we need to do is get the socket, and then do a checksum.
 */</doc>
<use f='linux-4.14.y/net/ipv4/udplite.c' l='24' u='c' c='udplite_rcv'/>
