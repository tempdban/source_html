<dec f='linux-4.18.y/include/linux/usb/composite.h' l='516' type='int usb_string_id(struct usb_composite_dev * c)'/>
<def f='linux-4.18.y/drivers/usb/gadget/composite.c' l='1165' ll='1175' type='int usb_string_id(struct usb_composite_dev * cdev)'/>
<dec f='linux-4.18.y/drivers/usb/gadget/composite.c' l='1176' type='int usb_string_id(struct usb_composite_dev * )'/>
<use f='linux-4.18.y/drivers/usb/gadget/composite.c' l='1176' c='usb_string_id'/>
<use f='linux-4.18.y/drivers/usb/gadget/composite.c' l='1176' u='a'/>
<use f='linux-4.18.y/drivers/usb/gadget/composite.c' l='1176' u='a'/>
<doc f='linux-4.18.y/drivers/usb/gadget/composite.c' l='1151'>/**
 * usb_string_id() - allocate an unused string ID
 * @cdev: the device whose string descriptor IDs are being allocated
 * Context: single threaded during gadget setup
 *
 * @usb_string_id() is called from bind() callbacks to allocate
 * string IDs.  Drivers for functions, configurations, or gadgets will
 * then store that ID in the appropriate descriptors and string table.
 *
 * All string identifier should be allocated using this,
 * @usb_string_ids_tab() or @usb_string_ids_n() routine, to ensure
 * that for example different functions don&apos;t wrongly assign different
 * meanings to the same identifier.
 */</doc>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_loopback.c' l='179' u='c' c='loopback_bind'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_serial.c' l='199' u='c' c='gser_bind'/>
