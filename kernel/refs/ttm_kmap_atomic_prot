<dec f='linux-4.18.y/include/drm/ttm/ttm_bo_api.h' l='712' type='void * ttm_kmap_atomic_prot(struct page * page, pgprot_t prot)'/>
<def f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='287' ll='293' type='void * ttm_kmap_atomic_prot(struct page * page, pgprot_t prot)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='294' type='void * ttm_kmap_atomic_prot(struct page * , pgprot_t )'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='294' c='ttm_kmap_atomic_prot'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='294' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='294' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='323' u='c' c='ttm_copy_io_ttm_page'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='345' u='c' c='ttm_copy_ttm_io_page'/>
<doc f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='273'>/**
 * ttm_kmap_atomic_prot - Efficient kernel map of a single page with
 * specified page protection.
 *
 * @page: The page to map.
 * @prot: The page protection.
 *
 * This function maps a TTM page using the kmap_atomic api if available,
 * otherwise falls back to vmap. The user must make sure that the
 * specified page does not have an aliased mapping with a different caching
 * policy unless the architecture explicitly allows it. Also mapping and
 * unmapping using this api must be correctly nested. Unmapping should
 * occur in the reverse order of mapping.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_blit.c' l='390' u='c' c='vmw_bo_cpu_blit_line'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_blit.c' l='403' u='c' c='vmw_bo_cpu_blit_line'/>
