<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h' l='292' type='int vmw_kms_helper_buffer_prepare(struct vmw_private * dev_priv, struct vmw_dma_buffer * buf, bool interruptible, bool validate_as_mob)'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2449' ll='2464' type='int vmw_kms_helper_buffer_prepare(struct vmw_private * dev_priv, struct vmw_dma_buffer * buf, bool interruptible, bool validate_as_mob)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2576' u='c' c='vmw_kms_helper_resource_prepare'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2435'>/**
 * vmw_kms_helper_buffer_prepare - Reserve and validate a buffer object before
 * command submission.
 *
 * @dev_priv. Pointer to a device private structure.
 * @buf: The buffer object
 * @interruptible: Whether to perform waits as interruptible.
 * @validate_as_mob: Whether the buffer should be validated as a MOB. If false,
 * The buffer will be validated as a GMR. Already pinned buffers will not be
 * validated.
 *
 * Returns 0 on success, negative error code on failure, -ERESTARTSYS if
 * interrupted by a signal.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c' l='1031' u='c' c='vmw_kms_sou_do_dmabuf_dirty'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c' l='1127' u='c' c='vmw_kms_sou_readback'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_stdu.c' l='828' u='c' c='vmw_kms_stdu_dma'/>
