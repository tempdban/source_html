<dec f='linux-4.14.y/include/linux/pci.h' l='954' type='struct pci_dev * pci_get_subsys(unsigned int vendor, unsigned int device, unsigned int ss_vendor, unsigned int ss_device, struct pci_dev * from)'/>
<use f='linux-4.14.y/drivers/acpi/acpi_processor.c' l='102' u='c' c='acpi_processor_errata_piix4'/>
<use f='linux-4.14.y/drivers/acpi/acpi_processor.c' l='119' u='c' c='acpi_processor_errata_piix4'/>
<use f='linux-4.14.y/drivers/acpi/acpi_processor.c' l='151' u='c' c='acpi_processor_errata'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_pci.c' l='315' u='c' c='drm_legacy_pci_init'/>
<use f='linux-4.14.y/drivers/gpu/vga/vgaarb.c' l='1421' u='c' c='vga_arb_device_init'/>
<def f='linux-4.14.y/drivers/pci/search.c' l='302' ll='314' type='struct pci_dev * pci_get_subsys(unsigned int vendor, unsigned int device, unsigned int ss_vendor, unsigned int ss_device, struct pci_dev * from)'/>
<dec f='linux-4.14.y/drivers/pci/search.c' l='315' type='struct pci_dev * pci_get_subsys(unsigned int , unsigned int , unsigned int , unsigned int , struct pci_dev * )'/>
<use f='linux-4.14.y/drivers/pci/search.c' l='315' c='pci_get_subsys'/>
<use f='linux-4.14.y/drivers/pci/search.c' l='315' u='a'/>
<use f='linux-4.14.y/drivers/pci/search.c' l='315' u='a'/>
<use f='linux-4.14.y/drivers/pci/search.c' l='334' u='c' c='pci_get_device'/>
<doc f='linux-4.14.y/drivers/pci/search.c' l='286'>/**
 * pci_get_subsys - begin or continue searching for a PCI device by vendor/subvendor/device/subdevice id
 * @vendor: PCI vendor id to match, or %PCI_ANY_ID to match all vendor ids
 * @device: PCI device id to match, or %PCI_ANY_ID to match all device ids
 * @ss_vendor: PCI subsystem vendor id to match, or %PCI_ANY_ID to match all vendor ids
 * @ss_device: PCI subsystem device id to match, or %PCI_ANY_ID to match all device ids
 * @from: Previous PCI device found in search, or %NULL for new search.
 *
 * Iterates through the list of known PCI devices.  If a PCI device is found
 * with a matching @vendor, @device, @ss_vendor and @ss_device, a pointer to its
 * device structure is returned, and the reference count to the device is
 * incremented.  Otherwise, %NULL is returned.  A new search is initiated by
 * passing %NULL as the @from argument.  Otherwise if @from is not %NULL,
 * searches continue from next device on the global list.
 * The reference count for @from is always decremented if it is not %NULL.
 */</doc>
