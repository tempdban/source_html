<dec f='linux-4.14.y/include/net/tcp.h' l='317' type='void sk_forced_mem_schedule(struct sock * sk, int size)'/>
<use f='linux-4.14.y/net/ipv4/tcp.c' l='861' u='c' c='sk_stream_alloc_skb'/>
<use f='linux-4.14.y/net/ipv4/tcp_fastopen.c' l='154' u='c' c='tcp_fastopen_add_skb'/>
<use f='linux-4.14.y/net/ipv4/tcp_input.c' l='4674' u='c' c='tcp_data_queue'/>
<def f='linux-4.14.y/net/ipv4/tcp_output.c' l='3025' ll='3037' type='void sk_forced_mem_schedule(struct sock * sk, int size)'/>
<use f='linux-4.14.y/net/ipv4/tcp_output.c' l='3075' u='c' c='tcp_send_fin'/>
<doc f='linux-4.14.y/net/ipv4/tcp_output.c' l='3018'>/* We allow to exceed memory limits for FIN packets to expedite
 * connection tear down and (memory) recovery.
 * Otherwise tcp_send_fin() could be tempted to either delay FIN
 * or even be forced to close flow without any FIN.
 * In general, we want to allow one skb per socket to avoid hangs
 * with edge trigger epoll()
 */</doc>
