<def f='linux-4.14.y/include/linux/vga_switcheroo.h' l='141' ll='145'/>
<size>24</size>
<doc f='linux-4.14.y/include/linux/vga_switcheroo.h' l='125'>/**
 * struct vga_switcheroo_client_ops - client callbacks
 * @set_gpu_state: do the equivalent of suspend/resume for the card.
 * 	Mandatory. This should not cut power to the discrete GPU,
 * 	which is the job of the handler
 * @reprobe: poll outputs.
 * 	Optional. This gets called after waking the GPU and switching
 * 	the outputs to it
 * @can_switch: check if the device is in a position to switch now.
 * 	Mandatory. The client should return false if a user space process
 * 	has one of its device files open
 *
 * Client callbacks. A client can be either a GPU or an audio device on a GPU.
 * The @set_gpu_state and @can_switch methods are mandatory, @reprobe may be
 * set to NULL. For audio clients, the @reprobe member is bogus.
 */</doc>
<mbr r='vga_switcheroo_client_ops::set_gpu_state' o='0' t='void (*)(struct pci_dev *, enum vga_switcheroo_state)'/>
<mbr r='vga_switcheroo_client_ops::reprobe' o='64' t='void (*)(struct pci_dev *)'/>
<mbr r='vga_switcheroo_client_ops::can_switch' o='128' t='bool (*)(struct pci_dev *)'/>
<def f='linux-4.14.y/include/linux/vga_switcheroo.h' l='141' ll='145'/>
<size>24</size>
<doc f='linux-4.14.y/include/linux/vga_switcheroo.h' l='125'>/**
 * struct vga_switcheroo_client_ops - client callbacks
 * @set_gpu_state: do the equivalent of suspend/resume for the card.
 * 	Mandatory. This should not cut power to the discrete GPU,
 * 	which is the job of the handler
 * @reprobe: poll outputs.
 * 	Optional. This gets called after waking the GPU and switching
 * 	the outputs to it
 * @can_switch: check if the device is in a position to switch now.
 * 	Mandatory. The client should return false if a user space process
 * 	has one of its device files open
 *
 * Client callbacks. A client can be either a GPU or an audio device on a GPU.
 * The @set_gpu_state and @can_switch methods are mandatory, @reprobe may be
 * set to NULL. For audio clients, the @reprobe member is bogus.
 */</doc>
<mbr r='vga_switcheroo_client_ops::set_gpu_state' o='0' t='void (*)(struct pci_dev *, enum vga_switcheroo_state)'/>
<mbr r='vga_switcheroo_client_ops::reprobe' o='64' t='void (*)(struct pci_dev *)'/>
<mbr r='vga_switcheroo_client_ops::can_switch' o='128' t='bool (*)(struct pci_dev *)'/>
