<def f='linux-4.18.y/include/linux/skbuff.h' l='1512' ll='1525' type='struct sk_buff * skb_share_check(struct sk_buff * skb, gfp_t pri)'/>
<doc f='linux-4.18.y/include/linux/skbuff.h' l='1499'>/**
 *	skb_share_check - check if buffer is shared and if so clone it
 *	@skb: buffer to check
 *	@pri: priority for memory allocation
 *
 *	If the buffer is shared the buffer is cloned and the old copy
 *	drops a reference. A new clone with a single reference is returned.
 *	If the buffer is not shared the original buffer is returned. When
 *	being called from interrupt status or with spinlocks held pri must
 *	be GFP_ATOMIC.
 *
 *	NULL is returned on a memory allocation failure.
 */</doc>
<use f='linux-4.18.y/drivers/net/bonding/bond_main.c' l='1162' u='c' c='bond_handle_frame'/>
<use f='linux-4.18.y/drivers/net/ipvlan/ipvlan_core.c' l='336' u='c' c='ipvlan_rcv_frame'/>
<use f='linux-4.18.y/drivers/net/ipvlan/ipvlan_core.c' l='614' u='c' c='ipvlan_xmit_mode_l2'/>
<use f='linux-4.18.y/drivers/net/macvlan.c' l='494' u='c' c='macvlan_handle_frame'/>
<use f='linux-4.18.y/net/bridge/br_input.c' l='224' u='c' c='br_handle_frame'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='5084' u='c' c='skb_vlan_untag'/>
<use f='linux-4.18.y/net/ipv4/arp.c' l='951' u='c' c='arp_rcv'/>
<use f='linux-4.18.y/net/ipv4/ip_fragment.c' l='658' u='c' c='ip_check_defrag'/>
<use f='linux-4.18.y/net/ipv4/ip_input.c' l='427' u='c' c='ip_rcv'/>
<use f='linux-4.18.y/net/llc/llc_input.c' l='176' u='c' c='llc_rcv'/>
<use f='linux-4.18.y/net/openvswitch/vport-netdev.c' l='56' u='c' c='netdev_port_receive'/>
<use f='linux-4.18.y/net/packet/af_packet.c' l='1816' u='c' c='packet_rcv_spkt'/>
