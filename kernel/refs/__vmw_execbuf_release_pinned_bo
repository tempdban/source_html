<dec f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='840' type='void __vmw_execbuf_release_pinned_bo(struct vmw_private * dev_priv, struct vmw_fence_obj * fence)'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_context.c' l='152' u='c' c='vmw_hw_context_destroy'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4239' u='c' c='vmw_execbuf_process'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4300' u='c' c='vmw_execbuf_process'/>
<def f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4371' ll='4436' type='void __vmw_execbuf_release_pinned_bo(struct vmw_private * dev_priv, struct vmw_fence_obj * fence)'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4460' u='c' c='vmw_execbuf_release_pinned_bo'/>
<doc f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4347'>/**
 * __vmw_execbuf_release_pinned_bo - Flush queries and unpin the pinned
 * query bo.
 *
 * @dev_priv: The device private structure.
 * @fence: If non-NULL should point to a struct vmw_fence_obj issued
 * _after_ a query barrier that flushes all queries touching the current
 * buffer pointed to by @dev_priv-&gt;pinned_bo
 *
 * This function should be used to unpin the pinned query bo, or
 * as a query barrier when we need to make sure that all queries have
 * finished before the next fifo command. (For example on hardware
 * context destructions where the hardware may otherwise leak unfinished
 * queries).
 *
 * This function does not return any failure codes, but make attempts
 * to do safe unpinning in case of errors.
 *
 * The function will synchronize on the previous query barrier, and will
 * thus not finish until that barrier has executed.
 *
 * the @dev_priv-&gt;cmdbuf_mutex needs to be held by the current thread
 * before calling this function.
 */</doc>
