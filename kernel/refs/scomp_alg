<def f='linux-4.14.y/include/crypto/internal/scompress.h' l='44' ll='54'/>
<size>448</size>
<doc f='linux-4.14.y/include/crypto/internal/scompress.h' l='24'>/**
 * struct scomp_alg - synchronous compression algorithm
 *
 * @alloc_ctx:	Function allocates algorithm specific context
 * @free_ctx:	Function frees context allocated with alloc_ctx
 * @compress:	Function performs a compress operation
 * @decompress:	Function performs a de-compress operation
 * @init:	Initialize the cryptographic transformation object.
 *		This function is used to initialize the cryptographic
 *		transformation object. This function is called only once at
 *		the instantiation time, right after the transformation context
 *		was allocated. In case the cryptographic hardware has some
 *		special requirements which need to be handled by software, this
 *		function shall check for the precise requirement of the
 *		transformation and put any software fallbacks in place.
 * @exit:	Deinitialize the cryptographic transformation object. This is a
 *		counterpart to @init, used to remove various changes set in
 *		@init.
 * @base:	Common crypto API algorithm data structure
 */</doc>
<mbr r='scomp_alg::alloc_ctx' o='0' t='void *(*)(struct crypto_scomp *)'/>
<mbr r='scomp_alg::free_ctx' o='64' t='void (*)(struct crypto_scomp *, void *)'/>
<mbr r='scomp_alg::compress' o='128' t='int (*)(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *)'/>
<mbr r='scomp_alg::decompress' o='192' t='int (*)(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *)'/>
<mbr r='scomp_alg::base' o='256' t='struct crypto_alg'/>
