<dec f='linux-4.18.y/include/linux/usb.h' l='1806' type='int usb_string(struct usb_device * dev, int index, char * buf, size_t size)'/>
<use f='linux-4.18.y/drivers/hid/usbhid/hid-core.c' l='1369' u='c' c='usbhid_probe'/>
<use f='linux-4.18.y/drivers/usb/core/hub.c' l='5474' u='c' c='descriptors_changed'/>
<def f='linux-4.18.y/drivers/usb/core/message.c' l='815' ll='850' type='int usb_string(struct usb_device * dev, int index, char * buf, size_t size)'/>
<dec f='linux-4.18.y/drivers/usb/core/message.c' l='851' type='int usb_string(struct usb_device * , int , char * , size_t )'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='851' c='usb_string'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='851' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='851' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/message.c' l='875' u='c' c='usb_cache_string'/>
<doc f='linux-4.18.y/drivers/usb/core/message.c' l='798'>/**
 * usb_string - returns UTF-8 version of a string descriptor
 * @dev: the device whose string descriptor is being retrieved
 * @index: the number of the descriptor
 * @buf: where to put the string
 * @size: how big is &quot;buf&quot;?
 * Context: !in_interrupt ()
 *
 * This converts the UTF-16LE encoded strings returned by devices, from
 * usb_get_string_descriptor(), to null-terminated UTF-8 encoded ones
 * that are more usable in most kernel contexts.  Note that this function
 * chooses strings in the first language supported by the device.
 *
 * This call is synchronous, and may not be used in an interrupt context.
 *
 * Return: length of the string (&gt;= 0) or usb_control_msg status (&lt; 0).
 */</doc>
<def f='linux-4.18.y/include/linux/usb/gadget.h' l='742' ll='745'/>
<size>16</size>
<doc f='linux-4.18.y/include/linux/usb/gadget.h' l='734'>/**
 * struct usb_string - wraps a C string and its USB id
 * @id:the (nonzero) ID for this string
 * @s:the string, in UTF-8 encoding
 *
 * If you&apos;re using usb_gadget_get_string(), use this to wrap a string
 * together with its ID.
 */</doc>
<mbr r='usb_string::id' o='0' t='u8'/>
<mbr r='usb_string::s' o='64' t='const char *'/>
