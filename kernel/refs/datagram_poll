<dec f='linux-4.14.y/include/linux/skbuff.h' l='3240' type='unsigned int datagram_poll(struct file * file, struct socket * sock, struct poll_table_struct * wait)'/>
<def f='linux-4.14.y/net/core/datagram.c' l='836' ll='875' type='unsigned int datagram_poll(struct file * file, struct socket * sock, poll_table * wait)'/>
<dec f='linux-4.14.y/net/core/datagram.c' l='876' type='unsigned int datagram_poll(struct file * , struct socket * , struct poll_table_struct * )'/>
<use f='linux-4.14.y/net/core/datagram.c' l='876' c='datagram_poll'/>
<use f='linux-4.14.y/net/core/datagram.c' l='876' u='a'/>
<use f='linux-4.14.y/net/core/datagram.c' l='876' u='a'/>
<doc f='linux-4.14.y/net/core/datagram.c' l='822'>/**
 * 	datagram_poll - generic datagram poll
 *	@file: file struct
 *	@sock: socket
 *	@wait: poll table
 *
 *	Datagram poll: Again totally generic. This also handles
 *	sequenced packet sockets providing the socket receive queue
 *	is only ever holding data ready to receive.
 *
 *	Note: when you *don&apos;t* use this routine for this protocol,
 *	and you use a different write policy from sock_writeable()
 *	then please supply your own write_space callback.
 */</doc>
<use f='linux-4.14.y/net/ipv4/af_inet.c' l='999'/>
<use f='linux-4.14.y/net/ipv4/af_inet.c' l='999'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='2516' u='c' c='udp_poll'/>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='2653'/>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='2653'/>
<use f='linux-4.14.y/net/packet/af_packet.c' l='4127' u='c' c='packet_poll'/>
<use f='linux-4.14.y/net/packet/af_packet.c' l='4469'/>
<use f='linux-4.14.y/net/packet/af_packet.c' l='4469'/>
<dec f='linux-4.14.y/include/linux/skbuff.h' l='3240' type='unsigned int datagram_poll(struct file * file, struct socket * sock, struct poll_table_struct * wait)'/>
<def f='linux-4.14.y/net/core/datagram.c' l='836' ll='875' type='unsigned int datagram_poll(struct file * file, struct socket * sock, poll_table * wait)'/>
<dec f='linux-4.14.y/net/core/datagram.c' l='876' type='unsigned int datagram_poll(struct file * , struct socket * , struct poll_table_struct * )'/>
<use f='linux-4.14.y/net/core/datagram.c' l='876' c='datagram_poll'/>
<use f='linux-4.14.y/net/core/datagram.c' l='876' u='a'/>
<use f='linux-4.14.y/net/core/datagram.c' l='876' u='a'/>
<doc f='linux-4.14.y/net/core/datagram.c' l='822'>/**
 * 	datagram_poll - generic datagram poll
 *	@file: file struct
 *	@sock: socket
 *	@wait: poll table
 *
 *	Datagram poll: Again totally generic. This also handles
 *	sequenced packet sockets providing the socket receive queue
 *	is only ever holding data ready to receive.
 *
 *	Note: when you *don&apos;t* use this routine for this protocol,
 *	and you use a different write policy from sock_writeable()
 *	then please supply your own write_space callback.
 */</doc>
<use f='linux-4.14.y/net/ipv4/af_inet.c' l='999'/>
<use f='linux-4.14.y/net/ipv4/af_inet.c' l='999'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='2516' u='c' c='udp_poll'/>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='2653'/>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='2653'/>
<use f='linux-4.14.y/net/packet/af_packet.c' l='4127' u='c' c='packet_poll'/>
<use f='linux-4.14.y/net/packet/af_packet.c' l='4469'/>
<use f='linux-4.14.y/net/packet/af_packet.c' l='4469'/>
