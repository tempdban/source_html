<dec f='linux-4.14.y/include/linux/intel-svm.h' l='118' type='int intel_svm_is_pasid_valid(struct device * dev, int pasid)'/>
<def f='linux-4.14.y/drivers/iommu/intel-svm.c' l='488' ll='515' type='int intel_svm_is_pasid_valid(struct device * dev, int pasid)'/>
<dec f='linux-4.14.y/drivers/iommu/intel-svm.c' l='516' type='int intel_svm_is_pasid_valid(struct device * , int )'/>
<use f='linux-4.14.y/drivers/iommu/intel-svm.c' l='516' c='intel_svm_is_pasid_valid'/>
<use f='linux-4.14.y/drivers/iommu/intel-svm.c' l='516' u='a'/>
<use f='linux-4.14.y/drivers/iommu/intel-svm.c' l='516' u='a'/>
<doc f='linux-4.14.y/include/linux/intel-svm.h' l='105'>/**
 * intel_svm_is_pasid_valid() - check if pasid is valid
 * @dev:	Device for which PASID was allocated
 * @pasid:	PASID value to be checked
 *
 * This function checks if the specified pasid is still valid. A
 * valid pasid means the backing mm is still having a valid user.
 * For kernel callers init_mm is always valid. for other mm, if mm-&gt;mm_users
 * is non-zero, it is valid.
 *
 * returns -EINVAL if invalid pasid, 0 if pasid ref count is invalid
 * 1 if pasid is valid.
 */</doc>
