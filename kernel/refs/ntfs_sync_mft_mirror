<dec f='linux-4.18.y/fs/ntfs/mft.h' l='79' type='int ntfs_sync_mft_mirror(ntfs_volume * vol, const unsigned long mft_no, MFT_RECORD * m, int sync)'/>
<use f='linux-4.18.y/fs/ntfs/aops.c' l='1256' u='c' c='ntfs_write_mst_block'/>
<def f='linux-4.18.y/fs/ntfs/mft.c' l='466' ll='637' type='int ntfs_sync_mft_mirror(ntfs_volume * vol, const unsigned long mft_no, MFT_RECORD * m, int sync)'/>
<use f='linux-4.18.y/fs/ntfs/mft.c' l='793' u='c' c='write_mft_record_nolock'/>
<use f='linux-4.18.y/fs/ntfs/mft.c' l='811' u='c' c='write_mft_record_nolock'/>
<doc f='linux-4.18.y/fs/ntfs/mft.c' l='448'>/**
 * ntfs_sync_mft_mirror - synchronize an mft record to the mft mirror
 * @vol:	ntfs volume on which the mft record to synchronize resides
 * @mft_no:	mft record number of mft record to synchronize
 * @m:		mapped, mst protected (extent) mft record to synchronize
 * @sync:	if true, wait for i/o completion
 *
 * Write the mapped, mst protected (extent) mft record @m with mft record
 * number @mft_no to the mft mirror ($MFTMirr) of the ntfs volume @vol.
 *
 * On success return 0.  On error return -errno and set the volume errors flag
 * in the ntfs volume @vol.
 *
 * NOTE:  We always perform synchronous i/o and ignore the @sync parameter.
 *
 * TODO:  If @sync is false, want to do truly asynchronous i/o, i.e. just
 * schedule i/o via -&gt;writepage or do it via kntfsd or whatever.
 */</doc>
