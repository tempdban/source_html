<dec f='linux-4.14.y/include/linux/skbuff.h' l='1838' type='void skb_unlink(struct sk_buff * skb, struct sk_buff_head * list)'/>
<doc f='linux-4.14.y/include/linux/skbuff.h' l='1834'>/*
 * remove sk_buff from list. _Must_ be called atomically, and with
 * the list known..
 */</doc>
<def f='linux-4.14.y/net/core/skbuff.c' l='2913' ll='2920' type='void skb_unlink(struct sk_buff * skb, struct sk_buff_head * list)'/>
<dec f='linux-4.14.y/net/core/skbuff.c' l='2921' type='void skb_unlink(struct sk_buff * , struct sk_buff_head * )'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='2921' c='skb_unlink'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='2921' u='a'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='2921' u='a'/>
<doc f='linux-4.14.y/net/core/skbuff.c' l='2903'>/**
 *	skb_unlink	-	remove a buffer from a list
 *	@skb: buffer to remove
 *	@list: list to use
 *
 *	Remove a packet from a list. The list locks are taken and this
 *	function is atomic with respect to other list locked calls
 *
 *	You must know what list the SKB is on.
 */</doc>
<use f='linux-4.14.y/net/unix/af_unix.c' l='2408' u='c' c='unix_stream_read_generic'/>
