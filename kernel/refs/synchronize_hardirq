<dec f='linux-4.14.y/include/linux/hardirq.h' l='13' type='bool synchronize_hardirq(unsigned int irq)'/>
<use f='linux-4.14.y/drivers/acpi/osl.c' l='1115' u='c' c='acpi_os_wait_events_complete'/>
<def f='linux-4.14.y/kernel/irq/manage.c' l='77' ll='87' type='bool synchronize_hardirq(unsigned int irq)'/>
<dec f='linux-4.14.y/kernel/irq/manage.c' l='88' type='bool synchronize_hardirq(unsigned int )'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='88' c='synchronize_hardirq'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='88' u='a'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='88' u='a'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='513' u='c' c='disable_hardirq'/>
<doc f='linux-4.14.y/kernel/irq/manage.c' l='60'>/**
 *	synchronize_hardirq - wait for pending hard IRQ handlers (on other CPUs)
 *	@irq: interrupt number to wait for
 *
 *	This function waits for any pending hard IRQ handlers for this
 *	interrupt to complete before returning. If you use this
 *	function while holding a resource the IRQ handler may need you
 *	will deadlock. It does not take associated threaded handlers
 *	into account.
 *
 *	Do not use this for shutdown scenarios where you must be sure
 *	that all parts (hardirq and threaded handler) have completed.
 *
 *	Returns: false if a threaded handler is active.
 *
 *	This function may be called - with care - from IRQ context.
 */</doc>
<dec f='linux-4.14.y/include/linux/hardirq.h' l='13' type='bool synchronize_hardirq(unsigned int irq)'/>
<use f='linux-4.14.y/drivers/acpi/osl.c' l='1115' u='c' c='acpi_os_wait_events_complete'/>
<def f='linux-4.14.y/kernel/irq/manage.c' l='77' ll='87' type='bool synchronize_hardirq(unsigned int irq)'/>
<dec f='linux-4.14.y/kernel/irq/manage.c' l='88' type='bool synchronize_hardirq(unsigned int )'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='88' c='synchronize_hardirq'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='88' u='a'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='88' u='a'/>
<use f='linux-4.14.y/kernel/irq/manage.c' l='513' u='c' c='disable_hardirq'/>
<doc f='linux-4.14.y/kernel/irq/manage.c' l='60'>/**
 *	synchronize_hardirq - wait for pending hard IRQ handlers (on other CPUs)
 *	@irq: interrupt number to wait for
 *
 *	This function waits for any pending hard IRQ handlers for this
 *	interrupt to complete before returning. If you use this
 *	function while holding a resource the IRQ handler may need you
 *	will deadlock. It does not take associated threaded handlers
 *	into account.
 *
 *	Do not use this for shutdown scenarios where you must be sure
 *	that all parts (hardirq and threaded handler) have completed.
 *
 *	Returns: false if a threaded handler is active.
 *
 *	This function may be called - with care - from IRQ context.
 */</doc>
