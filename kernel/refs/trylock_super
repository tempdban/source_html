<dec f='linux-4.18.y/fs/internal.h' l='102' type='bool trylock_super(struct super_block * sb)'/>
<use f='linux-4.18.y/fs/fs-writeback.c' l='1647' u='c' c='__writeback_inodes_wb'/>
<use f='linux-4.18.y/fs/super.c' l='77' u='c' c='super_cache_scan'/>
<def f='linux-4.18.y/fs/super.c' l='407' ll='417' type='bool trylock_super(struct super_block * sb)'/>
<doc f='linux-4.18.y/fs/super.c' l='390'>/*
 *	trylock_super - try to grab -&gt;s_umount shared
 *	@sb: reference we are trying to grab
 *
 *	Try to prevent fs shutdown.  This is used in places where we
 *	cannot take an active reference but we need to ensure that the
 *	filesystem is not shut down while we are working on it. It returns
 *	false if we cannot acquire s_umount or if we lose the race and
 *	filesystem already got into shutdown, and returns true with the s_umount
 *	lock held in read mode in case of success. On successful return,
 *	the caller must drop the s_umount lock when done.
 *
 *	Note that unlike get_super() et.al. this one does *not* bump -&gt;s_count.
 *	The reason why it&apos;s safe is that we are OK with doing trylock instead
 *	of down_read().  There&apos;s a couple of places that are OK with that, but
 *	it&apos;s very much not a general-purpose interface.
 */</doc>
