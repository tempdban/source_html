<dec f='linux-4.18.y/include/linux/buffer_head.h' l='199' type='void ll_rw_block(int , int , int , struct buffer_head ** bh)'/>
<use f='linux-4.18.y/fs/buffer.c' l='538' u='c' c='write_boundary_block'/>
<use f='linux-4.18.y/fs/buffer.c' l='1325' u='c' c='__breadahead'/>
<use f='linux-4.18.y/fs/buffer.c' l='1988' u='c' c='__block_write_begin_int'/>
<use f='linux-4.18.y/fs/buffer.c' l='2888' u='c' c='block_truncate_page'/>
<def f='linux-4.18.y/fs/buffer.c' l='3112' ll='3138' type='void ll_rw_block(int op, int op_flags, int nr, struct buffer_head ** bhs)'/>
<dec f='linux-4.18.y/fs/buffer.c' l='3139' type='void ll_rw_block(int , int , int , struct buffer_head ** )'/>
<use f='linux-4.18.y/fs/buffer.c' l='3139' c='ll_rw_block'/>
<use f='linux-4.18.y/fs/buffer.c' l='3139' u='a'/>
<use f='linux-4.18.y/fs/buffer.c' l='3139' u='a'/>
<doc f='linux-4.18.y/fs/buffer.c' l='3086'>/**
 * ll_rw_block: low-level access to block devices (DEPRECATED)
 * @op: whether to %READ or %WRITE
 * @op_flags: req_flag_bits
 * @nr: number of &amp;struct buffer_heads in the array
 * @bhs: array of pointers to &amp;struct buffer_head
 *
 * ll_rw_block() takes an array of pointers to &amp;struct buffer_heads, and
 * requests an I/O operation on them, either a %REQ_OP_READ or a %REQ_OP_WRITE.
 * @op_flags contains flags modifying the detailed I/O behavior, most notably
 * %REQ_RAHEAD.
 *
 * This function drops any buffer that it cannot get a lock on (with the
 * BH_Lock state bit), any buffer that appears to be clean when doing a write
 * request, and any buffer that appears to be up-to-date when doing read
 * request.  Further it marks as clean buffers that are processed for
 * writing (the buffer cache won&apos;t assume that they are actually clean
 * until the buffer gets unlocked).
 *
 * ll_rw_block sets b_end_io to simple completion handler that marks
 * the buffer up-to-date (if appropriate), unlocks the buffer and wakes
 * any waiters. 
 *
 * All of the buffers must be for the same device, and must also be a
 * multiple of the current approved size for the device.
 */</doc>
<use f='linux-4.18.y/fs/ext4/inode.c' l='1021' u='c' c='ext4_bread'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='1047' u='c' c='ext4_bread_batch'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='1218' u='c' c='ext4_block_write_begin'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='4030' u='c' c='__ext4_block_zero_page_range'/>
<use f='linux-4.18.y/fs/ext4/super.c' l='4677' u='c' c='ext4_get_dev_journal'/>
<use f='linux-4.18.y/fs/isofs/compress.c' l='90' u='c' c='zisofs_uncompress_block'/>
<use f='linux-4.18.y/fs/jbd2/journal.c' l='1517' u='c' c='journal_get_superblock'/>
<use f='linux-4.18.y/fs/jbd2/recovery.c' l='104' u='c' c='do_readahead'/>
<use f='linux-4.18.y/fs/jbd2/recovery.c' l='113' u='c' c='do_readahead'/>
<use f='linux-4.18.y/fs/udf/dir.c' l='117' u='c' c='udf_readdir'/>
<use f='linux-4.18.y/fs/udf/directory.c' l='92' u='c' c='udf_fileident_read'/>
<use f='linux-4.18.y/fs/udf/inode.c' l='1180' u='c' c='udf_bread'/>
