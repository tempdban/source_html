<dec f='linux-4.14.y/include/linux/debugfs.h' l='159' type='struct dentry * debugfs_create_u32_array(const char * name, umode_t mode, struct dentry * parent, u32 * array, u32 elements)'/>
<def f='linux-4.14.y/fs/debugfs/file.c' l='981' ll='995' type='struct dentry * debugfs_create_u32_array(const char * name, umode_t mode, struct dentry * parent, u32 * array, u32 elements)'/>
<dec f='linux-4.14.y/fs/debugfs/file.c' l='996' type='struct dentry * debugfs_create_u32_array(const char * , umode_t , struct dentry * , u32 * , u32 )'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='996' c='debugfs_create_u32_array'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='996' u='a'/>
<use f='linux-4.14.y/fs/debugfs/file.c' l='996' u='a'/>
<doc f='linux-4.14.y/fs/debugfs/file.c' l='962'>/**
 * debugfs_create_u32_array - create a debugfs file that is used to read u32
 * array.
 * @name: a pointer to a string containing the name of the file to create.
 * @mode: the permission that the file should have.
 * @parent: a pointer to the parent dentry for this file.  This should be a
 *          directory dentry if set.  If this parameter is %NULL, then the
 *          file will be created in the root of the debugfs filesystem.
 * @array: u32 array that provides data.
 * @elements: total number of elements in the array.
 *
 * This function creates a file in debugfs with the given name that exports
 * @array as data. If the @mode variable is so set it can be read from.
 * Writing is not supported. Seek within the file is also not supported.
 * Once array is created its size can not be changed.
 *
 * The function returns a pointer to dentry on success. If debugfs is not
 * enabled in the kernel, the value -%ENODEV will be returned.
 */</doc>
