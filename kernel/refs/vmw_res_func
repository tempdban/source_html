<def f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource_priv.h' l='70' ll='86'/>
<size>72</size>
<doc f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource_priv.h' l='52'>/**
 * struct vmw_res_func - members and functions common for a resource type
 *
 * @res_type:          Enum that identifies the lru list to use for eviction.
 * @needs_backup:      Whether the resource is guest-backed and needs
 *                     persistent buffer storage.
 * @type_name:         String that identifies the resource type.
 * @backup_placement:  TTM placement for backup buffers.
 * @may_evict          Whether the resource may be evicted.
 * @create:            Create a hardware resource.
 * @destroy:           Destroy a hardware resource.
 * @bind:              Bind a hardware resource to persistent buffer storage.
 * @unbind:            Unbind a hardware resource from persistent
 *                     buffer storage.
 * @commit_notify:     If the resource is a command buffer managed resource,
 *                     callback to notify that a define or remove command
 *                     has been committed to the device.
 */</doc>
<mbr r='vmw_res_func::res_type' o='0' t='enum vmw_res_type'/>
<mbr r='vmw_res_func::needs_backup' o='32' t='bool'/>
<mbr r='vmw_res_func::type_name' o='64' t='const char *'/>
<mbr r='vmw_res_func::backup_placement' o='128' t='struct ttm_placement *'/>
<mbr r='vmw_res_func::may_evict' o='192' t='bool'/>
<mbr r='vmw_res_func::create' o='256' t='int (*)(struct vmw_resource *)'/>
<mbr r='vmw_res_func::destroy' o='320' t='int (*)(struct vmw_resource *)'/>
<mbr r='vmw_res_func::bind' o='384' t='int (*)(struct vmw_resource *, struct ttm_validate_buffer *)'/>
<mbr r='vmw_res_func::unbind' o='448' t='int (*)(struct vmw_resource *, bool, struct ttm_validate_buffer *)'/>
<mbr r='vmw_res_func::commit_notify' o='512' t='void (*)(struct vmw_resource *, enum vmw_cmdbuf_res_state)'/>
