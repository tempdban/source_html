<dec f='linux-4.18.y/include/linux/debugfs.h' l='75' type='struct dentry * debugfs_create_symlink(const char * name, struct dentry * parent, const char * dest)'/>
<def f='linux-4.18.y/fs/debugfs/inode.c' l='590' ll='615' type='struct dentry * debugfs_create_symlink(const char * name, struct dentry * parent, const char * target)'/>
<dec f='linux-4.18.y/fs/debugfs/inode.c' l='616' type='struct dentry * debugfs_create_symlink(const char * , struct dentry * , const char * )'/>
<use f='linux-4.18.y/fs/debugfs/inode.c' l='616' c='debugfs_create_symlink'/>
<use f='linux-4.18.y/fs/debugfs/inode.c' l='616' u='a'/>
<use f='linux-4.18.y/fs/debugfs/inode.c' l='616' u='a'/>
<doc f='linux-4.18.y/fs/debugfs/inode.c' l='567'>/**
 * debugfs_create_symlink- create a symbolic link in the debugfs filesystem
 * @name: a pointer to a string containing the name of the symbolic link to
 *        create.
 * @parent: a pointer to the parent dentry for this symbolic link.  This
 *          should be a directory dentry if set.  If this parameter is NULL,
 *          then the symbolic link will be created in the root of the debugfs
 *          filesystem.
 * @target: a pointer to a string containing the path to the target of the
 *          symbolic link.
 *
 * This function creates a symbolic link with the given name in debugfs that
 * links to the given target path.
 *
 * This function will return a pointer to a dentry if it succeeds.  This
 * pointer must be passed to the debugfs_remove() function when the symbolic
 * link is to be removed (no automatic cleanup happens if your module is
 * unloaded, you are responsible here.)  If an error occurs, %NULL will be
 * returned.
 *
 * If debugfs is not enabled in the kernel, the value -%ENODEV will be
 * returned.
 */</doc>
