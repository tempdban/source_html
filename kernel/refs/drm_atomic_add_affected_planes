<dec f='linux-4.14.y/include/drm/drm_atomic.h' l='545' type='int drm_atomic_add_affected_planes(struct drm_atomic_state * state, struct drm_crtc * crtc)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1579' ll='1595' type='int drm_atomic_add_affected_planes(struct drm_atomic_state * state, struct drm_crtc * crtc)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1596' type='int drm_atomic_add_affected_planes(struct drm_atomic_state * , struct drm_crtc * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1596' c='drm_atomic_add_affected_planes'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1596' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1596' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1559'>/**
 * drm_atomic_add_affected_planes - add planes for crtc
 * @state: atomic state
 * @crtc: DRM crtc
 *
 * This function walks the current configuration and adds all planes
 * currently used by @crtc to the atomic configuration @state. This is useful
 * when an atomic commit also needs to check all currently enabled plane on
 * @crtc, e.g. when changing the mode. It&apos;s also useful when re-enabling a CRTC
 * to avoid special code to force-enable all planes.
 *
 * Since acquiring a plane state will always also acquire the w/w mutex of the
 * current CRTC for that plane (if there is any) adding all the plane states for
 * a CRTC will not reduce parallism of atomic updates.
 *
 * Returns:
 * 0 on success or can fail with -EDEADLK or -ENOMEM. When the error is EDEADLK
 * then the w/w mutex code has detected a deadlock and the entire atomic
 * sequence must be restarted. All other errors are fatal.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='669' u='c' c='drm_atomic_helper_check_modeset'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='2741' u='c' c='drm_atomic_helper_disable_all'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='47' u='c' c='drm_simple_kms_crtc_check'/>
<dec f='linux-4.14.y/include/drm/drm_atomic.h' l='545' type='int drm_atomic_add_affected_planes(struct drm_atomic_state * state, struct drm_crtc * crtc)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1579' ll='1595' type='int drm_atomic_add_affected_planes(struct drm_atomic_state * state, struct drm_crtc * crtc)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1596' type='int drm_atomic_add_affected_planes(struct drm_atomic_state * , struct drm_crtc * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1596' c='drm_atomic_add_affected_planes'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1596' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1596' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_atomic.c' l='1559'>/**
 * drm_atomic_add_affected_planes - add planes for crtc
 * @state: atomic state
 * @crtc: DRM crtc
 *
 * This function walks the current configuration and adds all planes
 * currently used by @crtc to the atomic configuration @state. This is useful
 * when an atomic commit also needs to check all currently enabled plane on
 * @crtc, e.g. when changing the mode. It&apos;s also useful when re-enabling a CRTC
 * to avoid special code to force-enable all planes.
 *
 * Since acquiring a plane state will always also acquire the w/w mutex of the
 * current CRTC for that plane (if there is any) adding all the plane states for
 * a CRTC will not reduce parallism of atomic updates.
 *
 * Returns:
 * 0 on success or can fail with -EDEADLK or -ENOMEM. When the error is EDEADLK
 * then the w/w mutex code has detected a deadlock and the entire atomic
 * sequence must be restarted. All other errors are fatal.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='669' u='c' c='drm_atomic_helper_check_modeset'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='2741' u='c' c='drm_atomic_helper_disable_all'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='47' u='c' c='drm_simple_kms_crtc_check'/>
