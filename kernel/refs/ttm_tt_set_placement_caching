<dec f='linux-4.18.y/include/drm/ttm/ttm_tt.h' l='229' type='int ttm_tt_set_placement_caching(struct ttm_tt * ttm, uint32_t placement)'/>
<doc f='linux-4.18.y/include/drm/ttm/ttm_tt.h' l='216'>/**
 * ttm_tt_set_placement_caching:
 *
 * @ttm A struct ttm_tt the backing pages of which will change caching policy.
 * @placement: Flag indicating the desired caching policy.
 *
 * This function will change caching policy of any default kernel mappings of
 * the pages backing @ttm. If changing from cached to uncached or
 * write-combined,
 * all CPU caches will first be flushed to make sure the data of the pages
 * hit RAM. This function may be very costly as it involves global TLB
 * and cache flushes and potential page splitting / combining.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='258' u='c' c='ttm_bo_handle_move_mem'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='77' u='c' c='ttm_bo_move_ttm'/>
<def f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_tt.c' l='204' ll='216' type='int ttm_tt_set_placement_caching(struct ttm_tt * ttm, uint32_t placement)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_tt.c' l='217' type='int ttm_tt_set_placement_caching(struct ttm_tt * , uint32_t )'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_tt.c' l='217' c='ttm_tt_set_placement_caching'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_tt.c' l='217' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_tt.c' l='217' u='a'/>
