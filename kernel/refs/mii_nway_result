<def f='linux-4.14.y/include/linux/mii.h' l='69' ll='85' type='unsigned int mii_nway_result(unsigned int negotiated)'/>
<use f='linux-4.14.y/include/linux/mii.h' l='101' u='c' c='mii_duplex'/>
<doc f='linux-4.14.y/include/linux/mii.h' l='55'>/**
 * mii_nway_result
 * @negotiated: value of MII ANAR and&apos;d with ANLPAR
 *
 * Given a set of MII abilities, check each bit and returns the
 * currently supported media, in the priority order defined by
 * IEEE 802.3u.  We use LPA_xxx constants but note this is not the
 * value of LPA solely, as described above.
 *
 * The one exception to IEEE 802.3u is that 100baseT4 is placed
 * between 100T-full and 100T-half.  If your phy does not support
 * 100T4 this is fine.  If your phy places 100T4 elsewhere in the
 * priority order, you will need to roll your own function.
 */</doc>
<use f='linux-4.14.y/drivers/net/mii.c' l='553' u='c' c='mii_check_media'/>
<def f='linux-4.14.y/include/linux/mii.h' l='69' ll='85' type='unsigned int mii_nway_result(unsigned int negotiated)'/>
<use f='linux-4.14.y/include/linux/mii.h' l='101' u='c' c='mii_duplex'/>
<doc f='linux-4.14.y/include/linux/mii.h' l='55'>/**
 * mii_nway_result
 * @negotiated: value of MII ANAR and&apos;d with ANLPAR
 *
 * Given a set of MII abilities, check each bit and returns the
 * currently supported media, in the priority order defined by
 * IEEE 802.3u.  We use LPA_xxx constants but note this is not the
 * value of LPA solely, as described above.
 *
 * The one exception to IEEE 802.3u is that 100baseT4 is placed
 * between 100T-full and 100T-half.  If your phy does not support
 * 100T4 this is fine.  If your phy places 100T4 elsewhere in the
 * priority order, you will need to roll your own function.
 */</doc>
<use f='linux-4.14.y/drivers/net/mii.c' l='553' u='c' c='mii_check_media'/>
