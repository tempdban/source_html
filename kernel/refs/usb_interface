<def f='linux-4.18.y/include/linux/usb.h' l='233' ll='262'/>
<size>576</size>
<doc f='linux-4.18.y/include/linux/usb.h' l='173'>/**
 * struct usb_interface - what usb device drivers talk to
 * @altsetting: array of interface structures, one for each alternate
 *	setting that may be selected.  Each one includes a set of
 *	endpoint configurations.  They will be in no particular order.
 * @cur_altsetting: the current altsetting.
 * @num_altsetting: number of altsettings defined.
 * @intf_assoc: interface association descriptor
 * @minor: the minor number assigned to this interface, if this
 *	interface is bound to a driver that uses the USB major number.
 *	If this interface does not use the USB major, this field should
 *	be unused.  The driver should set this value in the probe()
 *	function of the driver, after it has been assigned a minor
 *	number from the USB core by calling usb_register_dev().
 * @condition: binding state of the interface: not bound, binding
 *	(in probe()), bound to a driver, or unbinding (in disconnect())
 * @sysfs_files_created: sysfs attributes exist
 * @ep_devs_created: endpoint child pseudo-devices exist
 * @unregistering: flag set when the interface is being unregistered
 * @needs_remote_wakeup: flag set when the driver requires remote-wakeup
 *	capability during autosuspend.
 * @needs_altsetting0: flag set when a set-interface request for altsetting 0
 *	has been deferred.
 * @needs_binding: flag set when the driver should be re-probed or unbound
 *	following a reset or suspend operation it doesn&apos;t support.
 * @authorized: This allows to (de)authorize individual interfaces instead
 *	a whole device in contrast to the device authorization.
 * @dev: driver model&apos;s view of this device
 * @usb_dev: if an interface is bound to the USB major, this will point
 *	to the sysfs representation for that device.
 * @pm_usage_cnt: PM usage counter for this interface
 * @reset_ws: Used for scheduling resets from atomic context.
 * @resetting_device: USB core reset the device, so use alt setting 0 as
 *	current; needs bandwidth alloc after reset.
 *
 * USB device drivers attach to interfaces on a physical device.  Each
 * interface encapsulates a single high level function, such as feeding
 * an audio stream to a speaker or reporting a change in a volume control.
 * Many USB devices only have one interface.  The protocol used to talk to
 * an interface&apos;s endpoints can be defined in a usb &quot;class&quot; specification,
 * or by a product&apos;s vendor.  The (default) control endpoint is part of
 * every interface, but is never listed among the interface&apos;s descriptors.
 *
 * The driver that is bound to the interface can use standard driver model
 * calls such as dev_get_drvdata() on the dev member of this structure.
 *
 * Each interface may have alternate settings.  The initial configuration
 * of a device sets altsetting 0, but the device driver can change
 * that setting using usb_set_interface().  Alternate settings are often
 * used to control the use of periodic endpoints, such as by having
 * different endpoints use different amounts of reserved USB bandwidth.
 * All standards-conformant USB devices that use isochronous endpoints
 * will use them in non-default settings.
 *
 * The USB specification says that alternate setting numbers must run from
 * 0 to one less than the total number of alternate settings.  But some
 * devices manage to mess this up, and the structures aren&apos;t necessarily
 * stored in numerical order anyhow.  Use usb_altnum_to_altsetting() to
 * look up an alternate setting in the altsetting array based on its number.
 */</doc>
<mbr r='usb_interface::altsetting' o='0' t='struct usb_host_interface *'/>
<mbr r='usb_interface::cur_altsetting' o='64' t='struct usb_host_interface *'/>
<mbr r='usb_interface::num_altsetting' o='128' t='unsigned int'/>
<mbr r='usb_interface::intf_assoc' o='192' t='struct usb_interface_assoc_descriptor *'/>
<mbr r='usb_interface::minor' o='256' t='int'/>
<mbr r='usb_interface::condition' o='288' t='enum usb_interface_condition'/>
<mbr r='usb_interface::sysfs_files_created' o='320' t='unsigned int'/>
<mbr r='usb_interface::ep_devs_created' o='321' t='unsigned int'/>
<mbr r='usb_interface::unregistering' o='322' t='unsigned int'/>
<mbr r='usb_interface::needs_remote_wakeup' o='323' t='unsigned int'/>
<mbr r='usb_interface::needs_altsetting0' o='324' t='unsigned int'/>
<mbr r='usb_interface::needs_binding' o='325' t='unsigned int'/>
<mbr r='usb_interface::resetting_device' o='326' t='unsigned int'/>
<mbr r='usb_interface::authorized' o='327' t='unsigned int'/>
<mbr r='usb_interface::dev' o='384' t='struct device'/>
<mbr r='usb_interface::usb_dev' o='4224' t='struct device *'/>
<mbr r='usb_interface::pm_usage_cnt' o='4288' t='atomic_t'/>
<mbr r='usb_interface::reset_ws' o='4352' t='struct work_struct'/>
