<dec f='linux-4.18.y/include/linux/poll.h' l='118' type='int poll_select_set_timeout(struct timespec64 * to, time64_t sec, long nsec)'/>
<def f='linux-4.18.y/fs/select.c' l='273' ll='288' type='int poll_select_set_timeout(struct timespec64 * to, time64_t sec, long nsec)'/>
<use f='linux-4.18.y/fs/select.c' l='685' u='c' c='kern_select'/>
<use f='linux-4.18.y/fs/select.c' l='716' u='c' c='do_pselect'/>
<use f='linux-4.18.y/fs/select.c' l='1021' u='c' c='__do_sys_poll'/>
<use f='linux-4.18.y/fs/select.c' l='1060' u='c' c='__do_sys_ppoll'/>
<use f='linux-4.18.y/fs/select.c' l='1271' u='c' c='do_compat_select'/>
<use f='linux-4.18.y/fs/select.c' l='1322' u='c' c='do_compat_pselect'/>
<use f='linux-4.18.y/fs/select.c' l='1388' u='c' c='__do_compat_sys_ppoll'/>
<doc f='linux-4.18.y/fs/select.c' l='262'>/**
 * poll_select_set_timeout - helper function to setup the timeout value
 * @to:		pointer to timespec64 variable for the final timeout
 * @sec:	seconds (from user space)
 * @nsec:	nanoseconds (from user space)
 *
 * Note, we do not use a timespec for the user space value here, That
 * way we can use the function for timeval and compat interfaces as well.
 *
 * Returns -EINVAL if sec/nsec are not normalized. Otherwise 0.
 */</doc>
<use f='linux-4.18.y/net/socket.c' l='2368' u='c' c='__sys_recvmmsg'/>
