<dec f='linux-4.14.y/include/linux/usb.h' l='808' type='int usb_get_current_frame_number(struct usb_device * usb_dev)'/>
<doc f='linux-4.14.y/include/linux/usb.h' l='807'>/* for drivers using iso endpoints */</doc>
<def f='linux-4.14.y/drivers/usb/core/usb.c' l='821' ll='824' type='int usb_get_current_frame_number(struct usb_device * dev)'/>
<dec f='linux-4.14.y/drivers/usb/core/usb.c' l='825' type='int usb_get_current_frame_number(struct usb_device * )'/>
<use f='linux-4.14.y/drivers/usb/core/usb.c' l='825' c='usb_get_current_frame_number'/>
<use f='linux-4.14.y/drivers/usb/core/usb.c' l='825' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/usb.c' l='825' u='a'/>
<doc f='linux-4.14.y/drivers/usb/core/usb.c' l='807'>/**
 * usb_get_current_frame_number - return current bus frame number
 * @dev: the device whose bus is being queried
 *
 * Return: The current frame number for the USB host controller used
 * with the given USB device. This can be used when scheduling
 * isochronous requests.
 *
 * Note: Different kinds of host controller have different &quot;scheduling
 * horizons&quot;. While one type might support scheduling only 32 frames
 * into the future, others could support scheduling up to 1024 frames
 * into the future.
 *
 */</doc>
