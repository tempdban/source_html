<def f='linux-4.14.y/include/linux/dma-fence.h' l='169' ll='182'/>
<size>72</size>
<doc f='linux-4.14.y/include/linux/dma-fence.h' l='109'>/**
 * struct dma_fence_ops - operations implemented for fence
 * @get_driver_name: returns the driver name.
 * @get_timeline_name: return the name of the context this fence belongs to.
 * @enable_signaling: enable software signaling of fence.
 * @signaled: [optional] peek whether the fence is signaled, can be null.
 * @wait: custom wait implementation, or dma_fence_default_wait.
 * @release: [optional] called on destruction of fence, can be null
 * @fill_driver_data: [optional] callback to fill in free-form debug info
 * Returns amount of bytes filled, or -errno.
 * @fence_value_str: [optional] fills in the value of the fence as a string
 * @timeline_value_str: [optional] fills in the current value of the timeline
 * as a string
 *
 * Notes on enable_signaling:
 * For fence implementations that have the capability for hw-&gt;hw
 * signaling, they can implement this op to enable the necessary
 * irqs, or insert commands into cmdstream, etc.  This is called
 * in the first wait() or add_callback() path to let the fence
 * implementation know that there is another driver waiting on
 * the signal (ie. hw-&gt;sw case).
 *
 * This function can be called called from atomic context, but not
 * from irq context, so normal spinlocks can be used.
 *
 * A return value of false indicates the fence already passed,
 * or some failure occurred that made it impossible to enable
 * signaling. True indicates successful enabling.
 *
 * fence-&gt;error may be set in enable_signaling, but only when false is
 * returned.
 *
 * Calling dma_fence_signal before enable_signaling is called allows
 * for a tiny race window in which enable_signaling is called during,
 * before, or after dma_fence_signal. To fight this, it is recommended
 * that before enable_signaling returns true an extra reference is
 * taken on the fence, to be released when the fence is signaled.
 * This will mean dma_fence_signal will still be called twice, but
 * the second time will be a noop since it was already signaled.
 *
 * Notes on signaled:
 * May set fence-&gt;error if returning true.
 *
 * Notes on wait:
 * Must not be NULL, set to dma_fence_default_wait for default implementation.
 * the dma_fence_default_wait implementation should work for any fence, as long
 * as enable_signaling works correctly.
 *
 * Must return -ERESTARTSYS if the wait is intr = true and the wait was
 * interrupted, and remaining jiffies if fence has signaled, or 0 if wait
 * timed out. Can also return other error values on custom implementations,
 * which should be treated as if the fence is signaled. For example a hardware
 * lockup could be reported like that.
 *
 * Notes on release:
 * Can be NULL, this function allows additional commands to run on
 * destruction of the fence. Can be called from irq context.
 * If pointer is set to NULL, kfree will get called instead.
 */</doc>
<mbr r='dma_fence_ops::get_driver_name' o='0' t='const char *(*)(struct dma_fence *)'/>
<mbr r='dma_fence_ops::get_timeline_name' o='64' t='const char *(*)(struct dma_fence *)'/>
<mbr r='dma_fence_ops::enable_signaling' o='128' t='bool (*)(struct dma_fence *)'/>
<mbr r='dma_fence_ops::signaled' o='192' t='bool (*)(struct dma_fence *)'/>
<mbr r='dma_fence_ops::wait' o='256' t='long (*)(struct dma_fence *, bool, long)'/>
<mbr r='dma_fence_ops::release' o='320' t='void (*)(struct dma_fence *)'/>
<mbr r='dma_fence_ops::fill_driver_data' o='384' t='int (*)(struct dma_fence *, void *, int)'/>
<mbr r='dma_fence_ops::fence_value_str' o='448' t='void (*)(struct dma_fence *, char *, int)'/>
<mbr r='dma_fence_ops::timeline_value_str' o='512' t='void (*)(struct dma_fence *, char *, int)'/>
