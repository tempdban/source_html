<dec f='linux-4.14.y/ipc/util.h' l='123' type='int ipc_rcu_getref(struct kern_ipc_perm * ptr)'/>
<doc f='linux-4.14.y/ipc/util.h' l='114'>/*
 * For allocation that need to be freed by RCU.
 * Objects are reference counted, they start with reference count 1.
 * getref increases the refcount, the putref call that reduces the recount
 * to 0 schedules the rcu destruction. Caller must guarantee locking.
 *
 * refcount is initialized by ipc_addid(), before that point call_rcu()
 * must be used.
 */</doc>
<use f='linux-4.14.y/ipc/msg.c' l='795' u='c' c='do_msgsnd'/>
<use f='linux-4.14.y/ipc/sem.c' l='1363' u='c' c='semctl_main'/>
<use f='linux-4.14.y/ipc/sem.c' l='1397' u='c' c='semctl_main'/>
<use f='linux-4.14.y/ipc/sem.c' l='1809' u='c' c='find_alloc_undo'/>
<def f='linux-4.14.y/ipc/util.c' l='448' ll='451' type='int ipc_rcu_getref(struct kern_ipc_perm * ptr)'/>
<dec f='linux-4.14.y/ipc/util.h' l='123' type='int ipc_rcu_getref(struct kern_ipc_perm * ptr)'/>
<doc f='linux-4.14.y/ipc/util.h' l='114'>/*
 * For allocation that need to be freed by RCU.
 * Objects are reference counted, they start with reference count 1.
 * getref increases the refcount, the putref call that reduces the recount
 * to 0 schedules the rcu destruction. Caller must guarantee locking.
 *
 * refcount is initialized by ipc_addid(), before that point call_rcu()
 * must be used.
 */</doc>
<use f='linux-4.14.y/ipc/msg.c' l='795' u='c' c='do_msgsnd'/>
<use f='linux-4.14.y/ipc/sem.c' l='1363' u='c' c='semctl_main'/>
<use f='linux-4.14.y/ipc/sem.c' l='1397' u='c' c='semctl_main'/>
<use f='linux-4.14.y/ipc/sem.c' l='1809' u='c' c='find_alloc_undo'/>
<def f='linux-4.14.y/ipc/util.c' l='448' ll='451' type='int ipc_rcu_getref(struct kern_ipc_perm * ptr)'/>
