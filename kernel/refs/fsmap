<def f='linux-4.18.y/include/uapi/linux/fsmap.h' l='50' ll='58'/>
<size>64</size>
<doc f='linux-4.18.y/include/uapi/linux/fsmap.h' l='14'>/*
 *	Structure for FS_IOC_GETFSMAP.
 *
 *	The memory layout for this call are the scalar values defined in
 *	struct fsmap_head, followed by two struct fsmap that describe
 *	the lower and upper bound of mappings to return, followed by an
 *	array of struct fsmap mappings.
 *
 *	fmh_iflags control the output of the call, whereas fmh_oflags report
 *	on the overall record output.  fmh_count should be set to the
 *	length of the fmh_recs array, and fmh_entries will be set to the
 *	number of entries filled out during each call.  If fmh_count is
 *	zero, the number of reverse mappings will be returned in
 *	fmh_entries, though no mappings will be returned.  fmh_reserved
 *	must be set to zero.
 *
 *	The two elements in the fmh_keys array are used to constrain the
 *	output.  The first element in the array should represent the
 *	lowest disk mapping (&quot;low key&quot;) that the user wants to learn
 *	about.  If this value is all zeroes, the filesystem will return
 *	the first entry it knows about.  For a subsequent call, the
 *	contents of fsmap_head.fmh_recs[fsmap_head.fmh_count - 1] should be
 *	copied into fmh_keys[0] to have the kernel start where it left off.
 *
 *	The second element in the fmh_keys array should represent the
 *	highest disk mapping (&quot;high key&quot;) that the user wants to learn
 *	about.  If this value is all ones, the filesystem will not stop
 *	until it runs out of mapping to return or runs out of space in
 *	fmh_recs.
 *
 *	fmr_device can be either a 32-bit cookie representing a device, or
 *	a 32-bit dev_t if the FMH_OF_DEV_T flag is set.  fmr_physical,
 *	fmr_offset, and fmr_length are expressed in units of bytes.
 *	fmr_owner is either an inode number, or a special value if
 *	FMR_OF_SPECIAL_OWNER is set in fmr_flags.
 */</doc>
<mbr r='fsmap::fmr_device' o='0' t='__u32'/>
<mbr r='fsmap::fmr_flags' o='32' t='__u32'/>
<mbr r='fsmap::fmr_physical' o='64' t='__u64'/>
<mbr r='fsmap::fmr_owner' o='128' t='__u64'/>
<mbr r='fsmap::fmr_offset' o='192' t='__u64'/>
<mbr r='fsmap::fmr_length' o='256' t='__u64'/>
<mbr r='fsmap::fmr_reserved' o='320' t='__u64 [3]'/>
