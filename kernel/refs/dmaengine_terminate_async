<def f='linux-4.14.y/include/linux/dmaengine.h' l='942' ll='948' type='int dmaengine_terminate_async(struct dma_chan * chan)'/>
<use f='linux-4.14.y/include/linux/dmaengine.h' l='994' u='c' c='dmaengine_terminate_sync'/>
<doc f='linux-4.14.y/include/linux/dmaengine.h' l='921'>/**
 * dmaengine_terminate_async() - Terminate all active DMA transfers
 * @chan: The channel for which to terminate the transfers
 *
 * Calling this function will terminate all active and pending descriptors
 * that have previously been submitted to the channel. It is not guaranteed
 * though that the transfer for the active descriptor has stopped when the
 * function returns. Furthermore it is possible the complete callback of a
 * submitted transfer is still running when this function returns.
 *
 * dmaengine_synchronize() needs to be called before it is safe to free
 * any memory that is accessed by previously submitted descriptors or before
 * freeing any resources accessed from within the completion callback of any
 * perviously submitted descriptors.
 *
 * This function can be called from atomic context as well as from within a
 * complete callback of a descriptor submitted on the same channel.
 *
 * If none of the two conditions above apply consider using
 * dmaengine_terminate_sync() instead.
 */</doc>
<use f='linux-4.14.y/drivers/tty/serial/8250/8250_dma.c' l='150' u='c' c='serial8250_rx_dma_flush'/>
<def f='linux-4.14.y/include/linux/dmaengine.h' l='942' ll='948' type='int dmaengine_terminate_async(struct dma_chan * chan)'/>
<use f='linux-4.14.y/include/linux/dmaengine.h' l='994' u='c' c='dmaengine_terminate_sync'/>
<doc f='linux-4.14.y/include/linux/dmaengine.h' l='921'>/**
 * dmaengine_terminate_async() - Terminate all active DMA transfers
 * @chan: The channel for which to terminate the transfers
 *
 * Calling this function will terminate all active and pending descriptors
 * that have previously been submitted to the channel. It is not guaranteed
 * though that the transfer for the active descriptor has stopped when the
 * function returns. Furthermore it is possible the complete callback of a
 * submitted transfer is still running when this function returns.
 *
 * dmaengine_synchronize() needs to be called before it is safe to free
 * any memory that is accessed by previously submitted descriptors or before
 * freeing any resources accessed from within the completion callback of any
 * perviously submitted descriptors.
 *
 * This function can be called from atomic context as well as from within a
 * complete callback of a descriptor submitted on the same channel.
 *
 * If none of the two conditions above apply consider using
 * dmaengine_terminate_sync() instead.
 */</doc>
<use f='linux-4.14.y/drivers/tty/serial/8250/8250_dma.c' l='150' u='c' c='serial8250_rx_dma_flush'/>
