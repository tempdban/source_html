<dec f='linux-4.14.y/include/linux/mempool.h' l='34' type='int mempool_resize(mempool_t * pool, int new_min_nr)'/>
<def f='linux-4.14.y/mm/mempool.c' l='238' ll='297' type='int mempool_resize(mempool_t * pool, int new_min_nr)'/>
<dec f='linux-4.14.y/mm/mempool.c' l='298' type='int mempool_resize(mempool_t * , int )'/>
<use f='linux-4.14.y/mm/mempool.c' l='298' c='mempool_resize'/>
<use f='linux-4.14.y/mm/mempool.c' l='298' u='a'/>
<use f='linux-4.14.y/mm/mempool.c' l='298' u='a'/>
<doc f='linux-4.14.y/mm/mempool.c' l='222'>/**
 * mempool_resize - resize an existing memory pool
 * @pool:       pointer to the memory pool which was allocated via
 *              mempool_create().
 * @new_min_nr: the new minimum number of elements guaranteed to be
 *              allocated for this pool.
 *
 * This function shrinks/grows the pool. In the case of growing,
 * it cannot be guaranteed that the pool will be grown to the new
 * size immediately, but new mempool_free() calls will refill it.
 * This function may sleep.
 *
 * Note, the caller must guarantee that no mempool_destroy is called
 * while this function is running. mempool_alloc() &amp; mempool_free()
 * might be called (eg. from IRQ contexts) while this function executes.
 */</doc>
