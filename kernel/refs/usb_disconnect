<dec f='linux-4.14.y/include/linux/usb/hcd.h' l='509' type='void usb_disconnect(struct usb_device ** )'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='2928' u='c' c='usb_add_hcd'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='2997' u='c' c='usb_remove_hcd'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='1264' u='c' c='hub_quiesce'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='2083' u='c' c='hub_disconnect_children'/>
<def f='linux-4.14.y/drivers/usb/core/hub.c' l='2103' ll='2177' type='void usb_disconnect(struct usb_device ** pdev)'/>
<use f='linux-4.14.y/drivers/usb/core/hub.c' l='4771' u='c' c='hub_port_connect'/>
<doc f='linux-4.14.y/drivers/usb/core/hub.c' l='2087'>/**
 * usb_disconnect - disconnect a device (usbcore-internal)
 * @pdev: pointer to device being disconnected
 * Context: !in_interrupt ()
 *
 * Something got disconnected. Get rid of it and all of its children.
 *
 * If *pdev is a normal device then the parent hub must already be locked.
 * If *pdev is a root hub then the caller must hold the usb_bus_idr_lock,
 * which protects the set of root hubs as well as the list of buses.
 *
 * Only hub drivers (including virtual root hub drivers for host
 * controllers) should ever call this.
 *
 * This call is synchronous, and may not be used in an interrupt context.
 */</doc>
