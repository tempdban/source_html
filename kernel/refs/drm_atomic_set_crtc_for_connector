<dec f='linux-4.18.y/include/drm/drm_atomic.h' l='595' type='int drm_atomic_set_crtc_for_connector(struct drm_connector_state * conn_state, struct drm_crtc * crtc)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1234' u='c' c='drm_atomic_connector_set_property'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1545' ll='1584' type='int drm_atomic_set_crtc_for_connector(struct drm_connector_state * conn_state, struct drm_crtc * crtc)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1585' type='int drm_atomic_set_crtc_for_connector(struct drm_connector_state * , struct drm_crtc * )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1585' c='drm_atomic_set_crtc_for_connector'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1585' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1585' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_atomic.c' l='1531'>/**
 * drm_atomic_set_crtc_for_connector - set crtc for connector
 * @conn_state: atomic state object for the connector
 * @crtc: crtc to use for the connector
 *
 * Changing the assigned crtc for a connector requires us to grab the lock and
 * state for the new crtc, as needed. This function takes care of all these
 * details besides updating the pointer in the state object itself.
 *
 * Returns:
 * 0 on success or can fail with -EDEADLK or -ENOMEM. When the error is EDEADLK
 * then the w/w mutex code has detected a deadlock and the entire atomic
 * sequence must be restarted. All other errors are fatal.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='183' u='c' c='handle_conflicting_encoders'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='2745' u='c' c='update_output_state'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='2762' u='c' c='update_output_state'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='2951' u='c' c='__drm_atomic_helper_disable_all'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_framebuffer.c' l='845' u='c' c='atomic_remove_fb'/>
