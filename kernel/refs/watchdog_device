<def f='linux-4.14.y/include/linux/watchdog.h' l='97' ll='123'/>
<size>168</size>
<doc f='linux-4.14.y/include/linux/watchdog.h' l='58'>/** struct watchdog_device - The structure that defines a watchdog device
 *
 * @id:		The watchdog&apos;s ID. (Allocated by watchdog_register_device)
 * @parent:	The parent bus device
 * @groups:	List of sysfs attribute groups to create when creating the
 *		watchdog device.
 * @info:	Pointer to a watchdog_info structure.
 * @ops:	Pointer to the list of watchdog operations.
 * @gov:	Pointer to watchdog pretimeout governor.
 * @bootstatus:	Status of the watchdog device at boot.
 * @timeout:	The watchdog devices timeout value (in seconds).
 * @pretimeout: The watchdog devices pre_timeout value.
 * @min_timeout:The watchdog devices minimum timeout value (in seconds).
 * @max_timeout:The watchdog devices maximum timeout value (in seconds)
 *		as configurable from user space. Only relevant if
 *		max_hw_heartbeat_ms is not provided.
 * @min_hw_heartbeat_ms:
 *		Hardware limit for minimum time between heartbeats,
 *		in milli-seconds.
 * @max_hw_heartbeat_ms:
 *		Hardware limit for maximum timeout, in milli-seconds.
 *		Replaces max_timeout if specified.
 * @reboot_nb:	The notifier block to stop watchdog on reboot.
 * @restart_nb:	The notifier block to register a restart function.
 * @driver_data:Pointer to the drivers private data.
 * @wd_data:	Pointer to watchdog core internal data.
 * @status:	Field that contains the devices internal status bits.
 * @deferred:	Entry in wtd_deferred_reg_list which is used to
 *		register early initialized watchdogs.
 *
 * The watchdog_device structure contains all information about a
 * watchdog timer device.
 *
 * The driver-data field may not be accessed directly. It must be accessed
 * via the watchdog_set_drvdata and watchdog_get_drvdata helpers.
 *
 * The lock field is for watchdog core internal use only and should not be
 * touched.
 */</doc>
<mbr r='watchdog_device::id' o='0' t='int'/>
<mbr r='watchdog_device::parent' o='64' t='struct device *'/>
<mbr r='watchdog_device::groups' o='128' t='const struct attribute_group **'/>
<mbr r='watchdog_device::info' o='192' t='const struct watchdog_info *'/>
<mbr r='watchdog_device::ops' o='256' t='const struct watchdog_ops *'/>
<mbr r='watchdog_device::gov' o='320' t='const struct watchdog_governor *'/>
<mbr r='watchdog_device::bootstatus' o='384' t='unsigned int'/>
<mbr r='watchdog_device::timeout' o='416' t='unsigned int'/>
<mbr r='watchdog_device::pretimeout' o='448' t='unsigned int'/>
<mbr r='watchdog_device::min_timeout' o='480' t='unsigned int'/>
<mbr r='watchdog_device::max_timeout' o='512' t='unsigned int'/>
<mbr r='watchdog_device::min_hw_heartbeat_ms' o='544' t='unsigned int'/>
<mbr r='watchdog_device::max_hw_heartbeat_ms' o='576' t='unsigned int'/>
<mbr r='watchdog_device::reboot_nb' o='640' t='struct notifier_block'/>
<mbr r='watchdog_device::restart_nb' o='832' t='struct notifier_block'/>
<mbr r='watchdog_device::driver_data' o='1024' t='void *'/>
<mbr r='watchdog_device::wd_data' o='1088' t='struct watchdog_core_data *'/>
<mbr r='watchdog_device::status' o='1152' t='unsigned long'/>
<mbr r='watchdog_device::deferred' o='1216' t='struct list_head'/>
<def f='linux-4.14.y/include/linux/watchdog.h' l='97' ll='123'/>
<size>168</size>
<doc f='linux-4.14.y/include/linux/watchdog.h' l='58'>/** struct watchdog_device - The structure that defines a watchdog device
 *
 * @id:		The watchdog&apos;s ID. (Allocated by watchdog_register_device)
 * @parent:	The parent bus device
 * @groups:	List of sysfs attribute groups to create when creating the
 *		watchdog device.
 * @info:	Pointer to a watchdog_info structure.
 * @ops:	Pointer to the list of watchdog operations.
 * @gov:	Pointer to watchdog pretimeout governor.
 * @bootstatus:	Status of the watchdog device at boot.
 * @timeout:	The watchdog devices timeout value (in seconds).
 * @pretimeout: The watchdog devices pre_timeout value.
 * @min_timeout:The watchdog devices minimum timeout value (in seconds).
 * @max_timeout:The watchdog devices maximum timeout value (in seconds)
 *		as configurable from user space. Only relevant if
 *		max_hw_heartbeat_ms is not provided.
 * @min_hw_heartbeat_ms:
 *		Hardware limit for minimum time between heartbeats,
 *		in milli-seconds.
 * @max_hw_heartbeat_ms:
 *		Hardware limit for maximum timeout, in milli-seconds.
 *		Replaces max_timeout if specified.
 * @reboot_nb:	The notifier block to stop watchdog on reboot.
 * @restart_nb:	The notifier block to register a restart function.
 * @driver_data:Pointer to the drivers private data.
 * @wd_data:	Pointer to watchdog core internal data.
 * @status:	Field that contains the devices internal status bits.
 * @deferred:	Entry in wtd_deferred_reg_list which is used to
 *		register early initialized watchdogs.
 *
 * The watchdog_device structure contains all information about a
 * watchdog timer device.
 *
 * The driver-data field may not be accessed directly. It must be accessed
 * via the watchdog_set_drvdata and watchdog_get_drvdata helpers.
 *
 * The lock field is for watchdog core internal use only and should not be
 * touched.
 */</doc>
<mbr r='watchdog_device::id' o='0' t='int'/>
<mbr r='watchdog_device::parent' o='64' t='struct device *'/>
<mbr r='watchdog_device::groups' o='128' t='const struct attribute_group **'/>
<mbr r='watchdog_device::info' o='192' t='const struct watchdog_info *'/>
<mbr r='watchdog_device::ops' o='256' t='const struct watchdog_ops *'/>
<mbr r='watchdog_device::gov' o='320' t='const struct watchdog_governor *'/>
<mbr r='watchdog_device::bootstatus' o='384' t='unsigned int'/>
<mbr r='watchdog_device::timeout' o='416' t='unsigned int'/>
<mbr r='watchdog_device::pretimeout' o='448' t='unsigned int'/>
<mbr r='watchdog_device::min_timeout' o='480' t='unsigned int'/>
<mbr r='watchdog_device::max_timeout' o='512' t='unsigned int'/>
<mbr r='watchdog_device::min_hw_heartbeat_ms' o='544' t='unsigned int'/>
<mbr r='watchdog_device::max_hw_heartbeat_ms' o='576' t='unsigned int'/>
<mbr r='watchdog_device::reboot_nb' o='640' t='struct notifier_block'/>
<mbr r='watchdog_device::restart_nb' o='832' t='struct notifier_block'/>
<mbr r='watchdog_device::driver_data' o='1024' t='void *'/>
<mbr r='watchdog_device::wd_data' o='1088' t='struct watchdog_core_data *'/>
<mbr r='watchdog_device::status' o='1152' t='unsigned long'/>
<mbr r='watchdog_device::deferred' o='1216' t='struct list_head'/>
