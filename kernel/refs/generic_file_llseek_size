<dec f='linux-4.18.y/include/linux/fs.h' l='2994' type='loff_t generic_file_llseek_size(struct file * file, loff_t offset, int whence, loff_t maxsize, loff_t eof)'/>
<use f='linux-4.18.y/fs/ext4/dir.c' l='369' u='c' c='ext4_dir_llseek'/>
<use f='linux-4.18.y/fs/ext4/file.c' l='478' u='c' c='ext4_llseek'/>
<use f='linux-4.18.y/fs/f2fs/file.c' l='452' u='c' c='f2fs_llseek'/>
<use f='linux-4.18.y/fs/libfs.c' l='1219' u='c' c='empty_dir_llseek'/>
<def f='linux-4.18.y/fs/read_write.c' l='85' ll='131' type='loff_t generic_file_llseek_size(struct file * file, loff_t offset, int whence, loff_t maxsize, loff_t eof)'/>
<dec f='linux-4.18.y/fs/read_write.c' l='132' type='loff_t generic_file_llseek_size(struct file * , loff_t , int , loff_t , loff_t )'/>
<use f='linux-4.18.y/fs/read_write.c' l='132' c='generic_file_llseek_size'/>
<use f='linux-4.18.y/fs/read_write.c' l='132' u='a'/>
<use f='linux-4.18.y/fs/read_write.c' l='132' u='a'/>
<use f='linux-4.18.y/fs/read_write.c' l='148' u='c' c='generic_file_llseek'/>
<use f='linux-4.18.y/fs/read_write.c' l='166' u='c' c='fixed_size_llseek'/>
<use f='linux-4.18.y/fs/read_write.c' l='185' u='c' c='no_seek_end_llseek'/>
<use f='linux-4.18.y/fs/read_write.c' l='205' u='c' c='no_seek_end_llseek_size'/>
<doc f='linux-4.18.y/fs/read_write.c' l='69'>/**
 * generic_file_llseek_size - generic llseek implementation for regular files
 * @file:	file structure to seek on
 * @offset:	file offset to seek to
 * @whence:	type of seek
 * @size:	max size of this file in file system
 * @eof:	offset used for SEEK_END position
 *
 * This is a variant of generic_file_llseek that allows passing in a custom
 * maximum file size and a custom EOF position, for e.g. hashed directories
 *
 * Synchronization:
 * SEEK_SET and SEEK_END are unsynchronized (but atomic on 64bit platforms)
 * SEEK_CUR is synchronized against other SEEK_CURs, but not read/writes.
 * read/writes behave like SEEK_SET against seeks.
 */</doc>
<use f='linux-4.18.y/mm/shmem.c' l='2607' u='c' c='shmem_file_llseek'/>
