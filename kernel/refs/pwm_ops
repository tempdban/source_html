<def f='linux-4.14.y/include/linux/pwm.h' l='260' ll='279'/>
<size>88</size>
<doc f='linux-4.14.y/include/linux/pwm.h' l='241'>/**
 * struct pwm_ops - PWM controller operations
 * @request: optional hook for requesting a PWM
 * @free: optional hook for freeing a PWM
 * @config: configure duty cycles and period length for this PWM
 * @set_polarity: configure the polarity of this PWM
 * @capture: capture and report PWM signal
 * @enable: enable PWM output toggling
 * @disable: disable PWM output toggling
 * @apply: atomically apply a new PWM config. The state argument
 *	   should be adjusted with the real hardware config (if the
 *	   approximate the period or duty_cycle value, state should
 *	   reflect it)
 * @get_state: get the current PWM state. This function is only
 *	       called once per PWM device when the PWM chip is
 *	       registered.
 * @dbg_show: optional routine to show contents in debugfs
 * @owner: helps prevent removal of modules exporting active PWMs
 */</doc>
<mbr r='pwm_ops::request' o='0' t='int (*)(struct pwm_chip *, struct pwm_device *)'/>
<mbr r='pwm_ops::free' o='64' t='void (*)(struct pwm_chip *, struct pwm_device *)'/>
<mbr r='pwm_ops::config' o='128' t='int (*)(struct pwm_chip *, struct pwm_device *, int, int)'/>
<mbr r='pwm_ops::set_polarity' o='192' t='int (*)(struct pwm_chip *, struct pwm_device *, enum pwm_polarity)'/>
<mbr r='pwm_ops::capture' o='256' t='int (*)(struct pwm_chip *, struct pwm_device *, struct pwm_capture *, unsigned long)'/>
<mbr r='pwm_ops::enable' o='320' t='int (*)(struct pwm_chip *, struct pwm_device *)'/>
<mbr r='pwm_ops::disable' o='384' t='void (*)(struct pwm_chip *, struct pwm_device *)'/>
<mbr r='pwm_ops::apply' o='448' t='int (*)(struct pwm_chip *, struct pwm_device *, struct pwm_state *)'/>
<mbr r='pwm_ops::get_state' o='512' t='void (*)(struct pwm_chip *, struct pwm_device *, struct pwm_state *)'/>
<mbr r='pwm_ops::dbg_show' o='576' t='void (*)(struct pwm_chip *, struct seq_file *)'/>
<mbr r='pwm_ops::owner' o='640' t='struct module *'/>
<def f='linux-4.14.y/include/linux/pwm.h' l='260' ll='279'/>
<size>88</size>
<doc f='linux-4.14.y/include/linux/pwm.h' l='241'>/**
 * struct pwm_ops - PWM controller operations
 * @request: optional hook for requesting a PWM
 * @free: optional hook for freeing a PWM
 * @config: configure duty cycles and period length for this PWM
 * @set_polarity: configure the polarity of this PWM
 * @capture: capture and report PWM signal
 * @enable: enable PWM output toggling
 * @disable: disable PWM output toggling
 * @apply: atomically apply a new PWM config. The state argument
 *	   should be adjusted with the real hardware config (if the
 *	   approximate the period or duty_cycle value, state should
 *	   reflect it)
 * @get_state: get the current PWM state. This function is only
 *	       called once per PWM device when the PWM chip is
 *	       registered.
 * @dbg_show: optional routine to show contents in debugfs
 * @owner: helps prevent removal of modules exporting active PWMs
 */</doc>
<mbr r='pwm_ops::request' o='0' t='int (*)(struct pwm_chip *, struct pwm_device *)'/>
<mbr r='pwm_ops::free' o='64' t='void (*)(struct pwm_chip *, struct pwm_device *)'/>
<mbr r='pwm_ops::config' o='128' t='int (*)(struct pwm_chip *, struct pwm_device *, int, int)'/>
<mbr r='pwm_ops::set_polarity' o='192' t='int (*)(struct pwm_chip *, struct pwm_device *, enum pwm_polarity)'/>
<mbr r='pwm_ops::capture' o='256' t='int (*)(struct pwm_chip *, struct pwm_device *, struct pwm_capture *, unsigned long)'/>
<mbr r='pwm_ops::enable' o='320' t='int (*)(struct pwm_chip *, struct pwm_device *)'/>
<mbr r='pwm_ops::disable' o='384' t='void (*)(struct pwm_chip *, struct pwm_device *)'/>
<mbr r='pwm_ops::apply' o='448' t='int (*)(struct pwm_chip *, struct pwm_device *, struct pwm_state *)'/>
<mbr r='pwm_ops::get_state' o='512' t='void (*)(struct pwm_chip *, struct pwm_device *, struct pwm_state *)'/>
<mbr r='pwm_ops::dbg_show' o='576' t='void (*)(struct pwm_chip *, struct seq_file *)'/>
<mbr r='pwm_ops::owner' o='640' t='struct module *'/>
