<def f='linux-4.14.y/include/drm/drm_encoder.h' l='99' ll='173'/>
<size>112</size>
<doc f='linux-4.14.y/include/drm/drm_encoder.h' l='85'>/**
 * struct drm_encoder - central DRM encoder structure
 * @dev: parent DRM device
 * @head: list management
 * @base: base KMS object
 * @name: human readable name, can be overwritten by the driver
 * @crtc: currently bound CRTC
 * @bridge: bridge associated to the encoder
 * @funcs: control functions
 * @helper_private: mid-layer private data
 *
 * CRTCs drive pixels to encoders, which convert them into signals
 * appropriate for a given connector or set of connectors.
 */</doc>
<mbr r='drm_encoder::dev' o='0' t='struct drm_device *'/>
<mbr r='drm_encoder::head' o='64' t='struct list_head'/>
<mbr r='drm_encoder::base' o='192' t='struct drm_mode_object'/>
<mbr r='drm_encoder::name' o='448' t='char *'/>
<mbr r='drm_encoder::encoder_type' o='512' t='int'/>
<mbr r='drm_encoder::index' o='544' t='unsigned int'/>
<mbr r='drm_encoder::possible_crtcs' o='576' t='uint32_t'/>
<mbr r='drm_encoder::possible_clones' o='608' t='uint32_t'/>
<mbr r='drm_encoder::crtc' o='640' t='struct drm_crtc *'/>
<mbr r='drm_encoder::bridge' o='704' t='struct drm_bridge *'/>
<mbr r='drm_encoder::funcs' o='768' t='const struct drm_encoder_funcs *'/>
<mbr r='drm_encoder::helper_private' o='832' t='const struct drm_encoder_helper_funcs *'/>
