<dec f='linux-4.14.y/include/linux/usb.h' l='1778' type='int usb_reset_configuration(struct usb_device * dev)'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='1412' u='c' c='proc_setconfig'/>
<def f='linux-4.14.y/drivers/usb/core/message.c' l='1445' ll='1544' type='int usb_reset_configuration(struct usb_device * dev)'/>
<dec f='linux-4.14.y/drivers/usb/core/message.c' l='1545' type='int usb_reset_configuration(struct usb_device * )'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1545' c='usb_reset_configuration'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1545' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1545' u='a'/>
<doc f='linux-4.14.y/drivers/usb/core/message.c' l='1423'>/**
 * usb_reset_configuration - lightweight device reset
 * @dev: the device whose configuration is being reset
 *
 * This issues a standard SET_CONFIGURATION request to the device using
 * the current configuration.  The effect is to reset most USB-related
 * state in the device, including interface altsettings (reset to zero),
 * endpoint halts (cleared), and endpoint state (only for bulk and interrupt
 * endpoints).  Other usbcore state is unchanged, including bindings of
 * usb device drivers to interfaces.
 *
 * Because this affects multiple interfaces, avoid using this with composite
 * (multi-interface) devices.  Instead, the driver for each interface may
 * use usb_set_interface() on the interfaces it claims.  Be careful though;
 * some devices don&apos;t support the SET_INTERFACE request, and others won&apos;t
 * reset all the interface state (notably endpoint state).  Resetting the whole
 * configuration would affect other drivers&apos; interfaces.
 *
 * The caller must own the device lock.
 *
 * Return: Zero on success, else a negative error code.
 */</doc>
