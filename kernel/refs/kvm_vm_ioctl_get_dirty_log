<dec f='linux-4.18.y/include/linux/kvm_host.h' l='758' type='int kvm_vm_ioctl_get_dirty_log(struct kvm * kvm, struct kvm_dirty_log * log)'/>
<def f='linux-4.18.y/arch/x86/kvm/x86.c' l='4193' ll='4218' type='int kvm_vm_ioctl_get_dirty_log(struct kvm * kvm, struct kvm_dirty_log * log)'/>
<doc f='linux-4.18.y/arch/x86/kvm/x86.c' l='4174'>/**
 * kvm_vm_ioctl_get_dirty_log - get and clear the log of dirty pages in a slot
 * @kvm: kvm instance
 * @log: slot id and address to which we copy the log
 *
 * Steps 1-4 below provide general overview of dirty page logging. See
 * kvm_get_dirty_log_protect() function description for additional details.
 *
 * We call kvm_get_dirty_log_protect() to handle steps 1-3, upon return we
 * always flush the TLB (step 4) even if previous step failed  and the dirty
 * bitmap may be corrupt. Regardless of previous outcome the KVM logging API
 * does not preclude user space subsequent dirty log read. Flushing TLB ensures
 * writes will be marked dirty for next log read.
 *
 *   1. Take a snapshot of the bit and clear it if needed.
 *   2. Write protect the corresponding page.
 *   3. Copy the snapshot to the userspace.
 *   4. Flush TLB&apos;s if needed.
 */</doc>
<use f='linux-4.18.y/virt/kvm/kvm_main.c' l='2986' u='c' c='kvm_vm_ioctl'/>
<use f='linux-4.18.y/virt/kvm/kvm_main.c' l='3156' u='c' c='kvm_vm_compat_ioctl'/>
