<dec f='linux-4.14.y/include/linux/i2c.h' l='731' type='void i2c_parse_fw_timings(struct device * dev, struct i2c_timings * t, bool use_defaults)'/>
<def f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1530' ll='1563' type='void i2c_parse_fw_timings(struct device * dev, struct i2c_timings * t, bool use_defaults)'/>
<dec f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1564' type='void i2c_parse_fw_timings(struct device * , struct i2c_timings * , bool )'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1564' c='i2c_parse_fw_timings'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1564' u='a'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1564' u='a'/>
<doc f='linux-4.14.y/drivers/i2c/i2c-core-base.c' l='1514'>/**
 * i2c_parse_fw_timings - get I2C related timing parameters from firmware
 * @dev: The device to scan for I2C timing properties
 * @t: the i2c_timings struct to be filled with values
 * @use_defaults: bool to use sane defaults derived from the I2C specification
 *		  when properties are not found, otherwise use 0
 *
 * Scan the device for the generic I2C properties describing timing parameters
 * for the signal and fill the given struct with the results. If a property was
 * not found and use_defaults was true, then maximum timings are assumed which
 * are derived from the I2C specification. If use_defaults is not used, the
 * results will be 0, so drivers can apply their own defaults later. The latter
 * is mainly intended for avoiding regressions of existing drivers which want
 * to switch to this function. New drivers almost always should use the defaults.
 */</doc>
