<dec f='linux-4.18.y/include/linux/clk.h' l='365' type='void clk_rate_exclusive_put(struct clk * clk)'/>
<doc f='linux-4.18.y/include/linux/clk.h' l='352'>/**
 * clk_rate_exclusive_put - release exclusivity over the rate control of a
 *                          producer
 * @clk: clock source
 *
 * This function allows drivers to release the exclusivity it previously got
 * from clk_rate_exclusive_get()
 *
 * The caller must balance the number of clk_rate_exclusive_get() and
 * clk_rate_exclusive_put() calls.
 *
 * Must not be called from within atomic context.
 */</doc>
<def f='linux-4.18.y/drivers/clk/clk.c' l='598' ll='616' type='void clk_rate_exclusive_put(struct clk * clk)'/>
<dec f='linux-4.18.y/drivers/clk/clk.c' l='617' type='void clk_rate_exclusive_put(struct clk * )'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='617' c='clk_rate_exclusive_put'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='617' u='a'/>
<use f='linux-4.18.y/drivers/clk/clk.c' l='617' u='a'/>
<doc f='linux-4.18.y/drivers/clk/clk.c' l='580'>/**
 * clk_rate_exclusive_put - release exclusivity over clock rate control
 * @clk: the clk over which the exclusivity is released
 *
 * clk_rate_exclusive_put() completes a critical section during which a clock
 * consumer cannot tolerate any other consumer making any operation on the
 * clock which could result in a rate change or rate glitch. Exclusive clocks
 * cannot have their rate changed, either directly or indirectly due to changes
 * further up the parent chain of clocks. As a result, clocks up parent chain
 * also get under exclusive control of the calling consumer.
 *
 * If exlusivity is claimed more than once on clock, even by the same consumer,
 * the rate effectively gets locked as exclusivity can&apos;t be preempted.
 *
 * Calls to clk_rate_exclusive_put() must be balanced with calls to
 * clk_rate_exclusive_get(). Calls to this function may sleep, and do not return
 * error status.
 */</doc>
