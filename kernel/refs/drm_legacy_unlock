<dec f='linux-4.18.y/drivers/gpu/drm/drm_legacy.h' l='107' type='int drm_legacy_unlock(struct drm_device * d, void * v, struct drm_file * f)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_ioctl.c' l='582'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_ioctl.c' l='582'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_ioctl.c' l='582'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_ioctl.c' l='582'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_lock.c' l='253' ll='272' type='int drm_legacy_unlock(struct drm_device * dev, void * data, struct drm_file * file_priv)'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_lock.c' l='242'>/**
 * Unlock ioctl.
 *
 * \param inode device inode.
 * \param file_priv DRM file private.
 * \param cmd command.
 * \param arg user argument, pointing to a drm_lock structure.
 * \return zero on success or negative number on failure.
 *
 * Transfer and free the lock.
 */</doc>
