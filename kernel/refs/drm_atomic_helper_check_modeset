<dec f='linux-4.14.y/include/drm/drm_atomic_helper.h' l='39' type='int drm_atomic_helper_check_modeset(struct drm_device * dev, struct drm_atomic_state * state)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='562' ll='695' type='int drm_atomic_helper_check_modeset(struct drm_device * dev, struct drm_atomic_state * state)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='696' type='int drm_atomic_helper_check_modeset(struct drm_device * , struct drm_atomic_state * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='696' c='drm_atomic_helper_check_modeset'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='696' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='696' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='790' u='c' c='drm_atomic_helper_check'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='519'>/**
 * drm_atomic_helper_check_modeset - validate state object for modeset changes
 * @dev: DRM device
 * @state: the driver state object
 *
 * Check the state object to see if the requested state is physically possible.
 * This does all the crtc and connector related computations for an atomic
 * update and adds any additional connectors needed for full modesets. It calls
 * the various per-object callbacks in the follow order:
 *
 * 1. &amp;drm_connector_helper_funcs.atomic_best_encoder for determining the new encoder.
 * 2. &amp;drm_connector_helper_funcs.atomic_check to validate the connector state.
 * 3. If it&apos;s determined a modeset is needed then all connectors on the affected crtc
 *    crtc are added and &amp;drm_connector_helper_funcs.atomic_check is run on them.
 * 4. &amp;drm_encoder_helper_funcs.mode_valid, &amp;drm_bridge_funcs.mode_valid and
 *    &amp;drm_crtc_helper_funcs.mode_valid are called on the affected components.
 * 5. &amp;drm_bridge_funcs.mode_fixup is called on all encoder bridges.
 * 6. &amp;drm_encoder_helper_funcs.atomic_check is called to validate any encoder state.
 *    This function is only called when the encoder will be part of a configured crtc,
 *    it must not be used for implementing connector property validation.
 *    If this function is NULL, &amp;drm_atomic_encoder_helper_funcs.mode_fixup is called
 *    instead.
 * 7. &amp;drm_crtc_helper_funcs.mode_fixup is called last, to fix up the mode with crtc constraints.
 *
 * &amp;drm_crtc_state.mode_changed is set when the input mode is changed.
 * &amp;drm_crtc_state.connectors_changed is set when a connector is added or
 * removed from the crtc.  &amp;drm_crtc_state.active_changed is set when
 * &amp;drm_crtc_state.active changes, which is used for DPMS.
 * See also: drm_atomic_crtc_needs_modeset()
 *
 * IMPORTANT:
 *
 * Drivers which set &amp;drm_crtc_state.mode_changed (e.g. in their
 * &amp;drm_plane_helper_funcs.atomic_check hooks if a plane update can&apos;t be done
 * without a full modeset) _must_ call this function afterwards after that
 * change. It is permitted to call this function multiple times for the same
 * update, e.g. when the &amp;drm_crtc_helper_funcs.atomic_check functions depend
 * upon the adjusted dotclock for fifo space allocation and watermark
 * computation.
 *
 * RETURNS:
 * Zero for success or -errno
 */</doc>
