<def f='linux-4.14.y/fs/proc/internal.h' l='33' ll='54'/>
<size>144</size>
<doc f='linux-4.14.y/fs/proc/internal.h' l='23'>/*
 * This is not completely implemented yet. The idea is to
 * create an in-memory tree (like the actual /proc filesystem
 * tree) of these proc_dir_entries, so that we can dynamically
 * add new files to /proc.
 *
 * parent/subdir are used for the directory structure (every /proc file has a
 * parent, but &quot;subdir&quot; is empty for all non-directory entries).
 * subdir_node is used to build the rb tree &quot;subdir&quot; of the parent.
 */</doc>
<mbr r='proc_dir_entry::low_ino' o='0' t='unsigned int'/>
<mbr r='proc_dir_entry::mode' o='32' t='umode_t'/>
<mbr r='proc_dir_entry::nlink' o='64' t='nlink_t'/>
<mbr r='proc_dir_entry::uid' o='96' t='kuid_t'/>
<mbr r='proc_dir_entry::gid' o='128' t='kgid_t'/>
<mbr r='proc_dir_entry::size' o='192' t='loff_t'/>
<mbr r='proc_dir_entry::proc_iops' o='256' t='const struct inode_operations *'/>
<mbr r='proc_dir_entry::proc_fops' o='320' t='const struct file_operations *'/>
<mbr r='proc_dir_entry::parent' o='384' t='struct proc_dir_entry *'/>
<mbr r='proc_dir_entry::subdir' o='448' t='struct rb_root_cached'/>
<mbr r='proc_dir_entry::subdir_node' o='576' t='struct rb_node'/>
<mbr r='proc_dir_entry::data' o='768' t='void *'/>
<mbr r='proc_dir_entry::count' o='832' t='atomic_t'/>
<mbr r='proc_dir_entry::in_use' o='864' t='atomic_t'/>
<mbr r='proc_dir_entry::pde_unload_completion' o='896' t='struct completion *'/>
<mbr r='proc_dir_entry::pde_openers' o='960' t='struct list_head'/>
<mbr r='proc_dir_entry::pde_unload_lock' o='1088' t='spinlock_t'/>
<mbr r='proc_dir_entry::namelen' o='1120' t='u8'/>
<mbr r='proc_dir_entry::name' o='1128' t='char []'/>
