<dec f='linux-4.14.y/fs/ntfs/inode.h' l='275' type='struct inode * ntfs_attr_iget(struct inode * base_vi, ATTR_TYPE type, ntfschar * name, u32 name_len)'/>
<use f='linux-4.14.y/fs/ntfs/dir.c' l='1234' u='c' c='ntfs_readdir'/>
<def f='linux-4.14.y/fs/ntfs/inode.c' l='227' ll='264' type='struct inode * ntfs_attr_iget(struct inode * base_vi, ATTR_TYPE type, ntfschar * name, u32 name_len)'/>
<use f='linux-4.14.y/fs/ntfs/inode.c' l='986' u='c' c='ntfs_read_locked_inode'/>
<use f='linux-4.14.y/fs/ntfs/inode.c' l='1685' u='c' c='ntfs_read_locked_index_inode'/>
<doc f='linux-4.14.y/fs/ntfs/inode.c' l='204'>/**
 * ntfs_attr_iget - obtain a struct inode corresponding to an attribute
 * @base_vi:	vfs base inode containing the attribute
 * @type:	attribute type
 * @name:	Unicode name of the attribute (NULL if unnamed)
 * @name_len:	length of @name in Unicode characters (0 if unnamed)
 *
 * Obtain the (fake) struct inode corresponding to the attribute specified by
 * @type, @name, and @name_len, which is present in the base mft record
 * specified by the vfs inode @base_vi.
 *
 * If the attribute inode is in the cache, it is just returned with an
 * increased reference count. Otherwise, a new struct inode is allocated and
 * initialized, and finally ntfs_read_locked_attr_inode() is called to read the
 * attribute and fill in the inode structure.
 *
 * Note, for index allocation attributes, you need to use ntfs_index_iget()
 * instead of ntfs_attr_iget() as working with indices is a lot more complex.
 *
 * Return the struct inode of the attribute inode on success. Check the return
 * value with IS_ERR() and if true, the function failed and the error code is
 * obtained from PTR_ERR().
 */</doc>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1510' u='c' c='load_and_init_usnjrnl'/>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1525' u='c' c='load_and_init_usnjrnl'/>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1814' u='c' c='load_system_files'/>
