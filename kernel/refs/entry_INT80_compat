<def f='linux-4.18.y/arch/x86/entry/entry_64_compat.S' l='337' macro='1' type='int'/>
<doc f='linux-4.18.y/arch/x86/entry/entry_64_compat.S' l='311'>/*
 * 32-bit legacy system call entry.
 *
 * 32-bit x86 Linux system calls traditionally used the INT $0x80
 * instruction.  INT $0x80 lands here.
 *
 * This entry point can be used by 32-bit and 64-bit programs to perform
 * 32-bit system calls.  Instances of INT $0x80 can be found inline in
 * various programs and libraries.  It is also used by the vDSO&apos;s
 * __kernel_vsyscall fallback for hardware that doesn&apos;t support a faster
 * entry method.  Restarted 32-bit system calls also fall back to INT
 * $0x80 regardless of what instruction was originally used to do the
 * system call.
 *
 * This is considered a slow path.  It is not used by most libc
 * implementations on modern hardware except during process startup.
 *
 * Arguments:
 * eax  system call number
 * ebx  arg1
 * ecx  arg2
 * edx  arg3
 * esi  arg4
 * edi  arg5
 * ebp  arg6
 */</doc>
<dec f='linux-4.18.y/arch/x86/include/asm/proto.h' l='27' type='void entry_INT80_compat()'/>
<use f='linux-4.18.y/arch/x86/kernel/idt.c' l='103'/>
<use f='linux-4.18.y/arch/x86/kernel/idt.c' l='103'/>
<use f='linux-4.18.y/arch/x86/kernel/idt.c' l='103'/>
<use f='linux-4.18.y/arch/x86/kernel/idt.c' l='103'/>
