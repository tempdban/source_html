<dec f='linux-4.18.y/drivers/net/virtio/virtio_ethdev.h' l='89' type='uint16_t virtio_recv_pkts_vec(void * rx_queue, struct rte_mbuf ** rx_pkts, uint16_t nb_pkts)'/>
<use f='linux-4.18.y/drivers/net/virtio/virtio_ethdev.c' l='1322' u='r' c='set_rxtx_funcs'/>
<def f='linux-4.18.y/drivers/net/virtio/virtio_rxtx_simple.c' l='50' ll='57' type='uint16_t virtio_recv_pkts_vec(void * rx_queue, struct rte_mbuf ** rx_pkts, uint16_t nb_pkts)'/>
<doc f='linux-4.18.y/drivers/net/virtio/virtio_rxtx_simple.c' l='49'>/* Stub for linkage when arch specific implementation is not available */</doc>
<def f='linux-4.18.y/drivers/net/virtio/virtio_rxtx_simple_sse.c' l='39' ll='194' type='uint16_t virtio_recv_pkts_vec(void * rx_queue, struct rte_mbuf ** rx_pkts, uint16_t nb_pkts)'/>
<doc f='linux-4.18.y/drivers/net/virtio/virtio_rxtx_simple_sse.c' l='30'>/* virtio vPMD receive routine, only accept(nb_pkts &gt;= RTE_VIRTIO_DESC_PER_LOOP)
 *
 * This routine is for non-mergeable RX, one desc for each guest buffer.
 * This routine is based on the RX ring layout optimization. Each entry in the
 * avail ring points to the desc with the same index in the desc ring and this
 * will never be changed in the driver.
 *
 * - nb_pkts &lt; RTE_VIRTIO_DESC_PER_LOOP, just return no packet
 */</doc>
