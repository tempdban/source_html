<def f='linux-4.14.y/include/net/sock.h' l='317' ll='480'/>
<size>672</size>
<doc f='linux-4.14.y/include/net/sock.h' l='234'>/**
  *	struct sock - network layer representation of sockets
  *	@__sk_common: shared layout with inet_timewait_sock
  *	@sk_shutdown: mask of %SEND_SHUTDOWN and/or %RCV_SHUTDOWN
  *	@sk_userlocks: %SO_SNDBUF and %SO_RCVBUF settings
  *	@sk_lock:	synchronizer
  *	@sk_kern_sock: True if sock is using kernel lock classes
  *	@sk_rcvbuf: size of receive buffer in bytes
  *	@sk_wq: sock wait queue and async head
  *	@sk_rx_dst: receive input route used by early demux
  *	@sk_dst_cache: destination cache
  *	@sk_dst_pending_confirm: need to confirm neighbour
  *	@sk_policy: flow policy
  *	@sk_receive_queue: incoming packets
  *	@sk_wmem_alloc: transmit queue bytes committed
  *	@sk_tsq_flags: TCP Small Queues flags
  *	@sk_write_queue: Packet sending queue
  *	@sk_omem_alloc: &quot;o&quot; is &quot;option&quot; or &quot;other&quot;
  *	@sk_wmem_queued: persistent queue size
  *	@sk_forward_alloc: space allocated forward
  *	@sk_napi_id: id of the last napi context to receive data for sk
  *	@sk_ll_usec: usecs to busypoll when there is no data
  *	@sk_allocation: allocation mode
  *	@sk_pacing_rate: Pacing rate (if supported by transport/packet scheduler)
  *	@sk_pacing_status: Pacing status (requested, handled by sch_fq)
  *	@sk_max_pacing_rate: Maximum pacing rate (%SO_MAX_PACING_RATE)
  *	@sk_sndbuf: size of send buffer in bytes
  *	@__sk_flags_offset: empty field used to determine location of bitfield
  *	@sk_padding: unused element for alignment
  *	@sk_no_check_tx: %SO_NO_CHECK setting, set checksum in TX packets
  *	@sk_no_check_rx: allow zero checksum in RX packets
  *	@sk_route_caps: route capabilities (e.g. %NETIF_F_TSO)
  *	@sk_route_nocaps: forbidden route capabilities (e.g NETIF_F_GSO_MASK)
  *	@sk_gso_type: GSO type (e.g. %SKB_GSO_TCPV4)
  *	@sk_gso_max_size: Maximum GSO segment size to build
  *	@sk_gso_max_segs: Maximum number of GSO segments
  *	@sk_lingertime: %SO_LINGER l_linger setting
  *	@sk_backlog: always used with the per-socket spinlock held
  *	@sk_callback_lock: used with the callbacks in the end of this struct
  *	@sk_error_queue: rarely used
  *	@sk_prot_creator: sk_prot of original sock creator (see ipv6_setsockopt,
  *			  IPV6_ADDRFORM for instance)
  *	@sk_err: last error
  *	@sk_err_soft: errors that don&apos;t cause failure but are the cause of a
  *		      persistent failure not just &apos;timed out&apos;
  *	@sk_drops: raw/udp drops counter
  *	@sk_ack_backlog: current listen backlog
  *	@sk_max_ack_backlog: listen backlog set in listen()
  *	@sk_uid: user id of owner
  *	@sk_priority: %SO_PRIORITY setting
  *	@sk_type: socket type (%SOCK_STREAM, etc)
  *	@sk_protocol: which protocol this socket belongs in this network family
  *	@sk_peer_pid: &amp;struct pid for this socket&apos;s peer
  *	@sk_peer_cred: %SO_PEERCRED setting
  *	@sk_rcvlowat: %SO_RCVLOWAT setting
  *	@sk_rcvtimeo: %SO_RCVTIMEO setting
  *	@sk_sndtimeo: %SO_SNDTIMEO setting
  *	@sk_txhash: computed flow hash for use on transmit
  *	@sk_filter: socket filtering instructions
  *	@sk_timer: sock cleanup timer
  *	@sk_stamp: time stamp of last packet received
  *	@sk_tsflags: SO_TIMESTAMPING socket options
  *	@sk_tskey: counter to disambiguate concurrent tstamp requests
  *	@sk_zckey: counter to order MSG_ZEROCOPY notifications
  *	@sk_socket: Identd and reporting IO signals
  *	@sk_user_data: RPC layer private data
  *	@sk_frag: cached page frag
  *	@sk_peek_off: current peek_offset value
  *	@sk_send_head: front of stuff to transmit
  *	@sk_security: used by security modules
  *	@sk_mark: generic packet mark
  *	@sk_cgrp_data: cgroup data for this cgroup
  *	@sk_memcg: this socket&apos;s memory cgroup association
  *	@sk_write_pending: a write to stream socket waits to start
  *	@sk_state_change: callback to indicate change in the state of the sock
  *	@sk_data_ready: callback to indicate there is data to be processed
  *	@sk_write_space: callback to indicate there is bf sending space available
  *	@sk_error_report: callback to indicate errors (e.g. %MSG_ERRQUEUE)
  *	@sk_backlog_rcv: callback to process the backlog
  *	@sk_destruct: called at sock freeing time, i.e. when all refcnt == 0
  *	@sk_reuseport_cb: reuseport group container
  *	@sk_rcu: used during RCU grace period
  */</doc>
<mbr r='sock::__sk_common' o='0' t='struct sock_common'/>
<mbr r='sock::sk_lock' o='832' t='socket_lock_t'/>
<mbr r='sock::sk_drops' o='1088' t='atomic_t'/>
<mbr r='sock::sk_rcvlowat' o='1120' t='int'/>
<mbr r='sock::sk_error_queue' o='1152' t='struct sk_buff_head'/>
<mbr r='sock::sk_receive_queue' o='1344' t='struct sk_buff_head'/>
<mbr r='sock::sk_backlog' o='1536' t='struct (anonymous struct at /home/tempdban/kernel/stable/./include/net/sock.h:367:2)'/>
<mbr r='sock::sk_forward_alloc' o='1728' t='int'/>
<mbr r='sock::sk_ll_usec' o='1760' t='unsigned int'/>
<mbr r='sock::sk_napi_id' o='1792' t='unsigned int'/>
<mbr r='sock::sk_rcvbuf' o='1824' t='int'/>
<mbr r='sock::sk_filter' o='1856' t='struct sk_filter *'/>
<mbr r='sock::sk_rx_dst' o='1984' t='struct dst_entry *'/>
<mbr r='sock::sk_dst_cache' o='2048' t='struct dst_entry *'/>
<mbr r='sock::sk_omem_alloc' o='2112' t='atomic_t'/>
<mbr r='sock::sk_sndbuf' o='2144' t='int'/>
<mbr r='sock::sk_wmem_queued' o='2176' t='int'/>
<mbr r='sock::sk_wmem_alloc' o='2208' t='refcount_t'/>
<mbr r='sock::sk_tsq_flags' o='2240' t='unsigned long'/>
<mbr r='sock::sk_send_head' o='2304' t='struct sk_buff *'/>
<mbr r='sock::sk_write_queue' o='2368' t='struct sk_buff_head'/>
<mbr r='sock::sk_peek_off' o='2560' t='__s32'/>
<mbr r='sock::sk_write_pending' o='2592' t='int'/>
<mbr r='sock::sk_dst_pending_confirm' o='2624' t='__u32'/>
<mbr r='sock::sk_pacing_status' o='2656' t='u32'/>
<mbr r='sock::sk_sndtimeo' o='2688' t='long'/>
<mbr r='sock::sk_timer' o='2752' t='struct timer_list'/>
<mbr r='sock::sk_priority' o='3136' t='__u32'/>
<mbr r='sock::sk_mark' o='3168' t='__u32'/>
<mbr r='sock::sk_pacing_rate' o='3200' t='u32'/>
<mbr r='sock::sk_max_pacing_rate' o='3232' t='u32'/>
<mbr r='sock::sk_frag' o='3264' t='struct page_frag'/>
<mbr r='sock::sk_route_caps' o='3392' t='netdev_features_t'/>
<mbr r='sock::sk_route_nocaps' o='3456' t='netdev_features_t'/>
<mbr r='sock::sk_gso_type' o='3520' t='int'/>
<mbr r='sock::sk_gso_max_size' o='3552' t='unsigned int'/>
<mbr r='sock::sk_allocation' o='3584' t='gfp_t'/>
<mbr r='sock::sk_txhash' o='3616' t='__u32'/>
<mbr r='sock::__sk_flags_offset' o='3648' t='unsigned int [0]'/>
<mbr r='sock::sk_padding' o='3648' t='unsigned int'/>
<mbr r='sock::sk_kern_sock' o='3649' t='unsigned int'/>
<mbr r='sock::sk_no_check_tx' o='3650' t='unsigned int'/>
<mbr r='sock::sk_no_check_rx' o='3651' t='unsigned int'/>
<mbr r='sock::sk_userlocks' o='3652' t='unsigned int'/>
<mbr r='sock::sk_protocol' o='3656' t='unsigned int'/>
<mbr r='sock::sk_type' o='3664' t='unsigned int'/>
<mbr r='sock::sk_gso_max_segs' o='3680' t='u16'/>
<mbr r='sock::sk_lingertime' o='3712' t='unsigned long'/>
<mbr r='sock::sk_prot_creator' o='3776' t='struct proto *'/>
<mbr r='sock::sk_callback_lock' o='3840' t='rwlock_t'/>
<mbr r='sock::sk_err' o='3904' t='int'/>
<mbr r='sock::sk_err_soft' o='3936' t='int'/>
<mbr r='sock::sk_ack_backlog' o='3968' t='u32'/>
<mbr r='sock::sk_max_ack_backlog' o='4000' t='u32'/>
<mbr r='sock::sk_uid' o='4032' t='kuid_t'/>
<mbr r='sock::sk_peer_pid' o='4096' t='struct pid *'/>
<mbr r='sock::sk_peer_cred' o='4160' t='const struct cred *'/>
<mbr r='sock::sk_rcvtimeo' o='4224' t='long'/>
<mbr r='sock::sk_stamp' o='4288' t='ktime_t'/>
<mbr r='sock::sk_tsflags' o='4352' t='u16'/>
<mbr r='sock::sk_shutdown' o='4368' t='u8'/>
<mbr r='sock::sk_tskey' o='4384' t='u32'/>
<mbr r='sock::sk_zckey' o='4416' t='atomic_t'/>
<mbr r='sock::sk_socket' o='4480' t='struct socket *'/>
<mbr r='sock::sk_user_data' o='4544' t='void *'/>
<mbr r='sock::sk_security' o='4608' t='void *'/>
<mbr r='sock::sk_cgrp_data' o='4672' t='struct sock_cgroup_data'/>
<mbr r='sock::sk_memcg' o='4736' t='struct mem_cgroup *'/>
<mbr r='sock::sk_state_change' o='4800' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_data_ready' o='4864' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_write_space' o='4928' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_error_report' o='4992' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_backlog_rcv' o='5056' t='int (*)(struct sock *, struct sk_buff *)'/>
<mbr r='sock::sk_destruct' o='5120' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_reuseport_cb' o='5184' t='struct sock_reuseport *'/>
<mbr r='sock::sk_rcu' o='5248' t='struct callback_head'/>
<def f='linux-4.14.y/include/net/sock.h' l='317' ll='480'/>
<size>672</size>
<doc f='linux-4.14.y/include/net/sock.h' l='234'>/**
  *	struct sock - network layer representation of sockets
  *	@__sk_common: shared layout with inet_timewait_sock
  *	@sk_shutdown: mask of %SEND_SHUTDOWN and/or %RCV_SHUTDOWN
  *	@sk_userlocks: %SO_SNDBUF and %SO_RCVBUF settings
  *	@sk_lock:	synchronizer
  *	@sk_kern_sock: True if sock is using kernel lock classes
  *	@sk_rcvbuf: size of receive buffer in bytes
  *	@sk_wq: sock wait queue and async head
  *	@sk_rx_dst: receive input route used by early demux
  *	@sk_dst_cache: destination cache
  *	@sk_dst_pending_confirm: need to confirm neighbour
  *	@sk_policy: flow policy
  *	@sk_receive_queue: incoming packets
  *	@sk_wmem_alloc: transmit queue bytes committed
  *	@sk_tsq_flags: TCP Small Queues flags
  *	@sk_write_queue: Packet sending queue
  *	@sk_omem_alloc: &quot;o&quot; is &quot;option&quot; or &quot;other&quot;
  *	@sk_wmem_queued: persistent queue size
  *	@sk_forward_alloc: space allocated forward
  *	@sk_napi_id: id of the last napi context to receive data for sk
  *	@sk_ll_usec: usecs to busypoll when there is no data
  *	@sk_allocation: allocation mode
  *	@sk_pacing_rate: Pacing rate (if supported by transport/packet scheduler)
  *	@sk_pacing_status: Pacing status (requested, handled by sch_fq)
  *	@sk_max_pacing_rate: Maximum pacing rate (%SO_MAX_PACING_RATE)
  *	@sk_sndbuf: size of send buffer in bytes
  *	@__sk_flags_offset: empty field used to determine location of bitfield
  *	@sk_padding: unused element for alignment
  *	@sk_no_check_tx: %SO_NO_CHECK setting, set checksum in TX packets
  *	@sk_no_check_rx: allow zero checksum in RX packets
  *	@sk_route_caps: route capabilities (e.g. %NETIF_F_TSO)
  *	@sk_route_nocaps: forbidden route capabilities (e.g NETIF_F_GSO_MASK)
  *	@sk_gso_type: GSO type (e.g. %SKB_GSO_TCPV4)
  *	@sk_gso_max_size: Maximum GSO segment size to build
  *	@sk_gso_max_segs: Maximum number of GSO segments
  *	@sk_lingertime: %SO_LINGER l_linger setting
  *	@sk_backlog: always used with the per-socket spinlock held
  *	@sk_callback_lock: used with the callbacks in the end of this struct
  *	@sk_error_queue: rarely used
  *	@sk_prot_creator: sk_prot of original sock creator (see ipv6_setsockopt,
  *			  IPV6_ADDRFORM for instance)
  *	@sk_err: last error
  *	@sk_err_soft: errors that don&apos;t cause failure but are the cause of a
  *		      persistent failure not just &apos;timed out&apos;
  *	@sk_drops: raw/udp drops counter
  *	@sk_ack_backlog: current listen backlog
  *	@sk_max_ack_backlog: listen backlog set in listen()
  *	@sk_uid: user id of owner
  *	@sk_priority: %SO_PRIORITY setting
  *	@sk_type: socket type (%SOCK_STREAM, etc)
  *	@sk_protocol: which protocol this socket belongs in this network family
  *	@sk_peer_pid: &amp;struct pid for this socket&apos;s peer
  *	@sk_peer_cred: %SO_PEERCRED setting
  *	@sk_rcvlowat: %SO_RCVLOWAT setting
  *	@sk_rcvtimeo: %SO_RCVTIMEO setting
  *	@sk_sndtimeo: %SO_SNDTIMEO setting
  *	@sk_txhash: computed flow hash for use on transmit
  *	@sk_filter: socket filtering instructions
  *	@sk_timer: sock cleanup timer
  *	@sk_stamp: time stamp of last packet received
  *	@sk_tsflags: SO_TIMESTAMPING socket options
  *	@sk_tskey: counter to disambiguate concurrent tstamp requests
  *	@sk_zckey: counter to order MSG_ZEROCOPY notifications
  *	@sk_socket: Identd and reporting IO signals
  *	@sk_user_data: RPC layer private data
  *	@sk_frag: cached page frag
  *	@sk_peek_off: current peek_offset value
  *	@sk_send_head: front of stuff to transmit
  *	@sk_security: used by security modules
  *	@sk_mark: generic packet mark
  *	@sk_cgrp_data: cgroup data for this cgroup
  *	@sk_memcg: this socket&apos;s memory cgroup association
  *	@sk_write_pending: a write to stream socket waits to start
  *	@sk_state_change: callback to indicate change in the state of the sock
  *	@sk_data_ready: callback to indicate there is data to be processed
  *	@sk_write_space: callback to indicate there is bf sending space available
  *	@sk_error_report: callback to indicate errors (e.g. %MSG_ERRQUEUE)
  *	@sk_backlog_rcv: callback to process the backlog
  *	@sk_destruct: called at sock freeing time, i.e. when all refcnt == 0
  *	@sk_reuseport_cb: reuseport group container
  *	@sk_rcu: used during RCU grace period
  */</doc>
<mbr r='sock::__sk_common' o='0' t='struct sock_common'/>
<mbr r='sock::sk_lock' o='832' t='socket_lock_t'/>
<mbr r='sock::sk_drops' o='1088' t='atomic_t'/>
<mbr r='sock::sk_rcvlowat' o='1120' t='int'/>
<mbr r='sock::sk_error_queue' o='1152' t='struct sk_buff_head'/>
<mbr r='sock::sk_receive_queue' o='1344' t='struct sk_buff_head'/>
<mbr r='sock::sk_backlog' o='1536' t='struct (anonymous struct at /home/tempdban/kernel/stable/./include/net/sock.h:367:2)'/>
<mbr r='sock::sk_forward_alloc' o='1728' t='int'/>
<mbr r='sock::sk_ll_usec' o='1760' t='unsigned int'/>
<mbr r='sock::sk_napi_id' o='1792' t='unsigned int'/>
<mbr r='sock::sk_rcvbuf' o='1824' t='int'/>
<mbr r='sock::sk_filter' o='1856' t='struct sk_filter *'/>
<mbr r='sock::sk_rx_dst' o='1984' t='struct dst_entry *'/>
<mbr r='sock::sk_dst_cache' o='2048' t='struct dst_entry *'/>
<mbr r='sock::sk_omem_alloc' o='2112' t='atomic_t'/>
<mbr r='sock::sk_sndbuf' o='2144' t='int'/>
<mbr r='sock::sk_wmem_queued' o='2176' t='int'/>
<mbr r='sock::sk_wmem_alloc' o='2208' t='refcount_t'/>
<mbr r='sock::sk_tsq_flags' o='2240' t='unsigned long'/>
<mbr r='sock::sk_send_head' o='2304' t='struct sk_buff *'/>
<mbr r='sock::sk_write_queue' o='2368' t='struct sk_buff_head'/>
<mbr r='sock::sk_peek_off' o='2560' t='__s32'/>
<mbr r='sock::sk_write_pending' o='2592' t='int'/>
<mbr r='sock::sk_dst_pending_confirm' o='2624' t='__u32'/>
<mbr r='sock::sk_pacing_status' o='2656' t='u32'/>
<mbr r='sock::sk_sndtimeo' o='2688' t='long'/>
<mbr r='sock::sk_timer' o='2752' t='struct timer_list'/>
<mbr r='sock::sk_priority' o='3136' t='__u32'/>
<mbr r='sock::sk_mark' o='3168' t='__u32'/>
<mbr r='sock::sk_pacing_rate' o='3200' t='u32'/>
<mbr r='sock::sk_max_pacing_rate' o='3232' t='u32'/>
<mbr r='sock::sk_frag' o='3264' t='struct page_frag'/>
<mbr r='sock::sk_route_caps' o='3392' t='netdev_features_t'/>
<mbr r='sock::sk_route_nocaps' o='3456' t='netdev_features_t'/>
<mbr r='sock::sk_gso_type' o='3520' t='int'/>
<mbr r='sock::sk_gso_max_size' o='3552' t='unsigned int'/>
<mbr r='sock::sk_allocation' o='3584' t='gfp_t'/>
<mbr r='sock::sk_txhash' o='3616' t='__u32'/>
<mbr r='sock::__sk_flags_offset' o='3648' t='unsigned int [0]'/>
<mbr r='sock::sk_padding' o='3648' t='unsigned int'/>
<mbr r='sock::sk_kern_sock' o='3649' t='unsigned int'/>
<mbr r='sock::sk_no_check_tx' o='3650' t='unsigned int'/>
<mbr r='sock::sk_no_check_rx' o='3651' t='unsigned int'/>
<mbr r='sock::sk_userlocks' o='3652' t='unsigned int'/>
<mbr r='sock::sk_protocol' o='3656' t='unsigned int'/>
<mbr r='sock::sk_type' o='3664' t='unsigned int'/>
<mbr r='sock::sk_gso_max_segs' o='3680' t='u16'/>
<mbr r='sock::sk_lingertime' o='3712' t='unsigned long'/>
<mbr r='sock::sk_prot_creator' o='3776' t='struct proto *'/>
<mbr r='sock::sk_callback_lock' o='3840' t='rwlock_t'/>
<mbr r='sock::sk_err' o='3904' t='int'/>
<mbr r='sock::sk_err_soft' o='3936' t='int'/>
<mbr r='sock::sk_ack_backlog' o='3968' t='u32'/>
<mbr r='sock::sk_max_ack_backlog' o='4000' t='u32'/>
<mbr r='sock::sk_uid' o='4032' t='kuid_t'/>
<mbr r='sock::sk_peer_pid' o='4096' t='struct pid *'/>
<mbr r='sock::sk_peer_cred' o='4160' t='const struct cred *'/>
<mbr r='sock::sk_rcvtimeo' o='4224' t='long'/>
<mbr r='sock::sk_stamp' o='4288' t='ktime_t'/>
<mbr r='sock::sk_tsflags' o='4352' t='u16'/>
<mbr r='sock::sk_shutdown' o='4368' t='u8'/>
<mbr r='sock::sk_tskey' o='4384' t='u32'/>
<mbr r='sock::sk_zckey' o='4416' t='atomic_t'/>
<mbr r='sock::sk_socket' o='4480' t='struct socket *'/>
<mbr r='sock::sk_user_data' o='4544' t='void *'/>
<mbr r='sock::sk_security' o='4608' t='void *'/>
<mbr r='sock::sk_cgrp_data' o='4672' t='struct sock_cgroup_data'/>
<mbr r='sock::sk_memcg' o='4736' t='struct mem_cgroup *'/>
<mbr r='sock::sk_state_change' o='4800' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_data_ready' o='4864' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_write_space' o='4928' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_error_report' o='4992' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_backlog_rcv' o='5056' t='int (*)(struct sock *, struct sk_buff *)'/>
<mbr r='sock::sk_destruct' o='5120' t='void (*)(struct sock *)'/>
<mbr r='sock::sk_reuseport_cb' o='5184' t='struct sock_reuseport *'/>
<mbr r='sock::sk_rcu' o='5248' t='struct callback_head'/>
