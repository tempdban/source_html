<dec f='linux-4.14.y/include/linux/cpuidle.h' l='133' type='int cpuidle_select(struct cpuidle_driver * drv, struct cpuidle_device * dev)'/>
<def f='linux-4.14.y/drivers/cpuidle/cpuidle.c' l='269' ll='272' type='int cpuidle_select(struct cpuidle_driver * drv, struct cpuidle_device * dev)'/>
<doc f='linux-4.14.y/drivers/cpuidle/cpuidle.c' l='261'>/**
 * cpuidle_select - ask the cpuidle framework to choose an idle state
 *
 * @drv: the cpuidle driver
 * @dev: the cpuidle device
 *
 * Returns the index of the idle state.  The return value must not be negative.
 */</doc>
<use f='linux-4.14.y/kernel/sched/idle.c' l='185' u='c' c='cpuidle_idle_call'/>
<dec f='linux-4.14.y/include/linux/cpuidle.h' l='133' type='int cpuidle_select(struct cpuidle_driver * drv, struct cpuidle_device * dev)'/>
<def f='linux-4.14.y/drivers/cpuidle/cpuidle.c' l='269' ll='272' type='int cpuidle_select(struct cpuidle_driver * drv, struct cpuidle_device * dev)'/>
<doc f='linux-4.14.y/drivers/cpuidle/cpuidle.c' l='261'>/**
 * cpuidle_select - ask the cpuidle framework to choose an idle state
 *
 * @drv: the cpuidle driver
 * @dev: the cpuidle device
 *
 * Returns the index of the idle state.  The return value must not be negative.
 */</doc>
<use f='linux-4.14.y/kernel/sched/idle.c' l='185' u='c' c='cpuidle_idle_call'/>
