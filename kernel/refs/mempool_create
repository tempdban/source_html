<dec f='linux-4.14.y/include/linux/mempool.h' l='28' type='mempool_t * mempool_create(int min_nr, mempool_alloc_t * alloc_fn, mempool_free_t * free_fn, void * pool_data)'/>
<use f='linux-4.14.y/include/linux/mempool.h' l='49' u='c' c='mempool_create_slab_pool'/>
<use f='linux-4.14.y/include/linux/mempool.h' l='61' u='c' c='mempool_create_kmalloc_pool'/>
<use f='linux-4.14.y/include/linux/mempool.h' l='73' u='c' c='mempool_create_page_pool'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='2764' u='c' c='crypt_ctr'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='2556' u='c' c='init_resync'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='2941' u='c' c='setup_conf'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='3225' u='c' c='raid1_reshape'/>
<use f='linux-4.14.y/drivers/md/raid10.c' l='2798' u='c' c='init_resync'/>
<use f='linux-4.14.y/drivers/md/raid10.c' l='3576' u='c' c='setup_conf'/>
<use f='linux-4.14.y/drivers/md/raid5-ppl.c' l='1234' u='c' c='ppl_init_log'/>
<def f='linux-4.14.y/mm/mempool.c' l='176' ll='181' type='mempool_t * mempool_create(int min_nr, mempool_alloc_t * alloc_fn, mempool_free_t * free_fn, void * pool_data)'/>
<dec f='linux-4.14.y/mm/mempool.c' l='182' type='mempool_t * mempool_create(int , mempool_alloc_t * , mempool_free_t * , void * )'/>
<use f='linux-4.14.y/mm/mempool.c' l='182' c='mempool_create'/>
<use f='linux-4.14.y/mm/mempool.c' l='182' u='a'/>
<use f='linux-4.14.y/mm/mempool.c' l='182' u='a'/>
<doc f='linux-4.14.y/mm/mempool.c' l='162'>/**
 * mempool_create - create a memory pool
 * @min_nr:    the minimum number of elements guaranteed to be
 *             allocated for this pool.
 * @alloc_fn:  user-defined element-allocation function.
 * @free_fn:   user-defined element-freeing function.
 * @pool_data: optional private data available to the user-defined functions.
 *
 * this function creates and allocates a guaranteed size, preallocated
 * memory pool. The pool can be used from the mempool_alloc() and mempool_free()
 * functions. This function might sleep. Both the alloc_fn() and the free_fn()
 * functions might sleep - as long as the mempool_alloc() function is not called
 * from IRQ contexts.
 */</doc>
<dec f='linux-4.14.y/include/linux/mempool.h' l='28' type='mempool_t * mempool_create(int min_nr, mempool_alloc_t * alloc_fn, mempool_free_t * free_fn, void * pool_data)'/>
<use f='linux-4.14.y/include/linux/mempool.h' l='49' u='c' c='mempool_create_slab_pool'/>
<use f='linux-4.14.y/include/linux/mempool.h' l='61' u='c' c='mempool_create_kmalloc_pool'/>
<use f='linux-4.14.y/include/linux/mempool.h' l='73' u='c' c='mempool_create_page_pool'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='2764' u='c' c='crypt_ctr'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='2556' u='c' c='init_resync'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='2941' u='c' c='setup_conf'/>
<use f='linux-4.14.y/drivers/md/raid1.c' l='3225' u='c' c='raid1_reshape'/>
<use f='linux-4.14.y/drivers/md/raid10.c' l='2798' u='c' c='init_resync'/>
<use f='linux-4.14.y/drivers/md/raid10.c' l='3576' u='c' c='setup_conf'/>
<use f='linux-4.14.y/drivers/md/raid5-ppl.c' l='1234' u='c' c='ppl_init_log'/>
<def f='linux-4.14.y/mm/mempool.c' l='176' ll='181' type='mempool_t * mempool_create(int min_nr, mempool_alloc_t * alloc_fn, mempool_free_t * free_fn, void * pool_data)'/>
<dec f='linux-4.14.y/mm/mempool.c' l='182' type='mempool_t * mempool_create(int , mempool_alloc_t * , mempool_free_t * , void * )'/>
<use f='linux-4.14.y/mm/mempool.c' l='182' c='mempool_create'/>
<use f='linux-4.14.y/mm/mempool.c' l='182' u='a'/>
<use f='linux-4.14.y/mm/mempool.c' l='182' u='a'/>
<doc f='linux-4.14.y/mm/mempool.c' l='162'>/**
 * mempool_create - create a memory pool
 * @min_nr:    the minimum number of elements guaranteed to be
 *             allocated for this pool.
 * @alloc_fn:  user-defined element-allocation function.
 * @free_fn:   user-defined element-freeing function.
 * @pool_data: optional private data available to the user-defined functions.
 *
 * this function creates and allocates a guaranteed size, preallocated
 * memory pool. The pool can be used from the mempool_alloc() and mempool_free()
 * functions. This function might sleep. Both the alloc_fn() and the free_fn()
 * functions might sleep - as long as the mempool_alloc() function is not called
 * from IRQ contexts.
 */</doc>
