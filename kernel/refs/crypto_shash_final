<dec f='linux-4.14.y/include/crypto/hash.h' l='914' type='int crypto_shash_final(struct shash_desc * desc, u8 * out)'/>
<doc f='linux-4.14.y/include/crypto/hash.h' l='901'>/**
 * crypto_shash_final() - calculate message digest
 * @desc: operational state handle that is already filled with data
 * @out: output buffer filled with the message digest
 *
 * Finalize the message digest operation and create the message digest
 * based on all data added to the cipher handle. The message digest is placed
 * into the output buffer. The caller must ensure that the output buffer is
 * large enough by using crypto_shash_digestsize.
 *
 * Return: 0 if the message digest creation was successful; &lt; 0 if an error
 *	   occurred
 */</doc>
<use f='linux-4.14.y/crypto/drbg.c' l='1626' u='c' c='drbg_kcapi_hash'/>
<use f='linux-4.14.y/crypto/hmac.c' l='135' u='c' c='hmac_final'/>
<def f='linux-4.14.y/crypto/shash.c' l='143' ll='153' type='int crypto_shash_final(struct shash_desc * desc, u8 * out)'/>
<dec f='linux-4.14.y/crypto/shash.c' l='154' type='int crypto_shash_final(struct shash_desc * , u8 * )'/>
<use f='linux-4.14.y/crypto/shash.c' l='154' c='crypto_shash_final'/>
<use f='linux-4.14.y/crypto/shash.c' l='154' u='a'/>
<use f='linux-4.14.y/crypto/shash.c' l='154' u='a'/>
<use f='linux-4.14.y/crypto/shash.c' l='160' u='c' c='shash_finup_unaligned'/>
<use f='linux-4.14.y/crypto/shash.c' l='252' u='c' c='shash_async_final'/>
<use f='linux-4.14.y/crypto/shash.c' l='262' u='c' c='shash_ahash_finup'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='782' u='c' c='crypt_iv_tcw_whitening'/>
<use f='linux-4.14.y/security/apparmor/crypto.c' l='54' u='c' c='aa_calc_hash'/>
<use f='linux-4.14.y/security/apparmor/crypto.c' l='95' u='c' c='aa_calc_profile_hash'/>
