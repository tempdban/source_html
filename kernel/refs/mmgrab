<def f='linux-4.14.y/include/linux/sched/mm.h' l='33' ll='36' type='void mmgrab(struct mm_struct * mm)'/>
<doc f='linux-4.14.y/include/linux/sched/mm.h' l='16'>/**
 * mmgrab() - Pin a &amp;struct mm_struct.
 * @mm: The &amp;struct mm_struct to pin.
 *
 * Make sure that @mm will not get freed even after the owning task
 * exits. This doesn&apos;t guarantee that the associated address space
 * will still exist later on and mmget_not_zero() has to be used before
 * accessing it.
 *
 * This is a preferred way to to pin @mm for a longer/unbounded amount
 * of time.
 *
 * Use mmdrop() to release the reference acquired by mmgrab().
 *
 * See also &lt;Documentation/vm/active_mm.txt&gt; for an in-depth explanation
 * of &amp;mm_struct.mm_count vs &amp;mm_struct.mm_users.
 */</doc>
<use f='linux-4.14.y/arch/x86/kernel/cpu/common.c' l='1667' u='c' c='cpu_init'/>
<use f='linux-4.14.y/fs/proc/base.c' l='777' u='c' c='proc_mem_open'/>
<use f='linux-4.14.y/fs/proc/base.c' l='1072' u='c' c='__set_oom_adj'/>
<use f='linux-4.14.y/kernel/exit.c' l='535' u='c' c='exit_mm'/>
<use f='linux-4.14.y/kernel/futex.c' l='343' u='c' c='futex_get_mm'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='2785' u='c' c='context_switch'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='5943' u='c' c='sched_init'/>
<use f='linux-4.14.y/mm/mmu_context.c' l='30' u='c' c='use_mm'/>
<use f='linux-4.14.y/mm/mmu_notifier.c' l='259' u='c' c='do_mmu_notifier_register'/>
<use f='linux-4.14.y/mm/oom_kill.c' l='683' u='c' c='mark_oom_victim'/>
<use f='linux-4.14.y/mm/oom_kill.c' l='906' u='c' c='oom_kill_process'/>
<def f='linux-4.14.y/include/linux/sched/mm.h' l='33' ll='36' type='void mmgrab(struct mm_struct * mm)'/>
<doc f='linux-4.14.y/include/linux/sched/mm.h' l='16'>/**
 * mmgrab() - Pin a &amp;struct mm_struct.
 * @mm: The &amp;struct mm_struct to pin.
 *
 * Make sure that @mm will not get freed even after the owning task
 * exits. This doesn&apos;t guarantee that the associated address space
 * will still exist later on and mmget_not_zero() has to be used before
 * accessing it.
 *
 * This is a preferred way to to pin @mm for a longer/unbounded amount
 * of time.
 *
 * Use mmdrop() to release the reference acquired by mmgrab().
 *
 * See also &lt;Documentation/vm/active_mm.txt&gt; for an in-depth explanation
 * of &amp;mm_struct.mm_count vs &amp;mm_struct.mm_users.
 */</doc>
<use f='linux-4.14.y/arch/x86/kernel/cpu/common.c' l='1667' u='c' c='cpu_init'/>
<use f='linux-4.14.y/fs/proc/base.c' l='777' u='c' c='proc_mem_open'/>
<use f='linux-4.14.y/fs/proc/base.c' l='1072' u='c' c='__set_oom_adj'/>
<use f='linux-4.14.y/kernel/exit.c' l='535' u='c' c='exit_mm'/>
<use f='linux-4.14.y/kernel/futex.c' l='343' u='c' c='futex_get_mm'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='2785' u='c' c='context_switch'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='5943' u='c' c='sched_init'/>
<use f='linux-4.14.y/mm/mmu_context.c' l='30' u='c' c='use_mm'/>
<use f='linux-4.14.y/mm/mmu_notifier.c' l='259' u='c' c='do_mmu_notifier_register'/>
<use f='linux-4.14.y/mm/oom_kill.c' l='683' u='c' c='mark_oom_victim'/>
<use f='linux-4.14.y/mm/oom_kill.c' l='906' u='c' c='oom_kill_process'/>
