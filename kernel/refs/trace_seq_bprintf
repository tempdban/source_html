<dec f='linux-4.14.y/include/linux/trace_seq.h' l='81' type='void trace_seq_bprintf(struct trace_seq * s, const char * fmt, const u32 * binary)'/>
<use f='linux-4.14.y/kernel/trace/trace_output.c' l='45' u='c' c='trace_print_bprintk_msg_only'/>
<use f='linux-4.14.y/kernel/trace/trace_output.c' l='1285' u='c' c='trace_bprint_print'/>
<use f='linux-4.14.y/kernel/trace/trace_output.c' l='1301' u='c' c='trace_bprint_raw'/>
<def f='linux-4.14.y/kernel/trace/trace_seq.c' l='177' ll='194' type='void trace_seq_bprintf(struct trace_seq * s, const char * fmt, const u32 * binary)'/>
<dec f='linux-4.14.y/kernel/trace/trace_seq.c' l='195' type='void trace_seq_bprintf(struct trace_seq * , const char * , const u32 * )'/>
<use f='linux-4.14.y/kernel/trace/trace_seq.c' l='195' c='trace_seq_bprintf'/>
<use f='linux-4.14.y/kernel/trace/trace_seq.c' l='195' u='a'/>
<use f='linux-4.14.y/kernel/trace/trace_seq.c' l='195' u='a'/>
<doc f='linux-4.14.y/kernel/trace/trace_seq.c' l='162'>/**
 * trace_seq_bprintf - Write the printf string from binary arguments
 * @s: trace sequence descriptor
 * @fmt: The format string for the @binary arguments
 * @binary: The binary arguments for @fmt.
 *
 * When recording in a fast path, a printf may be recorded with just
 * saving the format and the arguments as they were passed to the
 * function, instead of wasting cycles converting the arguments into
 * ASCII characters. Instead, the arguments are saved in a 32 bit
 * word array that is defined by the format string constraints.
 *
 * This function will take the format and the binary array and finish
 * the conversion into the ASCII string within the buffer.
 */</doc>
<dec f='linux-4.14.y/include/linux/trace_seq.h' l='81' type='void trace_seq_bprintf(struct trace_seq * s, const char * fmt, const u32 * binary)'/>
<use f='linux-4.14.y/kernel/trace/trace_output.c' l='45' u='c' c='trace_print_bprintk_msg_only'/>
<use f='linux-4.14.y/kernel/trace/trace_output.c' l='1285' u='c' c='trace_bprint_print'/>
<use f='linux-4.14.y/kernel/trace/trace_output.c' l='1301' u='c' c='trace_bprint_raw'/>
<def f='linux-4.14.y/kernel/trace/trace_seq.c' l='177' ll='194' type='void trace_seq_bprintf(struct trace_seq * s, const char * fmt, const u32 * binary)'/>
<dec f='linux-4.14.y/kernel/trace/trace_seq.c' l='195' type='void trace_seq_bprintf(struct trace_seq * , const char * , const u32 * )'/>
<use f='linux-4.14.y/kernel/trace/trace_seq.c' l='195' c='trace_seq_bprintf'/>
<use f='linux-4.14.y/kernel/trace/trace_seq.c' l='195' u='a'/>
<use f='linux-4.14.y/kernel/trace/trace_seq.c' l='195' u='a'/>
<doc f='linux-4.14.y/kernel/trace/trace_seq.c' l='162'>/**
 * trace_seq_bprintf - Write the printf string from binary arguments
 * @s: trace sequence descriptor
 * @fmt: The format string for the @binary arguments
 * @binary: The binary arguments for @fmt.
 *
 * When recording in a fast path, a printf may be recorded with just
 * saving the format and the arguments as they were passed to the
 * function, instead of wasting cycles converting the arguments into
 * ASCII characters. Instead, the arguments are saved in a 32 bit
 * word array that is defined by the format string constraints.
 *
 * This function will take the format and the binary array and finish
 * the conversion into the ASCII string within the buffer.
 */</doc>
