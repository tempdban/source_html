<def f='linux-4.14.y/include/linux/rculist_nulls.h' l='66' ll='70' type='void hlist_nulls_del_rcu(struct hlist_nulls_node * n)'/>
<doc f='linux-4.14.y/include/linux/rculist_nulls.h' l='47'>/**
 * hlist_nulls_del_rcu - deletes entry from hash list without re-initialization
 * @n: the element to delete from the hash list.
 *
 * Note: hlist_nulls_unhashed() on entry does not return true after this,
 * the entry is in an undefined state. It is useful for RCU based
 * lockfree traversal.
 *
 * In particular, it means that we can not poison the forward
 * pointers that may still be used for walking the hash list.
 *
 * The caller must take whatever precautions are necessary
 * (such as holding appropriate locks) to avoid racing
 * with another list-mutation primitive, such as hlist_nulls_add_head_rcu()
 * or hlist_nulls_del_rcu(), running on this same list.
 * However, it is perfectly legal to run concurrently with
 * the _rcu list-traversal primitives, such as
 * hlist_nulls_for_each_entry().
 */</doc>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_core.c' l='307' u='c' c='clean_from_lists'/>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_core.c' l='308' u='c' c='clean_from_lists'/>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_core.c' l='354' u='c' c='nf_ct_del_from_dying_or_unconfirmed_list'/>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_core.c' l='1922' u='c' c='nf_conntrack_hash_resize'/>
<def f='linux-4.14.y/include/linux/rculist_nulls.h' l='66' ll='70' type='void hlist_nulls_del_rcu(struct hlist_nulls_node * n)'/>
<doc f='linux-4.14.y/include/linux/rculist_nulls.h' l='47'>/**
 * hlist_nulls_del_rcu - deletes entry from hash list without re-initialization
 * @n: the element to delete from the hash list.
 *
 * Note: hlist_nulls_unhashed() on entry does not return true after this,
 * the entry is in an undefined state. It is useful for RCU based
 * lockfree traversal.
 *
 * In particular, it means that we can not poison the forward
 * pointers that may still be used for walking the hash list.
 *
 * The caller must take whatever precautions are necessary
 * (such as holding appropriate locks) to avoid racing
 * with another list-mutation primitive, such as hlist_nulls_add_head_rcu()
 * or hlist_nulls_del_rcu(), running on this same list.
 * However, it is perfectly legal to run concurrently with
 * the _rcu list-traversal primitives, such as
 * hlist_nulls_for_each_entry().
 */</doc>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_core.c' l='307' u='c' c='clean_from_lists'/>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_core.c' l='308' u='c' c='clean_from_lists'/>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_core.c' l='354' u='c' c='nf_ct_del_from_dying_or_unconfirmed_list'/>
<use f='linux-4.14.y/net/netfilter/nf_conntrack_core.c' l='1922' u='c' c='nf_conntrack_hash_resize'/>
