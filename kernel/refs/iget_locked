<dec f='linux-4.18.y/include/linux/fs.h' l='2907' type='struct inode * iget_locked(struct super_block * , unsigned long )'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='4767' u='c' c='ext4_iget'/>
<use f='linux-4.18.y/fs/f2fs/inode.c' l='334' u='c' c='f2fs_iget'/>
<def f='linux-4.18.y/fs/inode.c' l='1122' ll='1176' type='struct inode * iget_locked(struct super_block * sb, unsigned long ino)'/>
<dec f='linux-4.18.y/fs/inode.c' l='1177' type='struct inode * iget_locked(struct super_block * , unsigned long )'/>
<use f='linux-4.18.y/fs/inode.c' l='1177' c='iget_locked'/>
<use f='linux-4.18.y/fs/inode.c' l='1177' u='a'/>
<use f='linux-4.18.y/fs/inode.c' l='1177' u='a'/>
<doc f='linux-4.18.y/fs/inode.c' l='1109'>/**
 * iget_locked - obtain an inode from a mounted file system
 * @sb:		super block of file system
 * @ino:	inode number to get
 *
 * Search for the inode specified by @ino in the inode cache and if present
 * return it with an increased reference count. This is for file systems
 * where the inode number is sufficient for unique identification of an inode.
 *
 * If the inode is not in cache, allocate a new inode and return it locked,
 * hashed, and with the I_NEW flag set.  The file system gets to fill it in
 * before unlocking it via unlock_new_inode().
 */</doc>
<use f='linux-4.18.y/fs/kernfs/inode.c' l='269' u='c' c='kernfs_get_inode'/>
<use f='linux-4.18.y/fs/udf/inode.c' l='1836' u='c' c='__udf_iget'/>
