<def f='linux-4.14.y/include/linux/dmaengine.h' l='422' ll='431'/>
<size>28</size>
<doc f='linux-4.14.y/include/linux/dmaengine.h' l='407'>/* struct dma_slave_caps - expose capabilities of a slave channel only
 *
 * @src_addr_widths: bit mask of src addr widths the channel supports
 * @dst_addr_widths: bit mask of dstn addr widths the channel supports
 * @directions: bit mask of slave direction the channel supported
 * 	since the enum dma_transfer_direction is not defined as bits for each
 * 	type of direction, the dma controller should fill (1 &lt;&lt; &lt;TYPE&gt;) and same
 * 	should be checked by controller as well
 * @max_burst: max burst capability per-transfer
 * @cmd_pause: true, if pause and thereby resume is supported
 * @cmd_terminate: true, if terminate cmd is supported
 * @residue_granularity: granularity of the reported transfer residue
 * @descriptor_reuse: if a descriptor can be reused by client and
 * resubmitted multiple times
 */</doc>
<mbr r='dma_slave_caps::src_addr_widths' o='0' t='u32'/>
<mbr r='dma_slave_caps::dst_addr_widths' o='32' t='u32'/>
<mbr r='dma_slave_caps::directions' o='64' t='u32'/>
<mbr r='dma_slave_caps::max_burst' o='96' t='u32'/>
<mbr r='dma_slave_caps::cmd_pause' o='128' t='bool'/>
<mbr r='dma_slave_caps::cmd_terminate' o='136' t='bool'/>
<mbr r='dma_slave_caps::residue_granularity' o='160' t='enum dma_residue_granularity'/>
<mbr r='dma_slave_caps::descriptor_reuse' o='192' t='bool'/>
