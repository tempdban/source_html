<def f='linux-4.14.y/include/linux/rbtree_latch.h' l='142' ll='151' type='void latch_tree_insert(struct latch_tree_node * node, struct latch_tree_root * root, const struct latch_tree_ops * ops)'/>
<doc f='linux-4.14.y/include/linux/rbtree_latch.h' l='127'>/**
 * latch_tree_insert() - insert @node into the trees @root
 * @node: nodes to insert
 * @root: trees to insert @node into
 * @ops: operators defining the node order
 *
 * It inserts @node into @root in an ordered fashion such that we can always
 * observe one complete tree. See the comment for raw_write_seqcount_latch().
 *
 * The inserts use rcu_assign_pointer() to publish the element such that the
 * tree structure is stored before we can observe the new @node.
 *
 * All modifications (latch_tree_insert, latch_tree_remove) are assumed to be
 * serialized.
 */</doc>
<use f='linux-4.14.y/kernel/bpf/core.c' l='366' u='c' c='bpf_prog_ksym_node_add'/>
<use f='linux-4.14.y/kernel/module.c' l='167' u='c' c='__mod_tree_insert'/>
