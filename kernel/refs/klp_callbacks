<def f='linux-4.18.y/include/linux/livepatch.h' l='104' ll='110'/>
<size>40</size>
<doc f='linux-4.18.y/include/linux/livepatch.h' l='90'>/**
 * struct klp_callbacks - pre/post live-(un)patch callback structure
 * @pre_patch:		executed before code patching
 * @post_patch:		executed after code patching
 * @pre_unpatch:	executed before code unpatching
 * @post_unpatch:	executed after code unpatching
 * @post_unpatch_enabled:	flag indicating if post-unpatch callback
 * 				should run
 *
 * All callbacks are optional.  Only the pre-patch callback, if provided,
 * will be unconditionally executed.  If the parent klp_object fails to
 * patch for any reason, including a non-zero error status returned from
 * the pre-patch callback, no further callbacks will be executed.
 */</doc>
<mbr r='klp_callbacks::pre_patch' o='0' t='int (*)(struct klp_object *)'/>
<mbr r='klp_callbacks::post_patch' o='64' t='void (*)(struct klp_object *)'/>
<mbr r='klp_callbacks::pre_unpatch' o='128' t='void (*)(struct klp_object *)'/>
<mbr r='klp_callbacks::post_unpatch' o='192' t='void (*)(struct klp_object *)'/>
<mbr r='klp_callbacks::post_unpatch_enabled' o='256' t='bool'/>
