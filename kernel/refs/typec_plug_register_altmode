<dec f='linux-4.18.y/include/linux/usb/typec.h' l='135' type='struct typec_altmode * typec_plug_register_altmode(struct typec_plug * plug, const struct typec_altmode_desc * desc)'/>
<def f='linux-4.18.y/drivers/usb/typec/class.c' l='598' ll='603' type='struct typec_altmode * typec_plug_register_altmode(struct typec_plug * plug, const struct typec_altmode_desc * desc)'/>
<dec f='linux-4.18.y/drivers/usb/typec/class.c' l='604' type='struct typec_altmode * typec_plug_register_altmode(struct typec_plug * , const struct typec_altmode_desc * )'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='604' c='typec_plug_register_altmode'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='604' u='a'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='604' u='a'/>
<doc f='linux-4.18.y/drivers/usb/typec/class.c' l='586'>/**
 * typec_plug_register_altmode - Register USB Type-C Cable Plug Alternate Mode
 * @plug: USB Type-C Cable Plug that supports the alternate mode
 * @desc: Description of the alternate mode
 *
 * This routine is used to register each alternate mode individually that @plug
 * has listed in response to Discover SVIDs command. The modes for a SVID that
 * the plug lists in response to Discover Modes command need to be listed in an
 * array in @desc.
 *
 * Returns handle to the alternate mode on success or ERR_PTR on failure.
 */</doc>
