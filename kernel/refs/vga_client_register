<dec f='linux-4.18.y/include/linux/vgaarb.h' l='146' type='int vga_client_register(struct pci_dev * pdev, void * cookie, void (*)(void *, bool) irq_set_state, unsigned int (*)(void *, bool) set_vga_decode)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_irq.c' l='145' u='c' c='drm_irq_install'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_irq.c' l='211' u='c' c='drm_irq_uninstall'/>
<def f='linux-4.18.y/drivers/gpu/vga/vgaarb.c' l='831' ll='854' type='int vga_client_register(struct pci_dev * pdev, void * cookie, void (*)(void *, bool) irq_set_state, unsigned int (*)(void *, bool) set_vga_decode)'/>
<dec f='linux-4.18.y/drivers/gpu/vga/vgaarb.c' l='855' type='int vga_client_register(struct pci_dev * , void * , void (*)(void *, bool) , unsigned int (*)(void *, bool) )'/>
<use f='linux-4.18.y/drivers/gpu/vga/vgaarb.c' l='855' c='vga_client_register'/>
<use f='linux-4.18.y/drivers/gpu/vga/vgaarb.c' l='855' u='a'/>
<use f='linux-4.18.y/drivers/gpu/vga/vgaarb.c' l='855' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/vga/vgaarb.c' l='800'>/**
 * vga_client_register - register or unregister a VGA arbitration client
 * @pdev: pci device of the VGA client
 * @cookie: client cookie to be used in callbacks
 * @irq_set_state: irq state change callback
 * @set_vga_decode: vga decode change callback
 *
 * Clients have two callback mechanisms they can use.
 *
 * @irq_set_state callback: If a client can&apos;t disable its GPUs VGA
 * resources, then we need to be able to ask it to turn off its irqs when we
 * turn off its mem and io decoding.
 *
 * @set_vga_decode callback: If a client can disable its GPU VGA resource, it
 * will get a callback from this to set the encode/decode state.
 *
 * Rationale: we cannot disable VGA decode resources unconditionally some single
 * GPU laptops seem to require ACPI or BIOS access to the VGA registers to
 * control things like backlights etc.  Hopefully newer multi-GPU laptops do
 * something saner, and desktops won&apos;t have any special ACPI for this. The
 * driver will get a callback when VGA arbitration is first used by userspace
 * since some older X servers have issues.
 *
 * This function does not check whether a client for @pdev has been registered
 * already.
 *
 * To unregister just call this function with @irq_set_state and @set_vga_decode
 * both set to NULL for the same @pdev as originally used to register them.
 *
 * Returns: 0 on success, -1 on failure
 */</doc>
<use f='linux-4.18.y/drivers/vfio/pci/vfio_pci.c' l='1221' u='c' c='vfio_pci_probe'/>
<use f='linux-4.18.y/drivers/vfio/pci/vfio_pci.c' l='1257' u='c' c='vfio_pci_remove'/>
