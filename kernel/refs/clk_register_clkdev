<dec f='linux-4.14.y/include/linux/clkdev.h' l='52' type='int clk_register_clkdev(struct clk * , const char * , const char * )'/>
<def f='linux-4.14.y/drivers/clk/clkdev.c' l='421' ll='440' type='int clk_register_clkdev(struct clk * clk, const char * con_id, const char * dev_id)'/>
<dec f='linux-4.14.y/drivers/clk/clkdev.c' l='441' type='int clk_register_clkdev(struct clk * , const char * , const char * )'/>
<use f='linux-4.14.y/drivers/clk/clkdev.c' l='441' c='clk_register_clkdev'/>
<use f='linux-4.14.y/drivers/clk/clkdev.c' l='441' u='a'/>
<use f='linux-4.14.y/drivers/clk/clkdev.c' l='441' u='a'/>
<doc f='linux-4.14.y/drivers/clk/clkdev.c' l='407'>/**
 * clk_register_clkdev - register one clock lookup for a struct clk
 * @clk: struct clk to associate with all clk_lookups
 * @con_id: connection ID string on device
 * @dev_id: string describing device name
 *
 * con_id or dev_id may be NULL as a wildcard, just as in the rest of
 * clkdev.
 *
 * To make things easier for mass registration, we detect error clks
 * from a previous clk_register() call, and return the error code for
 * those.  This is to permit this function to be called immediately
 * after clk_register().
 */</doc>
<dec f='linux-4.14.y/include/linux/clkdev.h' l='52' type='int clk_register_clkdev(struct clk * , const char * , const char * )'/>
<def f='linux-4.14.y/drivers/clk/clkdev.c' l='421' ll='440' type='int clk_register_clkdev(struct clk * clk, const char * con_id, const char * dev_id)'/>
<dec f='linux-4.14.y/drivers/clk/clkdev.c' l='441' type='int clk_register_clkdev(struct clk * , const char * , const char * )'/>
<use f='linux-4.14.y/drivers/clk/clkdev.c' l='441' c='clk_register_clkdev'/>
<use f='linux-4.14.y/drivers/clk/clkdev.c' l='441' u='a'/>
<use f='linux-4.14.y/drivers/clk/clkdev.c' l='441' u='a'/>
<doc f='linux-4.14.y/drivers/clk/clkdev.c' l='407'>/**
 * clk_register_clkdev - register one clock lookup for a struct clk
 * @clk: struct clk to associate with all clk_lookups
 * @con_id: connection ID string on device
 * @dev_id: string describing device name
 *
 * con_id or dev_id may be NULL as a wildcard, just as in the rest of
 * clkdev.
 *
 * To make things easier for mass registration, we detect error clks
 * from a previous clk_register() call, and return the error code for
 * those.  This is to permit this function to be called immediately
 * after clk_register().
 */</doc>
