<dec f='linux-4.14.y/include/scsi/scsi_device.h' l='343' type='void starget_for_each_device(struct scsi_target * , void * , void (*)(struct scsi_device *, void *) fn)'/>
<use f='linux-4.14.y/drivers/message/fusion/mptsas.c' l='1095' u='c' c='mptsas_block_io_starget'/>
<use f='linux-4.14.y/drivers/message/fusion/mptsas.c' l='4219' u='c' c='mptsas_reprobe_target'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='6535' u='c' c='_scsih_sas_pd_expose'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='6586' u='c' c='_scsih_sas_pd_hide'/>
<def f='linux-4.14.y/drivers/scsi/scsi.c' l='618' ll='629' type='void starget_for_each_device(struct scsi_target * starget, void * data, void (*)(struct scsi_device *, void *) fn)'/>
<dec f='linux-4.14.y/drivers/scsi/scsi.c' l='630' type='void starget_for_each_device(struct scsi_target * , void * , void (*)(struct scsi_device *, void *) )'/>
<use f='linux-4.14.y/drivers/scsi/scsi.c' l='630' c='starget_for_each_device'/>
<use f='linux-4.14.y/drivers/scsi/scsi.c' l='630' u='a'/>
<use f='linux-4.14.y/drivers/scsi/scsi.c' l='630' u='a'/>
<doc f='linux-4.14.y/drivers/scsi/scsi.c' l='608'>/**
 * starget_for_each_device  -  helper to walk all devices of a target
 * @starget:	target whose devices we want to iterate over.
 * @data:	Opaque passed to each function call.
 * @fn:		Function to call on each device
 *
 * This traverses over each device of @starget.  The devices have
 * a reference that must be released by scsi_host_put when breaking
 * out of the loop.
 */</doc>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3004' u='c' c='scsi_target_quiesce'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3017' u='c' c='scsi_target_resume'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3199' u='c' c='target_block'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3208' u='c' c='scsi_target_block'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3225' u='c' c='target_unblock'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3234' u='c' c='scsi_target_unblock'/>
<dec f='linux-4.14.y/include/scsi/scsi_device.h' l='343' type='void starget_for_each_device(struct scsi_target * , void * , void (*)(struct scsi_device *, void *) fn)'/>
<use f='linux-4.14.y/drivers/message/fusion/mptsas.c' l='1095' u='c' c='mptsas_block_io_starget'/>
<use f='linux-4.14.y/drivers/message/fusion/mptsas.c' l='4219' u='c' c='mptsas_reprobe_target'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='6535' u='c' c='_scsih_sas_pd_expose'/>
<use f='linux-4.14.y/drivers/scsi/mpt3sas/mpt3sas_scsih.c' l='6586' u='c' c='_scsih_sas_pd_hide'/>
<def f='linux-4.14.y/drivers/scsi/scsi.c' l='618' ll='629' type='void starget_for_each_device(struct scsi_target * starget, void * data, void (*)(struct scsi_device *, void *) fn)'/>
<dec f='linux-4.14.y/drivers/scsi/scsi.c' l='630' type='void starget_for_each_device(struct scsi_target * , void * , void (*)(struct scsi_device *, void *) )'/>
<use f='linux-4.14.y/drivers/scsi/scsi.c' l='630' c='starget_for_each_device'/>
<use f='linux-4.14.y/drivers/scsi/scsi.c' l='630' u='a'/>
<use f='linux-4.14.y/drivers/scsi/scsi.c' l='630' u='a'/>
<doc f='linux-4.14.y/drivers/scsi/scsi.c' l='608'>/**
 * starget_for_each_device  -  helper to walk all devices of a target
 * @starget:	target whose devices we want to iterate over.
 * @data:	Opaque passed to each function call.
 * @fn:		Function to call on each device
 *
 * This traverses over each device of @starget.  The devices have
 * a reference that must be released by scsi_host_put when breaking
 * out of the loop.
 */</doc>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3004' u='c' c='scsi_target_quiesce'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3017' u='c' c='scsi_target_resume'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3199' u='c' c='target_block'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3208' u='c' c='scsi_target_block'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3225' u='c' c='target_unblock'/>
<use f='linux-4.14.y/drivers/scsi/scsi_lib.c' l='3234' u='c' c='scsi_target_unblock'/>
