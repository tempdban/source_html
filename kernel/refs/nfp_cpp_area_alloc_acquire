<dec f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='355' type='struct nfp_cpp_area * nfp_cpp_area_alloc_acquire(struct nfp_cpp * cpp, uint32_t cpp_id, unsigned long long address, unsigned long size)'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='346'>/*
 * Allocate, then acquire the resources needed to access the NFP CPP area handle
 * @param[in]	cpp	NFP CPP handle
 * @param[in]	cpp_id	NFP CPP ID
 * @param[in]	address	Offset into the NFP CPP ID address space
 * @param[in]	size	Size of the area to reserve
 *
 * @return NFP CPP handle, or NULL on failure (and set errno accordingly).
 */</doc>
<def f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='206' ll='222' type='struct nfp_cpp_area * nfp_cpp_area_alloc_acquire(struct nfp_cpp * cpp, uint32_t destination, unsigned long long address, unsigned long size)'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='699' u='c' c='nfp_cpp_read'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='727' u='c' c='nfp_cpp_write'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='844' u='c' c='nfp_cpp_map_area'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='191'>/*
 * nfp_cpp_area_alloc_acquire - allocate a new CPP area and lock it down
 *
 * @cpp:    CPP handle
 * @dest:   CPP id
 * @address:    start address on CPP target
 * @size:   size of area
 *
 * Allocate and initilizae a CPP area structure, and lock it down so
 * that it can be accessed directly.
 *
 * NOTE: @address and @size must be 32-bit aligned values.
 *
 * NOTE: The area must also be &apos;released&apos; when the structure is freed.
 */</doc>
