<dec f='linux-4.14.y/include/drm/drm_modes.h' l='469' type='struct drm_display_mode * drm_gtf_mode_complex(struct drm_device * dev, int hdisplay, int vdisplay, int vrefresh, bool interlaced, int margins, int GTF_M, int GTF_2C, int GTF_K, int GTF_2J)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_edid.c' l='2104' u='c' c='drm_mode_std'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='365' ll='529' type='struct drm_display_mode * drm_gtf_mode_complex(struct drm_device * dev, int hdisplay, int vdisplay, int vrefresh, bool interlaced, int margins, int GTF_M, int GTF_2C, int GTF_K, int GTF_2J)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='530' type='struct drm_display_mode * drm_gtf_mode_complex(struct drm_device * , int , int , int , bool , int , int , int , int , int )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='530' c='drm_gtf_mode_complex'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='530' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='530' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='570' u='c' c='drm_gtf_mode'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='344'>/**
 * drm_gtf_mode_complex - create the modeline based on the full GTF algorithm
 * @dev: drm device
 * @hdisplay: hdisplay size
 * @vdisplay: vdisplay size
 * @vrefresh: vrefresh rate.
 * @interlaced: whether to compute an interlaced mode
 * @margins: desired margin (borders) size
 * @GTF_M: extended GTF formula parameters
 * @GTF_2C: extended GTF formula parameters
 * @GTF_K: extended GTF formula parameters
 * @GTF_2J: extended GTF formula parameters
 *
 * GTF feature blocks specify C and J in multiples of 0.5, so we pass them
 * in here multiplied by two.  For a C of 40, pass in 80.
 *
 * Returns:
 * The modeline based on the full GTF algorithm stored in a drm_display_mode object.
 * The display mode object is allocated with drm_mode_create(). Returns NULL
 * when no mode could be allocated.
 */</doc>
<dec f='linux-4.14.y/include/drm/drm_modes.h' l='469' type='struct drm_display_mode * drm_gtf_mode_complex(struct drm_device * dev, int hdisplay, int vdisplay, int vrefresh, bool interlaced, int margins, int GTF_M, int GTF_2C, int GTF_K, int GTF_2J)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_edid.c' l='2104' u='c' c='drm_mode_std'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='365' ll='529' type='struct drm_display_mode * drm_gtf_mode_complex(struct drm_device * dev, int hdisplay, int vdisplay, int vrefresh, bool interlaced, int margins, int GTF_M, int GTF_2C, int GTF_K, int GTF_2J)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='530' type='struct drm_display_mode * drm_gtf_mode_complex(struct drm_device * , int , int , int , bool , int , int , int , int , int )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='530' c='drm_gtf_mode_complex'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='530' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='530' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='570' u='c' c='drm_gtf_mode'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_modes.c' l='344'>/**
 * drm_gtf_mode_complex - create the modeline based on the full GTF algorithm
 * @dev: drm device
 * @hdisplay: hdisplay size
 * @vdisplay: vdisplay size
 * @vrefresh: vrefresh rate.
 * @interlaced: whether to compute an interlaced mode
 * @margins: desired margin (borders) size
 * @GTF_M: extended GTF formula parameters
 * @GTF_2C: extended GTF formula parameters
 * @GTF_K: extended GTF formula parameters
 * @GTF_2J: extended GTF formula parameters
 *
 * GTF feature blocks specify C and J in multiples of 0.5, so we pass them
 * in here multiplied by two.  For a C of 40, pass in 80.
 *
 * Returns:
 * The modeline based on the full GTF algorithm stored in a drm_display_mode object.
 * The display mode object is allocated with drm_mode_create(). Returns NULL
 * when no mode could be allocated.
 */</doc>
