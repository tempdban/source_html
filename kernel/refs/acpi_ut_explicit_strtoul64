<dec f='linux-4.18.y/drivers/acpi/acpica/acutils.h' l='190' type='u64 acpi_ut_explicit_strtoul64(char * string)'/>
<use f='linux-4.18.y/drivers/acpi/acpica/exconvrt.c' l='102' u='c' c='acpi_ex_convert_to_integer'/>
<def f='linux-4.18.y/drivers/acpi/acpica/utstrtoul64.c' l='287' ll='327' type='u64 acpi_ut_explicit_strtoul64(char * string)'/>
<doc f='linux-4.18.y/drivers/acpi/acpica/utstrtoul64.c' l='236'>/*******************************************************************************
 *
 * FUNCTION:    acpi_ut_explicit_strtoul64
 *
 * PARAMETERS:  string                  - Null terminated input string,
 *                                        must be a valid pointer
 *
 * RETURN:      Converted integer
 *
 * DESCRIPTION: Perform a 64-bit conversion with the restrictions placed upon
 *              an &quot;explicit conversion&quot; by the ACPI specification. The
 *              main restriction is that only hex and decimal are supported.
 *
 * -----------------------------------------------------------------------------
 *
 * Base is either 10 (default) or 16 (with 0x prefix). Octal (base 8) strings
 * are not supported, as per the ACPI specification.
 *
 * Examples:
 *      to_integer (&quot;1000&quot;)     Decimal
 *      to_integer (&quot;0xABCD&quot;)   Hex
 *
 * Conversion rules as extracted from the ACPI specification:
 *
 *  1)  The input string is either a decimal or hexadecimal numeric string.
 *      A hex value must be prefixed by &quot;0x&quot; or it is interpreted as decimal.
 *
 *  2)  The value must not exceed the maximum of an integer value
 *      (32 or 64 bits). The ACPI specification states the behavior is
 *      &quot;unpredictable&quot;, so ACPICA matches the behavior of the implicit
 *      conversion case. There are no numeric overflow conditions. (NO ERROR)
 *
 *  3)  Behavior on the first non-hex character is not defined by the ACPI
 *      specification (for the to_integer operator), so ACPICA matches the
 *      behavior of the implicit conversion case. It terminates the
 *      conversion and returns the current accumulated value of the converted
 *      integer. (NO ERROR)
 *
 *  4)  Conversion of a null (zero-length) string to an integer is
 *      technically not allowed. However, ACPICA allows this as an ACPI
 *      extension. The conversion returns the value 0. (NO ERROR)
 *
 * NOTE: There are no error conditions returned by this function. At the
 * minimum, a value of zero is returned.
 *
 * Current users of this function:
 *
 *  interpreter - Runtime ASL to_integer operator, as per the ACPI specification
 *
 ******************************************************************************/</doc>
