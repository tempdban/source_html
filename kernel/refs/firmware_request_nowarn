<dec f='linux-4.18.y/include/linux/firmware.h' l='45' type='int firmware_request_nowarn(const struct firmware ** fw, const char * name, struct device * device)'/>
<def f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='647' ll='658' type='int firmware_request_nowarn(const struct firmware ** firmware, const char * name, struct device * device)'/>
<dec f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='659' type='int firmware_request_nowarn(const struct firmware ** , const char * , struct device * )'/>
<use f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='659' c='firmware_request_nowarn'/>
<use f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='659' u='a'/>
<use f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='659' u='a'/>
<doc f='linux-4.18.y/drivers/base/firmware_loader/main.c' l='634'>/**
 * firmware_request_nowarn() - request for an optional fw module
 * @firmware: pointer to firmware image
 * @name: name of firmware file
 * @device: device for which firmware is being loaded
 *
 * This function is similar in behaviour to request_firmware(), except
 * it doesn&apos;t produce warning messages when the file is not found.
 * The sysfs fallback mechanism is enabled if direct filesystem lookup fails,
 * however, however failures to find the firmware file with it are still
 * suppressed. It is therefore up to the driver to check for the return value
 * of this call and to decide when to inform the users of errors.
 **/</doc>
