<dec f='linux-4.18.y/include/linux/fscrypt_supp.h' l='200' type='const char * fscrypt_get_symlink(struct inode * inode, const void * caddr, unsigned int max_size, struct delayed_call * done)'/>
<def f='linux-4.18.y/fs/crypto/hooks.c' l='214' ll='270' type='const char * fscrypt_get_symlink(struct inode * inode, const void * caddr, unsigned int max_size, struct delayed_call * done)'/>
<dec f='linux-4.18.y/fs/crypto/hooks.c' l='271' type='const char * fscrypt_get_symlink(struct inode * , const void * , unsigned int , struct delayed_call * )'/>
<use f='linux-4.18.y/fs/crypto/hooks.c' l='271' c='fscrypt_get_symlink'/>
<use f='linux-4.18.y/fs/crypto/hooks.c' l='271' u='a'/>
<use f='linux-4.18.y/fs/crypto/hooks.c' l='271' u='a'/>
<doc f='linux-4.18.y/fs/crypto/hooks.c' l='200'>/**
 * fscrypt_get_symlink - get the target of an encrypted symlink
 * @inode: the symlink inode
 * @caddr: the on-disk contents of the symlink
 * @max_size: size of @caddr buffer
 * @done: if successful, will be set up to free the returned target
 *
 * If the symlink&apos;s encryption key is available, we decrypt its target.
 * Otherwise, we encode its target for presentation.
 *
 * This may sleep, so the filesystem must have dropped out of RCU mode already.
 *
 * Return: the presentable symlink target or an ERR_PTR()
 */</doc>
<use f='linux-4.18.y/fs/ext4/symlink.c' l='49' u='c' c='ext4_encrypted_get_link'/>
<use f='linux-4.18.y/fs/f2fs/namei.c' l='1195' u='c' c='f2fs_encrypted_get_link'/>
