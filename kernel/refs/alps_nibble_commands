<def f='linux-4.14.y/drivers/input/mouse/alps.h' l='208' ll='211'/>
<size>8</size>
<doc f='linux-4.14.y/drivers/input/mouse/alps.h' l='197'>/**
 * struct alps_nibble_commands - encodings for register accesses
 * @command: PS/2 command used for the nibble
 * @data: Data supplied as an argument to the PS/2 command, if applicable
 *
 * The ALPS protocol uses magic sequences to transmit binary data to the
 * touchpad, as it is generally not OK to send arbitrary bytes out the
 * PS/2 port.  Each of the sequences in this table sends one nibble of the
 * register address or (write) data.  Different versions of the ALPS protocol
 * use slightly different encodings.
 */</doc>
<mbr r='alps_nibble_commands::command' o='0' t='int'/>
<mbr r='alps_nibble_commands::data' o='32' t='unsigned char'/>
<def f='linux-4.14.y/drivers/input/mouse/alps.h' l='208' ll='211'/>
<size>8</size>
<doc f='linux-4.14.y/drivers/input/mouse/alps.h' l='197'>/**
 * struct alps_nibble_commands - encodings for register accesses
 * @command: PS/2 command used for the nibble
 * @data: Data supplied as an argument to the PS/2 command, if applicable
 *
 * The ALPS protocol uses magic sequences to transmit binary data to the
 * touchpad, as it is generally not OK to send arbitrary bytes out the
 * PS/2 port.  Each of the sequences in this table sends one nibble of the
 * register address or (write) data.  Different versions of the ALPS protocol
 * use slightly different encodings.
 */</doc>
<mbr r='alps_nibble_commands::command' o='0' t='int'/>
<mbr r='alps_nibble_commands::data' o='32' t='unsigned char'/>
