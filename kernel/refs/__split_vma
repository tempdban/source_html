<dec f='linux-4.14.y/include/linux/mm.h' l='2099' type='int __split_vma(struct mm_struct * , struct vm_area_struct * , unsigned long addr, int new_below)'/>
<use f='linux-4.14.y/mm/madvise.c' l='154' u='c' c='madvise_behavior'/>
<use f='linux-4.14.y/mm/madvise.c' l='171' u='c' c='madvise_behavior'/>
<def f='linux-4.14.y/mm/mmap.c' l='2569' ll='2632' type='int __split_vma(struct mm_struct * mm, struct vm_area_struct * vma, unsigned long addr, int new_below)'/>
<use f='linux-4.14.y/mm/mmap.c' l='2644' u='c' c='split_vma'/>
<use f='linux-4.14.y/mm/mmap.c' l='2695' u='c' c='do_munmap'/>
<use f='linux-4.14.y/mm/mmap.c' l='2704' u='c' c='do_munmap'/>
<doc f='linux-4.14.y/mm/mmap.c' l='2565'>/*
 * __split_vma() bypasses sysctl_max_map_count checking.  We use this where it
 * has already been checked or doesn&apos;t make sense to fail.
 */</doc>
<dec f='linux-4.14.y/include/linux/mm.h' l='2099' type='int __split_vma(struct mm_struct * , struct vm_area_struct * , unsigned long addr, int new_below)'/>
<use f='linux-4.14.y/mm/madvise.c' l='154' u='c' c='madvise_behavior'/>
<use f='linux-4.14.y/mm/madvise.c' l='171' u='c' c='madvise_behavior'/>
<def f='linux-4.14.y/mm/mmap.c' l='2569' ll='2632' type='int __split_vma(struct mm_struct * mm, struct vm_area_struct * vma, unsigned long addr, int new_below)'/>
<use f='linux-4.14.y/mm/mmap.c' l='2644' u='c' c='split_vma'/>
<use f='linux-4.14.y/mm/mmap.c' l='2695' u='c' c='do_munmap'/>
<use f='linux-4.14.y/mm/mmap.c' l='2704' u='c' c='do_munmap'/>
<doc f='linux-4.14.y/mm/mmap.c' l='2565'>/*
 * __split_vma() bypasses sysctl_max_map_count checking.  We use this where it
 * has already been checked or doesn&apos;t make sense to fail.
 */</doc>
