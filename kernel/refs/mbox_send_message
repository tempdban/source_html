<dec f='linux-4.14.y/include/linux/mailbox_client.h' l='46' type='int mbox_send_message(struct mbox_chan * chan, void * mssg)'/>
<use f='linux-4.14.y/drivers/acpi/cppc_acpi.c' l='306' u='c' c='send_pcc_cmd'/>
<def f='linux-4.14.y/drivers/mailbox/mailbox.c' l='251' ll='283' type='int mbox_send_message(struct mbox_chan * chan, void * mssg)'/>
<dec f='linux-4.14.y/drivers/mailbox/mailbox.c' l='284' type='int mbox_send_message(struct mbox_chan * , void * )'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='284' c='mbox_send_message'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='284' u='a'/>
<use f='linux-4.14.y/drivers/mailbox/mailbox.c' l='284' u='a'/>
<doc f='linux-4.14.y/drivers/mailbox/mailbox.c' l='227'>/**
 * mbox_send_message -	For client to submit a message to be
 *				sent to the remote.
 * @chan: Mailbox channel assigned to this client.
 * @mssg: Client specific message typecasted.
 *
 * For client to submit data to the controller destined for a remote
 * processor. If the client had set &apos;tx_block&apos;, the call will return
 * either when the remote receives the data or when &apos;tx_tout&apos; millisecs
 * run out.
 *  In non-blocking mode, the requests are buffered by the API and a
 * non-negative token is returned for each queued request. If the request
 * is not queued, a negative token is returned. Upon failure or successful
 * TX, the API calls &apos;tx_done&apos; from atomic context, from which the client
 * could submit yet another request.
 * The pointer to message should be preserved until it is sent
 * over the chan, i.e, tx_done() is made.
 * This function could be called from atomic context as it simply
 * queues the data and returns a token against the request.
 *
 * Return: Non-negative integer for successful submission (non-blocking mode)
 *	or transmission over chan (blocking mode).
 *	Negative value denotes failure.
 */</doc>
