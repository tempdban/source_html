<dec f='linux-4.18.y/include/net/tcp.h' l='423' type='struct sock * tcp_create_openreq_child(const struct sock * sk, struct request_sock * req, struct sk_buff * skb)'/>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1413' u='c' c='tcp_v4_syn_recv_sock'/>
<def f='linux-4.18.y/net/ipv4/tcp_minisocks.c' l='448' ll='567' type='struct sock * tcp_create_openreq_child(const struct sock * sk, struct request_sock * req, struct sk_buff * skb)'/>
<dec f='linux-4.18.y/net/ipv4/tcp_minisocks.c' l='568' type='struct sock * tcp_create_openreq_child(const struct sock * , struct request_sock * , struct sk_buff * )'/>
<use f='linux-4.18.y/net/ipv4/tcp_minisocks.c' l='568' c='tcp_create_openreq_child'/>
<use f='linux-4.18.y/net/ipv4/tcp_minisocks.c' l='568' u='a'/>
<use f='linux-4.18.y/net/ipv4/tcp_minisocks.c' l='568' u='a'/>
<doc f='linux-4.18.y/net/ipv4/tcp_minisocks.c' l='442'>/* This is not only more efficient than what we used to do, it eliminates
 * a lot of code duplication between IPv4/IPv6 SYN recv processing. -DaveM
 *
 * Actually, we could lots of memory writes here. tp of listening
 * socket contains all necessary default parameters.
 */</doc>
