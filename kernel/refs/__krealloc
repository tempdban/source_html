<dec f='linux-4.18.y/include/linux/slab.h' l='181' type='void * __krealloc(const void * , size_t , gfp_t )'/>
<doc f='linux-4.18.y/include/linux/slab.h' l='178'>/*
 * Common kmalloc functions provided by all allocators
 */</doc>
<def f='linux-4.18.y/mm/slab_common.c' l='1485' ll='1492' type='void * __krealloc(const void * p, size_t new_size, gfp_t flags)'/>
<dec f='linux-4.18.y/mm/slab_common.c' l='1493' type='void * __krealloc(const void * , size_t , gfp_t )'/>
<use f='linux-4.18.y/mm/slab_common.c' l='1493' c='__krealloc'/>
<use f='linux-4.18.y/mm/slab_common.c' l='1493' u='a'/>
<use f='linux-4.18.y/mm/slab_common.c' l='1493' u='a'/>
<doc f='linux-4.18.y/mm/slab_common.c' l='1475'>/**
 * __krealloc - like krealloc() but don&apos;t free @p.
 * @p: object to reallocate memory for.
 * @new_size: how many bytes of memory are required.
 * @flags: the type of memory to allocate.
 *
 * This function is like krealloc() except it never frees the originally
 * allocated buffer. Use this if you don&apos;t want to free the buffer immediately
 * like, for example, with RCU.
 */</doc>
<use f='linux-4.18.y/net/netfilter/nf_conntrack_extend.c' l='76' u='c' c='nf_ct_ext_add'/>
