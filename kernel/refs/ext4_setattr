<dec f='linux-4.14.y/fs/ext4/ext4.h' l='2485' type='int ext4_setattr(struct dentry * , struct iattr * )'/>
<use f='linux-4.14.y/fs/ext4/file.c' l='732'/>
<use f='linux-4.14.y/fs/ext4/file.c' l='732'/>
<def f='linux-4.14.y/fs/ext4/inode.c' l='5325' ll='5499' type='int ext4_setattr(struct dentry * dentry, struct iattr * attr)'/>
<doc f='linux-4.14.y/fs/ext4/inode.c' l='5301'>/*
 * ext4_setattr()
 *
 * Called from notify_change.
 *
 * We want to trap VFS attempts to truncate the file as soon as
 * possible.  In particular, we want to make sure that when the VFS
 * shrinks i_size, we put the inode on the orphan list and modify
 * i_disksize immediately, so that during the subsequent flushing of
 * dirty pages and freeing of disk blocks, we can guarantee that any
 * commit will leave the blocks being flushed in an unused state on
 * disk.  (On recovery, the inode will get truncated and the blocks will
 * be freed, so we have a strong guarantee that no future commit will
 * leave these blocks visible to the user.)
 *
 * Another thing we have to assure is that if we are in ordered mode
 * and inode is still attached to the committing transaction, we must
 * we start writeout of all the dirty pages which are being truncated.
 * This way we are sure that all the data written in the previous
 * transaction are already on disk (truncate waits for pages under
 * writeback).
 *
 * Called with inode-&gt;i_mutex down.
 */</doc>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3894'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3894'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3903'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3903'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='88'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='88'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='95'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='95'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='102'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='102'/>
<dec f='linux-4.14.y/fs/ext4/ext4.h' l='2485' type='int ext4_setattr(struct dentry * , struct iattr * )'/>
<use f='linux-4.14.y/fs/ext4/file.c' l='732'/>
<use f='linux-4.14.y/fs/ext4/file.c' l='732'/>
<def f='linux-4.14.y/fs/ext4/inode.c' l='5325' ll='5499' type='int ext4_setattr(struct dentry * dentry, struct iattr * attr)'/>
<doc f='linux-4.14.y/fs/ext4/inode.c' l='5301'>/*
 * ext4_setattr()
 *
 * Called from notify_change.
 *
 * We want to trap VFS attempts to truncate the file as soon as
 * possible.  In particular, we want to make sure that when the VFS
 * shrinks i_size, we put the inode on the orphan list and modify
 * i_disksize immediately, so that during the subsequent flushing of
 * dirty pages and freeing of disk blocks, we can guarantee that any
 * commit will leave the blocks being flushed in an unused state on
 * disk.  (On recovery, the inode will get truncated and the blocks will
 * be freed, so we have a strong guarantee that no future commit will
 * leave these blocks visible to the user.)
 *
 * Another thing we have to assure is that if we are in ordered mode
 * and inode is still attached to the committing transaction, we must
 * we start writeout of all the dirty pages which are being truncated.
 * This way we are sure that all the data written in the previous
 * transaction are already on disk (truncate waits for pages under
 * writeback).
 *
 * Called with inode-&gt;i_mutex down.
 */</doc>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3894'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3894'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3903'/>
<use f='linux-4.14.y/fs/ext4/namei.c' l='3903'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='88'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='88'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='95'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='95'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='102'/>
<use f='linux-4.14.y/fs/ext4/symlink.c' l='102'/>
