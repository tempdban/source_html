<dec f='linux-4.14.y/include/linux/completion.h' l='141' type='unsigned long wait_for_completion_io_timeout(struct completion * x, unsigned long timeout)'/>
<use f='linux-4.14.y/block/blk-exec.c' l='106' u='c' c='blk_execute_rq'/>
<def f='linux-4.14.y/kernel/sched/completion.c' l='194' ll='198' type='unsigned long wait_for_completion_io_timeout(struct completion * x, unsigned long timeout)'/>
<dec f='linux-4.14.y/kernel/sched/completion.c' l='199' type='unsigned long wait_for_completion_io_timeout(struct completion * , unsigned long )'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='199' c='wait_for_completion_io_timeout'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='199' u='a'/>
<use f='linux-4.14.y/kernel/sched/completion.c' l='199' u='a'/>
<doc f='linux-4.14.y/kernel/sched/completion.c' l='181'>/**
 * wait_for_completion_io_timeout: - waits for completion of a task (w/timeout)
 * @x:  holds the state of this particular completion
 * @timeout:  timeout value in jiffies
 *
 * This waits for either a completion of a specific task to be signaled or for a
 * specified timeout to expire. The timeout is in jiffies. It is not
 * interruptible. The caller is accounted as waiting for IO (which traditionally
 * means blkio only).
 *
 * Return: 0 if timed out, and positive (at least 1, or number of jiffies left
 * till timeout) if completed.
 */</doc>
