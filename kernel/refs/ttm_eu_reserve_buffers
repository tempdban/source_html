<dec f='linux-4.14.y/include/drm/ttm/ttm_execbuf_util.h' l='99' type='int ttm_eu_reserve_buffers(struct ww_acquire_ctx * ticket, struct list_head * list, bool intr, struct list_head * dups)'/>
<doc f='linux-4.14.y/include/drm/ttm/ttm_execbuf_util.h' l='65'>/**
 * function ttm_eu_reserve_buffers
 *
 * @ticket:  [out] ww_acquire_ctx filled in by call, or NULL if only
 *           non-blocking reserves should be tried.
 * @list:    thread private list of ttm_validate_buffer structs.
 * @intr:    should the wait be interruptible
 * @dups:    [out] optional list of duplicates.
 *
 * Tries to reserve bos pointed to by the list entries for validation.
 * If the function returns 0, all buffers are marked as &quot;unfenced&quot;,
 * taken off the lru lists and are not synced for write CPU usage.
 *
 * If the function detects a deadlock due to multiple threads trying to
 * reserve the same buffers in reverse order, all threads except one will
 * back off and retry. This function may sleep while waiting for
 * CPU write reservations to be cleared, and for other threads to
 * unreserve their buffers.
 *
 * If intr is set to true, this function may return -ERESTARTSYS if the
 * calling process receives a signal while waiting. In that case, no
 * buffers on the list will be reserved upon return.
 *
 * If dups is non NULL all buffers already reserved by the current thread
 * (e.g. duplicates) are added to this list, otherwise -EALREADY is returned
 * on the first already reserved buffer and all buffers from the list are
 * unreserved again.
 *
 * Buffers reserved by this function should be unreserved by
 * a call to either ttm_eu_backoff_reservation() or
 * ttm_eu_fence_buffer_objects() when command submission is complete or
 * has failed.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_release.c' l='265' u='c' c='qxl_release_reserve_list'/>
<def f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_execbuf_util.c' l='93' ll='176' type='int ttm_eu_reserve_buffers(struct ww_acquire_ctx * ticket, struct list_head * list, bool intr, struct list_head * dups)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_execbuf_util.c' l='177' type='int ttm_eu_reserve_buffers(struct ww_acquire_ctx * , struct list_head * , bool , struct list_head * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_execbuf_util.c' l='177' c='ttm_eu_reserve_buffers'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_execbuf_util.c' l='177' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_execbuf_util.c' l='177' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/ttm/ttm_execbuf_util.c' l='81'>/*
 * Reserve buffers for validation.
 *
 * If a buffer in the list is marked for CPU access, we back off and
 * wait for that buffer to become free for GPU access.
 *
 * If a buffer is reserved for another validation, the validator with
 * the highest validation sequence backs off and waits for that buffer
 * to become unreserved. This prevents deadlocks when validating multiple
 * buffers in different orders.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_ioctl.c' l='64' u='c' c='virtio_gpu_object_list_validate'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4183' u='c' c='vmw_execbuf_process'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='4394' u='c' c='__vmw_execbuf_release_pinned_bo'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c' l='985' u='c' c='vmw_resource_check_buffer'/>
