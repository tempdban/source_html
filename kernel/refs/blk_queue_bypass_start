<dec f='linux-4.14.y/block/blk.h' l='66' type='void blk_queue_bypass_start(struct request_queue * q)'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='1308' u='c' c='blkcg_activate_policy'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='1375' u='c' c='blkcg_deactivate_policy'/>
<def f='linux-4.14.y/block/blk-core.c' l='551' ll='573' type='void blk_queue_bypass_start(struct request_queue * q)'/>
<dec f='linux-4.14.y/block/blk-core.c' l='574' type='void blk_queue_bypass_start(struct request_queue * )'/>
<use f='linux-4.14.y/block/blk-core.c' l='574' c='blk_queue_bypass_start'/>
<use f='linux-4.14.y/block/blk-core.c' l='574' u='a'/>
<use f='linux-4.14.y/block/blk-core.c' l='574' u='a'/>
<doc f='linux-4.14.y/block/blk-core.c' l='541'>/**
 * blk_queue_bypass_start - enter queue bypass mode
 * @q: queue of interest
 *
 * In bypass mode, only the dispatch FIFO queue of @q is used.  This
 * function makes @q enter bypass mode and drains all requests which were
 * throttled or issued before.  On return, it&apos;s guaranteed that no request
 * is being throttled or has ELVPRIV set and blk_queue_bypass() %true
 * inside queue or RCU read lock.
 */</doc>
<use f='linux-4.14.y/block/elevator.c' l='1009' u='c' c='elevator_switch'/>
