<dec f='linux-4.14.y/include/drm/drm_crtc.h' l='305' type='int (*)(struct drm_crtc *, struct drm_file *, uint32_t, uint32_t, uint32_t)'/>
<offset>64</offset>
<doc f='linux-4.14.y/include/drm/drm_crtc.h' l='284'>/**
	 * @cursor_set:
	 *
	 * Update the cursor image. The cursor position is relative to the CRTC
	 * and can be partially or fully outside of the visible area.
	 *
	 * Note that contrary to all other KMS functions the legacy cursor entry
	 * points don&apos;t take a framebuffer object, but instead take directly a
	 * raw buffer object id from the driver&apos;s buffer manager (which is
	 * either GEM or TTM for current drivers).
	 *
	 * This entry point is deprecated, drivers should instead implement
	 * universal plane support and register a proper cursor plane using
	 * drm_crtc_init_with_planes().
	 *
	 * This callback is optional
	 *
	 * RETURNS:
	 *
	 * 0 on success or a negative error code on failure.
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_fb_helper.c' l='459' u='r' c='restore_fbdev_mode_legacy'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_fb_helper.c' l='460' u='r' c='restore_fbdev_mode_legacy'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane.c' l='856' u='r' c='drm_mode_cursor_common'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane.c' l='865' u='r' c='drm_mode_cursor_common'/>
