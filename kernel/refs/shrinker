<def f='linux-4.14.y/include/linux/shrinker.h' l='57' ll='71'/>
<size>64</size>
<doc f='linux-4.14.y/include/linux/shrinker.h' l='37'>/*
 * A callback you can register to apply pressure to ageable caches.
 *
 * @count_objects should return the number of freeable items in the cache. If
 * there are no objects to free or the number of freeable items cannot be
 * determined, it should return 0. No deadlock checks should be done during the
 * count callback - the shrinker relies on aggregating scan counts that couldn&apos;t
 * be executed due to potential deadlocks to be run at a later call when the
 * deadlock condition is no longer pending.
 *
 * @scan_objects will only be called if @count_objects returned a non-zero
 * value for the number of freeable objects. The callout should scan the cache
 * and attempt to free items from the cache. It should then return the number
 * of objects freed during the scan, or SHRINK_STOP if progress cannot be made
 * due to potential deadlocks. If SHRINK_STOP is returned, then no further
 * attempts to call the @scan_objects will be made from the current reclaim
 * context.
 *
 * @flags determine the shrinker abilities, like numa awareness
 */</doc>
<mbr r='shrinker::count_objects' o='0' t='unsigned long (*)(struct shrinker *, struct shrink_control *)'/>
<mbr r='shrinker::scan_objects' o='64' t='unsigned long (*)(struct shrinker *, struct shrink_control *)'/>
<mbr r='shrinker::seeks' o='128' t='int'/>
<mbr r='shrinker::batch' o='192' t='long'/>
<mbr r='shrinker::flags' o='256' t='unsigned long'/>
<mbr r='shrinker::list' o='320' t='struct list_head'/>
<mbr r='shrinker::nr_deferred' o='448' t='atomic_long_t *'/>
