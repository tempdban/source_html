<dec f='linux-4.18.y/include/drm/ttm/ttm_bo_driver.h' l='107' type='int (*)(struct ttm_mem_type_manager *, struct ttm_buffer_object *, const struct ttm_place *, struct ttm_mem_reg *)'/>
<offset>128</offset>
<doc f='linux-4.18.y/include/drm/ttm/ttm_bo_driver.h' l='79'>/**
	 * struct ttm_mem_type_manager member get_node
	 *
	 * @man: Pointer to a memory type manager.
	 * @bo: Pointer to the buffer object we&apos;re allocating space for.
	 * @placement: Placement details.
	 * @flags: Additional placement flags.
	 * @mem: Pointer to a struct ttm_mem_reg to be filled in.
	 *
	 * This function should allocate space in the memory type managed
	 * by @man. Placement details if
	 * applicable are given by @placement. If successful,
	 * @mem::mm_node should be set to a non-null value, and
	 * @mem::start should be set to a value identifying the beginning
	 * of the range allocated, and the function should return zero.
	 * If the memory region accommodate the buffer object, @mem::mm_node
	 * should be set to NULL, and the function should return 0.
	 * If a system error occurred, preventing the request to be fulfilled,
	 * the function should return a negative error code.
	 *
	 * Note that @mem::mm_node will only be dereferenced by
	 * struct ttm_mem_type_manager functions and optionally by the driver,
	 * which has knowledge of the underlying type.
	 *
	 * This function may not be called from within atomic context, so
	 * an implementation can and must use either a mutex or a spinlock to
	 * protect any data structures managing the space.
	 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='824' u='r' c='ttm_bo_mem_force_space'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='937' u='r' c='ttm_bo_mem_space'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_manager.c' l='152' u='w'/>
<use f='linux-4.18.y/drivers/gpu/drm/virtio/virtgpu_ttm.c' l='201' u='w'/>
<use f='linux-4.18.y/drivers/gpu/drm/vmwgfx/vmwgfx_gmrid_manager.c' l='168' u='w'/>
