<def f='linux-4.18.y/include/linux/reservation.h' l='206' ll='210' type='bool reservation_object_trylock(struct reservation_object * obj)'/>
<doc f='linux-4.18.y/include/linux/reservation.h' l='192'>/**
 * reservation_object_trylock - trylock the reservation object
 * @obj: the reservation object
 *
 * Tries to lock the reservation object for exclusive access and modification.
 * Note, that the lock is only against other writers, readers will run
 * concurrently with a writer under RCU. The seqlock is used to notify readers
 * if they overlap with a writer.
 *
 * Also note that since no context is provided, no deadlock protection is
 * possible.
 *
 * Returns true if the lock was acquired, false otherwise.
 */</doc>
<use f='linux-4.18.y/include/drm/ttm/ttm_bo_driver.h' l='634' u='c' c='__ttm_bo_reserve'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='355' u='c' c='ttm_bo_individualize_resv'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='402' u='c' c='ttm_bo_cleanup_refs_or_queue'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='489' u='c' c='ttm_bo_cleanup_refs'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='552' u='c' c='ttm_bo_delayed_delete'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='701' u='c' c='ttm_bo_evict_swapout_allowable'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo.c' l='1193' u='c' c='ttm_bo_init_reserved'/>
<use f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_bo_util.c' l='519' u='c' c='ttm_buffer_object_transfer'/>
