<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='91' ll='101'/>
<size>80</size>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='72'>/**
 * struct vmw_resource_val_node - Validation info for resources
 *
 * @head: List head for the software context&apos;s resource list.
 * @hash: Hash entry for quick resouce to val_node lookup.
 * @res: Ref-counted pointer to the resource.
 * @switch_backup: Boolean whether to switch backup buffer on unreserve.
 * @new_backup: Refcounted pointer to the new backup buffer.
 * @staged_bindings: If @res is a context, tracks bindings set up during
 * the command batch. Otherwise NULL.
 * @new_backup_offset: New backup buffer offset if @new_backup is non-NUll.
 * @first_usage: Set to true the first time the resource is referenced in
 * the command stream.
 * @switching_backup: The command stream provides a new backup buffer for a
 * resource.
 * @no_buffer_needed: This means @switching_backup is true on first buffer
 * reference. So resource reservation does not need to allocate a backup
 * buffer for the resource.
 */</doc>
<mbr r='vmw_resource_val_node::head' o='0' t='struct list_head'/>
<mbr r='vmw_resource_val_node::hash' o='128' t='struct drm_hash_item'/>
<mbr r='vmw_resource_val_node::res' o='320' t='struct vmw_resource *'/>
<mbr r='vmw_resource_val_node::new_backup' o='384' t='struct vmw_dma_buffer *'/>
<mbr r='vmw_resource_val_node::staged_bindings' o='448' t='struct vmw_ctx_binding_state *'/>
<mbr r='vmw_resource_val_node::new_backup_offset' o='512' t='unsigned long'/>
<mbr r='vmw_resource_val_node::first_usage' o='576' t='u32'/>
<mbr r='vmw_resource_val_node::switching_backup' o='577' t='u32'/>
<mbr r='vmw_resource_val_node::no_buffer_needed' o='578' t='u32'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='91' ll='101'/>
<size>80</size>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='72'>/**
 * struct vmw_resource_val_node - Validation info for resources
 *
 * @head: List head for the software context&apos;s resource list.
 * @hash: Hash entry for quick resouce to val_node lookup.
 * @res: Ref-counted pointer to the resource.
 * @switch_backup: Boolean whether to switch backup buffer on unreserve.
 * @new_backup: Refcounted pointer to the new backup buffer.
 * @staged_bindings: If @res is a context, tracks bindings set up during
 * the command batch. Otherwise NULL.
 * @new_backup_offset: New backup buffer offset if @new_backup is non-NUll.
 * @first_usage: Set to true the first time the resource is referenced in
 * the command stream.
 * @switching_backup: The command stream provides a new backup buffer for a
 * resource.
 * @no_buffer_needed: This means @switching_backup is true on first buffer
 * reference. So resource reservation does not need to allocate a backup
 * buffer for the resource.
 */</doc>
<mbr r='vmw_resource_val_node::head' o='0' t='struct list_head'/>
<mbr r='vmw_resource_val_node::hash' o='128' t='struct drm_hash_item'/>
<mbr r='vmw_resource_val_node::res' o='320' t='struct vmw_resource *'/>
<mbr r='vmw_resource_val_node::new_backup' o='384' t='struct vmw_dma_buffer *'/>
<mbr r='vmw_resource_val_node::staged_bindings' o='448' t='struct vmw_ctx_binding_state *'/>
<mbr r='vmw_resource_val_node::new_backup_offset' o='512' t='unsigned long'/>
<mbr r='vmw_resource_val_node::first_usage' o='576' t='u32'/>
<mbr r='vmw_resource_val_node::switching_backup' o='577' t='u32'/>
<mbr r='vmw_resource_val_node::no_buffer_needed' o='578' t='u32'/>
