<def f='linux-4.14.y/include/crypto/akcipher.h' l='92' ll='107'/>
<size>496</size>
<doc f='linux-4.14.y/include/crypto/akcipher.h' l='51'>/**
 * struct akcipher_alg - generic public key algorithm
 *
 * @sign:	Function performs a sign operation as defined by public key
 *		algorithm. In case of error, where the dst_len was insufficient,
 *		the req-&gt;dst_len will be updated to the size required for the
 *		operation
 * @verify:	Function performs a sign operation as defined by public key
 *		algorithm. In case of error, where the dst_len was insufficient,
 *		the req-&gt;dst_len will be updated to the size required for the
 *		operation
 * @encrypt:	Function performs an encrypt operation as defined by public key
 *		algorithm. In case of error, where the dst_len was insufficient,
 *		the req-&gt;dst_len will be updated to the size required for the
 *		operation
 * @decrypt:	Function performs a decrypt operation as defined by public key
 *		algorithm. In case of error, where the dst_len was insufficient,
 *		the req-&gt;dst_len will be updated to the size required for the
 *		operation
 * @set_pub_key: Function invokes the algorithm specific set public key
 *		function, which knows how to decode and interpret
 *		the BER encoded public key
 * @set_priv_key: Function invokes the algorithm specific set private key
 *		function, which knows how to decode and interpret
 *		the BER encoded private key
 * @max_size:	Function returns dest buffer size required for a given key.
 * @init:	Initialize the cryptographic transformation object.
 *		This function is used to initialize the cryptographic
 *		transformation object. This function is called only once at
 *		the instantiation time, right after the transformation context
 *		was allocated. In case the cryptographic hardware has some
 *		special requirements which need to be handled by software, this
 *		function shall check for the precise requirement of the
 *		transformation and put any software fallbacks in place.
 * @exit:	Deinitialize the cryptographic transformation object. This is a
 *		counterpart to @init, used to remove various changes set in
 *		@init.
 *
 * @reqsize:	Request context size required by algorithm implementation
 * @base:	Common crypto API algorithm data structure
 */</doc>
<mbr r='akcipher_alg::sign' o='0' t='int (*)(struct akcipher_request *)'/>
<mbr r='akcipher_alg::verify' o='64' t='int (*)(struct akcipher_request *)'/>
<mbr r='akcipher_alg::encrypt' o='128' t='int (*)(struct akcipher_request *)'/>
<mbr r='akcipher_alg::decrypt' o='192' t='int (*)(struct akcipher_request *)'/>
<mbr r='akcipher_alg::set_pub_key' o='256' t='int (*)(struct crypto_akcipher *, const void *, unsigned int)'/>
<mbr r='akcipher_alg::set_priv_key' o='320' t='int (*)(struct crypto_akcipher *, const void *, unsigned int)'/>
<mbr r='akcipher_alg::max_size' o='384' t='unsigned int (*)(struct crypto_akcipher *)'/>
<mbr r='akcipher_alg::init' o='448' t='int (*)(struct crypto_akcipher *)'/>
<mbr r='akcipher_alg::exit' o='512' t='void (*)(struct crypto_akcipher *)'/>
<mbr r='akcipher_alg::reqsize' o='576' t='unsigned int'/>
<mbr r='akcipher_alg::base' o='640' t='struct crypto_alg'/>
<def f='linux-4.14.y/include/crypto/akcipher.h' l='92' ll='107'/>
<size>496</size>
<doc f='linux-4.14.y/include/crypto/akcipher.h' l='51'>/**
 * struct akcipher_alg - generic public key algorithm
 *
 * @sign:	Function performs a sign operation as defined by public key
 *		algorithm. In case of error, where the dst_len was insufficient,
 *		the req-&gt;dst_len will be updated to the size required for the
 *		operation
 * @verify:	Function performs a sign operation as defined by public key
 *		algorithm. In case of error, where the dst_len was insufficient,
 *		the req-&gt;dst_len will be updated to the size required for the
 *		operation
 * @encrypt:	Function performs an encrypt operation as defined by public key
 *		algorithm. In case of error, where the dst_len was insufficient,
 *		the req-&gt;dst_len will be updated to the size required for the
 *		operation
 * @decrypt:	Function performs a decrypt operation as defined by public key
 *		algorithm. In case of error, where the dst_len was insufficient,
 *		the req-&gt;dst_len will be updated to the size required for the
 *		operation
 * @set_pub_key: Function invokes the algorithm specific set public key
 *		function, which knows how to decode and interpret
 *		the BER encoded public key
 * @set_priv_key: Function invokes the algorithm specific set private key
 *		function, which knows how to decode and interpret
 *		the BER encoded private key
 * @max_size:	Function returns dest buffer size required for a given key.
 * @init:	Initialize the cryptographic transformation object.
 *		This function is used to initialize the cryptographic
 *		transformation object. This function is called only once at
 *		the instantiation time, right after the transformation context
 *		was allocated. In case the cryptographic hardware has some
 *		special requirements which need to be handled by software, this
 *		function shall check for the precise requirement of the
 *		transformation and put any software fallbacks in place.
 * @exit:	Deinitialize the cryptographic transformation object. This is a
 *		counterpart to @init, used to remove various changes set in
 *		@init.
 *
 * @reqsize:	Request context size required by algorithm implementation
 * @base:	Common crypto API algorithm data structure
 */</doc>
<mbr r='akcipher_alg::sign' o='0' t='int (*)(struct akcipher_request *)'/>
<mbr r='akcipher_alg::verify' o='64' t='int (*)(struct akcipher_request *)'/>
<mbr r='akcipher_alg::encrypt' o='128' t='int (*)(struct akcipher_request *)'/>
<mbr r='akcipher_alg::decrypt' o='192' t='int (*)(struct akcipher_request *)'/>
<mbr r='akcipher_alg::set_pub_key' o='256' t='int (*)(struct crypto_akcipher *, const void *, unsigned int)'/>
<mbr r='akcipher_alg::set_priv_key' o='320' t='int (*)(struct crypto_akcipher *, const void *, unsigned int)'/>
<mbr r='akcipher_alg::max_size' o='384' t='unsigned int (*)(struct crypto_akcipher *)'/>
<mbr r='akcipher_alg::init' o='448' t='int (*)(struct crypto_akcipher *)'/>
<mbr r='akcipher_alg::exit' o='512' t='void (*)(struct crypto_akcipher *)'/>
<mbr r='akcipher_alg::reqsize' o='576' t='unsigned int'/>
<mbr r='akcipher_alg::base' o='640' t='struct crypto_alg'/>
