<dec f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.h' l='65' type='int dm_tm_new_block(struct dm_transaction_manager * tm, struct dm_block_validator * v, struct dm_block ** result)'/>
<doc f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.h' l='57'>/*
 * dm_tm_new_block() is pretty self-explanatory.  Make sure you do actually
 * write to the whole of @data before you unlock, otherwise you could get
 * a data leak.  (The other option is for tm_new_block() to zero new blocks
 * before handing them out, which will be redundant in most, if not all,
 * cases).
 * Zeroes the new block and returns with write lock held.
 */</doc>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-array.c' l='158' u='c' c='alloc_ablock'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-btree-spine.c' l='117' u='c' c='new_block'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-space-map-common.c' l='256' u='c' c='sm_ll_extend'/>
<use f='linux-4.14.y/drivers/md/persistent-data/dm-space-map-common.c' l='547' u='c' c='metadata_ll_init_index'/>
<def f='linux-4.14.y/drivers/md/persistent-data/dm-transaction-manager.c' l='234' ll='261' type='int dm_tm_new_block(struct dm_transaction_manager * tm, struct dm_block_validator * v, struct dm_block ** result)'/>
