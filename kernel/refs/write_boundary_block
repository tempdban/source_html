<dec f='linux-4.14.y/include/linux/buffer_head.h' l='202' type='void write_boundary_block(struct block_device * bdev, sector_t bblock, unsigned int blocksize)'/>
<def f='linux-4.14.y/fs/buffer.c' l='584' ll='593' type='void write_boundary_block(struct block_device * bdev, sector_t bblock, unsigned int blocksize)'/>
<doc f='linux-4.14.y/fs/buffer.c' l='578'>/*
 * Called when we&apos;ve recently written block `bblock&apos;, and it is known that
 * `bblock&apos; was for a buffer_boundary() buffer.  This means that the block at
 * `bblock + 1&apos; is probably a dirty indirect block.  Hunt it down and, if it&apos;s
 * dirty, schedule it for IO.  So that indirects merge nicely with their data.
 */</doc>
<use f='linux-4.14.y/fs/mpage.c' l='651' u='c' c='__mpage_writepage'/>
<dec f='linux-4.14.y/include/linux/buffer_head.h' l='202' type='void write_boundary_block(struct block_device * bdev, sector_t bblock, unsigned int blocksize)'/>
<def f='linux-4.14.y/fs/buffer.c' l='584' ll='593' type='void write_boundary_block(struct block_device * bdev, sector_t bblock, unsigned int blocksize)'/>
<doc f='linux-4.14.y/fs/buffer.c' l='578'>/*
 * Called when we&apos;ve recently written block `bblock&apos;, and it is known that
 * `bblock&apos; was for a buffer_boundary() buffer.  This means that the block at
 * `bblock + 1&apos; is probably a dirty indirect block.  Hunt it down and, if it&apos;s
 * dirty, schedule it for IO.  So that indirects merge nicely with their data.
 */</doc>
<use f='linux-4.14.y/fs/mpage.c' l='651' u='c' c='__mpage_writepage'/>
