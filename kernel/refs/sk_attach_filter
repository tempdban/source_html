<dec f='linux-4.18.y/include/linux/filter.h' l='737' type='int sk_attach_filter(struct sock_fprog * fprog, struct sock * sk)'/>
<use f='linux-4.18.y/drivers/net/tun.c' l='822' u='c' c='tun_attach'/>
<use f='linux-4.18.y/drivers/net/tun.c' l='2786' u='c' c='tun_attach_filter'/>
<def f='linux-4.18.y/net/core/filter.c' l='1527' ll='1542' type='int sk_attach_filter(struct sock_fprog * fprog, struct sock * sk)'/>
<dec f='linux-4.18.y/net/core/filter.c' l='1543' type='int sk_attach_filter(struct sock_fprog * , struct sock * )'/>
<use f='linux-4.18.y/net/core/filter.c' l='1543' c='sk_attach_filter'/>
<use f='linux-4.18.y/net/core/filter.c' l='1543' u='a'/>
<use f='linux-4.18.y/net/core/filter.c' l='1543' u='a'/>
<doc f='linux-4.18.y/net/core/filter.c' l='1517'>/**
 *	sk_attach_filter - attach a socket filter
 *	@fprog: the filter program
 *	@sk: the socket to use
 *
 * Attach the user&apos;s filter code. We first run some sanity checks on
 * it to make sure it does not explode on us later. If an error
 * occurs or there is insufficient memory for the filter a negative
 * errno code is returned. On success the return is zero.
 */</doc>
<use f='linux-4.18.y/net/core/sock.c' l='935' u='c' c='sock_setsockopt'/>
