<dec f='linux-4.18.y/drivers/vfio/pci/vfio_pci_private.h' l='145' type='int vfio_config_init(struct vfio_pci_device * vdev)'/>
<use f='linux-4.18.y/drivers/vfio/pci/vfio_pci.c' l='259' u='c' c='vfio_pci_enable'/>
<def f='linux-4.18.y/drivers/vfio/pci/vfio_pci_config.c' l='1625' ll='1698' type='int vfio_config_init(struct vfio_pci_device * vdev)'/>
<doc f='linux-4.18.y/drivers/vfio/pci/vfio_pci_config.c' l='1612'>/*
 * For each device we allocate a pci_config_map that indicates the
 * capability occupying each dword and thus the struct perm_bits we
 * use for read and write.  We also allocate a virtualized config
 * space which tracks reads and writes to bits that we emulate for
 * the user.  Initial values filled from device.
 *
 * Using shared struct perm_bits between all vfio-pci devices saves
 * us from allocating cfg_size buffers for virt and write for every
 * device.  We could remove vconfig and allocate individual buffers
 * for each area requiring emulated bits, but the array of pointers
 * would be comparable in size (at least for standard config space).
 */</doc>
