<dec f='linux-4.18.y/include/linux/ring_buffer.h' l='120' type='void ring_buffer_nest_start(struct ring_buffer * buffer)'/>
<def f='linux-4.18.y/kernel/trace/ring_buffer.c' l='2695' ll='2706' type='void ring_buffer_nest_start(struct ring_buffer * buffer)'/>
<doc f='linux-4.18.y/kernel/trace/ring_buffer.c' l='2682'>/**
 * ring_buffer_nest_start - Allow to trace while nested
 * @buffer: The ring buffer to modify
 *
 * The ring buffer has a safety mechanism to prevent recursion.
 * But there may be a case where a trace needs to be done while
 * tracing something else. In this case, calling this function
 * will allow this function to nest within a currently active
 * ring_buffer_lock_reserve().
 *
 * Call this function before calling another ring_buffer_lock_reserve() and
 * call ring_buffer_nest_end() after the nested ring_buffer_unlock_commit().
 */</doc>
