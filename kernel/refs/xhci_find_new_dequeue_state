<dec f='linux-4.18.y/drivers/usb/host/xhci.h' l='2083' type='void xhci_find_new_dequeue_state(struct xhci_hcd * xhci, unsigned int slot_id, unsigned int ep_index, unsigned int stream_id, struct xhci_td * cur_td, struct xhci_dequeue_state * state)'/>
<def f='linux-4.18.y/drivers/usb/host/xhci-ring.c' l='514' ll='593' type='void xhci_find_new_dequeue_state(struct xhci_hcd * xhci, unsigned int slot_id, unsigned int ep_index, unsigned int stream_id, struct xhci_td * cur_td, struct xhci_dequeue_state * state)'/>
<use f='linux-4.18.y/drivers/usb/host/xhci-ring.c' l='765' u='c' c='xhci_handle_cmd_stop_ep'/>
<doc f='linux-4.18.y/drivers/usb/host/xhci-ring.c' l='496'>/*
 * Move the xHC&apos;s endpoint ring dequeue pointer past cur_td.
 * Record the new state of the xHC&apos;s endpoint ring dequeue segment,
 * dequeue pointer, stream id, and new consumer cycle state in state.
 * Update our internal representation of the ring&apos;s dequeue pointer.
 *
 * We do this in three jumps:
 *  - First we update our new ring state to be the same as when the xHC stopped.
 *  - Then we traverse the ring to find the segment that contains
 *    the last TRB in the TD.  We toggle the xHC&apos;s new cycle state when we pass
 *    any link TRBs with the toggle cycle bit set.
 *  - Finally we move the dequeue state one TRB further, toggling the cycle bit
 *    if we&apos;ve moved it past a link TRB with the toggle cycle bit set.
 *
 * Some of the uses of xhci_generic_trb are grotty, but if they&apos;re done
 * with correct __le32 accesses they should work fine.  Only users of this are
 * in here.
 */</doc>
<use f='linux-4.18.y/drivers/usb/host/xhci.c' l='2986' u='c' c='xhci_cleanup_stalled_ring'/>
