<dec f='linux-4.18.y/include/linux/sched.h' l='1509' type='int yield_to(struct task_struct * p, bool preempt)'/>
<def f='linux-4.18.y/kernel/sched/core.c' l='5072' ll='5128' type='int yield_to(struct task_struct * p, bool preempt)'/>
<dec f='linux-4.18.y/kernel/sched/core.c' l='5129' type='int yield_to(struct task_struct * , bool )'/>
<use f='linux-4.18.y/kernel/sched/core.c' l='5129' c='yield_to'/>
<use f='linux-4.18.y/kernel/sched/core.c' l='5129' u='a'/>
<use f='linux-4.18.y/kernel/sched/core.c' l='5129' u='a'/>
<doc f='linux-4.18.y/kernel/sched/core.c' l='5057'>/**
 * yield_to - yield the current processor to another thread in
 * your thread group, or accelerate that thread toward the
 * processor it&apos;s on.
 * @p: target task
 * @preempt: whether task preemption is allowed or not
 *
 * It&apos;s the caller&apos;s job to ensure that the target task struct
 * can&apos;t go away on us before we can do any checks.
 *
 * Return:
 *	true (&gt;0) if we indeed boosted the target task.
 *	false (0) if we failed to boost the target.
 *	-ESRCH if there&apos;s no task to yield to.
 */</doc>
<use f='linux-4.18.y/virt/kvm/kvm_main.c' l='2260' u='c' c='kvm_vcpu_yield_to'/>
