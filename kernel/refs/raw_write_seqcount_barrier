<def f='linux-4.18.y/include/linux/seqlock.h' l='272' ll='277' type='void raw_write_seqcount_barrier(seqcount_t * s)'/>
<doc f='linux-4.18.y/include/linux/seqlock.h' l='238'>/**
 * raw_write_seqcount_barrier - do a seq write barrier
 * @s: pointer to seqcount_t
 *
 * This can be used to provide an ordering guarantee instead of the
 * usual consistency guarantee. It is one wmb cheaper, because we can
 * collapse the two back-to-back wmb()s.
 *
 *      seqcount_t seq;
 *      bool X = true, Y = false;
 *
 *      void read(void)
 *      {
 *              bool x, y;
 *
 *              do {
 *                      int s = read_seqcount_begin(&amp;seq);
 *
 *                      x = X; y = Y;
 *
 *              } while (read_seqcount_retry(&amp;seq, s));
 *
 *              BUG_ON(!x &amp;&amp; !y);
 *      }
 *
 *      void write(void)
 *      {
 *              Y = true;
 *
 *              raw_write_seqcount_barrier(seq);
 *
 *              X = false;
 *      }
 */</doc>
<use f='linux-4.18.y/kernel/time/hrtimer.c' l='1378' u='c' c='__run_hrtimer'/>
<use f='linux-4.18.y/kernel/time/hrtimer.c' l='1422' u='c' c='__run_hrtimer'/>
