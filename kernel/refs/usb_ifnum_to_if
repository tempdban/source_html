<dec f='linux-4.14.y/include/linux/usb.h' l='852' type='struct usb_interface * usb_ifnum_to_if(const struct usb_device * dev, unsigned int ifnum)'/>
<use f='linux-4.14.y/drivers/usb/class/cdc-acm.c' l='1250' u='c' c='acm_probe'/>
<use f='linux-4.14.y/drivers/usb/class/cdc-acm.c' l='1251' u='c' c='acm_probe'/>
<use f='linux-4.14.y/drivers/usb/class/cdc-acm.c' l='1293' u='c' c='acm_probe'/>
<use f='linux-4.14.y/drivers/usb/class/cdc-acm.c' l='1296' u='c' c='acm_probe'/>
<use f='linux-4.14.y/drivers/usb/class/cdc-acm.c' l='1312' u='c' c='acm_probe'/>
<use f='linux-4.14.y/drivers/usb/class/cdc-acm.c' l='1313' u='c' c='acm_probe'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='755' u='c' c='claimintf'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='775' u='c' c='releaseintf'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='943' u='c' c='parse_usbdevfs_streams'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='1304' u='c' c='proc_getdriver'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='2160' u='c' c='proc_ioctl'/>
<use f='linux-4.14.y/drivers/usb/core/devio.c' l='2279' u='c' c='proc_disconnect_claim'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='2041' u='c' c='usb_hcd_alloc_bandwidth'/>
<use f='linux-4.14.y/drivers/usb/core/message.c' l='1303' u='c' c='usb_set_interface'/>
<def f='linux-4.14.y/drivers/usb/core/usb.c' l='272' ll='286' type='struct usb_interface * usb_ifnum_to_if(const struct usb_device * dev, unsigned int ifnum)'/>
<dec f='linux-4.14.y/drivers/usb/core/usb.c' l='287' type='struct usb_interface * usb_ifnum_to_if(const struct usb_device * , unsigned int )'/>
<use f='linux-4.14.y/drivers/usb/core/usb.c' l='287' c='usb_ifnum_to_if'/>
<use f='linux-4.14.y/drivers/usb/core/usb.c' l='287' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/usb.c' l='287' u='a'/>
<doc f='linux-4.14.y/drivers/usb/core/usb.c' l='251'>/**
 * usb_ifnum_to_if - get the interface object with a given interface number
 * @dev: the device whose current configuration is considered
 * @ifnum: the desired interface
 *
 * This walks the device descriptor for the currently active configuration
 * to find the interface object with the particular interface number.
 *
 * Note that configuration descriptors are not required to assign interface
 * numbers sequentially, so that it would be incorrect to assume that
 * the first interface in that descriptor corresponds to interface zero.
 * This routine helps device drivers avoid such mistakes.
 * However, you should make sure that you do the right thing with any
 * alternate settings available for this interfaces.
 *
 * Don&apos;t call this function unless you are bound to one of the interfaces
 * on this device or you have locked the device!
 *
 * Return: A pointer to the interface that has @ifnum as interface number,
 * if found. %NULL otherwise.
 */</doc>
