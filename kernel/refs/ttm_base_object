<def f='linux-4.14.y/include/drm/ttm/ttm_object.h' l='126' ll='136'/>
<size>80</size>
<doc f='linux-4.14.y/include/drm/ttm/ttm_object.h' l='94'>/**
 * struct ttm_base_object
 *
 * @hash: hash entry for the per-device object hash.
 * @type: derived type this object is base class for.
 * @shareable: Other ttm_object_files can access this object.
 *
 * @tfile: Pointer to ttm_object_file of the creator.
 * NULL if the object was not created by a user request.
 * (kernel object).
 *
 * @refcount: Number of references to this object, not
 * including the hash entry. A reference to a base object can
 * only be held by a ref object.
 *
 * @refcount_release: A function to be called when there are
 * no more references to this object. This function should
 * destroy the object (or make sure destruction eventually happens),
 * and when it is called, the object has
 * already been taken out of the per-device hash. The parameter
 * &quot;base&quot; should be set to NULL by the function.
 *
 * @ref_obj_release: A function to be called when a reference object
 * with another ttm_ref_type than TTM_REF_USAGE is deleted.
 * This function may, for example, release a lock held by a user-space
 * process.
 *
 * This struct is intended to be used as a base struct for objects that
 * are visible to user-space. It provides a global name, race-safe
 * access and refcounting, minimal access contol and hooks for unref actions.
 */</doc>
<mbr r='ttm_base_object::rhead' o='0' t='struct callback_head'/>
<mbr r='ttm_base_object::hash' o='128' t='struct drm_hash_item'/>
<mbr r='ttm_base_object::object_type' o='320' t='enum ttm_object_type'/>
<mbr r='ttm_base_object::shareable' o='352' t='bool'/>
<mbr r='ttm_base_object::tfile' o='384' t='struct ttm_object_file *'/>
<mbr r='ttm_base_object::refcount' o='448' t='struct kref'/>
<mbr r='ttm_base_object::refcount_release' o='512' t='void (*)(struct ttm_base_object **)'/>
<mbr r='ttm_base_object::ref_obj_release' o='576' t='void (*)(struct ttm_base_object *, enum ttm_ref_type)'/>
<def f='linux-4.14.y/include/drm/ttm/ttm_object.h' l='126' ll='136'/>
<size>80</size>
<doc f='linux-4.14.y/include/drm/ttm/ttm_object.h' l='94'>/**
 * struct ttm_base_object
 *
 * @hash: hash entry for the per-device object hash.
 * @type: derived type this object is base class for.
 * @shareable: Other ttm_object_files can access this object.
 *
 * @tfile: Pointer to ttm_object_file of the creator.
 * NULL if the object was not created by a user request.
 * (kernel object).
 *
 * @refcount: Number of references to this object, not
 * including the hash entry. A reference to a base object can
 * only be held by a ref object.
 *
 * @refcount_release: A function to be called when there are
 * no more references to this object. This function should
 * destroy the object (or make sure destruction eventually happens),
 * and when it is called, the object has
 * already been taken out of the per-device hash. The parameter
 * &quot;base&quot; should be set to NULL by the function.
 *
 * @ref_obj_release: A function to be called when a reference object
 * with another ttm_ref_type than TTM_REF_USAGE is deleted.
 * This function may, for example, release a lock held by a user-space
 * process.
 *
 * This struct is intended to be used as a base struct for objects that
 * are visible to user-space. It provides a global name, race-safe
 * access and refcounting, minimal access contol and hooks for unref actions.
 */</doc>
<mbr r='ttm_base_object::rhead' o='0' t='struct callback_head'/>
<mbr r='ttm_base_object::hash' o='128' t='struct drm_hash_item'/>
<mbr r='ttm_base_object::object_type' o='320' t='enum ttm_object_type'/>
<mbr r='ttm_base_object::shareable' o='352' t='bool'/>
<mbr r='ttm_base_object::tfile' o='384' t='struct ttm_object_file *'/>
<mbr r='ttm_base_object::refcount' o='448' t='struct kref'/>
<mbr r='ttm_base_object::refcount_release' o='512' t='void (*)(struct ttm_base_object **)'/>
<mbr r='ttm_base_object::ref_obj_release' o='576' t='void (*)(struct ttm_base_object *, enum ttm_ref_type)'/>
