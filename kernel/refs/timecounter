<def f='linux-4.14.y/include/linux/timecounter.h' l='64' ll='70'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/timecounter.h' l='46'>/**
 * struct timecounter - layer above a %struct cyclecounter which counts nanoseconds
 *	Contains the state needed by timecounter_read() to detect
 *	cycle counter wrap around. Initialize with
 *	timecounter_init(). Also used to convert cycle counts into the
 *	corresponding nanosecond counts with timecounter_cyc2time(). Users
 *	of this code are responsible for initializing the underlying
 *	cycle counter hardware, locking issues and reading the time
 *	more often than the cycle counter wraps around. The nanosecond
 *	counter will only wrap around after ~585 years.
 *
 * @cc:			the cycle counter used by this instance
 * @cycle_last:		most recent cycle counter value seen by
 *			timecounter_read()
 * @nsec:		continuously increasing count
 * @mask:		bit mask for maintaining the &apos;frac&apos; field
 * @frac:		accumulated fractional nanoseconds
 */</doc>
<mbr r='timecounter::cc' o='0' t='const struct cyclecounter *'/>
<mbr r='timecounter::cycle_last' o='64' t='u64'/>
<mbr r='timecounter::nsec' o='128' t='u64'/>
<mbr r='timecounter::mask' o='192' t='u64'/>
<mbr r='timecounter::frac' o='256' t='u64'/>
<def f='linux-4.14.y/include/linux/timecounter.h' l='64' ll='70'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/timecounter.h' l='46'>/**
 * struct timecounter - layer above a %struct cyclecounter which counts nanoseconds
 *	Contains the state needed by timecounter_read() to detect
 *	cycle counter wrap around. Initialize with
 *	timecounter_init(). Also used to convert cycle counts into the
 *	corresponding nanosecond counts with timecounter_cyc2time(). Users
 *	of this code are responsible for initializing the underlying
 *	cycle counter hardware, locking issues and reading the time
 *	more often than the cycle counter wraps around. The nanosecond
 *	counter will only wrap around after ~585 years.
 *
 * @cc:			the cycle counter used by this instance
 * @cycle_last:		most recent cycle counter value seen by
 *			timecounter_read()
 * @nsec:		continuously increasing count
 * @mask:		bit mask for maintaining the &apos;frac&apos; field
 * @frac:		accumulated fractional nanoseconds
 */</doc>
<mbr r='timecounter::cc' o='0' t='const struct cyclecounter *'/>
<mbr r='timecounter::cycle_last' o='64' t='u64'/>
<mbr r='timecounter::nsec' o='128' t='u64'/>
<mbr r='timecounter::mask' o='192' t='u64'/>
<mbr r='timecounter::frac' o='256' t='u64'/>
