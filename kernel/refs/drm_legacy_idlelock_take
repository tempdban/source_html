<dec f='linux-4.14.y/include/drm/drm_legacy.h' l='186' type='void drm_legacy_idlelock_take(struct drm_lock_data * lock)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='287' ll='303' type='void drm_legacy_idlelock_take(struct drm_lock_data * lock_data)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='304' type='void drm_legacy_idlelock_take(struct drm_lock_data * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='304' c='drm_legacy_idlelock_take'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='304' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='304' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='274'>/**
 * This function returns immediately and takes the hw lock
 * with the kernel context if it is free, otherwise it gets the highest priority when and if
 * it is eventually released.
 *
 * This guarantees that the kernel will _eventually_ have the lock _unless_ it is held
 * by a blocked process. (In the latter case an explicit wait for the hardware lock would cause
 * a deadlock, which is why the &quot;idlelock&quot; was invented).
 *
 * This should be sufficient to wait for GPU idle without
 * having to worry about starvation.
 */</doc>
