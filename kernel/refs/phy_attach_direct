<dec f='linux-4.18.y/include/linux/phy.h' l='931' type='int phy_attach_direct(struct net_device * dev, struct phy_device * phydev, u32 flags, phy_interface_t interface)'/>
<use f='linux-4.18.y/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c' l='1025' u='c' c='xgbe_phy_find_phy_device'/>
<use f='linux-4.18.y/drivers/net/phy/phy_device.c' l='758' u='c' c='phy_connect_direct'/>
<def f='linux-4.18.y/drivers/net/phy/phy_device.c' l='957' ll='1079' type='int phy_attach_direct(struct net_device * dev, struct phy_device * phydev, u32 flags, phy_interface_t interface)'/>
<dec f='linux-4.18.y/drivers/net/phy/phy_device.c' l='1080' type='int phy_attach_direct(struct net_device * , struct phy_device * , u32 , phy_interface_t )'/>
<use f='linux-4.18.y/drivers/net/phy/phy_device.c' l='1080' c='phy_attach_direct'/>
<use f='linux-4.18.y/drivers/net/phy/phy_device.c' l='1080' u='a'/>
<use f='linux-4.18.y/drivers/net/phy/phy_device.c' l='1080' u='a'/>
<use f='linux-4.18.y/drivers/net/phy/phy_device.c' l='1109' u='c' c='phy_attach'/>
<doc f='linux-4.18.y/drivers/net/phy/phy_device.c' l='942'>/**
 * phy_attach_direct - attach a network device to a given PHY device pointer
 * @dev: network device to attach
 * @phydev: Pointer to phy_device to attach
 * @flags: PHY device&apos;s dev_flags
 * @interface: PHY device&apos;s interface
 *
 * Description: Called by drivers to attach to a particular PHY
 *     device. The phy_device is found, and properly hooked up
 *     to the phy_driver.  If no driver is attached, then a
 *     generic driver is used.  The phy_device is given a ptr to
 *     the attaching device, and given a callback for link status
 *     change.  The phy_device is returned to the attaching driver.
 *     This function takes a reference on the phy device.
 */</doc>
