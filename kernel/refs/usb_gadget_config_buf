<dec f='linux-4.18.y/include/linux/usb/gadget.h' l='777' type='int usb_gadget_config_buf(const struct usb_config_descriptor * config, void * buf, unsigned int buflen, const struct usb_descriptor_header ** desc)'/>
<doc f='linux-4.18.y/include/linux/usb/gadget.h' l='776'>/* build config descriptor from single descriptor vector */</doc>
<def f='linux-4.18.y/drivers/usb/gadget/config.c' l='76' ll='106' type='int usb_gadget_config_buf(const struct usb_config_descriptor * config, void * buf, unsigned int length, const struct usb_descriptor_header ** desc)'/>
<dec f='linux-4.18.y/drivers/usb/gadget/config.c' l='107' type='int usb_gadget_config_buf(const struct usb_config_descriptor * , void * , unsigned int , const struct usb_descriptor_header ** )'/>
<use f='linux-4.18.y/drivers/usb/gadget/config.c' l='107' c='usb_gadget_config_buf'/>
<use f='linux-4.18.y/drivers/usb/gadget/config.c' l='107' u='a'/>
<use f='linux-4.18.y/drivers/usb/gadget/config.c' l='107' u='a'/>
<doc f='linux-4.18.y/drivers/usb/gadget/config.c' l='56'>/**
 * usb_gadget_config_buf - builts a complete configuration descriptor
 * @config: Header for the descriptor, including characteristics such
 *	as power requirements and number of interfaces.
 * @desc: Null-terminated vector of pointers to the descriptors (interface,
 *	endpoint, etc) defining all functions in this device configuration.
 * @buf: Buffer for the resulting configuration descriptor.
 * @length: Length of buffer.  If this is not big enough to hold the
 *	entire configuration descriptor, an error code will be returned.
 *
 * This copies descriptors into the response buffer, building a descriptor
 * for that configuration.  It returns the buffer length or a negative
 * status code.  The config.wTotalLength field is set to match the length
 * of the result, but other descriptor fields (including power usage and
 * interface count) must be set by the caller.
 *
 * Gadget drivers could use this when constructing a config descriptor
 * in response to USB_REQ_GET_DESCRIPTOR.  They will need to patch the
 * resulting bDescriptorType value if USB_DT_OTHER_SPEED_CONFIG is needed.
 */</doc>
