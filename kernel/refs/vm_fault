<def f='linux-4.18.y/include/linux/mm.h' l='343' ll='379'/>
<size>104</size>
<doc f='linux-4.18.y/include/linux/mm.h' l='333'>/*
 * vm_fault is filled by the the pagefault handler and passed to the vma&apos;s
 * -&gt;fault function. The vma&apos;s -&gt;fault is responsible for returning a bitmask
 * of VM_FAULT_xxx flags that give details about how the fault was handled.
 *
 * MM layer fills up gfp_mask for page allocations but fault handler might
 * alter it if its implementation requires a different allocation context.
 *
 * pgoff should be used in favour of virtual_address, if possible.
 */</doc>
<mbr r='vm_fault::vma' o='0' t='struct vm_area_struct *'/>
<mbr r='vm_fault::flags' o='64' t='unsigned int'/>
<mbr r='vm_fault::gfp_mask' o='96' t='gfp_t'/>
<mbr r='vm_fault::pgoff' o='128' t='unsigned long'/>
<mbr r='vm_fault::address' o='192' t='unsigned long'/>
<mbr r='vm_fault::pmd' o='256' t='pmd_t *'/>
<mbr r='vm_fault::pud' o='320' t='pud_t *'/>
<mbr r='vm_fault::orig_pte' o='384' t='pte_t'/>
<mbr r='vm_fault::cow_page' o='448' t='struct page *'/>
<mbr r='vm_fault::memcg' o='512' t='struct mem_cgroup *'/>
<mbr r='vm_fault::page' o='576' t='struct page *'/>
<mbr r='vm_fault::pte' o='640' t='pte_t *'/>
<mbr r='vm_fault::ptl' o='704' t='spinlock_t *'/>
<mbr r='vm_fault::prealloc_pte' o='768' t='pgtable_t'/>
