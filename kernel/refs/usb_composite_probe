<dec f='linux-4.18.y/include/linux/usb/composite.h' l='403' type='int usb_composite_probe(struct usb_composite_driver * driver)'/>
<def f='linux-4.18.y/drivers/usb/gadget/composite.c' l='2321' ll='2339' type='int usb_composite_probe(struct usb_composite_driver * driver)'/>
<dec f='linux-4.18.y/drivers/usb/gadget/composite.c' l='2340' type='int usb_composite_probe(struct usb_composite_driver * )'/>
<use f='linux-4.18.y/drivers/usb/gadget/composite.c' l='2340' c='usb_composite_probe'/>
<use f='linux-4.18.y/drivers/usb/gadget/composite.c' l='2340' u='a'/>
<use f='linux-4.18.y/drivers/usb/gadget/composite.c' l='2340' u='a'/>
<doc f='linux-4.18.y/drivers/usb/gadget/composite.c' l='2305'>/**
 * usb_composite_probe() - register a composite driver
 * @driver: the driver to register
 *
 * Context: single threaded during gadget setup
 *
 * This function is used to register drivers using the composite driver
 * framework.  The return value is zero, or a negative errno value.
 * Those values normally come from the driver&apos;s @bind method, which does
 * all the work of setting up the driver to match the hardware.
 *
 * On successful return, the gadget is ready to respond to requests from
 * the host, unless one of its components invokes usb_gadget_disconnect()
 * while it was binding.  That would usually be done in order to wait for
 * some userspace participation.
 */</doc>
