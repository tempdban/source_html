<dec f='linux-4.14.y/include/drm/drm_drv.h' l='613' type='void drm_dev_unregister(struct drm_device * dev)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='362' u='c' c='drm_put_dev'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='384' u='c' c='drm_dev_unplug'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='850' ll='875' type='void drm_dev_unregister(struct drm_device * dev)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='876' type='void drm_dev_unregister(struct drm_device * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='876' c='drm_dev_unregister'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='876' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='876' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='836'>/**
 * drm_dev_unregister - Unregister DRM device
 * @dev: Device to unregister
 *
 * Unregister the DRM device from the system. This does the reverse of
 * drm_dev_register() but does not deallocate the device. The caller must call
 * drm_dev_unref() to drop their final reference.
 *
 * A special form of unregistering for hotpluggable devices is drm_dev_unplug(),
 * which can be called while there are still open users of @dev.
 *
 * This should be called first in the device teardown code to make sure
 * userspace can&apos;t access the device instance any more.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/qxl/qxl_drv.c' l='115' u='c' c='qxl_pci_remove'/>
