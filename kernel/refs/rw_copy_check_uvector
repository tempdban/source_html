<dec f='linux-4.14.y/include/linux/fs.h' l='1780' type='ssize_t rw_copy_check_uvector(int type, const struct iovec * uvector, unsigned long nr_segs, unsigned long fast_segs, struct iovec * fast_pointer, struct iovec ** ret_pointer)'/>
<def f='linux-4.14.y/fs/read_write.c' l='747' ll='820' type='ssize_t rw_copy_check_uvector(int type, const struct iovec * uvector, unsigned long nr_segs, unsigned long fast_segs, struct iovec * fast_pointer, struct iovec ** ret_pointer)'/>
<doc f='linux-4.14.y/fs/read_write.c' l='718'>/**
 * rw_copy_check_uvector() - Copy an array of &amp;struct iovec from userspace
 *     into the kernel and check that it is valid.
 *
 * @type: One of %CHECK_IOVEC_ONLY, %READ, or %WRITE.
 * @uvector: Pointer to the userspace array.
 * @nr_segs: Number of elements in userspace array.
 * @fast_segs: Number of elements in @fast_pointer.
 * @fast_pointer: Pointer to (usually small on-stack) kernel array.
 * @ret_pointer: (output parameter) Pointer to a variable that will point to
 *     either @fast_pointer, a newly allocated kernel array, or NULL,
 *     depending on which array was used.
 *
 * This function copies an array of &amp;struct iovec of @nr_segs from
 * userspace into the kernel and checks that each element is valid (e.g.
 * it does not point to a kernel address or cause overflow by being too
 * large, etc.).
 *
 * As an optimization, the caller may provide a pointer to a small
 * on-stack array in @fast_pointer, typically %UIO_FASTIOV elements long
 * (the size of this array, or 0 if unused, should be given in @fast_segs).
 *
 * @ret_pointer will always point to the array that was used, so the
 * caller must take care not to call kfree() on it e.g. in case the
 * @fast_pointer array was used and it was allocated on the stack.
 *
 * Return: The total number of bytes covered by the iovec array on success
 *   or a negative error code on error.
 */</doc>
<use f='linux-4.14.y/lib/iov_iter.c' l='1398' u='c' c='import_iovec'/>
<use f='linux-4.14.y/mm/process_vm_access.c' l='285' u='c' c='process_vm_rw'/>
