<dec f='linux-4.18.y/include/linux/usb/gadget.h' l='766' type='int usb_gadget_get_string(const struct usb_gadget_strings * table, int id, u8 * buf)'/>
<use f='linux-4.18.y/drivers/usb/gadget/composite.c' l='1043' u='c' c='lookup_string'/>
<doc f='linux-4.18.y/include/linux/usb/gadget.h' l='765'>/* put descriptor for string with that id into buf (buflen &gt;= 256) */</doc>
<def f='linux-4.18.y/drivers/usb/gadget/usbstring.c' l='35' ll='66' type='int usb_gadget_get_string(const struct usb_gadget_strings * table, int id, u8 * buf)'/>
<dec f='linux-4.18.y/drivers/usb/gadget/usbstring.c' l='67' type='int usb_gadget_get_string(const struct usb_gadget_strings * , int , u8 * )'/>
<use f='linux-4.18.y/drivers/usb/gadget/usbstring.c' l='67' c='usb_gadget_get_string'/>
<use f='linux-4.18.y/drivers/usb/gadget/usbstring.c' l='67' u='a'/>
<use f='linux-4.18.y/drivers/usb/gadget/usbstring.c' l='67' u='a'/>
<doc f='linux-4.18.y/drivers/usb/gadget/usbstring.c' l='18'>/**
 * usb_gadget_get_string - fill out a string descriptor 
 * @table: of c strings encoded using UTF-8
 * @id: string id, from low byte of wValue in get string descriptor
 * @buf: at least 256 bytes, must be 16-bit aligned
 *
 * Finds the UTF-8 string matching the ID, and converts it into a
 * string descriptor in utf16-le.
 * Returns length of descriptor (always even) or negative errno
 *
 * If your driver needs stings in multiple languages, you&apos;ll probably
 * &quot;switch (wIndex) { ... }&quot;  in your ep0 string descriptor logic,
 * using this routine after choosing which set of UTF-8 strings to use.
 * Note that US-ASCII is a strict subset of UTF-8; any string bytes with
 * the eighth bit set will be multibyte UTF-8 characters, not ISO-8859/1
 * characters (which are also widely used in C strings).
 */</doc>
