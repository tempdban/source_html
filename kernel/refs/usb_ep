<def f='linux-4.18.y/include/linux/usb/gadget.h' l='218' ll='235'/>
<size>72</size>
<doc f='linux-4.18.y/include/linux/usb/gadget.h' l='187'>/**
 * struct usb_ep - device side representation of USB endpoint
 * @name:identifier for the endpoint, such as &quot;ep-a&quot; or &quot;ep9in-bulk&quot;
 * @ops: Function pointers used to access hardware-specific operations.
 * @ep_list:the gadget&apos;s ep_list holds all of its endpoints
 * @caps:The structure describing types and directions supported by endoint.
 * @enabled: The current endpoint enabled/disabled state.
 * @claimed: True if this endpoint is claimed by a function.
 * @maxpacket:The maximum packet size used on this endpoint.  The initial
 *	value can sometimes be reduced (hardware allowing), according to
 *	the endpoint descriptor used to configure the endpoint.
 * @maxpacket_limit:The maximum packet size value which can be handled by this
 *	endpoint. It&apos;s set once by UDC driver when endpoint is initialized, and
 *	should not be changed. Should not be confused with maxpacket.
 * @max_streams: The maximum number of streams supported
 *	by this EP (0 - 16, actual number is 2^n)
 * @mult: multiplier, &apos;mult&apos; value for SS Isoc EPs
 * @maxburst: the maximum number of bursts supported by this EP (for usb3)
 * @driver_data:for use by the gadget driver.
 * @address: used to identify the endpoint when finding descriptor that
 *	matches connection speed
 * @desc: endpoint descriptor.  This pointer is set before the endpoint is
 *	enabled and remains valid until the endpoint is disabled.
 * @comp_desc: In case of SuperSpeed support, this is the endpoint companion
 *	descriptor that is used to configure the endpoint
 *
 * the bus controller driver lists all the general purpose endpoints in
 * gadget-&gt;ep_list.  the control endpoint (gadget-&gt;ep0) is not in that list,
 * and is accessed only in response to a driver setup() callback.
 */</doc>
<mbr r='usb_ep::driver_data' o='0' t='void *'/>
<mbr r='usb_ep::name' o='64' t='const char *'/>
<mbr r='usb_ep::ops' o='128' t='const struct usb_ep_ops *'/>
<mbr r='usb_ep::ep_list' o='192' t='struct list_head'/>
<mbr r='usb_ep::caps' o='320' t='struct usb_ep_caps'/>
<mbr r='usb_ep::claimed' o='352' t='bool'/>
<mbr r='usb_ep::enabled' o='360' t='bool'/>
<mbr r='usb_ep::maxpacket' o='368' t='unsigned int'/>
<mbr r='usb_ep::maxpacket_limit' o='384' t='unsigned int'/>
<mbr r='usb_ep::max_streams' o='400' t='unsigned int'/>
<mbr r='usb_ep::mult' o='416' t='unsigned int'/>
<mbr r='usb_ep::maxburst' o='418' t='unsigned int'/>
<mbr r='usb_ep::address' o='424' t='u8'/>
<mbr r='usb_ep::desc' o='448' t='const struct usb_endpoint_descriptor *'/>
<mbr r='usb_ep::comp_desc' o='512' t='const struct usb_ss_ep_comp_descriptor *'/>
