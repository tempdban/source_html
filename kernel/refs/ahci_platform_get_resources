<dec f='linux-4.14.y/include/linux/ahci_platform.h' l='32' type='struct ahci_host_priv * ahci_platform_get_resources(struct platform_device * pdev)'/>
<use f='linux-4.14.y/drivers/ata/ahci_platform.c' l='46' u='c' c='ahci_probe'/>
<def f='linux-4.14.y/drivers/ata/libahci_platform.c' l='347' ll='487' type='struct ahci_host_priv * ahci_platform_get_resources(struct platform_device * pdev)'/>
<dec f='linux-4.14.y/drivers/ata/libahci_platform.c' l='488' type='struct ahci_host_priv * ahci_platform_get_resources(struct platform_device * )'/>
<use f='linux-4.14.y/drivers/ata/libahci_platform.c' l='488' c='ahci_platform_get_resources'/>
<use f='linux-4.14.y/drivers/ata/libahci_platform.c' l='488' u='a'/>
<use f='linux-4.14.y/drivers/ata/libahci_platform.c' l='488' u='a'/>
<doc f='linux-4.14.y/drivers/ata/libahci_platform.c' l='331'>/**
 * ahci_platform_get_resources - Get platform resources
 * @pdev: platform device to get resources for
 *
 * This function allocates an ahci_host_priv struct, and gets the following
 * resources, storing a reference to them inside the returned struct:
 *
 * 1) mmio registers (IORESOURCE_MEM 0, mandatory)
 * 2) regulator for controlling the targets power (optional)
 * 3) 0 - AHCI_MAX_CLKS clocks, as specified in the devs devicetree node,
 *    or for non devicetree enabled platforms a single clock
 *	4) phys (optional)
 *
 * RETURNS:
 * The allocated ahci_host_priv on success, otherwise an ERR_PTR value
 */</doc>
