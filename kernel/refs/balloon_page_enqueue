<dec f='linux-4.18.y/include/linux/balloon_compaction.h' l='72' type='void balloon_page_enqueue(struct balloon_dev_info * b_dev_info, struct page * page)'/>
<use f='linux-4.18.y/drivers/virtio/virtio_balloon.c' l='175' u='c' c='fill_balloon'/>
<def f='linux-4.18.y/mm/balloon_compaction.c' l='41' ll='57' type='void balloon_page_enqueue(struct balloon_dev_info * b_dev_info, struct page * page)'/>
<dec f='linux-4.18.y/mm/balloon_compaction.c' l='58' type='void balloon_page_enqueue(struct balloon_dev_info * , struct page * )'/>
<use f='linux-4.18.y/mm/balloon_compaction.c' l='58' c='balloon_page_enqueue'/>
<use f='linux-4.18.y/mm/balloon_compaction.c' l='58' u='a'/>
<use f='linux-4.18.y/mm/balloon_compaction.c' l='58' u='a'/>
<doc f='linux-4.18.y/mm/balloon_compaction.c' l='30'>/*
 * balloon_page_enqueue - allocates a new page and inserts it into the balloon
 *			  page list.
 * @b_dev_info: balloon device descriptor where we will insert a new page to
 * @page: new page to enqueue - allocated using balloon_page_alloc.
 *
 * Driver must call it to properly enqueue a new allocated balloon page
 * before definitively removing it from the guest system.
 * This function returns the page address for the recently enqueued page or
 * NULL in the case we fail to allocate a new page this turn.
 */</doc>
