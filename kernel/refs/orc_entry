<def f='linux-4.18.y/arch/x86/include/asm/orc_types.h' l='85' ll='91'/>
<size>6</size>
<doc f='linux-4.18.y/arch/x86/include/asm/orc_types.h' l='77'>/*
 * This struct is more or less a vastly simplified version of the DWARF Call
 * Frame Information standard.  It contains only the necessary parts of DWARF
 * CFI, simplified for ease of access by the in-kernel unwinder.  It tells the
 * unwinder how to find the previous SP and BP (and sometimes entry regs) on
 * the stack for a given code address.  Each instance of the struct corresponds
 * to one or more code locations.
 */</doc>
<mbr r='orc_entry::sp_offset' o='0' t='s16'/>
<mbr r='orc_entry::bp_offset' o='16' t='s16'/>
<mbr r='orc_entry::sp_reg' o='32' t='unsigned int'/>
<mbr r='orc_entry::bp_reg' o='36' t='unsigned int'/>
<mbr r='orc_entry::type' o='40' t='unsigned int'/>
<def f='linux-4.18.y/tools/objtool/arch/x86/include/asm/orc_types.h' l='85' ll='91'/>
<size>6</size>
<doc f='linux-4.18.y/tools/objtool/arch/x86/include/asm/orc_types.h' l='77'>/*
 * This struct is more or less a vastly simplified version of the DWARF Call
 * Frame Information standard.  It contains only the necessary parts of DWARF
 * CFI, simplified for ease of access by the in-kernel unwinder.  It tells the
 * unwinder how to find the previous SP and BP (and sometimes entry regs) on
 * the stack for a given code address.  Each instance of the struct corresponds
 * to one or more code locations.
 */</doc>
<mbr r='orc_entry::sp_offset' o='0' t='s16'/>
<mbr r='orc_entry::bp_offset' o='16' t='s16'/>
<mbr r='orc_entry::sp_reg' o='32' t='unsigned int'/>
<mbr r='orc_entry::bp_reg' o='36' t='unsigned int'/>
<mbr r='orc_entry::type' o='40' t='unsigned int'/>
