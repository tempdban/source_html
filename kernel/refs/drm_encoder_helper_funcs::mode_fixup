<dec f='linux-4.14.y/include/drm/drm_modeset_helper_vtables.h' l='559' type='bool (*)(struct drm_encoder *, const struct drm_display_mode *, struct drm_display_mode *)'/>
<offset>128</offset>
<doc f='linux-4.14.y/include/drm/drm_modeset_helper_vtables.h' l='519'>/**
	 * @mode_fixup:
	 *
	 * This callback is used to validate and adjust a mode. The parameter
	 * mode is the display mode that should be fed to the next element in
	 * the display chain, either the final &amp;drm_connector or a &amp;drm_bridge.
	 * The parameter adjusted_mode is the input mode the encoder requires. It
	 * can be modified by this callback and does not need to match mode. See
	 * also &amp;drm_crtc_state.adjusted_mode for more details.
	 *
	 * This function is used by both legacy CRTC helpers and atomic helpers.
	 * This hook is optional.
	 *
	 * NOTE:
	 *
	 * This function is called in the check phase of atomic modesets, which
	 * can be aborted for any reason (including on userspace&apos;s request to
	 * just check whether a configuration would be possible). Atomic drivers
	 * MUST NOT touch any persistent state (hardware or software) or data
	 * structures except the passed in adjusted_mode parameter.
	 *
	 * This is in contrast to the legacy CRTC helpers where this was
	 * allowed.
	 *
	 * Atomic drivers which need to inspect and adjust more state should
	 * instead use the @atomic_check callback. If @atomic_check is used,
	 * this hook isn&apos;t called since @atomic_check allows a strict superset
	 * of the functionality of @mode_fixup.
	 *
	 * Also beware that userspace can request its own custom modes, neither
	 * core nor helpers filter modes to the list of probe modes reported by
	 * the GETCONNECTOR IOCTL and stored in &amp;drm_connector.modes. To ensure
	 * that modes are filtered consistently put any encoder constraints and
	 * limits checks into @mode_valid.
	 *
	 * RETURNS:
	 *
	 * True if an acceptable configuration is possible, false if the modeset
	 * operation should be rejected.
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='419' u='r' c='mode_fixup'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='420' u='r' c='mode_fixup'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='329' u='r' c='drm_crtc_helper_set_mode'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='330' u='r' c='drm_crtc_helper_set_mode'/>
<dec f='linux-4.14.y/include/drm/drm_modeset_helper_vtables.h' l='559' type='bool (*)(struct drm_encoder *, const struct drm_display_mode *, struct drm_display_mode *)'/>
<offset>128</offset>
<doc f='linux-4.14.y/include/drm/drm_modeset_helper_vtables.h' l='519'>/**
	 * @mode_fixup:
	 *
	 * This callback is used to validate and adjust a mode. The parameter
	 * mode is the display mode that should be fed to the next element in
	 * the display chain, either the final &amp;drm_connector or a &amp;drm_bridge.
	 * The parameter adjusted_mode is the input mode the encoder requires. It
	 * can be modified by this callback and does not need to match mode. See
	 * also &amp;drm_crtc_state.adjusted_mode for more details.
	 *
	 * This function is used by both legacy CRTC helpers and atomic helpers.
	 * This hook is optional.
	 *
	 * NOTE:
	 *
	 * This function is called in the check phase of atomic modesets, which
	 * can be aborted for any reason (including on userspace&apos;s request to
	 * just check whether a configuration would be possible). Atomic drivers
	 * MUST NOT touch any persistent state (hardware or software) or data
	 * structures except the passed in adjusted_mode parameter.
	 *
	 * This is in contrast to the legacy CRTC helpers where this was
	 * allowed.
	 *
	 * Atomic drivers which need to inspect and adjust more state should
	 * instead use the @atomic_check callback. If @atomic_check is used,
	 * this hook isn&apos;t called since @atomic_check allows a strict superset
	 * of the functionality of @mode_fixup.
	 *
	 * Also beware that userspace can request its own custom modes, neither
	 * core nor helpers filter modes to the list of probe modes reported by
	 * the GETCONNECTOR IOCTL and stored in &amp;drm_connector.modes. To ensure
	 * that modes are filtered consistently put any encoder constraints and
	 * limits checks into @mode_valid.
	 *
	 * RETURNS:
	 *
	 * True if an acceptable configuration is possible, false if the modeset
	 * operation should be rejected.
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='419' u='r' c='mode_fixup'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='420' u='r' c='mode_fixup'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='329' u='r' c='drm_crtc_helper_set_mode'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_crtc_helper.c' l='330' u='r' c='drm_crtc_helper_set_mode'/>
