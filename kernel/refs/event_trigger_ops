<def f='linux-4.14.y/kernel/trace/trace.h' l='1589' ll='1599'/>
<size>32</size>
<doc f='linux-4.14.y/kernel/trace/trace.h' l='1552'>/**
 * struct event_trigger_ops - callbacks for trace event triggers
 *
 * The methods in this structure provide per-event trigger hooks for
 * various trigger operations.
 *
 * All the methods below, except for @init() and @free(), must be
 * implemented.
 *
 * @func: The trigger &apos;probe&apos; function called when the triggering
 *	event occurs.  The data passed into this callback is the data
 *	that was supplied to the event_command @reg() function that
 *	registered the trigger (see struct event_command) along with
 *	the trace record, rec.
 *
 * @init: An optional initialization function called for the trigger
 *	when the trigger is registered (via the event_command reg()
 *	function).  This can be used to perform per-trigger
 *	initialization such as incrementing a per-trigger reference
 *	count, for instance.  This is usually implemented by the
 *	generic utility function @event_trigger_init() (see
 *	trace_event_triggers.c).
 *
 * @free: An optional de-initialization function called for the
 *	trigger when the trigger is unregistered (via the
 *	event_command @reg() function).  This can be used to perform
 *	per-trigger de-initialization such as decrementing a
 *	per-trigger reference count and freeing corresponding trigger
 *	data, for instance.  This is usually implemented by the
 *	generic utility function @event_trigger_free() (see
 *	trace_event_triggers.c).
 *
 * @print: The callback function invoked to have the trigger print
 *	itself.  This is usually implemented by a wrapper function
 *	that calls the generic utility function @event_trigger_print()
 *	(see trace_event_triggers.c).
 */</doc>
<mbr r='event_trigger_ops::func' o='0' t='void (*)(struct event_trigger_data *, void *)'/>
<mbr r='event_trigger_ops::init' o='64' t='int (*)(struct event_trigger_ops *, struct event_trigger_data *)'/>
<mbr r='event_trigger_ops::free' o='128' t='void (*)(struct event_trigger_ops *, struct event_trigger_data *)'/>
<mbr r='event_trigger_ops::print' o='192' t='int (*)(struct seq_file *, struct event_trigger_ops *, struct event_trigger_data *)'/>
