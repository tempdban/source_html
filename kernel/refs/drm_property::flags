<dec f='linux-4.14.y/include/drm/drm_property.h' l='156' type='uint32_t'/>
<use f='linux-4.14.y/include/drm/drm_property.h' l='235' u='r' c='drm_property_type_is'/>
<use f='linux-4.14.y/include/drm/drm_property.h' l='236' u='r' c='drm_property_type_is'/>
<use f='linux-4.14.y/include/drm/drm_property.h' l='237' u='r' c='drm_property_type_is'/>
<offset>384</offset>
<doc f='linux-4.14.y/include/drm/drm_property.h' l='82'>/**
	 * @flags:
	 *
	 * Property flags and type. A property needs to be one of the following
	 * types:
	 *
	 * DRM_MODE_PROP_RANGE
	 *     Range properties report their minimum and maximum admissible unsigned values.
	 *     The KMS core verifies that values set by application fit in that
	 *     range. The range is unsigned. Range properties are created using
	 *     drm_property_create_range().
	 *
	 * DRM_MODE_PROP_SIGNED_RANGE
	 *     Range properties report their minimum and maximum admissible unsigned values.
	 *     The KMS core verifies that values set by application fit in that
	 *     range. The range is signed. Range properties are created using
	 *     drm_property_create_signed_range().
	 *
	 * DRM_MODE_PROP_ENUM
	 *     Enumerated properties take a numerical value that ranges from 0 to
	 *     the number of enumerated values defined by the property minus one,
	 *     and associate a free-formed string name to each value. Applications
	 *     can retrieve the list of defined value-name pairs and use the
	 *     numerical value to get and set property instance values. Enum
	 *     properties are created using drm_property_create_enum().
	 *
	 * DRM_MODE_PROP_BITMASK
	 *     Bitmask properties are enumeration properties that additionally
	 *     restrict all enumerated values to the 0..63 range. Bitmask property
	 *     instance values combine one or more of the enumerated bits defined
	 *     by the property. Bitmask properties are created using
	 *     drm_property_create_bitmask().
	 *
	 * DRM_MODE_PROB_OBJECT
	 *     Object properties are used to link modeset objects. This is used
	 *     extensively in the atomic support to create the display pipeline,
	 *     by linking &amp;drm_framebuffer to &amp;drm_plane, &amp;drm_plane to
	 *     &amp;drm_crtc and &amp;drm_connector to &amp;drm_crtc. An object property can
	 *     only link to a specific type of &amp;drm_mode_object, this limit is
	 *     enforced by the core. Object properties are created using
	 *     drm_property_create_object().
	 *
	 *     Object properties work like blob properties, but in a more
	 *     general fashion. They are limited to atomic drivers and must have
	 *     the DRM_MODE_PROP_ATOMIC flag set.
	 *
	 * DRM_MODE_PROP_BLOB
	 *     Blob properties store a binary blob without any format restriction.
	 *     The binary blobs are created as KMS standalone objects, and blob
	 *     property instance values store the ID of their associated blob
	 *     object. Blob properties are created by calling
	 *     drm_property_create() with DRM_MODE_PROP_BLOB as the type.
	 *
	 *     Actual blob objects to contain blob data are created using
	 *     drm_property_create_blob(), or through the corresponding IOCTL.
	 *
	 *     Besides the built-in limit to only accept blob objects blob
	 *     properties work exactly like object properties. The only reasons
	 *     blob properties exist is backwards compatibility with existing
	 *     userspace.
	 *
	 * In addition a property can have any combination of the below flags:
	 *
	 * DRM_MODE_PROP_ATOMIC
	 *     Set for properties which encode atomic modeset state. Such
	 *     properties are not exposed to legacy userspace.
	 *
	 * DRM_MODE_PROP_IMMUTABLE
	 *     Set for properties where userspace cannot be changed by
	 *     userspace. The kernel is allowed to update the value of these
	 *     properties. This is generally used to expose probe state to
	 *     usersapce, e.g. the EDID, or the connector path property on DP
	 *     MST sinks.
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_mode_object.c' l='237' u='r' c='drm_object_property_set_value'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_mode_object.c' l='260' u='r' c='__drm_object_property_get_value'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_mode_object.c' l='312' u='r' c='drm_mode_object_get_properties'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_property.c' l='55' u='r' c='drm_property_type_valid'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_property.c' l='56' u='r' c='drm_property_type_valid'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_property.c' l='57' u='r' c='drm_property_type_valid'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_property.c' l='98' u='w' c='drm_property_create'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_property.c' l='459' u='r' c='drm_mode_getproperty_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_property.c' l='860' u='r' c='drm_property_change_valid_get'/>
