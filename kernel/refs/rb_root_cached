<def f='linux-4.14.y/include/linux/rbtree.h' l='57' ll='60'/>
<size>16</size>
<doc f='linux-4.14.y/include/linux/rbtree.h' l='47'>/*
 * Leftmost-cached rbtrees.
 *
 * We do not cache the rightmost node based on footprint
 * size vs number of potential users that could benefit
 * from O(1) rb_last(). Just not worth it, users that want
 * this feature can always implement the logic explicitly.
 * Furthermore, users that want to cache both pointers may
 * find it a bit asymmetric, but that&apos;s ok.
 */</doc>
<mbr r='rb_root_cached::rb_root' o='0' t='struct rb_root'/>
<mbr r='rb_root_cached::rb_leftmost' o='64' t='struct rb_node *'/>
<def f='linux-4.14.y/include/linux/rbtree.h' l='57' ll='60'/>
<size>16</size>
<doc f='linux-4.14.y/include/linux/rbtree.h' l='47'>/*
 * Leftmost-cached rbtrees.
 *
 * We do not cache the rightmost node based on footprint
 * size vs number of potential users that could benefit
 * from O(1) rb_last(). Just not worth it, users that want
 * this feature can always implement the logic explicitly.
 * Furthermore, users that want to cache both pointers may
 * find it a bit asymmetric, but that&apos;s ok.
 */</doc>
<mbr r='rb_root_cached::rb_root' o='0' t='struct rb_root'/>
<mbr r='rb_root_cached::rb_leftmost' o='64' t='struct rb_node *'/>
