<dec f='linux-4.14.y/include/linux/dma-buf.h' l='249' type='int (*)(struct dma_buf *, struct vm_area_struct *)'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='98' u='r' c='dma_buf_mmap_internal'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='410' u='r' c='dma_buf_export'/>
<use f='linux-4.14.y/drivers/dma-buf/dma-buf.c' l='971' u='r' c='dma_buf_mmap'/>
<offset>704</offset>
<doc f='linux-4.14.y/include/linux/dma-buf.h' l='214'>/**
	 * @mmap:
	 *
	 * This callback is used by the dma_buf_mmap() function
	 *
	 * Note that the mapping needs to be incoherent, userspace is expected
	 * to braket CPU access using the DMA_BUF_IOCTL_SYNC interface.
	 *
	 * Because dma-buf buffers have invariant size over their lifetime, the
	 * dma-buf core checks whether a vma is too large and rejects such
	 * mappings. The exporter hence does not need to duplicate this check.
	 * Drivers do not need to check this themselves.
	 *
	 * If an exporter needs to manually flush caches and hence needs to fake
	 * coherency for mmap support, it needs to be able to zap all the ptes
	 * pointing at the backing storage. Now linux mm needs a struct
	 * address_space associated with the struct file stored in vma-&gt;vm_file
	 * to do that with the function unmap_mapping_range. But the dma_buf
	 * framework only backs every dma_buf fd with the anon_file struct file,
	 * i.e. all dma_bufs share the same file.
	 *
	 * Hence exporters need to setup their own file (and address_space)
	 * association by setting vma-&gt;vm_file and adjusting vma-&gt;vm_pgoff in
	 * the dma_buf mmap callback. In the specific case of a gem driver the
	 * exporter could use the shmem file already provided by gem (and set
	 * vm_pgoff = 0). Exporters can then zap ptes by unmapping the
	 * corresponding range of the struct address_space associated with their
	 * own file.
	 *
	 * This callback is optional.
	 *
	 * Returns:
	 *
	 * 0 on success or a negative error code on failure.
	 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_prime.c' l='410' u='w'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_prime.c' l='115' u='w'/>
