<def f='linux-4.14.y/include/linux/watchdog.h' l='43' ll='56'/>
<size>80</size>
<doc f='linux-4.14.y/include/linux/watchdog.h' l='25'>/** struct watchdog_ops - The watchdog-devices operations
 *
 * @owner:	The module owner.
 * @start:	The routine for starting the watchdog device.
 * @stop:	The routine for stopping the watchdog device.
 * @ping:	The routine that sends a keepalive ping to the watchdog device.
 * @status:	The routine that shows the status of the watchdog device.
 * @set_timeout:The routine for setting the watchdog devices timeout value (in seconds).
 * @set_pretimeout:The routine for setting the watchdog devices pretimeout.
 * @get_timeleft:The routine that gets the time left before a reset (in seconds).
 * @restart:	The routine for restarting the machine.
 * @ioctl:	The routines that handles extra ioctl calls.
 *
 * The watchdog_ops structure contains a list of low-level operations
 * that control a watchdog device. It also contains the module that owns
 * these operations. The start and stop function are mandatory, all other
 * functions are optional.
 */</doc>
<mbr r='watchdog_ops::owner' o='0' t='struct module *'/>
<mbr r='watchdog_ops::start' o='64' t='int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::stop' o='128' t='int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::ping' o='192' t='int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::status' o='256' t='unsigned int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::set_timeout' o='320' t='int (*)(struct watchdog_device *, unsigned int)'/>
<mbr r='watchdog_ops::set_pretimeout' o='384' t='int (*)(struct watchdog_device *, unsigned int)'/>
<mbr r='watchdog_ops::get_timeleft' o='448' t='unsigned int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::restart' o='512' t='int (*)(struct watchdog_device *, unsigned long, void *)'/>
<mbr r='watchdog_ops::ioctl' o='576' t='long (*)(struct watchdog_device *, unsigned int, unsigned long)'/>
<def f='linux-4.14.y/include/linux/watchdog.h' l='43' ll='56'/>
<size>80</size>
<doc f='linux-4.14.y/include/linux/watchdog.h' l='25'>/** struct watchdog_ops - The watchdog-devices operations
 *
 * @owner:	The module owner.
 * @start:	The routine for starting the watchdog device.
 * @stop:	The routine for stopping the watchdog device.
 * @ping:	The routine that sends a keepalive ping to the watchdog device.
 * @status:	The routine that shows the status of the watchdog device.
 * @set_timeout:The routine for setting the watchdog devices timeout value (in seconds).
 * @set_pretimeout:The routine for setting the watchdog devices pretimeout.
 * @get_timeleft:The routine that gets the time left before a reset (in seconds).
 * @restart:	The routine for restarting the machine.
 * @ioctl:	The routines that handles extra ioctl calls.
 *
 * The watchdog_ops structure contains a list of low-level operations
 * that control a watchdog device. It also contains the module that owns
 * these operations. The start and stop function are mandatory, all other
 * functions are optional.
 */</doc>
<mbr r='watchdog_ops::owner' o='0' t='struct module *'/>
<mbr r='watchdog_ops::start' o='64' t='int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::stop' o='128' t='int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::ping' o='192' t='int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::status' o='256' t='unsigned int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::set_timeout' o='320' t='int (*)(struct watchdog_device *, unsigned int)'/>
<mbr r='watchdog_ops::set_pretimeout' o='384' t='int (*)(struct watchdog_device *, unsigned int)'/>
<mbr r='watchdog_ops::get_timeleft' o='448' t='unsigned int (*)(struct watchdog_device *)'/>
<mbr r='watchdog_ops::restart' o='512' t='int (*)(struct watchdog_device *, unsigned long, void *)'/>
<mbr r='watchdog_ops::ioctl' o='576' t='long (*)(struct watchdog_device *, unsigned int, unsigned long)'/>
