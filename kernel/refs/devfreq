<def f='linux-4.14.y/include/linux/devfreq.h' l='138' ll='165'/>
<size>1608</size>
<doc f='linux-4.14.y/include/linux/devfreq.h' l='104'>/**
 * struct devfreq - Device devfreq structure
 * @node:	list node - contains the devices with devfreq that have been
 *		registered.
 * @lock:	a mutex to protect accessing devfreq.
 * @dev:	device registered by devfreq class. dev.parent is the device
 *		using devfreq.
 * @profile:	device-specific devfreq profile
 * @governor:	method how to choose frequency based on the usage.
 * @governor_name:	devfreq governor name for use with this devfreq
 * @nb:		notifier block used to notify devfreq object that it should
 *		reevaluate operable frequencies. Devfreq users may use
 *		devfreq.nb to the corresponding register notifier call chain.
 * @work:	delayed work for load monitoring.
 * @previous_freq:	previously configured frequency value.
 * @data:	Private data of the governor. The devfreq framework does not
 *		touch this.
 * @min_freq:	Limit minimum frequency requested by user (0: none)
 * @max_freq:	Limit maximum frequency requested by user (0: none)
 * @stop_polling:	 devfreq polling status of a device.
 * @total_trans:	Number of devfreq transitions
 * @trans_table:	Statistics of devfreq transitions
 * @time_in_state:	Statistics of devfreq states
 * @last_stat_updated:	The last time stat updated
 * @transition_notifier_list: list head of DEVFREQ_TRANSITION_NOTIFIER notifier
 *
 * This structure stores the devfreq information for a give device.
 *
 * Note that when a governor accesses entries in struct devfreq in its
 * functions except for the context of callbacks defined in struct
 * devfreq_governor, the governor should protect its access with the
 * struct mutex lock in struct devfreq. A governor may use this mutex
 * to protect its own private data in void *data as well.
 */</doc>
<mbr r='devfreq::node' o='0' t='struct list_head'/>
<mbr r='devfreq::lock' o='128' t='struct mutex'/>
<mbr r='devfreq::dev' o='384' t='struct device'/>
<mbr r='devfreq::profile' o='4160' t='struct devfreq_dev_profile *'/>
<mbr r='devfreq::governor' o='4224' t='const struct devfreq_governor *'/>
<mbr r='devfreq::governor_name' o='4288' t='char [16]'/>
<mbr r='devfreq::nb' o='4416' t='struct notifier_block'/>
<mbr r='devfreq::work' o='4608' t='struct delayed_work'/>
<mbr r='devfreq::previous_freq' o='5376' t='unsigned long'/>
<mbr r='devfreq::last_status' o='5440' t='struct devfreq_dev_status'/>
<mbr r='devfreq::data' o='5696' t='void *'/>
<mbr r='devfreq::min_freq' o='5760' t='unsigned long'/>
<mbr r='devfreq::max_freq' o='5824' t='unsigned long'/>
<mbr r='devfreq::stop_polling' o='5888' t='bool'/>
<mbr r='devfreq::total_trans' o='5920' t='unsigned int'/>
<mbr r='devfreq::trans_table' o='5952' t='unsigned int *'/>
<mbr r='devfreq::time_in_state' o='6016' t='unsigned long *'/>
<mbr r='devfreq::last_stat_updated' o='6080' t='unsigned long'/>
<mbr r='devfreq::transition_notifier_list' o='6144' t='struct srcu_notifier_head'/>
<def f='linux-4.14.y/include/linux/devfreq.h' l='138' ll='165'/>
<size>1608</size>
<doc f='linux-4.14.y/include/linux/devfreq.h' l='104'>/**
 * struct devfreq - Device devfreq structure
 * @node:	list node - contains the devices with devfreq that have been
 *		registered.
 * @lock:	a mutex to protect accessing devfreq.
 * @dev:	device registered by devfreq class. dev.parent is the device
 *		using devfreq.
 * @profile:	device-specific devfreq profile
 * @governor:	method how to choose frequency based on the usage.
 * @governor_name:	devfreq governor name for use with this devfreq
 * @nb:		notifier block used to notify devfreq object that it should
 *		reevaluate operable frequencies. Devfreq users may use
 *		devfreq.nb to the corresponding register notifier call chain.
 * @work:	delayed work for load monitoring.
 * @previous_freq:	previously configured frequency value.
 * @data:	Private data of the governor. The devfreq framework does not
 *		touch this.
 * @min_freq:	Limit minimum frequency requested by user (0: none)
 * @max_freq:	Limit maximum frequency requested by user (0: none)
 * @stop_polling:	 devfreq polling status of a device.
 * @total_trans:	Number of devfreq transitions
 * @trans_table:	Statistics of devfreq transitions
 * @time_in_state:	Statistics of devfreq states
 * @last_stat_updated:	The last time stat updated
 * @transition_notifier_list: list head of DEVFREQ_TRANSITION_NOTIFIER notifier
 *
 * This structure stores the devfreq information for a give device.
 *
 * Note that when a governor accesses entries in struct devfreq in its
 * functions except for the context of callbacks defined in struct
 * devfreq_governor, the governor should protect its access with the
 * struct mutex lock in struct devfreq. A governor may use this mutex
 * to protect its own private data in void *data as well.
 */</doc>
<mbr r='devfreq::node' o='0' t='struct list_head'/>
<mbr r='devfreq::lock' o='128' t='struct mutex'/>
<mbr r='devfreq::dev' o='384' t='struct device'/>
<mbr r='devfreq::profile' o='4160' t='struct devfreq_dev_profile *'/>
<mbr r='devfreq::governor' o='4224' t='const struct devfreq_governor *'/>
<mbr r='devfreq::governor_name' o='4288' t='char [16]'/>
<mbr r='devfreq::nb' o='4416' t='struct notifier_block'/>
<mbr r='devfreq::work' o='4608' t='struct delayed_work'/>
<mbr r='devfreq::previous_freq' o='5376' t='unsigned long'/>
<mbr r='devfreq::last_status' o='5440' t='struct devfreq_dev_status'/>
<mbr r='devfreq::data' o='5696' t='void *'/>
<mbr r='devfreq::min_freq' o='5760' t='unsigned long'/>
<mbr r='devfreq::max_freq' o='5824' t='unsigned long'/>
<mbr r='devfreq::stop_polling' o='5888' t='bool'/>
<mbr r='devfreq::total_trans' o='5920' t='unsigned int'/>
<mbr r='devfreq::trans_table' o='5952' t='unsigned int *'/>
<mbr r='devfreq::time_in_state' o='6016' t='unsigned long *'/>
<mbr r='devfreq::last_stat_updated' o='6080' t='unsigned long'/>
<mbr r='devfreq::transition_notifier_list' o='6144' t='struct srcu_notifier_head'/>
