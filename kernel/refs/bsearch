<dec f='include/stdlib.h' l='754' type='void * bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)'/>
<doc f='include/stdlib.h' l='752'>/* Do a binary search for KEY in BASE, which consists of NMEMB elements
   of SIZE bytes each, using COMPAR to perform the comparisons.  */</doc>
<dec f='linux-4.14.y/include/linux/bsearch.h' l='7' type='void * bsearch(const void * key, const void * base, size_t num, size_t size, int (*)(const void *, const void *) cmp)'/>
<use f='linux-4.14.y/drivers/base/regmap/regcache.c' l='655' u='c' c='regcache_lookup_reg'/>
<use f='linux-4.14.y/kernel/module.c' l='557' u='c' c='find_symbol_in_section'/>
<use f='linux-4.14.y/kernel/module.c' l='2523' u='c' c='lookup_symbol'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='1650' u='c' c='ftrace_location_range'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='5887' u='c' c='ftrace_free_init_mem'/>
<def f='linux-4.14.y/lib/bsearch.c' l='33' ll='54' type='void * bsearch(const void * key, const void * base, size_t num, size_t size, int (*)(const void *, const void *) cmp)'/>
<dec f='linux-4.14.y/lib/bsearch.c' l='55' type='void * bsearch(const void * , const void * , size_t , size_t , int (*)(const void *, const void *) )'/>
<use f='linux-4.14.y/lib/bsearch.c' l='55' c='bsearch'/>
<use f='linux-4.14.y/lib/bsearch.c' l='55' u='a'/>
<use f='linux-4.14.y/lib/bsearch.c' l='55' u='a'/>
<doc f='linux-4.14.y/lib/bsearch.c' l='15'>/*
 * bsearch - binary search an array of elements
 * @key: pointer to item being searched for
 * @base: pointer to first element to search
 * @num: number of elements
 * @size: size of each element
 * @cmp: pointer to comparison function
 *
 * This function does a binary search on the given array.  The
 * contents of the array should already be in ascending sorted order
 * under the provided comparison function.
 *
 * Note that the key need not have the same type as the elements in
 * the array, e.g. key could be a string and the comparison function
 * could compare the string with the struct&apos;s name field.  However, if
 * the key and elements in the array are of the same type, you can use
 * the same comparison function for both sort() and bsearch().
 */</doc>
<use f='linux-4.14.y/lib/extable.c' l='123' u='c' c='search_extable'/>
<dec f='linux-4.14.y/include/linux/bsearch.h' l='7' type='void * bsearch(const void * key, const void * base, size_t num, size_t size, int (*)(const void *, const void *) cmp)'/>
<use f='linux-4.14.y/drivers/base/regmap/regcache.c' l='655' u='c' c='regcache_lookup_reg'/>
<use f='linux-4.14.y/kernel/module.c' l='557' u='c' c='find_symbol_in_section'/>
<use f='linux-4.14.y/kernel/module.c' l='2523' u='c' c='lookup_symbol'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='1650' u='c' c='ftrace_location_range'/>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='5887' u='c' c='ftrace_free_init_mem'/>
<def f='linux-4.14.y/lib/bsearch.c' l='33' ll='54' type='void * bsearch(const void * key, const void * base, size_t num, size_t size, int (*)(const void *, const void *) cmp)'/>
<dec f='linux-4.14.y/lib/bsearch.c' l='55' type='void * bsearch(const void * , const void * , size_t , size_t , int (*)(const void *, const void *) )'/>
<use f='linux-4.14.y/lib/bsearch.c' l='55' c='bsearch'/>
<use f='linux-4.14.y/lib/bsearch.c' l='55' u='a'/>
<use f='linux-4.14.y/lib/bsearch.c' l='55' u='a'/>
<doc f='linux-4.14.y/lib/bsearch.c' l='15'>/*
 * bsearch - binary search an array of elements
 * @key: pointer to item being searched for
 * @base: pointer to first element to search
 * @num: number of elements
 * @size: size of each element
 * @cmp: pointer to comparison function
 *
 * This function does a binary search on the given array.  The
 * contents of the array should already be in ascending sorted order
 * under the provided comparison function.
 *
 * Note that the key need not have the same type as the elements in
 * the array, e.g. key could be a string and the comparison function
 * could compare the string with the struct&apos;s name field.  However, if
 * the key and elements in the array are of the same type, you can use
 * the same comparison function for both sort() and bsearch().
 */</doc>
<use f='linux-4.14.y/lib/extable.c' l='123' u='c' c='search_extable'/>
