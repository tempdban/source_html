<dec f='linux-4.14.y/include/linux/lz4.h' l='292' type='int LZ4_decompress_safe(const char * source, char * dest, int compressedSize, int maxDecompressedSize)'/>
<use f='linux-4.14.y/lib/decompress_unlz4.c' l='161' u='c' c='unlz4'/>
<doc f='linux-4.14.y/include/linux/lz4.h' l='273'>/**
 * LZ4_decompress_safe() - Decompression protected against buffer overflow
 * @source: source address of the compressed data
 * @dest: output buffer address of the uncompressed data
 *	which must be already allocated
 * @compressedSize: is the precise full size of the compressed block
 * @maxDecompressedSize: is the size of &apos;dest&apos; buffer
 *
 * Decompresses data fom &apos;source&apos; into &apos;dest&apos;.
 * If the source stream is detected malformed, the function will
 * stop decoding and return a negative result.
 * This function is protected against buffer overflow exploits,
 * including malicious data packets. It never writes outside output buffer,
 * nor reads outside input buffer.
 *
 * Return: number of bytes decompressed into destination buffer
 *	(necessarily &lt;= maxDecompressedSize)
 *	or a negative result in case of error
 */</doc>
<def f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='337' ll='343' type='int LZ4_decompress_safe(const char * source, char * dest, int compressedSize, int maxDecompressedSize)'/>
<dec f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='497' type='int LZ4_decompress_safe(const char * , char * , int , int )'/>
<use f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='497' c='LZ4_decompress_safe'/>
<use f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='497' u='a'/>
<use f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='497' u='a'/>
<dec f='linux-4.14.y/include/linux/lz4.h' l='292' type='int LZ4_decompress_safe(const char * source, char * dest, int compressedSize, int maxDecompressedSize)'/>
<use f='linux-4.14.y/lib/decompress_unlz4.c' l='161' u='c' c='unlz4'/>
<doc f='linux-4.14.y/include/linux/lz4.h' l='273'>/**
 * LZ4_decompress_safe() - Decompression protected against buffer overflow
 * @source: source address of the compressed data
 * @dest: output buffer address of the uncompressed data
 *	which must be already allocated
 * @compressedSize: is the precise full size of the compressed block
 * @maxDecompressedSize: is the size of &apos;dest&apos; buffer
 *
 * Decompresses data fom &apos;source&apos; into &apos;dest&apos;.
 * If the source stream is detected malformed, the function will
 * stop decoding and return a negative result.
 * This function is protected against buffer overflow exploits,
 * including malicious data packets. It never writes outside output buffer,
 * nor reads outside input buffer.
 *
 * Return: number of bytes decompressed into destination buffer
 *	(necessarily &lt;= maxDecompressedSize)
 *	or a negative result in case of error
 */</doc>
<def f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='337' ll='343' type='int LZ4_decompress_safe(const char * source, char * dest, int compressedSize, int maxDecompressedSize)'/>
<dec f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='497' type='int LZ4_decompress_safe(const char * , char * , int , int )'/>
<use f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='497' c='LZ4_decompress_safe'/>
<use f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='497' u='a'/>
<use f='linux-4.14.y/lib/lz4/lz4_decompress.c' l='497' u='a'/>
