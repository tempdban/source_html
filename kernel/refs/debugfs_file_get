<dec f='linux-4.18.y/include/linux/debugfs.h' l='89' type='int debugfs_file_get(struct dentry * dentry)'/>
<def f='linux-4.18.y/fs/debugfs/file.c' l='80' ll='118' type='int debugfs_file_get(struct dentry * dentry)'/>
<dec f='linux-4.18.y/fs/debugfs/file.c' l='119' type='int debugfs_file_get(struct dentry * )'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='119' c='debugfs_file_get'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='119' u='a'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='119' u='a'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='145' u='c' c='open_proxy_open'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='182' u='c' c='full_proxy_llseek'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='182' u='c' c='full_proxy_read'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='182' u='c' c='full_proxy_write'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='182' u='c' c='full_proxy_unlocked_ioctl'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='216' u='c' c='full_proxy_poll'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='270' u='c' c='full_proxy_open'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='324' u='c' c='debugfs_attr_read'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='339' u='c' c='debugfs_attr_write'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='780' u='c' c='debugfs_read_file_bool'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='806' u='c' c='debugfs_write_file_bool'/>
<use f='linux-4.18.y/fs/debugfs/file.c' l='875' u='c' c='read_file_blob'/>
<doc f='linux-4.18.y/fs/debugfs/file.c' l='65'>/**
 * debugfs_file_get - mark the beginning of file data access
 * @dentry: the dentry object whose data is being accessed.
 *
 * Up to a matching call to debugfs_file_put(), any successive call
 * into the file removing functions debugfs_remove() and
 * debugfs_remove_recursive() will block. Since associated private
 * file data may only get freed after a successful return of any of
 * the removal functions, you may safely access it after a successful
 * call to debugfs_file_get() without worrying about lifetime issues.
 *
 * If -%EIO is returned, the file has already been removed and thus,
 * it is not safe to access any of its data. If, on the other hand,
 * it is allowed to access the file data, zero is returned.
 */</doc>
