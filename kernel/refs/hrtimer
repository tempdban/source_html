<def f='linux-4.18.y/include/linux/hrtimer.h' l='110' ll='118'/>
<size>64</size>
<doc f='linux-4.18.y/include/linux/hrtimer.h' l='91'>/**
 * struct hrtimer - the basic hrtimer structure
 * @node:	timerqueue node, which also manages node.expires,
 *		the absolute expiry time in the hrtimers internal
 *		representation. The time is related to the clock on
 *		which the timer is based. Is setup by adding
 *		slack to the _softexpires value. For non range timers
 *		identical to _softexpires.
 * @_softexpires: the absolute earliest expiry time of the hrtimer.
 *		The time which was given as expiry time when the timer
 *		was armed.
 * @function:	timer expiry callback function
 * @base:	pointer to the timer base (per cpu and per clock)
 * @state:	state information (See bit values above)
 * @is_rel:	Set if the timer was armed relative
 * @is_soft:	Set if hrtimer will be expired in soft interrupt context.
 *
 * The hrtimer structure must be initialized by hrtimer_init()
 */</doc>
<mbr r='hrtimer::node' o='0' t='struct timerqueue_node'/>
<mbr r='hrtimer::_softexpires' o='256' t='ktime_t'/>
<mbr r='hrtimer::function' o='320' t='enum hrtimer_restart (*)(struct hrtimer *)'/>
<mbr r='hrtimer::base' o='384' t='struct hrtimer_clock_base *'/>
<mbr r='hrtimer::state' o='448' t='u8'/>
<mbr r='hrtimer::is_rel' o='456' t='u8'/>
<mbr r='hrtimer::is_soft' o='464' t='u8'/>
