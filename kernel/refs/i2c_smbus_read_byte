<dec f='linux-4.14.y/include/linux/i2c.h' l='91' type='s32 i2c_smbus_read_byte(const struct i2c_client * client)'/>
<doc f='linux-4.14.y/include/linux/i2c.h' l='88'>/* Now follow the &apos;nice&apos; access routines. These also document the calling
   conventions of i2c_smbus_xfer. */</doc>
<use f='linux-4.14.y/drivers/i2c/i2c-core-acpi.c' l='532' u='c' c='i2c_acpi_space_handler'/>
<def f='linux-4.14.y/drivers/i2c/i2c-core-smbus.c' l='93' ll='102' type='s32 i2c_smbus_read_byte(const struct i2c_client * client)'/>
<dec f='linux-4.14.y/drivers/i2c/i2c-core-smbus.c' l='103' type='s32 i2c_smbus_read_byte(const struct i2c_client * )'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-smbus.c' l='103' c='i2c_smbus_read_byte'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-smbus.c' l='103' u='a'/>
<use f='linux-4.14.y/drivers/i2c/i2c-core-smbus.c' l='103' u='a'/>
<doc f='linux-4.14.y/drivers/i2c/i2c-core-smbus.c' l='86'>/**
 * i2c_smbus_read_byte - SMBus &quot;receive byte&quot; protocol
 * @client: Handle to slave device
 *
 * This executes the SMBus &quot;receive byte&quot; protocol, returning negative errno
 * else the byte received from the device.
 */</doc>
