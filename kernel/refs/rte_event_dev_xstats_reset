<dec f='linux-4.18.y/lib/librte_eventdev/rte_eventdev.h' l='1898' type='int rte_event_dev_xstats_reset(uint8_t dev_id, enum rte_event_dev_xstats_mode mode, int16_t queue_port_id, const uint32_t * ids, uint32_t nb_ids)'/>
<doc f='linux-4.18.y/lib/librte_eventdev/rte_eventdev.h' l='1877'>/**
 * Reset the values of the xstats of the selected component in the device.
 *
 * @param dev_id
 *   The identifier of the device
 * @param mode
 *   The mode of the statistics to reset. Choose from device, queue or port.
 * @param queue_port_id
 *   The queue or port to reset. 0 and positive values select ports and queues,
 *   while -1 indicates all ports or queues.
 * @param ids
 *   Selects specific statistics to be reset. When NULL, all statistics selected
 *   by *mode* will be reset. If non-NULL, must point to array of at least
 *   *nb_ids* size.
 * @param nb_ids
 *   The number of ids available from the *ids* array. Ignored when ids is NULL.
 * @return
 *   - zero: successfully reset the statistics to zero
 *   - negative value: -EINVAL invalid parameters, -ENOTSUP if not supported.
 */</doc>
<use f='linux-4.18.y/drivers/event/sw/sw_evdev_selftest.c' l='965' u='c' c='xstats_tests'/>
<use f='linux-4.18.y/drivers/event/sw/sw_evdev_selftest.c' l='1026' u='c' c='xstats_tests'/>
<use f='linux-4.18.y/drivers/event/sw/sw_evdev_selftest.c' l='1098' u='c' c='xstats_tests'/>
<use f='linux-4.18.y/drivers/event/sw/sw_evdev_selftest.c' l='1519' u='c' c='xstats_id_reset_tests'/>
<use f='linux-4.18.y/drivers/event/sw/sw_evdev_selftest.c' l='1641' u='c' c='xstats_id_reset_tests'/>
<use f='linux-4.18.y/drivers/event/sw/sw_evdev_selftest.c' l='1756' u='c' c='xstats_id_reset_tests'/>
<def f='linux-4.18.y/lib/librte_eventdev/rte_eventdev.c' l='1128' ll='1139' type='int rte_event_dev_xstats_reset(uint8_t dev_id, enum rte_event_dev_xstats_mode mode, int16_t queue_port_id, const uint32_t * ids, uint32_t nb_ids)'/>
