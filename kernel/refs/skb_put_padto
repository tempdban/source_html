<def f='linux-4.14.y/include/linux/skbuff.h' l='2984' ll='2987' type='int skb_put_padto(struct sk_buff * skb, unsigned int len)'/>
<doc f='linux-4.14.y/include/linux/skbuff.h' l='2974'>/**
 *	skb_put_padto - increase size and pad an skbuff up to a minimal size
 *	@skb: buffer to pad
 *	@len: minimal length
 *
 *	Pads up a buffer to ensure the trailing bytes exist and are
 *	blanked. If the buffer already contains sufficient data it
 *	is untouched. Otherwise it is extended. Returns zero on
 *	success. The skb is freed on error.
 */</doc>
<use f='linux-4.14.y/include/linux/etherdevice.h' l='523' u='c' c='eth_skb_pad'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e1000e/netdev.c' l='5809' u='c' c='e1000_xmit_frame'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/igb_main.c' l='5458' u='c' c='igb_xmit_frame'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c' l='8469' u='c' c='__ixgbe_xmit_frame'/>
<def f='linux-4.14.y/include/linux/skbuff.h' l='2984' ll='2987' type='int skb_put_padto(struct sk_buff * skb, unsigned int len)'/>
<doc f='linux-4.14.y/include/linux/skbuff.h' l='2974'>/**
 *	skb_put_padto - increase size and pad an skbuff up to a minimal size
 *	@skb: buffer to pad
 *	@len: minimal length
 *
 *	Pads up a buffer to ensure the trailing bytes exist and are
 *	blanked. If the buffer already contains sufficient data it
 *	is untouched. Otherwise it is extended. Returns zero on
 *	success. The skb is freed on error.
 */</doc>
<use f='linux-4.14.y/include/linux/etherdevice.h' l='523' u='c' c='eth_skb_pad'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e1000e/netdev.c' l='5809' u='c' c='e1000_xmit_frame'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/igb_main.c' l='5458' u='c' c='igb_xmit_frame'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c' l='8469' u='c' c='__ixgbe_xmit_frame'/>
