<dec f='linux-4.18.y/include/drm/drm_rect.h' l='182' type='int drm_rect_calc_vscale(const struct drm_rect * src, const struct drm_rect * dst, int min_vscale, int max_vscale)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='758' u='c' c='drm_atomic_helper_check_plane_state'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='192' ll='207' type='int drm_rect_calc_vscale(const struct drm_rect * src, const struct drm_rect * dst, int min_vscale, int max_vscale)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='208' type='int drm_rect_calc_vscale(const struct drm_rect * , const struct drm_rect * , int , int )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='208' c='drm_rect_calc_vscale'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='208' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='208' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='175'>/**
 * drm_rect_calc_vscale - calculate the vertical scaling factor
 * @src: source window rectangle
 * @dst: destination window rectangle
 * @min_vscale: minimum allowed vertical scaling factor
 * @max_vscale: maximum allowed vertical scaling factor
 *
 * Calculate the vertical scaling factor as
 * (@src height) / (@dst height).
 *
 * If the scale is below 1 &lt;&lt; 16, round down. If the scale is above
 * 1 &lt;&lt; 16, round up. This will calculate the scale with the most
 * pessimistic limit calculation.
 *
 * RETURNS:
 * The vertical scaling factor, or errno of out of limits.
 */</doc>
