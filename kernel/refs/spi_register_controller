<dec f='linux-4.14.y/include/linux/spi/spi.h' l='641' type='int spi_register_controller(struct spi_controller * ctlr)'/>
<def f='linux-4.14.y/drivers/spi/spi.c' l='2089' ll='2192' type='int spi_register_controller(struct spi_controller * ctlr)'/>
<dec f='linux-4.14.y/drivers/spi/spi.c' l='2193' type='int spi_register_controller(struct spi_controller * )'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='2193' c='spi_register_controller'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='2193' u='a'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='2193' u='a'/>
<use f='linux-4.14.y/drivers/spi/spi.c' l='2223' u='c' c='devm_spi_register_controller'/>
<doc f='linux-4.14.y/drivers/spi/spi.c' l='2066'>/**
 * spi_register_controller - register SPI master or slave controller
 * @ctlr: initialized master, originally from spi_alloc_master() or
 *	spi_alloc_slave()
 * Context: can sleep
 *
 * SPI controllers connect to their drivers using some non-SPI bus,
 * such as the platform bus.  The final stage of probe() in that code
 * includes calling spi_register_controller() to hook up to this SPI bus glue.
 *
 * SPI controllers use board specific (often SOC specific) bus numbers,
 * and board-specific addressing for SPI devices combines those numbers
 * with chip select numbers.  Since SPI does not directly support dynamic
 * device identification, boards need configuration tables telling which
 * chip is at which address.
 *
 * This must be called from context that can sleep.  It returns zero on
 * success, else a negative error code (dropping the controller&apos;s refcount).
 * After a successful return, the caller is responsible for calling
 * spi_unregister_controller().
 *
 * Return: zero on success, else a negative error code.
 */</doc>
