<dec f='linux-4.14.y/include/net/ip.h' l='611' type='void ipv4_pktinfo_prepare(const struct sock * sk, struct sk_buff * skb)'/>
<doc f='linux-4.14.y/include/net/ip.h' l='607'>/*
 *	Functions provided by ip_sockglue.c
 */</doc>
<def f='linux-4.14.y/net/ipv4/ip_sockglue.c' l='1211' ll='1241' type='void ipv4_pktinfo_prepare(const struct sock * sk, struct sk_buff * skb)'/>
<doc f='linux-4.14.y/net/ipv4/ip_sockglue.c' l='1202'>/**
 * ipv4_pktinfo_prepare - transfer some info from rtable to skb
 * @sk: socket
 * @skb: buffer
 *
 * To support IP_CMSG_PKTINFO option, we store rt_iif and specific
 * destination in skb-&gt;cb[] before dst drop.
 * This way, receiver doesn&apos;t make cache line misses to read rtable.
 */</doc>
<use f='linux-4.14.y/net/ipv4/raw.c' l='324' u='c' c='raw_rcv_skb'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='1923' u='c' c='udp_queue_rcv_skb'/>
<dec f='linux-4.14.y/include/net/ip.h' l='611' type='void ipv4_pktinfo_prepare(const struct sock * sk, struct sk_buff * skb)'/>
<doc f='linux-4.14.y/include/net/ip.h' l='607'>/*
 *	Functions provided by ip_sockglue.c
 */</doc>
<def f='linux-4.14.y/net/ipv4/ip_sockglue.c' l='1211' ll='1241' type='void ipv4_pktinfo_prepare(const struct sock * sk, struct sk_buff * skb)'/>
<doc f='linux-4.14.y/net/ipv4/ip_sockglue.c' l='1202'>/**
 * ipv4_pktinfo_prepare - transfer some info from rtable to skb
 * @sk: socket
 * @skb: buffer
 *
 * To support IP_CMSG_PKTINFO option, we store rt_iif and specific
 * destination in skb-&gt;cb[] before dst drop.
 * This way, receiver doesn&apos;t make cache line misses to read rtable.
 */</doc>
<use f='linux-4.14.y/net/ipv4/raw.c' l='324' u='c' c='raw_rcv_skb'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='1923' u='c' c='udp_queue_rcv_skb'/>
