<dec f='linux-4.18.y/include/net/tcp.h' l='337' type='void tcp_rcv_established(struct sock * sk, struct sk_buff * skb)'/>
<def f='linux-4.18.y/net/ipv4/tcp_input.c' l='5450' ll='5620' type='void tcp_rcv_established(struct sock * sk, struct sk_buff * skb)'/>
<dec f='linux-4.18.y/net/ipv4/tcp_input.c' l='5621' type='void tcp_rcv_established(struct sock * , struct sk_buff * )'/>
<use f='linux-4.18.y/net/ipv4/tcp_input.c' l='5621' c='tcp_rcv_established'/>
<use f='linux-4.18.y/net/ipv4/tcp_input.c' l='5621' u='a'/>
<use f='linux-4.18.y/net/ipv4/tcp_input.c' l='5621' u='a'/>
<doc f='linux-4.18.y/net/ipv4/tcp_input.c' l='5427'>/*
 *	TCP receive function for the ESTABLISHED state.
 *
 *	It is split into a fast path and a slow path. The fast path is
 * 	disabled when:
 *	- A zero window was announced from us - zero window probing
 *        is only handled properly in the slow path.
 *	- Out of order segments arrived.
 *	- Urgent data is expected.
 *	- There is no buffer space left
 *	- Unexpected TCP flags/window values/header lengths are received
 *	  (detected by checking the TCP header against pred_flags)
 *	- Data is sent in both directions. Fast path only supports pure senders
 *	  or pure receivers (this means either the sequence number or the ack
 *	  value must stay constant)
 *	- Unexpected TCP option.
 *
 *	When these conditions are not satisfied it drops into a standard
 *	receive procedure patterned after RFC793 to handle all cases.
 *	The first three cases are guaranteed by proper pred_flags setting,
 *	the rest is checked inline. Fast processing is turned on in
 *	tcp_data_queue when everything is OK.
 */</doc>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1531' u='c' c='tcp_v4_do_rcv'/>
