<dec f='linux-4.14.y/include/linux/llist.h' l='209' type='bool llist_add_batch(struct llist_node * new_first, struct llist_node * new_last, struct llist_head * head)'/>
<use f='linux-4.14.y/include/linux/llist.h' l='221' u='c' c='llist_add'/>
<def f='linux-4.14.y/lib/llist.c' l='38' ll='48' type='bool llist_add_batch(struct llist_node * new_first, struct llist_node * new_last, struct llist_head * head)'/>
<dec f='linux-4.14.y/lib/llist.c' l='49' type='bool llist_add_batch(struct llist_node * , struct llist_node * , struct llist_head * )'/>
<use f='linux-4.14.y/lib/llist.c' l='49' c='llist_add_batch'/>
<use f='linux-4.14.y/lib/llist.c' l='49' u='a'/>
<use f='linux-4.14.y/lib/llist.c' l='49' u='a'/>
<doc f='linux-4.14.y/lib/llist.c' l='30'>/**
 * llist_add_batch - add several linked entries in batch
 * @new_first:	first entry in batch to be added
 * @new_last:	last entry in batch to be added
 * @head:	the head for your lock-less list
 *
 * Return whether list is empty before adding.
 */</doc>
<dec f='linux-4.14.y/include/linux/llist.h' l='209' type='bool llist_add_batch(struct llist_node * new_first, struct llist_node * new_last, struct llist_head * head)'/>
<use f='linux-4.14.y/include/linux/llist.h' l='221' u='c' c='llist_add'/>
<def f='linux-4.14.y/lib/llist.c' l='38' ll='48' type='bool llist_add_batch(struct llist_node * new_first, struct llist_node * new_last, struct llist_head * head)'/>
<dec f='linux-4.14.y/lib/llist.c' l='49' type='bool llist_add_batch(struct llist_node * , struct llist_node * , struct llist_head * )'/>
<use f='linux-4.14.y/lib/llist.c' l='49' c='llist_add_batch'/>
<use f='linux-4.14.y/lib/llist.c' l='49' u='a'/>
<use f='linux-4.14.y/lib/llist.c' l='49' u='a'/>
<doc f='linux-4.14.y/lib/llist.c' l='30'>/**
 * llist_add_batch - add several linked entries in batch
 * @new_first:	first entry in batch to be added
 * @new_last:	last entry in batch to be added
 * @head:	the head for your lock-less list
 *
 * Return whether list is empty before adding.
 */</doc>
