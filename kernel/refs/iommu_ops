<def f='linux-4.14.y/include/linux/iommu.h' l='191' ll='239'/>
<size>216</size>
<doc f='linux-4.14.y/include/linux/iommu.h' l='160'>/**
 * struct iommu_ops - iommu ops and capabilities
 * @capable: check capability
 * @domain_alloc: allocate iommu domain
 * @domain_free: free iommu domain
 * @attach_dev: attach device to an iommu domain
 * @detach_dev: detach device from an iommu domain
 * @map: map a physically contiguous memory region to an iommu domain
 * @unmap: unmap a physically contiguous memory region from an iommu domain
 * @map_sg: map a scatter-gather list of physically contiguous memory chunks
 *          to an iommu domain
 * @flush_tlb_all: Synchronously flush all hardware TLBs for this domain
 * @tlb_range_add: Add a given iova range to the flush queue for this domain
 * @tlb_sync: Flush all queued ranges from the hardware TLBs and empty flush
 *            queue
 * @iova_to_phys: translate iova to physical address
 * @add_device: add device to iommu grouping
 * @remove_device: remove device from iommu grouping
 * @device_group: find iommu group for a particular device
 * @domain_get_attr: Query domain attributes
 * @domain_set_attr: Change domain attributes
 * @get_resv_regions: Request list of reserved regions for a device
 * @put_resv_regions: Free list of reserved regions for a device
 * @apply_resv_region: Temporary helper call-back for iova reserved ranges
 * @domain_window_enable: Configure and enable a particular window for a domain
 * @domain_window_disable: Disable a particular window for a domain
 * @domain_set_windows: Set the number of windows for a domain
 * @domain_get_windows: Return the number of windows for a domain
 * @of_xlate: add OF master IDs to iommu grouping
 * @pgsize_bitmap: bitmap of all possible supported page sizes
 */</doc>
<mbr r='iommu_ops::capable' o='0' t='bool (*)(enum iommu_cap)'/>
<mbr r='iommu_ops::domain_alloc' o='64' t='struct iommu_domain *(*)(unsigned int)'/>
<mbr r='iommu_ops::domain_free' o='128' t='void (*)(struct iommu_domain *)'/>
<mbr r='iommu_ops::attach_dev' o='192' t='int (*)(struct iommu_domain *, struct device *)'/>
<mbr r='iommu_ops::detach_dev' o='256' t='void (*)(struct iommu_domain *, struct device *)'/>
<mbr r='iommu_ops::map' o='320' t='int (*)(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int)'/>
<mbr r='iommu_ops::unmap' o='384' t='size_t (*)(struct iommu_domain *, unsigned long, size_t)'/>
<mbr r='iommu_ops::map_sg' o='448' t='size_t (*)(struct iommu_domain *, unsigned long, struct scatterlist *, unsigned int, int)'/>
<mbr r='iommu_ops::flush_iotlb_all' o='512' t='void (*)(struct iommu_domain *)'/>
<mbr r='iommu_ops::iotlb_range_add' o='576' t='void (*)(struct iommu_domain *, unsigned long, size_t)'/>
<mbr r='iommu_ops::iotlb_sync' o='640' t='void (*)(struct iommu_domain *)'/>
<mbr r='iommu_ops::iova_to_phys' o='704' t='phys_addr_t (*)(struct iommu_domain *, dma_addr_t)'/>
<mbr r='iommu_ops::add_device' o='768' t='int (*)(struct device *)'/>
<mbr r='iommu_ops::remove_device' o='832' t='void (*)(struct device *)'/>
<mbr r='iommu_ops::device_group' o='896' t='struct iommu_group *(*)(struct device *)'/>
<mbr r='iommu_ops::domain_get_attr' o='960' t='int (*)(struct iommu_domain *, enum iommu_attr, void *)'/>
<mbr r='iommu_ops::domain_set_attr' o='1024' t='int (*)(struct iommu_domain *, enum iommu_attr, void *)'/>
<mbr r='iommu_ops::get_resv_regions' o='1088' t='void (*)(struct device *, struct list_head *)'/>
<mbr r='iommu_ops::put_resv_regions' o='1152' t='void (*)(struct device *, struct list_head *)'/>
<mbr r='iommu_ops::apply_resv_region' o='1216' t='void (*)(struct device *, struct iommu_domain *, struct iommu_resv_region *)'/>
<mbr r='iommu_ops::domain_window_enable' o='1280' t='int (*)(struct iommu_domain *, u32, phys_addr_t, u64, int)'/>
<mbr r='iommu_ops::domain_window_disable' o='1344' t='void (*)(struct iommu_domain *, u32)'/>
<mbr r='iommu_ops::domain_set_windows' o='1408' t='int (*)(struct iommu_domain *, u32)'/>
<mbr r='iommu_ops::domain_get_windows' o='1472' t='u32 (*)(struct iommu_domain *)'/>
<mbr r='iommu_ops::of_xlate' o='1536' t='int (*)(struct device *, struct of_phandle_args *)'/>
<mbr r='iommu_ops::is_attach_deferred' o='1600' t='bool (*)(struct iommu_domain *, struct device *)'/>
<mbr r='iommu_ops::pgsize_bitmap' o='1664' t='unsigned long'/>
