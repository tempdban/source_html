<def f='linux-4.18.y/include/linux/livepatch.h' l='66' ll='86'/>
<size>136</size>
<doc f='linux-4.18.y/include/linux/livepatch.h' l='37'>/**
 * struct klp_func - function structure for live patching
 * @old_name:	name of the function to be patched
 * @new_func:	pointer to the patched function code
 * @old_sympos: a hint indicating which symbol position the old function
 *		can be found (optional)
 * @old_addr:	the address of the function being patched
 * @kobj:	kobject for sysfs resources
 * @stack_node:	list node for klp_ops func_stack list
 * @old_size:	size of the old function
 * @new_size:	size of the new function
 * @patched:	the func has been added to the klp_ops list
 * @transition:	the func is currently being applied or reverted
 *
 * The patched and transition variables define the func&apos;s patching state.  When
 * patching, a func is always in one of the following states:
 *
 *   patched=0 transition=0: unpatched
 *   patched=0 transition=1: unpatched, temporary starting state
 *   patched=1 transition=1: patched, may be visible to some tasks
 *   patched=1 transition=0: patched, visible to all tasks
 *
 * And when unpatching, it goes in the reverse order:
 *
 *   patched=1 transition=0: patched, visible to all tasks
 *   patched=1 transition=1: patched, may be visible to some tasks
 *   patched=0 transition=1: unpatched, temporary ending state
 *   patched=0 transition=0: unpatched
 */</doc>
<mbr r='klp_func::old_name' o='0' t='const char *'/>
<mbr r='klp_func::new_func' o='64' t='void *'/>
<mbr r='klp_func::old_sympos' o='128' t='unsigned long'/>
<mbr r='klp_func::old_addr' o='192' t='unsigned long'/>
<mbr r='klp_func::kobj' o='256' t='struct kobject'/>
<mbr r='klp_func::stack_node' o='768' t='struct list_head'/>
<mbr r='klp_func::old_size' o='896' t='unsigned long'/>
<mbr r='klp_func::new_size' o='960' t='unsigned long'/>
<mbr r='klp_func::patched' o='1024' t='bool'/>
<mbr r='klp_func::transition' o='1032' t='bool'/>
