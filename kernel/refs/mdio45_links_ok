<dec f='linux-4.14.y/include/linux/mdio.h' l='131' type='int mdio45_links_ok(const struct mdio_if_info * mdio, u32 mmds)'/>
<def f='linux-4.14.y/drivers/net/mdio.c' l='97' ll='131' type='int mdio45_links_ok(const struct mdio_if_info * mdio, u32 mmd_mask)'/>
<dec f='linux-4.14.y/drivers/net/mdio.c' l='132' type='int mdio45_links_ok(const struct mdio_if_info * , u32 )'/>
<use f='linux-4.14.y/drivers/net/mdio.c' l='132' c='mdio45_links_ok'/>
<use f='linux-4.14.y/drivers/net/mdio.c' l='132' u='a'/>
<use f='linux-4.14.y/drivers/net/mdio.c' l='132' u='a'/>
<doc f='linux-4.14.y/drivers/net/mdio.c' l='88'>/**
 * mdio_link_ok - is link status up/OK
 * @mdio: MDIO interface
 * @mmd_mask: Mask for MMDs to check
 *
 * Returns 1 if the PHY reports link status up/OK, 0 otherwise.
 * @mmd_mask is normally @mdio-&gt;mmds, but if loopback is enabled
 * the MMDs being bypassed should be excluded from the mask.
 */</doc>
<dec f='linux-4.14.y/include/linux/mdio.h' l='131' type='int mdio45_links_ok(const struct mdio_if_info * mdio, u32 mmds)'/>
<def f='linux-4.14.y/drivers/net/mdio.c' l='97' ll='131' type='int mdio45_links_ok(const struct mdio_if_info * mdio, u32 mmd_mask)'/>
<dec f='linux-4.14.y/drivers/net/mdio.c' l='132' type='int mdio45_links_ok(const struct mdio_if_info * , u32 )'/>
<use f='linux-4.14.y/drivers/net/mdio.c' l='132' c='mdio45_links_ok'/>
<use f='linux-4.14.y/drivers/net/mdio.c' l='132' u='a'/>
<use f='linux-4.14.y/drivers/net/mdio.c' l='132' u='a'/>
<doc f='linux-4.14.y/drivers/net/mdio.c' l='88'>/**
 * mdio_link_ok - is link status up/OK
 * @mdio: MDIO interface
 * @mmd_mask: Mask for MMDs to check
 *
 * Returns 1 if the PHY reports link status up/OK, 0 otherwise.
 * @mmd_mask is normally @mdio-&gt;mmds, but if loopback is enabled
 * the MMDs being bypassed should be excluded from the mask.
 */</doc>
