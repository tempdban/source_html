<dec f='linux-4.14.y/include/linux/property.h' l='47' type='int device_property_read_string_array(struct device * dev, const char * propname, const char ** val, size_t nval)'/>
<def f='linux-4.14.y/drivers/base/property.c' l='392' ll='396' type='int device_property_read_string_array(struct device * dev, const char * propname, const char ** val, size_t nval)'/>
<dec f='linux-4.14.y/drivers/base/property.c' l='397' type='int device_property_read_string_array(struct device * , const char * , const char ** , size_t )'/>
<use f='linux-4.14.y/drivers/base/property.c' l='397' c='device_property_read_string_array'/>
<use f='linux-4.14.y/drivers/base/property.c' l='397' u='a'/>
<use f='linux-4.14.y/drivers/base/property.c' l='397' u='a'/>
<doc f='linux-4.14.y/drivers/base/property.c' l='374'>/**
 * device_property_read_string_array - return a string array property of device
 * @dev: Device to get the property of
 * @propname: Name of the property
 * @val: The values are stored here or %NULL to return the number of values
 * @nval: Size of the @val array
 *
 * Function reads an array of string properties with @propname from the device
 * firmware description and stores them to @val if found.
 *
 * Return: number of values read on success if @val is non-NULL,
 *	   number of values available on success if @val is NULL,
 *	   %-EINVAL if given arguments are not valid,
 *	   %-ENODATA if the property does not have a value,
 *	   %-EPROTO or %-EILSEQ if the property is not an array of strings,
 *	   %-EOVERFLOW if the size of the property is not as expected.
 *	   %-ENXIO if no suitable firmware interface is present.
 */</doc>
<use f='linux-4.14.y/drivers/power/supply/power_supply_core.c' l='281' u='c' c='power_supply_check_supplies'/>
<use f='linux-4.14.y/drivers/power/supply/power_supply_core.c' l='291' u='c' c='power_supply_check_supplies'/>
<dec f='linux-4.14.y/include/linux/property.h' l='47' type='int device_property_read_string_array(struct device * dev, const char * propname, const char ** val, size_t nval)'/>
<def f='linux-4.14.y/drivers/base/property.c' l='392' ll='396' type='int device_property_read_string_array(struct device * dev, const char * propname, const char ** val, size_t nval)'/>
<dec f='linux-4.14.y/drivers/base/property.c' l='397' type='int device_property_read_string_array(struct device * , const char * , const char ** , size_t )'/>
<use f='linux-4.14.y/drivers/base/property.c' l='397' c='device_property_read_string_array'/>
<use f='linux-4.14.y/drivers/base/property.c' l='397' u='a'/>
<use f='linux-4.14.y/drivers/base/property.c' l='397' u='a'/>
<doc f='linux-4.14.y/drivers/base/property.c' l='374'>/**
 * device_property_read_string_array - return a string array property of device
 * @dev: Device to get the property of
 * @propname: Name of the property
 * @val: The values are stored here or %NULL to return the number of values
 * @nval: Size of the @val array
 *
 * Function reads an array of string properties with @propname from the device
 * firmware description and stores them to @val if found.
 *
 * Return: number of values read on success if @val is non-NULL,
 *	   number of values available on success if @val is NULL,
 *	   %-EINVAL if given arguments are not valid,
 *	   %-ENODATA if the property does not have a value,
 *	   %-EPROTO or %-EILSEQ if the property is not an array of strings,
 *	   %-EOVERFLOW if the size of the property is not as expected.
 *	   %-ENXIO if no suitable firmware interface is present.
 */</doc>
<use f='linux-4.14.y/drivers/power/supply/power_supply_core.c' l='281' u='c' c='power_supply_check_supplies'/>
<use f='linux-4.14.y/drivers/power/supply/power_supply_core.c' l='291' u='c' c='power_supply_check_supplies'/>
