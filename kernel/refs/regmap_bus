<def f='linux-4.14.y/include/linux/regmap.h' l='417' ll='433'/>
<size>112</size>
<doc f='linux-4.14.y/include/linux/regmap.h' l='382'>/**
 * struct regmap_bus - Description of a hardware bus for the register map
 *                     infrastructure.
 *
 * @fast_io: Register IO is fast. Use a spinlock instead of a mutex
 *	     to perform locking. This field is ignored if custom lock/unlock
 *	     functions are used (see fields lock/unlock of
 *	     struct regmap_config).
 * @write: Write operation.
 * @gather_write: Write operation with split register/value, return -ENOTSUPP
 *                if not implemented  on a given device.
 * @async_write: Write operation which completes asynchronously, optional and
 *               must serialise with respect to non-async I/O.
 * @reg_write: Write a single register value to the given register address. This
 *             write operation has to complete when returning from the function.
 * @reg_update_bits: Update bits operation to be used against volatile
 *                   registers, intended for devices supporting some mechanism
 *                   for setting clearing bits without having to
 *                   read/modify/write.
 * @read: Read operation.  Data is returned in the buffer used to transmit
 *         data.
 * @reg_read: Read a single register value from a given register address.
 * @free_context: Free context.
 * @async_alloc: Allocate a regmap_async() structure.
 * @read_flag_mask: Mask to be set in the top byte of the register when doing
 *                  a read.
 * @reg_format_endian_default: Default endianness for formatted register
 *     addresses. Used when the regmap_config specifies DEFAULT. If this is
 *     DEFAULT, BIG is assumed.
 * @val_format_endian_default: Default endianness for formatted register
 *     values. Used when the regmap_config specifies DEFAULT. If this is
 *     DEFAULT, BIG is assumed.
 * @max_raw_read: Max raw read size that can be used on the bus.
 * @max_raw_write: Max raw write size that can be used on the bus.
 */</doc>
<mbr r='regmap_bus::fast_io' o='0' t='bool'/>
<mbr r='regmap_bus::write' o='64' t='regmap_hw_write'/>
<mbr r='regmap_bus::gather_write' o='128' t='regmap_hw_gather_write'/>
<mbr r='regmap_bus::async_write' o='192' t='regmap_hw_async_write'/>
<mbr r='regmap_bus::reg_write' o='256' t='regmap_hw_reg_write'/>
<mbr r='regmap_bus::reg_update_bits' o='320' t='regmap_hw_reg_update_bits'/>
<mbr r='regmap_bus::read' o='384' t='regmap_hw_read'/>
<mbr r='regmap_bus::reg_read' o='448' t='regmap_hw_reg_read'/>
<mbr r='regmap_bus::free_context' o='512' t='regmap_hw_free_context'/>
<mbr r='regmap_bus::async_alloc' o='576' t='regmap_hw_async_alloc'/>
<mbr r='regmap_bus::read_flag_mask' o='640' t='u8'/>
<mbr r='regmap_bus::reg_format_endian_default' o='672' t='enum regmap_endian'/>
<mbr r='regmap_bus::val_format_endian_default' o='704' t='enum regmap_endian'/>
<mbr r='regmap_bus::max_raw_read' o='768' t='size_t'/>
<mbr r='regmap_bus::max_raw_write' o='832' t='size_t'/>
<def f='linux-4.14.y/include/linux/regmap.h' l='417' ll='433'/>
<size>112</size>
<doc f='linux-4.14.y/include/linux/regmap.h' l='382'>/**
 * struct regmap_bus - Description of a hardware bus for the register map
 *                     infrastructure.
 *
 * @fast_io: Register IO is fast. Use a spinlock instead of a mutex
 *	     to perform locking. This field is ignored if custom lock/unlock
 *	     functions are used (see fields lock/unlock of
 *	     struct regmap_config).
 * @write: Write operation.
 * @gather_write: Write operation with split register/value, return -ENOTSUPP
 *                if not implemented  on a given device.
 * @async_write: Write operation which completes asynchronously, optional and
 *               must serialise with respect to non-async I/O.
 * @reg_write: Write a single register value to the given register address. This
 *             write operation has to complete when returning from the function.
 * @reg_update_bits: Update bits operation to be used against volatile
 *                   registers, intended for devices supporting some mechanism
 *                   for setting clearing bits without having to
 *                   read/modify/write.
 * @read: Read operation.  Data is returned in the buffer used to transmit
 *         data.
 * @reg_read: Read a single register value from a given register address.
 * @free_context: Free context.
 * @async_alloc: Allocate a regmap_async() structure.
 * @read_flag_mask: Mask to be set in the top byte of the register when doing
 *                  a read.
 * @reg_format_endian_default: Default endianness for formatted register
 *     addresses. Used when the regmap_config specifies DEFAULT. If this is
 *     DEFAULT, BIG is assumed.
 * @val_format_endian_default: Default endianness for formatted register
 *     values. Used when the regmap_config specifies DEFAULT. If this is
 *     DEFAULT, BIG is assumed.
 * @max_raw_read: Max raw read size that can be used on the bus.
 * @max_raw_write: Max raw write size that can be used on the bus.
 */</doc>
<mbr r='regmap_bus::fast_io' o='0' t='bool'/>
<mbr r='regmap_bus::write' o='64' t='regmap_hw_write'/>
<mbr r='regmap_bus::gather_write' o='128' t='regmap_hw_gather_write'/>
<mbr r='regmap_bus::async_write' o='192' t='regmap_hw_async_write'/>
<mbr r='regmap_bus::reg_write' o='256' t='regmap_hw_reg_write'/>
<mbr r='regmap_bus::reg_update_bits' o='320' t='regmap_hw_reg_update_bits'/>
<mbr r='regmap_bus::read' o='384' t='regmap_hw_read'/>
<mbr r='regmap_bus::reg_read' o='448' t='regmap_hw_reg_read'/>
<mbr r='regmap_bus::free_context' o='512' t='regmap_hw_free_context'/>
<mbr r='regmap_bus::async_alloc' o='576' t='regmap_hw_async_alloc'/>
<mbr r='regmap_bus::read_flag_mask' o='640' t='u8'/>
<mbr r='regmap_bus::reg_format_endian_default' o='672' t='enum regmap_endian'/>
<mbr r='regmap_bus::val_format_endian_default' o='704' t='enum regmap_endian'/>
<mbr r='regmap_bus::max_raw_read' o='768' t='size_t'/>
<mbr r='regmap_bus::max_raw_write' o='832' t='size_t'/>
