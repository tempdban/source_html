<dec f='linux-4.14.y/include/drm/drm_connector.h' l='1013' type='void drm_mode_connector_set_link_status_property(struct drm_connector * connector, uint64_t link_status)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1204' ll='1212' type='void drm_mode_connector_set_link_status_property(struct drm_connector * connector, uint64_t link_status)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1213' type='void drm_mode_connector_set_link_status_property(struct drm_connector * , uint64_t )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1213' c='drm_mode_connector_set_link_status_property'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1213' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1213' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1185'>/**
 * drm_mode_connector_set_link_status_property - Set link status property of a connector
 * @connector: drm connector
 * @link_status: new value of link status property (0: Good, 1: Bad)
 *
 * In usual working scenario, this link status property will always be set to
 * &quot;GOOD&quot;. If something fails during or after a mode set, the kernel driver
 * may set this link status property to &quot;BAD&quot;. The caller then needs to send a
 * hotplug uevent for userspace to re-check the valid modes through
 * GET_CONNECTOR_IOCTL and retry modeset.
 *
 * Note: Drivers cannot rely on userspace to support this property and
 * issue a modeset. As such, they may choose to handle issues (like
 * re-training a link) without userspace&apos;s intervention.
 *
 * The reason for adding this property is to handle link training failures, but
 * it is not limited to DP or link training. For example, if we implement
 * asynchronous setcrtc, this property can be used to report any failures in that.
 */</doc>
<dec f='linux-4.14.y/include/drm/drm_connector.h' l='1013' type='void drm_mode_connector_set_link_status_property(struct drm_connector * connector, uint64_t link_status)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1204' ll='1212' type='void drm_mode_connector_set_link_status_property(struct drm_connector * connector, uint64_t link_status)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1213' type='void drm_mode_connector_set_link_status_property(struct drm_connector * , uint64_t )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1213' c='drm_mode_connector_set_link_status_property'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1213' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1213' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_connector.c' l='1185'>/**
 * drm_mode_connector_set_link_status_property - Set link status property of a connector
 * @connector: drm connector
 * @link_status: new value of link status property (0: Good, 1: Bad)
 *
 * In usual working scenario, this link status property will always be set to
 * &quot;GOOD&quot;. If something fails during or after a mode set, the kernel driver
 * may set this link status property to &quot;BAD&quot;. The caller then needs to send a
 * hotplug uevent for userspace to re-check the valid modes through
 * GET_CONNECTOR_IOCTL and retry modeset.
 *
 * Note: Drivers cannot rely on userspace to support this property and
 * issue a modeset. As such, they may choose to handle issues (like
 * re-training a link) without userspace&apos;s intervention.
 *
 * The reason for adding this property is to handle link training failures, but
 * it is not limited to DP or link training. For example, if we implement
 * asynchronous setcrtc, this property can be used to report any failures in that.
 */</doc>
