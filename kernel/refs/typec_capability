<def f='linux-4.18.y/include/linux/usb/typec.h' l='213' ll='240'/>
<size>104</size>
<doc f='linux-4.18.y/include/linux/usb/typec.h' l='193'>/*
 * struct typec_capability - USB Type-C Port Capabilities
 * @type: Supported power role of the port
 * @data: Supported data role of the port
 * @revision: USB Type-C Specification release. Binary coded decimal
 * @pd_revision: USB Power Delivery Specification revision if supported
 * @prefer_role: Initial role preference (DRP ports).
 * @accessory: Supported Accessory Modes
 * @sw: Cable plug orientation switch
 * @mux: Multiplexer switch for Alternate/Accessory Modes
 * @fwnode: Optional fwnode of the port
 * @try_role: Set data role preference for DRP port
 * @dr_set: Set Data Role
 * @pr_set: Set Power Role
 * @vconn_set: Set VCONN Role
 * @activate_mode: Enter/exit given Alternate Mode
 * @port_type_set: Set port type
 *
 * Static capabilities of a single USB Type-C port.
 */</doc>
<mbr r='typec_capability::type' o='0' t='enum typec_port_type'/>
<mbr r='typec_capability::data' o='32' t='enum typec_port_data'/>
<mbr r='typec_capability::revision' o='64' t='u16'/>
<mbr r='typec_capability::pd_revision' o='80' t='u16'/>
<mbr r='typec_capability::prefer_role' o='96' t='int'/>
<mbr r='typec_capability::accessory' o='128' t='enum typec_accessory [3]'/>
<mbr r='typec_capability::sw' o='256' t='struct typec_switch *'/>
<mbr r='typec_capability::mux' o='320' t='struct typec_mux *'/>
<mbr r='typec_capability::fwnode' o='384' t='struct fwnode_handle *'/>
<mbr r='typec_capability::try_role' o='448' t='int (*)(const struct typec_capability *, int)'/>
<mbr r='typec_capability::dr_set' o='512' t='int (*)(const struct typec_capability *, enum typec_data_role)'/>
<mbr r='typec_capability::pr_set' o='576' t='int (*)(const struct typec_capability *, enum typec_role)'/>
<mbr r='typec_capability::vconn_set' o='640' t='int (*)(const struct typec_capability *, enum typec_role)'/>
<mbr r='typec_capability::activate_mode' o='704' t='int (*)(const struct typec_capability *, int, int)'/>
<mbr r='typec_capability::port_type_set' o='768' t='int (*)(const struct typec_capability *, enum typec_port_type)'/>
