<def f='linux-4.18.y/include/linux/usb.h' l='1230' ll='1240'/>
<size>184</size>
<doc f='linux-4.18.y/include/linux/usb.h' l='1211'>/**
 * struct usb_device_driver - identifies USB device driver to usbcore
 * @name: The driver name should be unique among USB drivers,
 *	and should normally be the same as the module name.
 * @probe: Called to see if the driver is willing to manage a particular
 *	device.  If it is, probe returns zero and uses dev_set_drvdata()
 *	to associate driver-specific data with the device.  If unwilling
 *	to manage the device, return a negative errno value.
 * @disconnect: Called when the device is no longer accessible, usually
 *	because it has been (or is being) disconnected or the driver&apos;s
 *	module is being unloaded.
 * @suspend: Called when the device is going to be suspended by the system.
 * @resume: Called when the device is being resumed by the system.
 * @drvwrap: Driver-model core structure wrapper.
 * @supports_autosuspend: if set to 0, the USB core will not allow autosuspend
 *	for devices bound to this driver.
 *
 * USB drivers must provide all the fields listed above except drvwrap.
 */</doc>
<mbr r='usb_device_driver::name' o='0' t='const char *'/>
<mbr r='usb_device_driver::probe' o='64' t='int (*)(struct usb_device *)'/>
<mbr r='usb_device_driver::disconnect' o='128' t='void (*)(struct usb_device *)'/>
<mbr r='usb_device_driver::suspend' o='192' t='int (*)(struct usb_device *, pm_message_t)'/>
<mbr r='usb_device_driver::resume' o='256' t='int (*)(struct usb_device *, pm_message_t)'/>
<mbr r='usb_device_driver::drvwrap' o='320' t='struct usbdrv_wrap'/>
<mbr r='usb_device_driver::supports_autosuspend' o='1408' t='unsigned int'/>
