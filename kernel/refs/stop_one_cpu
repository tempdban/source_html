<dec f='linux-4.14.y/include/linux/stop_machine.h' l='31' type='int stop_one_cpu(unsigned int cpu, cpu_stop_fn_t fn, void * arg)'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='1140' u='c' c='__set_cpus_allowed_ptr'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='2940' u='c' c='sched_exec'/>
<def f='linux-4.14.y/kernel/stop_machine.c' l='121' ll='136' type='int stop_one_cpu(unsigned int cpu, cpu_stop_fn_t fn, void * arg)'/>
<doc f='linux-4.14.y/kernel/stop_machine.c' l='97'>/**
 * stop_one_cpu - stop a cpu
 * @cpu: cpu to stop
 * @fn: function to execute
 * @arg: argument to @fn
 *
 * Execute @fn(@arg) on @cpu.  @fn is run in a process context with
 * the highest priority preempting any task on the cpu and
 * monopolizing it.  This function returns after the execution is
 * complete.
 *
 * This function doesn&apos;t guarantee @cpu stays online till @fn
 * completes.  If @cpu goes down in the middle, execution may happen
 * partially or fully on different cpus.  @fn should either be ready
 * for that or the caller should ensure that @cpu stays online until
 * this function completes.
 *
 * CONTEXT:
 * Might sleep.
 *
 * RETURNS:
 * -ENOENT if @fn(@arg) was not executed because @cpu was offline;
 * otherwise, the return value of @fn.
 */</doc>
