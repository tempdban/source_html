<dec f='linux-4.18.y/include/linux/usb/hcd.h' l='453' type='struct usb_hcd * usb_create_shared_hcd(const struct hc_driver * driver, struct device * dev, const char * bus_name, struct usb_hcd * shared_hcd)'/>
<def f='linux-4.18.y/drivers/usb/core/hcd.c' l='2595' ll='2600' type='struct usb_hcd * usb_create_shared_hcd(const struct hc_driver * driver, struct device * dev, const char * bus_name, struct usb_hcd * primary_hcd)'/>
<dec f='linux-4.18.y/drivers/usb/core/hcd.c' l='2601' type='struct usb_hcd * usb_create_shared_hcd(const struct hc_driver * , struct device * , const char * , struct usb_hcd * )'/>
<use f='linux-4.18.y/drivers/usb/core/hcd.c' l='2601' c='usb_create_shared_hcd'/>
<use f='linux-4.18.y/drivers/usb/core/hcd.c' l='2601' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/hcd.c' l='2601' u='a'/>
<doc f='linux-4.18.y/drivers/usb/core/hcd.c' l='2579'>/**
 * usb_create_shared_hcd - create and initialize an HCD structure
 * @driver: HC driver that will use this hcd
 * @dev: device for this HC, stored in hcd-&gt;self.controller
 * @bus_name: value to store in hcd-&gt;self.bus_name
 * @primary_hcd: a pointer to the usb_hcd structure that is sharing the
 *              PCI device.  Only allocate certain resources for the primary HCD
 * Context: !in_interrupt()
 *
 * Allocate a struct usb_hcd, with extra space at the end for the
 * HC driver&apos;s private data.  Initialize the generic members of the
 * hcd structure.
 *
 * Return: On success, a pointer to the created and initialized HCD structure.
 * On failure (e.g. if memory is unavailable), %NULL.
 */</doc>
<use f='linux-4.18.y/drivers/usb/host/xhci-pci.c' l='308' u='c' c='xhci_pci_probe'/>
