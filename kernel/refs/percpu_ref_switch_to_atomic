<dec f='linux-4.14.y/include/linux/percpu-refcount.h' l='101' type='void percpu_ref_switch_to_atomic(struct percpu_ref * ref, percpu_ref_func_t * confirm_switch)'/>
<def f='linux-4.14.y/lib/percpu-refcount.c' l='251' ll='262' type='void percpu_ref_switch_to_atomic(struct percpu_ref * ref, percpu_ref_func_t * confirm_switch)'/>
<dec f='linux-4.14.y/lib/percpu-refcount.c' l='263' type='void percpu_ref_switch_to_atomic(struct percpu_ref * , percpu_ref_func_t * )'/>
<use f='linux-4.14.y/lib/percpu-refcount.c' l='263' c='percpu_ref_switch_to_atomic'/>
<use f='linux-4.14.y/lib/percpu-refcount.c' l='263' u='a'/>
<use f='linux-4.14.y/lib/percpu-refcount.c' l='263' u='a'/>
<use f='linux-4.14.y/lib/percpu-refcount.c' l='275' u='c' c='percpu_ref_switch_to_atomic_sync'/>
<doc f='linux-4.14.y/lib/percpu-refcount.c' l='231'>/**
 * percpu_ref_switch_to_atomic - switch a percpu_ref to atomic mode
 * @ref: percpu_ref to switch to atomic mode
 * @confirm_switch: optional confirmation callback
 *
 * There&apos;s no reason to use this function for the usual reference counting.
 * Use percpu_ref_kill[_and_confirm]().
 *
 * Schedule switching of @ref to atomic mode.  All its percpu counts will
 * be collected to the main atomic counter.  On completion, when all CPUs
 * are guaraneed to be in atomic mode, @confirm_switch, which may not
 * block, is invoked.  This function may be invoked concurrently with all
 * the get/put operations and can safely be mixed with kill and reinit
 * operations.  Note that @ref will stay in atomic mode across kill/reinit
 * cycles until percpu_ref_switch_to_percpu() is called.
 *
 * This function may block if @ref is in the process of switching to atomic
 * mode.  If the caller ensures that @ref is not in the process of
 * switching to atomic mode, this function can be called from any context.
 */</doc>
