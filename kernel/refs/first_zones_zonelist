<def f='linux-4.18.y/include/linux/mmzone.h' l='1008' ll='1014' type='struct zoneref * first_zones_zonelist(struct zonelist * zonelist, enum zone_type highest_zoneidx, nodemask_t * nodes)'/>
<doc f='linux-4.18.y/include/linux/mmzone.h' l='992'>/**
 * first_zones_zonelist - Returns the first zone at or below highest_zoneidx within the allowed nodemask in a zonelist
 * @zonelist - The zonelist to search for a suitable zone
 * @highest_zoneidx - The zone index of the highest zone to return
 * @nodes - An optional nodemask to filter the zonelist with
 * @return - Zoneref pointer for the first suitable zone found (see below)
 *
 * This function returns the first zone at or below a given zone index that is
 * within the allowed nodemask. The zoneref returned is a cursor that can be
 * used to iterate the zonelist with next_zones_zonelist by advancing it by
 * one before calling.
 *
 * When no eligible zone is found, zoneref-&gt;zone is NULL (zoneref itself is
 * never NULL). This may happen either genuinely, or due to concurrent nodemask
 * update due to cpuset modification.
 */</doc>
<use f='linux-4.18.y/mm/hugetlb.c' l='896' macro='1' u='c'/>
<use f='linux-4.18.y/mm/mm_init.c' l='56' macro='1' u='c'/>
<use f='linux-4.18.y/mm/oom_kill.c' l='293' macro='1' u='c'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='2293' macro='1' u='c'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='3690' macro='1' u='c'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='3820' macro='1' u='c'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='3951' macro='1' u='c'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='4096' u='c' c='__alloc_pages_slowpath'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='4172' u='c' c='__alloc_pages_slowpath'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='4345' u='c' c='finalise_ac'/>
<use f='linux-4.18.y/mm/page_alloc.c' l='4662' macro='1' u='c'/>
<use f='linux-4.18.y/mm/vmscan.c' l='2755' macro='1' u='c'/>
<use f='linux-4.18.y/mm/vmscan.c' l='2889' macro='1' u='c'/>
<use f='linux-4.18.y/mm/vmscan.c' l='3004' macro='1' u='c'/>
