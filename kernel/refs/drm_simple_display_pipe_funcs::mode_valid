<dec f='linux-4.18.y/include/drm/drm_simple_kms_helper.h' l='56' type='enum drm_mode_status (*)(struct drm_crtc *, const struct drm_display_mode *)'/>
<offset>0</offset>
<doc f='linux-4.18.y/include/drm/drm_simple_kms_helper.h' l='24'>/**
	 * @mode_valid:
	 *
	 * This callback is used to check if a specific mode is valid in the
	 * crtc used in this simple display pipe. This should be implemented
	 * if the display pipe has some sort of restriction in the modes
	 * it can display. For example, a given display pipe may be responsible
	 * to set a clock value. If the clock can not produce all the values
	 * for the available modes then this callback can be used to restrict
	 * the number of modes to only the ones that can be displayed. Another
	 * reason can be bandwidth mitigation: the memory port on the display
	 * controller can have bandwidth limitations not allowing pixel data
	 * to be fetched at any rate.
	 *
	 * This hook is used by the probe helpers to filter the mode list in
	 * drm_helper_probe_single_connector_modes(), and it is used by the
	 * atomic helpers to validate modes supplied by userspace in
	 * drm_atomic_helper_check_modeset().
	 *
	 * This function is optional.
	 *
	 * NOTE:
	 *
	 * Since this function is both called from the check phase of an atomic
	 * commit, and the mode validation in the probe paths it is not allowed
	 * to look at anything else but the passed-in mode, and validate it
	 * against configuration-invariant hardware constraints.
	 *
	 * RETURNS:
	 *
	 * drm_mode_status Enum
	 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='44' u='r' c='drm_simple_kms_crtc_mode_valid'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_simple_kms_helper.c' l='48' u='r' c='drm_simple_kms_crtc_mode_valid'/>
