<dec f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='318' type='struct nfp_cpp_area * nfp_cpp_area_alloc_with_name(struct nfp_cpp * cpp, uint32_t cpp_id, const char * name, unsigned long long address, unsigned long size)'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cpp.h' l='308'>/*
 * Allocate a NFP CPP area handle, as an offset into a CPP ID, by a named owner
 * @param[in]	cpp	NFP CPP handle
 * @param[in]	cpp_id	NFP CPP ID
 * @param[in]	name	Name of owner of the area
 * @param[in]	address	Offset into the NFP CPP ID address space
 * @param[in]	size	Size of the area to reserve
 *
 * @return NFP CPP handle, or NULL on failure (and set errno accordingly).
 */</doc>
<def f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='127' ll='182' type='struct nfp_cpp_area * nfp_cpp_area_alloc_with_name(struct nfp_cpp * cpp, uint32_t dest, const char * name, unsigned long long address, unsigned long size)'/>
<use f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='188' u='c' c='nfp_cpp_area_alloc'/>
<doc f='linux-4.18.y/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='115'>/*
 * nfp_cpp_area_alloc - allocate a new CPP area
 * @cpp:    CPP handle
 * @dest:   CPP id
 * @address:    start address on CPP target
 * @size:   size of area in bytes
 *
 * Allocate and initialize a CPP area structure.  The area must later
 * be locked down with an &apos;acquire&apos; before it can be safely accessed.
 *
 * NOTE: @address and @size must be 32-bit aligned values.
 */</doc>
