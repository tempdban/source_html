<def f='linux-4.14.y/include/linux/usb.h' l='617' ll='692'/>
<size>1080</size>
<doc f='linux-4.14.y/include/linux/usb.h' l='547'>/**
 * struct usb_device - kernel&apos;s representation of a USB device
 * @devnum: device number; address on a USB bus
 * @devpath: device ID string for use in messages (e.g., /port/...)
 * @route: tree topology hex string for use with xHCI
 * @state: device state: configured, not attached, etc.
 * @speed: device speed: high/full/low (or error)
 * @tt: Transaction Translator info; used with low/full speed dev, highspeed hub
 * @ttport: device port on that tt hub
 * @toggle: one bit for each endpoint, with ([0] = IN, [1] = OUT) endpoints
 * @parent: our hub, unless we&apos;re the root
 * @bus: bus we&apos;re part of
 * @ep0: endpoint 0 data (default control pipe)
 * @dev: generic device interface
 * @descriptor: USB device descriptor
 * @bos: USB device BOS descriptor set
 * @config: all of the device&apos;s configs
 * @actconfig: the active configuration
 * @ep_in: array of IN endpoints
 * @ep_out: array of OUT endpoints
 * @rawdescriptors: raw descriptors for each config
 * @bus_mA: Current available from the bus
 * @portnum: parent port number (origin 1)
 * @level: number of USB hub ancestors
 * @can_submit: URBs may be submitted
 * @persist_enabled:  USB_PERSIST enabled for this device
 * @have_langid: whether string_langid is valid
 * @authorized: policy has said we can use it;
 *	(user space) policy determines if we authorize this device to be
 *	used or not. By default, wired USB devices are authorized.
 *	WUSB devices are not, until we authorize them from user space.
 *	FIXME -- complete doc
 * @authenticated: Crypto authentication passed
 * @wusb: device is Wireless USB
 * @lpm_capable: device supports LPM
 * @usb2_hw_lpm_capable: device can perform USB2 hardware LPM
 * @usb2_hw_lpm_besl_capable: device can perform USB2 hardware BESL LPM
 * @usb2_hw_lpm_enabled: USB2 hardware LPM is enabled
 * @usb2_hw_lpm_allowed: Userspace allows USB 2.0 LPM to be enabled
 * @usb3_lpm_u1_enabled: USB3 hardware U1 LPM enabled
 * @usb3_lpm_u2_enabled: USB3 hardware U2 LPM enabled
 * @string_langid: language ID for strings
 * @product: iProduct string, if present (static)
 * @manufacturer: iManufacturer string, if present (static)
 * @serial: iSerialNumber string, if present (static)
 * @filelist: usbfs files that are open to this device
 * @maxchild: number of ports if hub
 * @quirks: quirks of the whole device
 * @urbnum: number of URBs submitted for the whole device
 * @active_duration: total time device is not suspended
 * @connect_time: time device was first connected
 * @do_remote_wakeup:  remote wakeup should be enabled
 * @reset_resume: needs reset instead of resume
 * @port_is_suspended: the upstream port is suspended (L2 or U3)
 * @wusb_dev: if this is a Wireless USB device, link to the WUSB
 *	specific data for the device.
 * @slot_id: Slot ID assigned by xHCI
 * @removable: Device can be physically removed from this port
 * @l1_params: best effor service latency for USB2 L1 LPM state, and L1 timeout.
 * @u1_params: exit latencies for USB3 U1 LPM state, and hub-initiated timeout.
 * @u2_params: exit latencies for USB3 U2 LPM state, and hub-initiated timeout.
 * @lpm_disable_count: Ref count used by usb_disable_lpm() and usb_enable_lpm()
 *	to keep track of the number of functions that require USB 3.0 Link Power
 *	Management to be disabled for this usb_device.  This count should only
 *	be manipulated by those functions, with the bandwidth_mutex is held.
 *
 * Notes:
 * Usbcore drivers should not set usbdev-&gt;state directly.  Instead use
 * usb_set_device_state().
 */</doc>
<mbr r='usb_device::devnum' o='0' t='int'/>
<mbr r='usb_device::devpath' o='32' t='char [16]'/>
<mbr r='usb_device::route' o='160' t='u32'/>
<mbr r='usb_device::state' o='192' t='enum usb_device_state'/>
<mbr r='usb_device::speed' o='224' t='enum usb_device_speed'/>
<mbr r='usb_device::tt' o='256' t='struct usb_tt *'/>
<mbr r='usb_device::ttport' o='320' t='int'/>
<mbr r='usb_device::toggle' o='352' t='unsigned int [2]'/>
<mbr r='usb_device::parent' o='448' t='struct usb_device *'/>
<mbr r='usb_device::bus' o='512' t='struct usb_bus *'/>
<mbr r='usb_device::ep0' o='576' t='struct usb_host_endpoint'/>
<mbr r='usb_device::dev' o='1216' t='struct device'/>
<mbr r='usb_device::descriptor' o='4992' t='struct usb_device_descriptor'/>
<mbr r='usb_device::bos' o='5184' t='struct usb_host_bos *'/>
<mbr r='usb_device::config' o='5248' t='struct usb_host_config *'/>
<mbr r='usb_device::actconfig' o='5312' t='struct usb_host_config *'/>
<mbr r='usb_device::ep_in' o='5376' t='struct usb_host_endpoint *[16]'/>
<mbr r='usb_device::ep_out' o='6400' t='struct usb_host_endpoint *[16]'/>
<mbr r='usb_device::rawdescriptors' o='7424' t='char **'/>
<mbr r='usb_device::bus_mA' o='7488' t='unsigned short'/>
<mbr r='usb_device::portnum' o='7504' t='u8'/>
<mbr r='usb_device::level' o='7512' t='u8'/>
<mbr r='usb_device::can_submit' o='7520' t='unsigned int'/>
<mbr r='usb_device::persist_enabled' o='7521' t='unsigned int'/>
<mbr r='usb_device::have_langid' o='7522' t='unsigned int'/>
<mbr r='usb_device::authorized' o='7523' t='unsigned int'/>
<mbr r='usb_device::authenticated' o='7524' t='unsigned int'/>
<mbr r='usb_device::wusb' o='7525' t='unsigned int'/>
<mbr r='usb_device::lpm_capable' o='7526' t='unsigned int'/>
<mbr r='usb_device::usb2_hw_lpm_capable' o='7527' t='unsigned int'/>
<mbr r='usb_device::usb2_hw_lpm_besl_capable' o='7528' t='unsigned int'/>
<mbr r='usb_device::usb2_hw_lpm_enabled' o='7529' t='unsigned int'/>
<mbr r='usb_device::usb2_hw_lpm_allowed' o='7530' t='unsigned int'/>
<mbr r='usb_device::usb3_lpm_u1_enabled' o='7531' t='unsigned int'/>
<mbr r='usb_device::usb3_lpm_u2_enabled' o='7532' t='unsigned int'/>
<mbr r='usb_device::string_langid' o='7552' t='int'/>
<mbr r='usb_device::product' o='7616' t='char *'/>
<mbr r='usb_device::manufacturer' o='7680' t='char *'/>
<mbr r='usb_device::serial' o='7744' t='char *'/>
<mbr r='usb_device::filelist' o='7808' t='struct list_head'/>
<mbr r='usb_device::maxchild' o='7936' t='int'/>
<mbr r='usb_device::quirks' o='7968' t='u32'/>
<mbr r='usb_device::urbnum' o='8000' t='atomic_t'/>
<mbr r='usb_device::active_duration' o='8064' t='unsigned long'/>
<mbr r='usb_device::wusb_dev' o='8128' t='struct wusb_dev *'/>
<mbr r='usb_device::slot_id' o='8192' t='int'/>
<mbr r='usb_device::removable' o='8224' t='enum usb_device_removable'/>
<mbr r='usb_device::l1_params' o='8256' t='struct usb2_lpm_parameters'/>
<mbr r='usb_device::u1_params' o='8320' t='struct usb3_lpm_parameters'/>
<mbr r='usb_device::u2_params' o='8448' t='struct usb3_lpm_parameters'/>
<mbr r='usb_device::lpm_disable_count' o='8576' t='unsigned int'/>
<def f='linux-4.14.y/include/linux/usb.h' l='617' ll='692'/>
<size>1080</size>
<doc f='linux-4.14.y/include/linux/usb.h' l='547'>/**
 * struct usb_device - kernel&apos;s representation of a USB device
 * @devnum: device number; address on a USB bus
 * @devpath: device ID string for use in messages (e.g., /port/...)
 * @route: tree topology hex string for use with xHCI
 * @state: device state: configured, not attached, etc.
 * @speed: device speed: high/full/low (or error)
 * @tt: Transaction Translator info; used with low/full speed dev, highspeed hub
 * @ttport: device port on that tt hub
 * @toggle: one bit for each endpoint, with ([0] = IN, [1] = OUT) endpoints
 * @parent: our hub, unless we&apos;re the root
 * @bus: bus we&apos;re part of
 * @ep0: endpoint 0 data (default control pipe)
 * @dev: generic device interface
 * @descriptor: USB device descriptor
 * @bos: USB device BOS descriptor set
 * @config: all of the device&apos;s configs
 * @actconfig: the active configuration
 * @ep_in: array of IN endpoints
 * @ep_out: array of OUT endpoints
 * @rawdescriptors: raw descriptors for each config
 * @bus_mA: Current available from the bus
 * @portnum: parent port number (origin 1)
 * @level: number of USB hub ancestors
 * @can_submit: URBs may be submitted
 * @persist_enabled:  USB_PERSIST enabled for this device
 * @have_langid: whether string_langid is valid
 * @authorized: policy has said we can use it;
 *	(user space) policy determines if we authorize this device to be
 *	used or not. By default, wired USB devices are authorized.
 *	WUSB devices are not, until we authorize them from user space.
 *	FIXME -- complete doc
 * @authenticated: Crypto authentication passed
 * @wusb: device is Wireless USB
 * @lpm_capable: device supports LPM
 * @usb2_hw_lpm_capable: device can perform USB2 hardware LPM
 * @usb2_hw_lpm_besl_capable: device can perform USB2 hardware BESL LPM
 * @usb2_hw_lpm_enabled: USB2 hardware LPM is enabled
 * @usb2_hw_lpm_allowed: Userspace allows USB 2.0 LPM to be enabled
 * @usb3_lpm_u1_enabled: USB3 hardware U1 LPM enabled
 * @usb3_lpm_u2_enabled: USB3 hardware U2 LPM enabled
 * @string_langid: language ID for strings
 * @product: iProduct string, if present (static)
 * @manufacturer: iManufacturer string, if present (static)
 * @serial: iSerialNumber string, if present (static)
 * @filelist: usbfs files that are open to this device
 * @maxchild: number of ports if hub
 * @quirks: quirks of the whole device
 * @urbnum: number of URBs submitted for the whole device
 * @active_duration: total time device is not suspended
 * @connect_time: time device was first connected
 * @do_remote_wakeup:  remote wakeup should be enabled
 * @reset_resume: needs reset instead of resume
 * @port_is_suspended: the upstream port is suspended (L2 or U3)
 * @wusb_dev: if this is a Wireless USB device, link to the WUSB
 *	specific data for the device.
 * @slot_id: Slot ID assigned by xHCI
 * @removable: Device can be physically removed from this port
 * @l1_params: best effor service latency for USB2 L1 LPM state, and L1 timeout.
 * @u1_params: exit latencies for USB3 U1 LPM state, and hub-initiated timeout.
 * @u2_params: exit latencies for USB3 U2 LPM state, and hub-initiated timeout.
 * @lpm_disable_count: Ref count used by usb_disable_lpm() and usb_enable_lpm()
 *	to keep track of the number of functions that require USB 3.0 Link Power
 *	Management to be disabled for this usb_device.  This count should only
 *	be manipulated by those functions, with the bandwidth_mutex is held.
 *
 * Notes:
 * Usbcore drivers should not set usbdev-&gt;state directly.  Instead use
 * usb_set_device_state().
 */</doc>
<mbr r='usb_device::devnum' o='0' t='int'/>
<mbr r='usb_device::devpath' o='32' t='char [16]'/>
<mbr r='usb_device::route' o='160' t='u32'/>
<mbr r='usb_device::state' o='192' t='enum usb_device_state'/>
<mbr r='usb_device::speed' o='224' t='enum usb_device_speed'/>
<mbr r='usb_device::tt' o='256' t='struct usb_tt *'/>
<mbr r='usb_device::ttport' o='320' t='int'/>
<mbr r='usb_device::toggle' o='352' t='unsigned int [2]'/>
<mbr r='usb_device::parent' o='448' t='struct usb_device *'/>
<mbr r='usb_device::bus' o='512' t='struct usb_bus *'/>
<mbr r='usb_device::ep0' o='576' t='struct usb_host_endpoint'/>
<mbr r='usb_device::dev' o='1216' t='struct device'/>
<mbr r='usb_device::descriptor' o='4992' t='struct usb_device_descriptor'/>
<mbr r='usb_device::bos' o='5184' t='struct usb_host_bos *'/>
<mbr r='usb_device::config' o='5248' t='struct usb_host_config *'/>
<mbr r='usb_device::actconfig' o='5312' t='struct usb_host_config *'/>
<mbr r='usb_device::ep_in' o='5376' t='struct usb_host_endpoint *[16]'/>
<mbr r='usb_device::ep_out' o='6400' t='struct usb_host_endpoint *[16]'/>
<mbr r='usb_device::rawdescriptors' o='7424' t='char **'/>
<mbr r='usb_device::bus_mA' o='7488' t='unsigned short'/>
<mbr r='usb_device::portnum' o='7504' t='u8'/>
<mbr r='usb_device::level' o='7512' t='u8'/>
<mbr r='usb_device::can_submit' o='7520' t='unsigned int'/>
<mbr r='usb_device::persist_enabled' o='7521' t='unsigned int'/>
<mbr r='usb_device::have_langid' o='7522' t='unsigned int'/>
<mbr r='usb_device::authorized' o='7523' t='unsigned int'/>
<mbr r='usb_device::authenticated' o='7524' t='unsigned int'/>
<mbr r='usb_device::wusb' o='7525' t='unsigned int'/>
<mbr r='usb_device::lpm_capable' o='7526' t='unsigned int'/>
<mbr r='usb_device::usb2_hw_lpm_capable' o='7527' t='unsigned int'/>
<mbr r='usb_device::usb2_hw_lpm_besl_capable' o='7528' t='unsigned int'/>
<mbr r='usb_device::usb2_hw_lpm_enabled' o='7529' t='unsigned int'/>
<mbr r='usb_device::usb2_hw_lpm_allowed' o='7530' t='unsigned int'/>
<mbr r='usb_device::usb3_lpm_u1_enabled' o='7531' t='unsigned int'/>
<mbr r='usb_device::usb3_lpm_u2_enabled' o='7532' t='unsigned int'/>
<mbr r='usb_device::string_langid' o='7552' t='int'/>
<mbr r='usb_device::product' o='7616' t='char *'/>
<mbr r='usb_device::manufacturer' o='7680' t='char *'/>
<mbr r='usb_device::serial' o='7744' t='char *'/>
<mbr r='usb_device::filelist' o='7808' t='struct list_head'/>
<mbr r='usb_device::maxchild' o='7936' t='int'/>
<mbr r='usb_device::quirks' o='7968' t='u32'/>
<mbr r='usb_device::urbnum' o='8000' t='atomic_t'/>
<mbr r='usb_device::active_duration' o='8064' t='unsigned long'/>
<mbr r='usb_device::wusb_dev' o='8128' t='struct wusb_dev *'/>
<mbr r='usb_device::slot_id' o='8192' t='int'/>
<mbr r='usb_device::removable' o='8224' t='enum usb_device_removable'/>
<mbr r='usb_device::l1_params' o='8256' t='struct usb2_lpm_parameters'/>
<mbr r='usb_device::u1_params' o='8320' t='struct usb3_lpm_parameters'/>
<mbr r='usb_device::u2_params' o='8448' t='struct usb3_lpm_parameters'/>
<mbr r='usb_device::lpm_disable_count' o='8576' t='unsigned int'/>
