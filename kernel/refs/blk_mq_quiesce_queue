<dec f='linux-4.18.y/include/linux/blk-mq.h' l='271' type='void blk_mq_quiesce_queue(struct request_queue * q)'/>
<use f='linux-4.18.y/block/blk-core.c' l='801' u='c' c='blk_cleanup_queue'/>
<def f='linux-4.18.y/block/blk-mq.c' l='226' ll='242' type='void blk_mq_quiesce_queue(struct request_queue * q)'/>
<dec f='linux-4.18.y/block/blk-mq.c' l='243' type='void blk_mq_quiesce_queue(struct request_queue * )'/>
<use f='linux-4.18.y/block/blk-mq.c' l='243' c='blk_mq_quiesce_queue'/>
<use f='linux-4.18.y/block/blk-mq.c' l='243' u='a'/>
<use f='linux-4.18.y/block/blk-mq.c' l='243' u='a'/>
<use f='linux-4.18.y/block/blk-mq.c' l='2820' u='c' c='blk_mq_update_nr_requests'/>
<doc f='linux-4.18.y/block/blk-mq.c' l='217'>/**
 * blk_mq_quiesce_queue() - wait until all ongoing dispatches have finished
 * @q: request queue.
 *
 * Note: this function does not prevent that the struct request end_io()
 * callback function is invoked. Once this function is returned, we make
 * sure no dispatch can happen until the queue is unquiesced via
 * blk_mq_unquiesce_queue().
 */</doc>
<use f='linux-4.18.y/block/elevator.c' l='944' u='c' c='elevator_switch_mq'/>
<use f='linux-4.18.y/drivers/md/dm-rq.c' l='101' u='c' c='dm_mq_stop_queue'/>
<use f='linux-4.18.y/drivers/scsi/scsi_lib.c' l='3147' u='c' c='scsi_internal_device_block'/>
