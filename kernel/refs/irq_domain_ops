<def f='linux-4.14.y/include/linux/irqdomain.h' l='98' ll='120'/>
<size>80</size>
<doc f='linux-4.14.y/include/linux/irqdomain.h' l='83'>/**
 * struct irq_domain_ops - Methods for irq_domain objects
 * @match: Match an interrupt controller device node to a host, returns
 *         1 on a match
 * @map: Create or update a mapping between a virtual irq number and a hw
 *       irq number. This is called only once for a given mapping.
 * @unmap: Dispose of such a mapping
 * @xlate: Given a device tree node and interrupt specifier, decode
 *         the hardware irq number and linux irq type value.
 *
 * Functions below are provided by the driver and called whenever a new mapping
 * is created or an old mapping is disposed. The driver can then proceed to
 * whatever internal data structures management is required. It also needs
 * to setup the irq_desc when returning from map().
 */</doc>
<mbr r='irq_domain_ops::match' o='0' t='int (*)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token)'/>
<mbr r='irq_domain_ops::select' o='64' t='int (*)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token)'/>
<mbr r='irq_domain_ops::map' o='128' t='int (*)(struct irq_domain *, unsigned int, irq_hw_number_t)'/>
<mbr r='irq_domain_ops::unmap' o='192' t='void (*)(struct irq_domain *, unsigned int)'/>
<mbr r='irq_domain_ops::xlate' o='256' t='int (*)(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *)'/>
<mbr r='irq_domain_ops::alloc' o='320' t='int (*)(struct irq_domain *, unsigned int, unsigned int, void *)'/>
<mbr r='irq_domain_ops::free' o='384' t='void (*)(struct irq_domain *, unsigned int, unsigned int)'/>
<mbr r='irq_domain_ops::activate' o='448' t='void (*)(struct irq_domain *, struct irq_data *)'/>
<mbr r='irq_domain_ops::deactivate' o='512' t='void (*)(struct irq_domain *, struct irq_data *)'/>
<mbr r='irq_domain_ops::translate' o='576' t='int (*)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *)'/>
