<dec f='linux-4.18.y/include/linux/libata.h' l='1095' type='int ata_wait_after_reset(struct ata_link * link, unsigned long deadline, int (*)(struct ata_link *) check_ready)'/>
<use f='linux-4.18.y/drivers/ata/ahci.c' l='755' u='c' c='ahci_p5wdh_hardreset'/>
<use f='linux-4.18.y/drivers/ata/libahci.c' l='1449' u='c' c='ahci_do_softreset'/>
<def f='linux-4.18.y/drivers/ata/libata-core.c' l='3783' ll='3789' type='int ata_wait_after_reset(struct ata_link * link, unsigned long deadline, int (*)(struct ata_link *) check_ready)'/>
<dec f='linux-4.18.y/drivers/ata/libata-core.c' l='7328' type='int ata_wait_after_reset(struct ata_link * , unsigned long , int (*)(struct ata_link *) )'/>
<use f='linux-4.18.y/drivers/ata/libata-core.c' l='7328' c='ata_wait_after_reset'/>
<use f='linux-4.18.y/drivers/ata/libata-core.c' l='7328' u='a'/>
<use f='linux-4.18.y/drivers/ata/libata-core.c' l='7328' u='a'/>
<doc f='linux-4.18.y/drivers/ata/libata-core.c' l='3769'>/**
 *	ata_wait_after_reset - wait for link to become ready after reset
 *	@link: link to be waited on
 *	@deadline: deadline jiffies for the operation
 *	@check_ready: callback to check link readiness
 *
 *	Wait for @link to become ready after reset.
 *
 *	LOCKING:
 *	EH context.
 *
 *	RETURNS:
 *	0 if @link is ready before @deadline; otherwise, -errno.
 */</doc>
<use f='linux-4.18.y/drivers/scsi/libsas/sas_ata.c' l='415' u='c' c='sas_ata_hard_reset'/>
