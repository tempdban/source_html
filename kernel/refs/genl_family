<def f='linux-4.14.y/include/net/genetlink.h' l='51' ll='74'/>
<size>120</size>
<doc f='linux-4.14.y/include/net/genetlink.h' l='22'>/**
 * struct genl_family - generic netlink family
 * @id: protocol family identifier (private)
 * @hdrsize: length of user specific header in bytes
 * @name: name of family
 * @version: protocol version
 * @maxattr: maximum number of attributes supported
 * @netnsok: set to true if the family can handle network
 *	namespaces and should be presented in all of them
 * @parallel_ops: operations can be called in parallel and aren&apos;t
 *	synchronized by the core genetlink code
 * @pre_doit: called before an operation&apos;s doit callback, it may
 *	do additional, common, filtering and return an error
 * @post_doit: called after an operation&apos;s doit callback, it may
 *	undo operations done by pre_doit, for example release locks
 * @mcast_bind: a socket bound to the given multicast group (which
 *	is given as the offset into the groups array)
 * @mcast_unbind: a socket was unbound from the given multicast group.
 *	Note that unbind() will not be called symmetrically if the
 *	generic netlink family is removed while there are still open
 *	sockets.
 * @attrbuf: buffer to store parsed attributes (private)
 * @mcgrps: multicast groups used by this family
 * @n_mcgrps: number of multicast groups
 * @mcgrp_offset: starting number of multicast group IDs in this family
 *	(private)
 * @ops: the operations supported by this family
 * @n_ops: number of operations supported by this family
 */</doc>
<mbr r='genl_family::id' o='0' t='int'/>
<mbr r='genl_family::hdrsize' o='32' t='unsigned int'/>
<mbr r='genl_family::name' o='64' t='char [16]'/>
<mbr r='genl_family::version' o='192' t='unsigned int'/>
<mbr r='genl_family::maxattr' o='224' t='unsigned int'/>
<mbr r='genl_family::netnsok' o='256' t='bool'/>
<mbr r='genl_family::parallel_ops' o='264' t='bool'/>
<mbr r='genl_family::pre_doit' o='320' t='int (*)(const struct genl_ops *, struct sk_buff *, struct genl_info *)'/>
<mbr r='genl_family::post_doit' o='384' t='void (*)(const struct genl_ops *, struct sk_buff *, struct genl_info *)'/>
<mbr r='genl_family::mcast_bind' o='448' t='int (*)(struct net *, int)'/>
<mbr r='genl_family::mcast_unbind' o='512' t='void (*)(struct net *, int)'/>
<mbr r='genl_family::attrbuf' o='576' t='struct nlattr **'/>
<mbr r='genl_family::ops' o='640' t='const struct genl_ops *'/>
<mbr r='genl_family::mcgrps' o='704' t='const struct genl_multicast_group *'/>
<mbr r='genl_family::n_ops' o='768' t='unsigned int'/>
<mbr r='genl_family::n_mcgrps' o='800' t='unsigned int'/>
<mbr r='genl_family::mcgrp_offset' o='832' t='unsigned int'/>
<mbr r='genl_family::module' o='896' t='struct module *'/>
