<dec f='linux-4.14.y/kernel/sched/sched.h' l='1370' type='const int [40]'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='750' u='r' c='set_load_weight'/>
<def f='linux-4.14.y/kernel/sched/core.c' l='6737' ll='6746' type='const int [40]'/>
<doc f='linux-4.14.y/kernel/sched/core.c' l='6725'>/*
 * Nice levels are multiplicative, with a gentle 10% change for every
 * nice level changed. I.e. when a CPU-bound task goes from nice 0 to
 * nice 1, it will get ~10% less CPU time than another CPU-bound task
 * that remained on nice 0.
 *
 * The &quot;10% effect&quot; is relative and cumulative: from _any_ nice level,
 * if you go up 1 level, it&apos;s -10% CPU usage, if you go down 1 level
 * it&apos;s +10% CPU usage. (to achieve that we use a multiplier of 1.25.
 * If a task goes up by ~10% and another task goes down by ~10% then
 * the relative distance between them is ~25%.)
 */</doc>
<dec f='linux-4.14.y/kernel/sched/sched.h' l='1370' type='const int [40]'/>
<use f='linux-4.14.y/kernel/sched/core.c' l='750' u='r' c='set_load_weight'/>
<def f='linux-4.14.y/kernel/sched/core.c' l='6737' ll='6746' type='const int [40]'/>
<doc f='linux-4.14.y/kernel/sched/core.c' l='6725'>/*
 * Nice levels are multiplicative, with a gentle 10% change for every
 * nice level changed. I.e. when a CPU-bound task goes from nice 0 to
 * nice 1, it will get ~10% less CPU time than another CPU-bound task
 * that remained on nice 0.
 *
 * The &quot;10% effect&quot; is relative and cumulative: from _any_ nice level,
 * if you go up 1 level, it&apos;s -10% CPU usage, if you go down 1 level
 * it&apos;s +10% CPU usage. (to achieve that we use a multiplier of 1.25.
 * If a task goes up by ~10% and another task goes down by ~10% then
 * the relative distance between them is ~25%.)
 */</doc>
