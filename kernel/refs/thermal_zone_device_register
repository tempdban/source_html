<dec f='linux-4.14.y/include/linux/thermal.h' l='444' type='struct thermal_zone_device * thermal_zone_device_register(const char * , int , int , void * , struct thermal_zone_device_ops * , struct thermal_zone_params * , int , int )'/>
<use f='linux-4.14.y/drivers/acpi/thermal.c' l='906' u='c' c='acpi_thermal_register_thermal_zone'/>
<use f='linux-4.14.y/drivers/acpi/thermal.c' l='912' u='c' c='acpi_thermal_register_thermal_zone'/>
<use f='linux-4.14.y/drivers/power/supply/power_supply_core.c' l='722' u='c' c='psy_register_thermal'/>
<def f='linux-4.14.y/drivers/thermal/thermal_core.c' l='1176' ll='1299' type='struct thermal_zone_device * thermal_zone_device_register(const char * type, int trips, int mask, void * devdata, struct thermal_zone_device_ops * ops, struct thermal_zone_params * tzp, int passive_delay, int polling_delay)'/>
<dec f='linux-4.14.y/drivers/thermal/thermal_core.c' l='1300' type='struct thermal_zone_device * thermal_zone_device_register(const char * , int , int , void * , struct thermal_zone_device_ops * , struct thermal_zone_params * , int , int )'/>
<use f='linux-4.14.y/drivers/thermal/thermal_core.c' l='1300' c='thermal_zone_device_register'/>
<use f='linux-4.14.y/drivers/thermal/thermal_core.c' l='1300' u='a'/>
<use f='linux-4.14.y/drivers/thermal/thermal_core.c' l='1300' u='a'/>
<doc f='linux-4.14.y/drivers/thermal/thermal_core.c' l='1152'>/**
 * thermal_zone_device_register() - register a new thermal zone device
 * @type:	the thermal zone device type
 * @trips:	the number of trip points the thermal zone support
 * @mask:	a bit string indicating the writeablility of trip points
 * @devdata:	private device data
 * @ops:	standard thermal zone device callbacks
 * @tzp:	thermal zone platform parameters
 * @passive_delay: number of milliseconds to wait between polls when
 *		   performing passive cooling
 * @polling_delay: number of milliseconds to wait between polls when checking
 *		   whether trip points have been crossed (0 for interrupt
 *		   driven systems)
 *
 * This interface function adds a new thermal zone device (sensor) to
 * /sys/class/thermal folder as thermal_zone[0-*]. It tries to bind all the
 * thermal cooling devices registered at the same time.
 * thermal_zone_device_unregister() must be called when the device is no
 * longer needed. The passive cooling depends on the .get_trend() return value.
 *
 * Return: a pointer to the created struct thermal_zone_device or an
 * in case of error, an ERR_PTR. Caller must check return value with
 * IS_ERR*() helpers.
 */</doc>
