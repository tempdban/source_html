<dec f='linux-4.14.y/include/drm/drm_bridge.h' l='257' type='enum drm_mode_status drm_bridge_mode_valid(struct drm_bridge * bridge, const struct drm_display_mode * mode)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_atomic_helper.c' l='470' u='c' c='mode_valid_path'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='223' ll='238' type='enum drm_mode_status drm_bridge_mode_valid(struct drm_bridge * bridge, const struct drm_display_mode * mode)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='237' u='c' c='drm_bridge_mode_valid'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='239' type='enum drm_mode_status drm_bridge_mode_valid(struct drm_bridge * , const struct drm_display_mode * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='239' c='drm_bridge_mode_valid'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='239' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='239' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_bridge.c' l='208'>/**
 * drm_bridge_mode_valid - validate the mode against all bridges in the
 * 			   encoder chain.
 * @bridge: bridge control structure
 * @mode: desired mode to be validated
 *
 * Calls &amp;drm_bridge_funcs.mode_valid for all the bridges in the encoder
 * chain, starting from the first bridge to the last. If at least one bridge
 * does not accept the mode the function returns the error code.
 *
 * Note: the bridge passed should be the one closest to the encoder.
 *
 * RETURNS:
 * MODE_OK on success, drm_mode_status Enum error code on failure
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_probe_helper.c' l='117' u='c' c='drm_mode_validate_pipeline'/>
