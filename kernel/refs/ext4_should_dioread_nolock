<def f='linux-4.18.y/fs/ext4/ext4_jbd2.h' l='449' ll='460' type='int ext4_should_dioread_nolock(struct inode * inode)'/>
<doc f='linux-4.18.y/fs/ext4/ext4_jbd2.h' l='440'>/*
 * This function controls whether or not we should try to go down the
 * dioread_nolock code paths, which makes it safe to avoid taking
 * i_mutex for direct I/O reads.  This only works for extent-based
 * files, and it doesn&apos;t work if data journaling is enabled, since the
 * dioread_nolock code uses b_private to pass information back to the
 * I/O completion handler, and this conflicts with the jbd&apos;s use of
 * b_private.
 */</doc>
<use f='linux-4.18.y/fs/ext4/file.c' l='258' u='c' c='ext4_file_write_iter'/>
<use f='linux-4.18.y/fs/ext4/inline.c' l='589' u='c' c='ext4_convert_inline_data_to_extent'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='1307' u='c' c='ext4_write_begin'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='2444' u='c' c='mpage_map_one_extent'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='2746' u='c' c='ext4_writepages'/>
<use f='linux-4.18.y/fs/ext4/inode.c' l='6179' u='c' c='ext4_page_mkwrite'/>
