<dec f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h' l='668' type='void vmw_resource_unreserve(struct vmw_resource * res, bool switch_backup, struct vmw_dma_buffer * new_backup, unsigned long new_backup_offset)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c' l='186' u='c' c='vmw_resources_unreserve'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='1270' u='c' c='vmw_create_dmabuf_proxy'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2539' u='c' c='vmw_kms_helper_resource_revert'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2592' u='c' c='vmw_kms_helper_resource_prepare'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c' l='2616' u='c' c='vmw_kms_helper_resource_finish'/>
<def f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c' l='918' ll='953' type='void vmw_resource_unreserve(struct vmw_resource * res, bool switch_backup, struct vmw_dma_buffer * new_backup, unsigned long new_backup_offset)'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c' l='1488' u='c' c='vmw_resource_pin'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c' l='1524' u='c' c='vmw_resource_unpin'/>
<doc f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c' l='905'>/**
 * vmw_resource_unreserve - Unreserve a resource previously reserved for
 * command submission.
 *
 * @res:               Pointer to the struct vmw_resource to unreserve.
 * @switch_backup:     Backup buffer has been switched.
 * @new_backup:        Pointer to new backup buffer if command submission
 *                     switched. May be NULL.
 * @new_backup_offset: New backup offset if @switch_backup is true.
 *
 * Currently unreserving a resource means putting it back on the device&apos;s
 * resource lru list, so that it can be evicted if necessary.
 */</doc>
