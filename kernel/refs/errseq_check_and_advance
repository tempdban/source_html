<dec f='linux-4.18.y/include/linux/errseq.h' l='13' type='int errseq_check_and_advance(errseq_t * eseq, errseq_t * since)'/>
<def f='linux-4.18.y/lib/errseq.c' l='174' ll='205' type='int errseq_check_and_advance(errseq_t * eseq, errseq_t * since)'/>
<dec f='linux-4.18.y/lib/errseq.c' l='206' type='int errseq_check_and_advance(errseq_t * , errseq_t * )'/>
<use f='linux-4.18.y/lib/errseq.c' l='206' c='errseq_check_and_advance'/>
<use f='linux-4.18.y/lib/errseq.c' l='206' u='a'/>
<use f='linux-4.18.y/lib/errseq.c' l='206' u='a'/>
<doc f='linux-4.18.y/lib/errseq.c' l='154'>/**
 * errseq_check_and_advance() - Check an errseq_t and advance to current value.
 * @eseq: Pointer to value being checked and reported.
 * @since: Pointer to previously-sampled errseq_t to check against and advance.
 *
 * Grab the eseq value, and see whether it matches the value that @since
 * points to. If it does, then just return 0.
 *
 * If it doesn&apos;t, then the value has changed. Set the &quot;seen&quot; flag, and try to
 * swap it into place as the new eseq value. Then, set that value as the new
 * &quot;since&quot; value, and return whatever the error portion is set to.
 *
 * Note that no locking is provided here for concurrent updates to the &quot;since&quot;
 * value. The caller must provide that if necessary. Because of this, callers
 * may want to do a lockless errseq_check before taking the lock and calling
 * this.
 *
 * Return: Negative errno if one has been stored, or 0 if no new error has
 * occurred.
 */</doc>
<use f='linux-4.18.y/mm/filemap.c' l='716' u='c' c='file_check_and_advance_wb_err'/>
