<dec f='linux-4.18.y/include/linux/irqdomain.h' l='449' type='int __irq_domain_alloc_irqs(struct irq_domain * domain, int irq_base, unsigned int nr_irqs, int node, void * arg, bool realloc, const struct cpumask * affinity)'/>
<use f='linux-4.18.y/include/linux/irqdomain.h' l='459' u='c' c='irq_domain_alloc_irqs'/>
<use f='linux-4.18.y/arch/x86/kernel/apic/io_apic.c' l='983' u='c' c='alloc_irq_from_domain'/>
<use f='linux-4.18.y/arch/x86/kernel/apic/io_apic.c' l='1019' u='c' c='alloc_isa_irq_from_domain'/>
<def f='linux-4.18.y/kernel/irq/irqdomain.c' l='1282' ll='1334' type='int __irq_domain_alloc_irqs(struct irq_domain * domain, int irq_base, unsigned int nr_irqs, int node, void * arg, bool realloc, const struct cpumask * affinity)'/>
<doc f='linux-4.18.y/kernel/irq/irqdomain.c' l='1260'>/**
 * __irq_domain_alloc_irqs - Allocate IRQs from domain
 * @domain:	domain to allocate from
 * @irq_base:	allocate specified IRQ nubmer if irq_base &gt;= 0
 * @nr_irqs:	number of IRQs to allocate
 * @node:	NUMA node id for memory allocation
 * @arg:	domain specific argument
 * @realloc:	IRQ descriptors have already been allocated if true
 * @affinity:	Optional irq affinity mask for multiqueue devices
 *
 * Allocate IRQ numbers and initialized all data structures to support
 * hierarchy IRQ domains.
 * Parameter @realloc is mainly to support legacy IRQs.
 * Returns error code or allocated IRQ number
 *
 * The whole process to setup an IRQ has been split into two steps.
 * The first step, __irq_domain_alloc_irqs(), is to allocate IRQ
 * descriptor and required hardware resources. The second step,
 * irq_domain_activate_irq(), is to program hardwares with preallocated
 * resources. In this way, it&apos;s easier to rollback when failing to
 * allocate resources.
 */</doc>
<use f='linux-4.18.y/kernel/irq/msi.c' l='417' u='c' c='msi_domain_alloc_irqs'/>
