<dec f='linux-4.14.y/include/drm/drm_ioctl.h' l='177' type='long drm_compat_ioctl(struct file * filp, unsigned int cmd, unsigned long arg)'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_drv.c' l='76'/>
<use f='linux-4.14.y/drivers/gpu/drm/bochs/bochs_drv.c' l='76'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_drv.c' l='129'/>
<use f='linux-4.14.y/drivers/gpu/drm/cirrus/cirrus_drv.c' l='129'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_ioc32.c' l='954' ll='981' type='long drm_compat_ioctl(struct file * filp, unsigned int cmd, unsigned long arg)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_ioc32.c' l='982' type='long drm_compat_ioctl(struct file * , unsigned int , unsigned long )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioc32.c' l='982' c='drm_compat_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioc32.c' l='982' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioc32.c' l='982' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_ioc32.c' l='940'>/**
 * drm_compat_ioctl - 32bit IOCTL compatibility handler for DRM drivers
 * @filp: file this ioctl is called on
 * @cmd: ioctl cmd number
 * @arg: user argument
 *
 * Compatibility handler for 32 bit userspace running on 64 kernels. All actual
 * IOCTL handling is forwarded to drm_ioctl(), while marshalling structures as
 * appropriate. Note that this only handles DRM core IOCTLs, if the driver has
 * botched IOCTL itself, it must handle those by wrapping this function.
 *
 * Returns:
 * Zero on success, negative error code on failure.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_drv.c' l='111'/>
<use f='linux-4.14.y/drivers/gpu/drm/virtio/virtgpu_drv.c' l='111'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1179' u='a' c='vmw_compat_ioctl'/>
