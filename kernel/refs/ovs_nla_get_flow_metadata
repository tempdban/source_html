<dec f='linux-4.14.y/net/openvswitch/flow_netlink.h' l='51' type='int ovs_nla_get_flow_metadata(struct net * net, const struct nlattr ** a, u64 attrs, struct sw_flow_key * key, bool log)'/>
<use f='linux-4.14.y/net/openvswitch/flow.c' l='836' u='c' c='ovs_flow_key_extract_userspace'/>
<def f='linux-4.14.y/net/openvswitch/flow_netlink.c' l='1590' ll='1609' type='int ovs_nla_get_flow_metadata(struct net * net, const struct nlattr ** a, u64 attrs, struct sw_flow_key * key, bool log)'/>
<doc f='linux-4.14.y/net/openvswitch/flow_netlink.c' l='1570'>/**
 * ovs_nla_get_flow_metadata - parses Netlink attributes into a flow key.
 * @net: Network namespace.
 * @key: Receives extracted in_port, priority, tun_key, skb_mark and conntrack
 * metadata.
 * @a: Array of netlink attributes holding parsed %OVS_KEY_ATTR_* Netlink
 * attributes.
 * @attrs: Bit mask for the netlink attributes included in @a.
 * @log: Boolean to allow kernel error logging.  Normally true, but when
 * probing for feature compatibility this should be passed in as false to
 * suppress unnecessary error logging.
 *
 * This parses a series of Netlink attributes that form a flow key, which must
 * take the same form accepted by flow_from_nlattrs(), but only enough of it to
 * get the metadata, that is, the parts of the flow key that cannot be
 * extracted from the packet itself.
 *
 * This must be called before the packet key fields are filled in &apos;key&apos;.
 */</doc>
