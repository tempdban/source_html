<dec f='linux-4.18.y/include/linux/usb/typec.h' l='132' type='struct typec_altmode * typec_partner_register_altmode(struct typec_partner * partner, const struct typec_altmode_desc * desc)'/>
<def f='linux-4.18.y/drivers/usb/typec/class.c' l='503' ll='508' type='struct typec_altmode * typec_partner_register_altmode(struct typec_partner * partner, const struct typec_altmode_desc * desc)'/>
<dec f='linux-4.18.y/drivers/usb/typec/class.c' l='509' type='struct typec_altmode * typec_partner_register_altmode(struct typec_partner * , const struct typec_altmode_desc * )'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='509' c='typec_partner_register_altmode'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='509' u='a'/>
<use f='linux-4.18.y/drivers/usb/typec/class.c' l='509' u='a'/>
<doc f='linux-4.18.y/drivers/usb/typec/class.c' l='491'>/**
 * typec_partner_register_altmode - Register USB Type-C Partner Alternate Mode
 * @partner: USB Type-C Partner that supports the alternate mode
 * @desc: Description of the alternate mode
 *
 * This routine is used to register each alternate mode individually that
 * @partner has listed in response to Discover SVIDs command. The modes for a
 * SVID listed in response to Discover Modes command need to be listed in an
 * array in @desc.
 *
 * Returns handle to the alternate mode on success or NULL on failure.
 */</doc>
<use f='linux-4.18.y/drivers/usb/typec/tcpm.c' l='1027' u='c' c='svdm_consume_modes'/>
