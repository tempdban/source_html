<dec f='linux-4.14.y/include/linux/uaccess.h' l='242' type='long probe_kernel_read(void * dst, const void * src, size_t size)'/>
<doc f='linux-4.14.y/include/linux/uaccess.h' l='233'>/*
 * probe_kernel_read(): safely attempt to read from a location
 * @dst: pointer to the buffer that shall take the data
 * @src: address to read from
 * @size: size of the data chunk
 *
 * Safely read from address @src to the buffer at @dst.  If a kernel fault
 * happens, handle that and return -EFAULT.
 */</doc>
<use f='linux-4.14.y/arch/x86/kernel/dumpstack_64.c' l='175' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/dumpstack_64.c' l='182' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/ftrace.c' l='120' u='c' c='ftrace_modify_code_direct'/>
<use f='linux-4.14.y/arch/x86/kernel/ftrace.c' l='318' u='c' c='add_break'/>
<use f='linux-4.14.y/arch/x86/kernel/ftrace.c' l='392' u='c' c='remove_breakpoint'/>
<use f='linux-4.14.y/arch/x86/kernel/ftrace.c' l='777' u='c' c='create_trampoline'/>
<use f='linux-4.14.y/arch/x86/kernel/ftrace.c' l='886' u='c' c='addr_from_call'/>
<use f='linux-4.14.y/arch/x86/kernel/kgdb.c' l='757' u='c' c='kgdb_arch_set_breakpoint'/>
<use f='linux-4.14.y/arch/x86/kernel/kgdb.c' l='773' u='c' c='kgdb_arch_set_breakpoint'/>
<use f='linux-4.14.y/arch/x86/kernel/kgdb.c' l='797' u='c' c='kgdb_arch_remove_breakpoint'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='102' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='128' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='131' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='134' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='142' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='143' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='186' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='193' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='214' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/probe_roms.c' l='252' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/kernel/traps.c' l='166' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/mm/fault.c' l='110' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/mm/fault.c' l='144' macro='1' u='c'/>
<use f='linux-4.14.y/arch/x86/mm/fault.c' l='536' macro='1' u='c'/>
<use f='linux-4.14.y/drivers/char/mem.c' l='163' u='c' c='read_mem'/>
<use f='linux-4.14.y/kernel/debug/debug_core.c' l='173' u='c' c='kgdb_arch_set_breakpoint'/>
<use f='linux-4.14.y/kernel/debug/gdbstub.c' l='250' u='c' c='kgdb_mem2hex'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_main.c' l='2329' u='c' c='kdb_ps1'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_support.c' l='328' u='c' c='kdb_getarea_size'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_support.c' l='353' u='c' c='kdb_putarea_size'/>
<use f='linux-4.14.y/kernel/debug/kdb/kdb_support.c' l='627' u='c' c='kdb_task_state_char'/>
<use f='linux-4.14.y/kernel/exit.c' l='249' macro='1' u='c'/>
<use f='linux-4.14.y/kernel/kthread.c' l='166' u='c' c='kthread_probe_data'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4351' u='c' c='print_worker_info'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4352' u='c' c='print_worker_info'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4353' u='c' c='print_worker_info'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4354' u='c' c='print_worker_info'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4357' u='c' c='print_worker_info'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='4359' u='c' c='print_worker_info'/>
<def f='linux-4.14.y/mm/maccess.c' l='23' ll='24' type='long probe_kernel_read(void * dst, const void * src, size_t size)'/>
<dec f='linux-4.14.y/mm/maccess.c' l='40' type='long probe_kernel_read(void * , const void * , size_t )'/>
<use f='linux-4.14.y/mm/maccess.c' l='40' c='probe_kernel_read'/>
<use f='linux-4.14.y/mm/maccess.c' l='40' u='a'/>
<use f='linux-4.14.y/mm/maccess.c' l='40' u='a'/>
<doc f='linux-4.14.y/mm/maccess.c' l='8'>/**
 * probe_kernel_read(): safely attempt to read from a location
 * @dst: pointer to the buffer that shall take the data
 * @src: address to read from
 * @size: size of the data chunk
 *
 * Safely read from address @src to the buffer at @dst.  If a kernel fault
 * happens, handle that and return -EFAULT.
 *
 * We ensure that the copy_from_user is executed in atomic context so that
 * do_page_fault() doesn&apos;t attempt to take mmap_sem.  This makes
 * probe_kernel_read() suitable for use within regions where the caller
 * already holds mmap_sem, or other locks which nest inside mmap_sem.
 */</doc>
