<dec f='linux-4.18.y/include/linux/dma-buf.h' l='390' type='struct sg_table * dma_buf_map_attachment(struct dma_buf_attachment * , enum dma_data_direction )'/>
<def f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='625' ll='640' type='struct sg_table * dma_buf_map_attachment(struct dma_buf_attachment * attach, enum dma_data_direction direction)'/>
<dec f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='641' type='struct sg_table * dma_buf_map_attachment(struct dma_buf_attachment * , enum dma_data_direction )'/>
<use f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='641' c='dma_buf_map_attachment'/>
<use f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='641' u='a'/>
<use f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='641' u='a'/>
<doc f='linux-4.18.y/drivers/dma-buf/dma-buf.c' l='610'>/**
 * dma_buf_map_attachment - Returns the scatterlist table of the attachment;
 * mapped into _device_ address space. Is a wrapper for map_dma_buf() of the
 * dma_buf_ops.
 * @attach:	[in]	attachment whose scatterlist is to be returned
 * @direction:	[in]	direction of DMA transfer
 *
 * Returns sg_table containing the scatterlist to be returned; returns ERR_PTR
 * on error. May return -EINTR if it is interrupted by a signal.
 *
 * A mapping must be unmapped by using dma_buf_unmap_attachment(). Note that
 * the underlying backing storage is pinned for as long as a mapping exists,
 * therefore users/importers should not hold onto a mapping for undue amounts of
 * time.
 */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_prime.c' l='753' u='c' c='drm_gem_prime_import_dev'/>
