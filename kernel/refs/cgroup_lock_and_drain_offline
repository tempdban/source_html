<dec f='linux-4.14.y/kernel/cgroup/cgroup-internal.h' l='194' type='void cgroup_lock_and_drain_offline(struct cgroup * cgrp)'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup-v1.c' l='1061' u='c' c='cgroup1_remount'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup-v1.c' l='1132' u='c' c='cgroup1_mount'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='1214' u='c' c='cgroup_destroy_root'/>
<use f='linux-4.14.y/kernel/cgroup/cgroup.c' l='1501' u='c' c='cgroup_kn_lock_live'/>
<def f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2749' ll='2780' type='void cgroup_lock_and_drain_offline(struct cgroup * cgrp)'/>
<doc f='linux-4.14.y/kernel/cgroup/cgroup.c' l='2741'>/**
 * cgroup_lock_and_drain_offline - lock cgroup_mutex and drain offlined csses
 * @cgrp: root of the target subtree
 *
 * Because css offlining is asynchronous, userland may try to re-enable a
 * controller while the previous css is still around.  This function grabs
 * cgroup_mutex and drains the previous css instances of @cgrp&apos;s subtree.
 */</doc>
