<def f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c' l='102' ll='116'/>
<size>168</size>
<doc f='linux-4.18.y/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c' l='75'>/*
 * The pool structure. There are up to nine pools:
 *  - generic (not restricted to DMA32):
 *      - write combined, uncached, cached.
 *  - dma32 (up to 2^32 - so up 4GB):
 *      - write combined, uncached, cached.
 *  - huge (not restricted to DMA32):
 *      - write combined, uncached, cached.
 * for each &apos;struct device&apos;. The &apos;cached&apos; is for pages that are actively used.
 * The other ones can be shrunk by the shrinker API if neccessary.
 * @pools: The &apos;struct device-&gt;dma_pools&apos; link.
 * @type: Type of the pool
 * @lock: Protects the free_list from concurrnet access. Must be
 * used with irqsave/irqrestore variants because pool allocator maybe called
 * from delayed work.
 * @free_list: Pool of pages that are free to be used. No order requirements.
 * @dev: The device that is associated with these pools.
 * @size: Size used during DMA allocation.
 * @npages_free: Count of available pages for re-use.
 * @npages_in_use: Count of pages that are in use.
 * @nfrees: Stats when pool is shrinking.
 * @nrefills: Stats when the pool is grown.
 * @gfp_flags: Flags to pass for alloc_page.
 * @name: Name of the pool.
 * @dev_name: Name derieved from dev - similar to how dev_info works.
 *   Used during shutdown as the dev_info during release is unavailable.
 */</doc>
<def f='linux-4.18.y/mm/dmapool.c' l='45' ll='54'/>
<size>104</size>
<doc f='linux-4.18.y/mm/dmapool.c' l='45'>/* the pool */</doc>
<mbr r='dma_pool::page_list' o='0' t='struct list_head'/>
<mbr r='dma_pool::lock' o='128' t='spinlock_t'/>
<mbr r='dma_pool::size' o='192' t='size_t'/>
<mbr r='dma_pool::dev' o='256' t='struct device *'/>
<mbr r='dma_pool::allocation' o='320' t='size_t'/>
<mbr r='dma_pool::boundary' o='384' t='size_t'/>
<mbr r='dma_pool::name' o='448' t='char [32]'/>
<mbr r='dma_pool::pools' o='704' t='struct list_head'/>
