<dec f='linux-4.18.y/include/linux/device.h' l='630' type='void * devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid)'/>
<use f='linux-4.18.y/include/linux/device.h' l='634' u='c' c='devres_alloc'/>
<def f='linux-4.18.y/drivers/base/devres.c' l='141' ll='149' type='void * devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid)'/>
<dec f='linux-4.18.y/drivers/base/devres.c' l='150' type='void * devres_alloc_node(dr_release_t , size_t , gfp_t , int )'/>
<use f='linux-4.18.y/drivers/base/devres.c' l='150' c='devres_alloc_node'/>
<use f='linux-4.18.y/drivers/base/devres.c' l='150' u='a'/>
<use f='linux-4.18.y/drivers/base/devres.c' l='150' u='a'/>
<doc f='linux-4.18.y/drivers/base/devres.c' l='127'>/**
 * devres_alloc - Allocate device resource data
 * @release: Release function devres will be associated with
 * @size: Allocation size
 * @gfp: Allocation flags
 * @nid: NUMA node
 *
 * Allocate devres of @size bytes.  The allocated area is zeroed, then
 * associated with @release.  The returned pointer can be passed to
 * other devres_*() functions.
 *
 * RETURNS:
 * Pointer to allocated devres on success, NULL on failure.
 */</doc>
<use f='linux-4.18.y/kernel/iomem.c' l='144' u='c' c='devm_memremap'/>
