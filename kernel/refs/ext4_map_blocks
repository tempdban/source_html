<def f='linux-4.14.y/fs/ext4/ext4.h' l='181' ll='186'/>
<dec f='linux-4.14.y/fs/ext4/ext4.h' l='3139' type='int ext4_map_blocks(handle_t * handle, struct inode * inode, struct ext4_map_blocks * map, int flags)'/>
<size>24</size>
<mbr r='ext4_map_blocks::m_pblk' o='0' t='ext4_fsblk_t'/>
<mbr r='ext4_map_blocks::m_lblk' o='64' t='ext4_lblk_t'/>
<mbr r='ext4_map_blocks::m_len' o='96' t='unsigned int'/>
<mbr r='ext4_map_blocks::m_flags' o='128' t='unsigned int'/>
<use f='linux-4.14.y/fs/ext4/dir.c' l='160' u='c' c='ext4_readdir'/>
<use f='linux-4.14.y/fs/ext4/extents.c' l='4706' u='c' c='ext4_alloc_file_blocks'/>
<use f='linux-4.14.y/fs/ext4/extents.c' l='5053' u='c' c='ext4_convert_unwritten_extents'/>
<use f='linux-4.14.y/fs/ext4/file.c' l='149' u='c' c='ext4_overwrite_io'/>
<use f='linux-4.14.y/fs/ext4/inline.c' l='1214' u='c' c='ext4_convert_inline_data_nolock'/>
<def f='linux-4.14.y/fs/ext4/inode.c' l='497' ll='740' type='int ext4_map_blocks(handle_t * handle, struct inode * inode, struct ext4_map_blocks * map, int flags)'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='782' u='c' c='_ext4_get_block'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='965' u='c' c='ext4_getblk'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='2451' u='c' c='mpage_map_one_extent'/>
<use f='linux-4.14.y/fs/ext4/inode.c' l='6156' u='c' c='ext4_get_next_extent'/>
<doc f='linux-4.14.y/fs/ext4/inode.c' l='475'>/*
 * The ext4_map_blocks() function tries to look up the requested blocks,
 * and returns if the blocks are already mapped.
 *
 * Otherwise it takes the write lock of the i_data_sem and allocate blocks
 * and store the allocated blocks in the result buffer head and mark it
 * mapped.
 *
 * If file type is extents based, it will call ext4_ext_map_blocks(),
 * Otherwise, call with ext4_ind_map_blocks() to handle indirect mapping
 * based files
 *
 * On success, it returns the number of blocks being mapped or allocated.  if
 * create==0 and the blocks are pre-allocated and unwritten, the resulting @map
 * is marked as unwritten. If the create == 1, it will mark @map as mapped.
 *
 * It returns 0 if plain look up failed (blocks have not been allocated), in
 * that case, @map is returned as unmapped but we still do fill map-&gt;m_len to
 * indicate the length of a hole starting at map-&gt;m_lblk.
 *
 * It returns the error in case of allocation failure.
 */</doc>
<use f='linux-4.14.y/fs/ext4/readpage.c' l='181' u='c' c='ext4_mpage_readpages'/>
<use f='linux-4.14.y/fs/ext4/xattr.c' l='1363' u='c' c='ext4_xattr_inode_write'/>
