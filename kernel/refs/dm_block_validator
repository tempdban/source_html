<def f='linux-4.14.y/drivers/md/persistent-data/dm-block-manager.h' l='50' ll='58'/>
<size>24</size>
<doc f='linux-4.14.y/drivers/md/persistent-data/dm-block-manager.h' l='44'>/*
 * The validator allows the caller to verify newly-read data and modify
 * the data just before writing, e.g. to calculate checksums.  It&apos;s
 * important to be consistent with your use of validators.  The only time
 * you can change validators is if you call dm_bm_write_lock_zero.
 */</doc>
<mbr r='dm_block_validator::name' o='0' t='const char *'/>
<mbr r='dm_block_validator::prepare_for_write' o='64' t='void (*)(struct dm_block_validator *, struct dm_block *, size_t)'/>
<mbr r='dm_block_validator::check' o='128' t='int (*)(struct dm_block_validator *, struct dm_block *, size_t)'/>
<def f='linux-4.14.y/drivers/md/persistent-data/dm-block-manager.h' l='50' ll='58'/>
<size>24</size>
<doc f='linux-4.14.y/drivers/md/persistent-data/dm-block-manager.h' l='44'>/*
 * The validator allows the caller to verify newly-read data and modify
 * the data just before writing, e.g. to calculate checksums.  It&apos;s
 * important to be consistent with your use of validators.  The only time
 * you can change validators is if you call dm_bm_write_lock_zero.
 */</doc>
<mbr r='dm_block_validator::name' o='0' t='const char *'/>
<mbr r='dm_block_validator::prepare_for_write' o='64' t='void (*)(struct dm_block_validator *, struct dm_block *, size_t)'/>
<mbr r='dm_block_validator::check' o='128' t='int (*)(struct dm_block_validator *, struct dm_block *, size_t)'/>
