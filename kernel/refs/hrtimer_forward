<dec f='linux-4.14.y/include/linux/hrtimer.h' l='430' type='u64 hrtimer_forward(struct hrtimer * timer, ktime_t now, ktime_t interval)'/>
<use f='linux-4.14.y/include/linux/hrtimer.h' l='451' u='c' c='hrtimer_forward_now'/>
<doc f='linux-4.14.y/include/linux/hrtimer.h' l='428'>/* Forward a hrtimer so it expires after now: */</doc>
<use f='linux-4.14.y/kernel/signal.c' l='607' u='c' c='dequeue_signal'/>
<def f='linux-4.14.y/kernel/time/hrtimer.c' l='798' ll='830' type='u64 hrtimer_forward(struct hrtimer * timer, ktime_t now, ktime_t interval)'/>
<dec f='linux-4.14.y/kernel/time/hrtimer.c' l='831' type='u64 hrtimer_forward(struct hrtimer * , ktime_t , ktime_t )'/>
<use f='linux-4.14.y/kernel/time/hrtimer.c' l='831' c='hrtimer_forward'/>
<use f='linux-4.14.y/kernel/time/hrtimer.c' l='831' u='a'/>
<use f='linux-4.14.y/kernel/time/hrtimer.c' l='831' u='a'/>
<doc f='linux-4.14.y/kernel/time/hrtimer.c' l='781'>/**
 * hrtimer_forward - forward the timer expiry
 * @timer:	hrtimer to forward
 * @now:	forward past this time
 * @interval:	the interval to forward
 *
 * Forward the timer expiry so it will expire in the future.
 * Returns the number of overruns.
 *
 * Can be safely called from the callback function of @timer. If
 * called from other contexts @timer must neither be enqueued nor
 * running the callback and the caller needs to take care of
 * serialization.
 *
 * Note: This only updates the timer expiry value and does not requeue
 * the timer.
 */</doc>
<use f='linux-4.14.y/kernel/time/posix-timers.c' l='293' u='c' c='common_hrtimer_rearm'/>
<use f='linux-4.14.y/kernel/time/posix-timers.c' l='422' u='c' c='posix_timer_fn'/>
<use f='linux-4.14.y/kernel/time/posix-timers.c' l='652' u='c' c='common_hrtimer_forward'/>
<use f='linux-4.14.y/kernel/time/tick-sched.c' l='1227' u='c' c='tick_sched_timer'/>
<use f='linux-4.14.y/kernel/time/tick-sched.c' l='1267' u='c' c='tick_setup_sched_timer'/>
<dec f='linux-4.14.y/include/linux/hrtimer.h' l='430' type='u64 hrtimer_forward(struct hrtimer * timer, ktime_t now, ktime_t interval)'/>
<use f='linux-4.14.y/include/linux/hrtimer.h' l='451' u='c' c='hrtimer_forward_now'/>
<doc f='linux-4.14.y/include/linux/hrtimer.h' l='428'>/* Forward a hrtimer so it expires after now: */</doc>
<use f='linux-4.14.y/kernel/signal.c' l='607' u='c' c='dequeue_signal'/>
<def f='linux-4.14.y/kernel/time/hrtimer.c' l='798' ll='830' type='u64 hrtimer_forward(struct hrtimer * timer, ktime_t now, ktime_t interval)'/>
<dec f='linux-4.14.y/kernel/time/hrtimer.c' l='831' type='u64 hrtimer_forward(struct hrtimer * , ktime_t , ktime_t )'/>
<use f='linux-4.14.y/kernel/time/hrtimer.c' l='831' c='hrtimer_forward'/>
<use f='linux-4.14.y/kernel/time/hrtimer.c' l='831' u='a'/>
<use f='linux-4.14.y/kernel/time/hrtimer.c' l='831' u='a'/>
<doc f='linux-4.14.y/kernel/time/hrtimer.c' l='781'>/**
 * hrtimer_forward - forward the timer expiry
 * @timer:	hrtimer to forward
 * @now:	forward past this time
 * @interval:	the interval to forward
 *
 * Forward the timer expiry so it will expire in the future.
 * Returns the number of overruns.
 *
 * Can be safely called from the callback function of @timer. If
 * called from other contexts @timer must neither be enqueued nor
 * running the callback and the caller needs to take care of
 * serialization.
 *
 * Note: This only updates the timer expiry value and does not requeue
 * the timer.
 */</doc>
<use f='linux-4.14.y/kernel/time/posix-timers.c' l='293' u='c' c='common_hrtimer_rearm'/>
<use f='linux-4.14.y/kernel/time/posix-timers.c' l='422' u='c' c='posix_timer_fn'/>
<use f='linux-4.14.y/kernel/time/posix-timers.c' l='652' u='c' c='common_hrtimer_forward'/>
<use f='linux-4.14.y/kernel/time/tick-sched.c' l='1227' u='c' c='tick_sched_timer'/>
<use f='linux-4.14.y/kernel/time/tick-sched.c' l='1267' u='c' c='tick_setup_sched_timer'/>
