<def f='linux-4.18.y/include/crypto/aead.h' l='136' ll='152'/>
<size>488</size>
<doc f='linux-4.18.y/include/crypto/aead.h' l='100'>/**
 * struct aead_alg - AEAD cipher definition
 * @maxauthsize: Set the maximum authentication tag size supported by the
 *		 transformation. A transformation may support smaller tag sizes.
 *		 As the authentication tag is a message digest to ensure the
 *		 integrity of the encrypted data, a consumer typically wants the
 *		 largest authentication tag possible as defined by this
 *		 variable.
 * @setauthsize: Set authentication size for the AEAD transformation. This
 *		 function is used to specify the consumer requested size of the
 * 		 authentication tag to be either generated by the transformation
 *		 during encryption or the size of the authentication tag to be
 *		 supplied during the decryption operation. This function is also
 *		 responsible for checking the authentication tag size for
 *		 validity.
 * @setkey: see struct skcipher_alg
 * @encrypt: see struct skcipher_alg
 * @decrypt: see struct skcipher_alg
 * @geniv: see struct skcipher_alg
 * @ivsize: see struct skcipher_alg
 * @chunksize: see struct skcipher_alg
 * @init: Initialize the cryptographic transformation object. This function
 *	  is used to initialize the cryptographic transformation object.
 *	  This function is called only once at the instantiation time, right
 *	  after the transformation context was allocated. In case the
 *	  cryptographic hardware has some special requirements which need to
 *	  be handled by software, this function shall check for the precise
 *	  requirement of the transformation and put any software fallbacks
 *	  in place.
 * @exit: Deinitialize the cryptographic transformation object. This is a
 *	  counterpart to @init, used to remove various changes set in
 *	  @init.
 * @base: Definition of a generic crypto cipher algorithm.
 *
 * All fields except @ivsize is mandatory and must be filled.
 */</doc>
<mbr r='aead_alg::setkey' o='0' t='int (*)(struct crypto_aead *, const u8 *, unsigned int)'/>
<mbr r='aead_alg::setauthsize' o='64' t='int (*)(struct crypto_aead *, unsigned int)'/>
<mbr r='aead_alg::encrypt' o='128' t='int (*)(struct aead_request *)'/>
<mbr r='aead_alg::decrypt' o='192' t='int (*)(struct aead_request *)'/>
<mbr r='aead_alg::init' o='256' t='int (*)(struct crypto_aead *)'/>
<mbr r='aead_alg::exit' o='320' t='void (*)(struct crypto_aead *)'/>
<mbr r='aead_alg::geniv' o='384' t='const char *'/>
<mbr r='aead_alg::ivsize' o='448' t='unsigned int'/>
<mbr r='aead_alg::maxauthsize' o='480' t='unsigned int'/>
<mbr r='aead_alg::chunksize' o='512' t='unsigned int'/>
<mbr r='aead_alg::base' o='576' t='struct crypto_alg'/>
