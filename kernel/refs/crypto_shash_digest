<dec f='linux-4.14.y/include/crypto/hash.h' l='826' type='int crypto_shash_digest(struct shash_desc * desc, const u8 * data, unsigned int len, u8 * out)'/>
<doc f='linux-4.14.y/include/crypto/hash.h' l='812'>/**
 * crypto_shash_digest() - calculate message digest for buffer
 * @desc: see crypto_shash_final()
 * @data: see crypto_shash_update()
 * @len: see crypto_shash_update()
 * @out: see crypto_shash_final()
 *
 * This function is a &quot;short-hand&quot; for the function calls of crypto_shash_init,
 * crypto_shash_update and crypto_shash_final. The parameters have the same
 * meaning as discussed for those separate three functions.
 *
 * Return: 0 if the message digest creation was successful; &lt; 0 if an error
 *	   occurred
 */</doc>
<use f='linux-4.14.y/crypto/hmac.c' l='66' u='c' c='hmac_setkey'/>
<def f='linux-4.14.y/crypto/shash.c' l='184' ll='198' type='int crypto_shash_digest(struct shash_desc * desc, const u8 * data, unsigned int len, u8 * out)'/>
<dec f='linux-4.14.y/crypto/shash.c' l='199' type='int crypto_shash_digest(struct shash_desc * , const u8 * , unsigned int , u8 * )'/>
<use f='linux-4.14.y/crypto/shash.c' l='199' c='crypto_shash_digest'/>
<use f='linux-4.14.y/crypto/shash.c' l='199' u='a'/>
<use f='linux-4.14.y/crypto/shash.c' l='199' u='a'/>
<use f='linux-4.14.y/crypto/shash.c' l='300' u='c' c='shash_ahash_digest'/>
<use f='linux-4.14.y/fs/crypto/keyinfo.c' l='217' u='c' c='derive_essiv_salt'/>
