<def f='linux-4.18.y/include/linux/device.h' l='114' ll='146'/>
<size>168</size>
<doc f='linux-4.18.y/include/linux/device.h' l='63'>/**
 * struct bus_type - The bus type of the device
 *
 * @name:	The name of the bus.
 * @dev_name:	Used for subsystems to enumerate devices like (&quot;foo%u&quot;, dev-&gt;id).
 * @dev_root:	Default device to use as the parent.
 * @bus_groups:	Default attributes of the bus.
 * @dev_groups:	Default attributes of the devices on the bus.
 * @drv_groups: Default attributes of the device drivers on the bus.
 * @match:	Called, perhaps multiple times, whenever a new device or driver
 *		is added for this bus. It should return a positive value if the
 *		given device can be handled by the given driver and zero
 *		otherwise. It may also return error code if determining that
 *		the driver supports the device is not possible. In case of
 *		-EPROBE_DEFER it will queue the device for deferred probing.
 * @uevent:	Called when a device is added, removed, or a few other things
 *		that generate uevents to add the environment variables.
 * @probe:	Called when a new device or driver add to this bus, and callback
 *		the specific driver&apos;s probe to initial the matched device.
 * @remove:	Called when a device removed from this bus.
 * @shutdown:	Called at shut-down time to quiesce the device.
 *
 * @online:	Called to put the device back online (after offlining it).
 * @offline:	Called to put the device offline for hot-removal. May fail.
 *
 * @suspend:	Called when a device on this bus wants to go to sleep mode.
 * @resume:	Called to bring a device on this bus out of sleep mode.
 * @num_vf:	Called to find out how many virtual functions a device on this
 *		bus supports.
 * @dma_configure:	Called to setup DMA configuration on a device on
			this bus.
 * @pm:		Power management operations of this bus, callback the specific
 *		device driver&apos;s pm-ops.
 * @iommu_ops:  IOMMU specific operations for this bus, used to attach IOMMU
 *              driver implementations to a bus and allow the driver to do
 *              bus-specific setup
 * @p:		The private data of the driver core, only the driver core can
 *		touch this.
 * @lock_key:	Lock class key for use by the lock validator
 * @need_parent_lock:	When probing or removing a device on this bus, the
 *			device core should lock the device&apos;s parent.
 *
 * A bus is a channel between the processor and one or more devices. For the
 * purposes of the device model, all devices are connected via a bus, even if
 * it is an internal, virtual, &quot;platform&quot; bus. Buses can plug into each other.
 * A USB controller is usually a PCI device, for example. The device model
 * represents the actual connections between buses and the devices they control.
 * A bus is represented by the bus_type structure. It contains the name, the
 * default attributes, the bus&apos; methods, PM operations, and the driver core&apos;s
 * private data.
 */</doc>
<mbr r='bus_type::name' o='0' t='const char *'/>
<mbr r='bus_type::dev_name' o='64' t='const char *'/>
<mbr r='bus_type::dev_root' o='128' t='struct device *'/>
<mbr r='bus_type::bus_groups' o='192' t='const struct attribute_group **'/>
<mbr r='bus_type::dev_groups' o='256' t='const struct attribute_group **'/>
<mbr r='bus_type::drv_groups' o='320' t='const struct attribute_group **'/>
<mbr r='bus_type::match' o='384' t='int (*)(struct device *, struct device_driver *)'/>
<mbr r='bus_type::uevent' o='448' t='int (*)(struct device *, struct kobj_uevent_env *)'/>
<mbr r='bus_type::probe' o='512' t='int (*)(struct device *)'/>
<mbr r='bus_type::remove' o='576' t='int (*)(struct device *)'/>
<mbr r='bus_type::shutdown' o='640' t='void (*)(struct device *)'/>
<mbr r='bus_type::online' o='704' t='int (*)(struct device *)'/>
<mbr r='bus_type::offline' o='768' t='int (*)(struct device *)'/>
<mbr r='bus_type::suspend' o='832' t='int (*)(struct device *, pm_message_t)'/>
<mbr r='bus_type::resume' o='896' t='int (*)(struct device *)'/>
<mbr r='bus_type::num_vf' o='960' t='int (*)(struct device *)'/>
<mbr r='bus_type::dma_configure' o='1024' t='int (*)(struct device *)'/>
<mbr r='bus_type::pm' o='1088' t='const struct dev_pm_ops *'/>
<mbr r='bus_type::iommu_ops' o='1152' t='const struct iommu_ops *'/>
<mbr r='bus_type::p' o='1216' t='struct subsys_private *'/>
<mbr r='bus_type::lock_key' o='1280' t='struct lock_class_key'/>
<mbr r='bus_type::need_parent_lock' o='1280' t='bool'/>
