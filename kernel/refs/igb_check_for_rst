<dec f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mbx.h' l='75' type='s32 igb_check_for_rst(struct e1000_hw * hw, u16 mbx_id)'/>
<def f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mbx.c' l='117' ll='126' type='s32 igb_check_for_rst(struct e1000_hw * hw, u16 mbx_id)'/>
<doc f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mbx.c' l='110'>/**
 *  igb_check_for_rst - checks to see if other side has reset
 *  @hw: pointer to the HW structure
 *  @mbx_id: id of mailbox to check
 *
 *  returns SUCCESS if the Status bit was found or else ERR_MBX
 **/</doc>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/igb_main.c' l='6762' u='c' c='igb_msg_task'/>
<dec f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mbx.h' l='75' type='s32 igb_check_for_rst(struct e1000_hw * hw, u16 mbx_id)'/>
<def f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mbx.c' l='117' ll='126' type='s32 igb_check_for_rst(struct e1000_hw * hw, u16 mbx_id)'/>
<doc f='linux-4.14.y/drivers/net/ethernet/intel/igb/e1000_mbx.c' l='110'>/**
 *  igb_check_for_rst - checks to see if other side has reset
 *  @hw: pointer to the HW structure
 *  @mbx_id: id of mailbox to check
 *
 *  returns SUCCESS if the Status bit was found or else ERR_MBX
 **/</doc>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/igb_main.c' l='6762' u='c' c='igb_msg_task'/>
