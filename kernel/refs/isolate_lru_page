<dec f='linux-4.14.y/mm/internal.h' l='92' type='int isolate_lru_page(struct page * page)'/>
<doc f='linux-4.14.y/mm/internal.h' l='89'>/*
 * in mm/vmscan.c:
 */</doc>
<use f='linux-4.14.y/mm/mlock.c' l='67' u='c' c='clear_page_mlock'/>
<use f='linux-4.14.y/mm/mlock.c' l='94' u='c' c='mlock_vma_page'/>
<use f='linux-4.14.y/mm/vmscan.c' l='836' u='c' c='putback_lru_page'/>
<def f='linux-4.14.y/mm/vmscan.c' l='1625' ll='1648' type='int isolate_lru_page(struct page * page)'/>
<doc f='linux-4.14.y/mm/vmscan.c' l='1600'>/**
 * isolate_lru_page - tries to isolate a page from its LRU list
 * @page: page to isolate from its LRU list
 *
 * Isolates a @page from an LRU list, clears PageLRU and adjusts the
 * vmstat statistic corresponding to whatever LRU list the page was on.
 *
 * Returns 0 if the page was removed from an LRU list.
 * Returns -EBUSY if the page was not on an LRU list.
 *
 * The returned page will have PageLRU() cleared.  If it was found on
 * the active list, it will have PageActive set.  If it was found on
 * the unevictable list, it will have the PageUnevictable bit set. That flag
 * may need to be cleared by the caller before letting the page go.
 *
 * The vmstat statistic corresponding to the list on which the page was
 * found will be decremented.
 *
 * Restrictions:
 * (1) Must be called with an elevated refcount on the page. This is a
 *     fundamentnal difference from isolate_lru_pages (which is called
 *     without a stable reference).
 * (2) the lru_lock must not be held.
 * (3) interrupts must be enabled.
 */</doc>
