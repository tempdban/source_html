<def f='linux-4.14.y/include/scsi/scsi_transport_fc.h' l='229' ll='255'/>
<size>656</size>
<doc f='linux-4.14.y/include/scsi/scsi_transport_fc.h' l='200'>/*
 * FC Virtual Port Attributes
 *
 * This structure exists for each FC port is a virtual FC port. Virtual
 * ports share the physical link with the Physical port. Each virtual
 * ports has a unique presence on the SAN, and may be instantiated via
 * NPIV, Virtual Fabrics, or via additional ALPAs. As the vport is a
 * unique presence, each vport has it&apos;s own view of the fabric,
 * authentication privilege, and priorities.
 *
 * A virtual port may support 1 or more FC4 roles. Typically it is a
 * FCP Initiator. It could be a FCP Target, or exist sole for an IP over FC
 * roles. FC port attributes for the vport will be reported on any
 * fc_host class object allocated for an FCP Initiator.
 *
 * --
 *
 * Fixed attributes are not expected to change. The driver is
 * expected to set these values after receiving the fc_vport structure
 * via the vport_create() call from the transport.
 * The transport fully manages all get functions w/o driver interaction.
 *
 * Dynamic attributes are expected to change. The driver participates
 * in all get/set operations via functions provided by the driver.
 *
 * Private attributes are transport-managed values. They are fully
 * managed by the transport w/o driver interaction.
 */</doc>
<mbr r='fc_vport::vport_state' o='0' t='enum fc_vport_state'/>
<mbr r='fc_vport::vport_last_state' o='32' t='enum fc_vport_state'/>
<mbr r='fc_vport::node_name' o='64' t='u64'/>
<mbr r='fc_vport::port_name' o='128' t='u64'/>
<mbr r='fc_vport::roles' o='192' t='u32'/>
<mbr r='fc_vport::vport_id' o='224' t='u32'/>
<mbr r='fc_vport::vport_type' o='256' t='enum fc_port_type'/>
<mbr r='fc_vport::symbolic_name' o='288' t='char [64]'/>
<mbr r='fc_vport::dd_data' o='832' t='void *'/>
<mbr r='fc_vport::shost' o='896' t='struct Scsi_Host *'/>
<mbr r='fc_vport::channel' o='960' t='unsigned int'/>
<mbr r='fc_vport::number' o='992' t='u32'/>
<mbr r='fc_vport::flags' o='1024' t='u8'/>
<mbr r='fc_vport::peers' o='1088' t='struct list_head'/>
<mbr r='fc_vport::dev' o='1216' t='struct device'/>
<mbr r='fc_vport::vport_delete_work' o='4992' t='struct work_struct'/>
<def f='linux-4.14.y/include/scsi/scsi_transport_fc.h' l='229' ll='255'/>
<size>656</size>
<doc f='linux-4.14.y/include/scsi/scsi_transport_fc.h' l='200'>/*
 * FC Virtual Port Attributes
 *
 * This structure exists for each FC port is a virtual FC port. Virtual
 * ports share the physical link with the Physical port. Each virtual
 * ports has a unique presence on the SAN, and may be instantiated via
 * NPIV, Virtual Fabrics, or via additional ALPAs. As the vport is a
 * unique presence, each vport has it&apos;s own view of the fabric,
 * authentication privilege, and priorities.
 *
 * A virtual port may support 1 or more FC4 roles. Typically it is a
 * FCP Initiator. It could be a FCP Target, or exist sole for an IP over FC
 * roles. FC port attributes for the vport will be reported on any
 * fc_host class object allocated for an FCP Initiator.
 *
 * --
 *
 * Fixed attributes are not expected to change. The driver is
 * expected to set these values after receiving the fc_vport structure
 * via the vport_create() call from the transport.
 * The transport fully manages all get functions w/o driver interaction.
 *
 * Dynamic attributes are expected to change. The driver participates
 * in all get/set operations via functions provided by the driver.
 *
 * Private attributes are transport-managed values. They are fully
 * managed by the transport w/o driver interaction.
 */</doc>
<mbr r='fc_vport::vport_state' o='0' t='enum fc_vport_state'/>
<mbr r='fc_vport::vport_last_state' o='32' t='enum fc_vport_state'/>
<mbr r='fc_vport::node_name' o='64' t='u64'/>
<mbr r='fc_vport::port_name' o='128' t='u64'/>
<mbr r='fc_vport::roles' o='192' t='u32'/>
<mbr r='fc_vport::vport_id' o='224' t='u32'/>
<mbr r='fc_vport::vport_type' o='256' t='enum fc_port_type'/>
<mbr r='fc_vport::symbolic_name' o='288' t='char [64]'/>
<mbr r='fc_vport::dd_data' o='832' t='void *'/>
<mbr r='fc_vport::shost' o='896' t='struct Scsi_Host *'/>
<mbr r='fc_vport::channel' o='960' t='unsigned int'/>
<mbr r='fc_vport::number' o='992' t='u32'/>
<mbr r='fc_vport::flags' o='1024' t='u8'/>
<mbr r='fc_vport::peers' o='1088' t='struct list_head'/>
<mbr r='fc_vport::dev' o='1216' t='struct device'/>
<mbr r='fc_vport::vport_delete_work' o='4992' t='struct work_struct'/>
