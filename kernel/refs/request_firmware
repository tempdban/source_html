<dec f='linux-4.14.y/include/linux/firmware.h' l='43' type='int request_firmware(const struct firmware ** fw, const char * name, struct device * device)'/>
<def f='linux-4.14.y/drivers/base/firmware_class.c' l='1262' ll='1274' type='int request_firmware(const struct firmware ** firmware_p, const char * name, struct device * device)'/>
<dec f='linux-4.14.y/drivers/base/firmware_class.c' l='1275' type='int request_firmware(const struct firmware ** , const char * , struct device * )'/>
<use f='linux-4.14.y/drivers/base/firmware_class.c' l='1275' c='request_firmware'/>
<use f='linux-4.14.y/drivers/base/firmware_class.c' l='1275' u='a'/>
<use f='linux-4.14.y/drivers/base/firmware_class.c' l='1275' u='a'/>
<doc f='linux-4.14.y/drivers/base/firmware_class.c' l='1242'>/**
 * request_firmware: - send firmware request and wait for it
 * @firmware_p: pointer to firmware image
 * @name: name of firmware file
 * @device: device for which firmware is being loaded
 *
 *      @firmware_p will be used to return a firmware image by the name
 *      of @name for device @device.
 *
 *      Should be called from user context where sleeping is allowed.
 *
 *      @name will be used as $FIRMWARE in the uevent environment and
 *      should be distinctive enough not to be confused with any other
 *      firmware image for this or any other device.
 *
 *	Caller must hold the reference count of @device.
 *
 *	The function can be called safely inside device&apos;s suspend and
 *	resume callback.
 **/</doc>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e100.c' l='1289' u='c' c='e100_request_firmware'/>
<use f='linux-4.14.y/drivers/scsi/libsas/sas_scsi_host.c' l='977' u='c' c='sas_request_addr'/>
