<dec f='linux-4.18.y/include/net/tcp.h' l='432' type='int tcp_v4_do_rcv(struct sock * sk, struct sk_buff * skb)'/>
<def f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1515' ll='1574' type='int tcp_v4_do_rcv(struct sock * sk, struct sk_buff * skb)'/>
<dec f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1575' type='int tcp_v4_do_rcv(struct sock * , struct sk_buff * )'/>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1575' c='tcp_v4_do_rcv'/>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1575' u='a'/>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1575' u='a'/>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1813' u='c' c='tcp_v4_rcv'/>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1823' u='c' c='tcp_v4_rcv'/>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='2462'/>
<use f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='2462'/>
<doc f='linux-4.18.y/net/ipv4/tcp_ipv4.c' l='1507'>/* The socket must have it&apos;s spinlock held when we get
 * here, unless it is a TCP_LISTEN socket.
 *
 * We have a potential double-lock case here, so even when
 * doing backlog processing we use the BH locking scheme.
 * This is because we cannot sleep with the original spinlock
 * held.
 */</doc>
