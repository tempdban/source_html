<dec f='linux-4.14.y/include/linux/slab.h' l='153' type='size_t ksize(const void * )'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/igb_main.c' l='1217' u='c' c='igb_alloc_q_vector'/>
<use f='linux-4.14.y/fs/coredump.c' l='76' u='c' c='expand_corename'/>
<def f='linux-4.14.y/mm/slab.c' l='4440' ll='4455' type='size_t ksize(const void * objp)'/>
<dec f='linux-4.14.y/mm/slab.c' l='4456' type='size_t ksize(const void * )'/>
<use f='linux-4.14.y/mm/slab.c' l='4456' c='ksize'/>
<use f='linux-4.14.y/mm/slab.c' l='4456' u='a'/>
<use f='linux-4.14.y/mm/slab.c' l='4456' u='a'/>
<doc f='linux-4.14.y/mm/slab.c' l='4428'>/**
 * ksize - get the actual amount of memory allocated for a given object
 * @objp: Pointer to the object
 *
 * kmalloc may internally round up allocations and return more memory
 * than requested. ksize() can be used to determine the actual amount of
 * memory allocated. The caller may use this additional memory, even though
 * a smaller amount of memory was initially specified with the kmalloc call.
 * The caller must guarantee that objp points to a valid object previously
 * allocated with either kmalloc() or kmem_cache_alloc(). The object
 * must not be freed during the duration of the call.
 */</doc>
<use f='linux-4.14.y/mm/slab_common.c' l='1371' u='c' c='__do_krealloc'/>
<use f='linux-4.14.y/mm/slab_common.c' l='1451' u='c' c='kzfree'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='212' u='c' c='__alloc_skb'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='279' u='c' c='__build_skb'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1465' u='c' c='pskb_expand_head'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='5210' u='c' c='pskb_carve_inside_header'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='5334' u='c' c='pskb_carve_inside_nonlinear'/>
<use f='linux-4.14.y/security/tomoyo/gc.c' l='23' u='c' c='tomoyo_memory_free'/>
<use f='linux-4.14.y/security/tomoyo/memory.c' l='50' u='c' c='tomoyo_memory_ok'/>
