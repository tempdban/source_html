<dec f='linux-4.14.y/include/crypto/skcipher.h' l='197' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * alg_name, u32 type, u32 mask)'/>
<doc f='linux-4.14.y/include/crypto/skcipher.h' l='183'>/**
 * crypto_alloc_skcipher() - allocate symmetric key cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      skcipher cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for an skcipher. The returned struct
 * crypto_skcipher is the cipher handle that is required for any subsequent
 * API invocation for that skcipher.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-4.14.y/crypto/crypto_null.c' l='164' u='c' c='crypto_get_default_null_skcipher'/>
<def f='linux-4.14.y/crypto/skcipher.c' l='924' ll='928' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-4.14.y/crypto/skcipher.c' l='929' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * , u32 , u32 )'/>
<use f='linux-4.14.y/crypto/skcipher.c' l='929' c='crypto_alloc_skcipher'/>
<use f='linux-4.14.y/crypto/skcipher.c' l='929' u='a'/>
<use f='linux-4.14.y/crypto/skcipher.c' l='929' u='a'/>
<use f='linux-4.14.y/drivers/block/cryptoloop.c' l='85' u='c' c='cryptoloop_init'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='1888' u='c' c='crypt_alloc_tfms_skcipher'/>
<dec f='linux-4.14.y/include/crypto/skcipher.h' l='197' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * alg_name, u32 type, u32 mask)'/>
<doc f='linux-4.14.y/include/crypto/skcipher.h' l='183'>/**
 * crypto_alloc_skcipher() - allocate symmetric key cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      skcipher cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for an skcipher. The returned struct
 * crypto_skcipher is the cipher handle that is required for any subsequent
 * API invocation for that skcipher.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-4.14.y/crypto/crypto_null.c' l='164' u='c' c='crypto_get_default_null_skcipher'/>
<def f='linux-4.14.y/crypto/skcipher.c' l='924' ll='928' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-4.14.y/crypto/skcipher.c' l='929' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * , u32 , u32 )'/>
<use f='linux-4.14.y/crypto/skcipher.c' l='929' c='crypto_alloc_skcipher'/>
<use f='linux-4.14.y/crypto/skcipher.c' l='929' u='a'/>
<use f='linux-4.14.y/crypto/skcipher.c' l='929' u='a'/>
<use f='linux-4.14.y/drivers/block/cryptoloop.c' l='85' u='c' c='cryptoloop_init'/>
<use f='linux-4.14.y/drivers/md/dm-crypt.c' l='1888' u='c' c='crypt_alloc_tfms_skcipher'/>
<use f='linux-4.14.y/fs/crypto/keyinfo.c' l='48' u='c' c='derive_key_aes'/>
<use f='linux-4.14.y/fs/crypto/keyinfo.c' l='334' u='c' c='fscrypt_get_encryption_info'/>
