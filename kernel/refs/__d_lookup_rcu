<dec f='linux-4.18.y/include/linux/dcache.h' l='285' type='struct dentry * __d_lookup_rcu(const struct dentry * parent, const struct qstr * name, unsigned int * seq)'/>
<def f='linux-4.18.y/fs/dcache.c' l='2159' ll='2241' type='struct dentry * __d_lookup_rcu(const struct dentry * parent, const struct qstr * name, unsigned int * seqp)'/>
<use f='linux-4.18.y/fs/dcache.c' l='2479' u='c' c='d_alloc_parallel'/>
<doc f='linux-4.18.y/fs/dcache.c' l='2130'>/**
 * __d_lookup_rcu - search for a dentry (racy, store-free)
 * @parent: parent dentry
 * @name: qstr of name we wish to find
 * @seqp: returns d_seq value at the point where the dentry was found
 * Returns: dentry, or NULL
 *
 * __d_lookup_rcu is the dcache lookup function for rcu-walk name
 * resolution (store-free path walking) design described in
 * Documentation/filesystems/path-lookup.txt.
 *
 * This is not to be used outside core vfs.
 *
 * __d_lookup_rcu must only be used in rcu-walk mode, ie. with vfsmount lock
 * held, and rcu_read_lock held. The returned dentry must not be stored into
 * without taking d_lock and checking d_seq sequence count against @seq
 * returned here.
 *
 * A refcount may be taken on the found dentry with the d_rcu_to_refcount
 * function.
 *
 * Alternatively, __d_lookup_rcu may be called again to look up the child of
 * the returned dentry, so long as its parent&apos;s seqlock is checked after the
 * child is looked up. Thus, an interlocking stepping of sequence lock checks
 * is formed, giving integrity down the path walk.
 *
 * NOTE! The caller *has* to check the resulting dentry against the sequence
 * number we&apos;ve returned before using any of the resulting dentry state!
 */</doc>
<use f='linux-4.18.y/fs/namei.c' l='1530' u='c' c='lookup_fast'/>
