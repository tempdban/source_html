<dec f='linux-4.18.y/include/linux/ww_mutex.h' l='219' type='int ww_mutex_lock(struct ww_mutex * lock, struct ww_acquire_ctx * ctx)'/>
<use f='linux-4.18.y/include/linux/ww_mutex.h' l='284' u='c' c='ww_mutex_lock_slow'/>
<use f='linux-4.18.y/include/linux/reservation.h' l='166' u='c' c='reservation_object_lock'/>
<doc f='linux-4.18.y/include/linux/ww_mutex.h' l='190'>/**
 * ww_mutex_lock - acquire the w/w mutex
 * @lock: the mutex to be acquired
 * @ctx: w/w acquire context, or NULL to acquire only a single lock.
 *
 * Lock the w/w mutex exclusively for this task.
 *
 * Deadlocks within a given w/w class of locks are detected and handled with the
 * wait/wound algorithm. If the lock isn&apos;t immediately avaiable this function
 * will either sleep until it is (wait case). Or it selects the current context
 * for backing off by returning -EDEADLK (wound case). Trying to acquire the
 * same lock with the same context twice is also detected and signalled by
 * returning -EALREADY. Returns 0 if the mutex was successfully acquired.
 *
 * In the wound case the caller must release all currently held w/w mutexes for
 * the given context and then wait for this contending lock to be available by
 * calling ww_mutex_lock_slow. Alternatively callers can opt to not acquire this
 * lock and proceed with trying to acquire further w/w mutexes (e.g. when
 * scanning through lru lists trying to free resources).
 *
 * The mutex must later on be released by the same task that
 * acquired it. The task may not exit without first unlocking the mutex. Also,
 * kernel memory where the mutex resides must not be freed with the mutex still
 * locked. The mutex must first be initialized (or statically defined) before it
 * can be locked. memset()-ing the mutex to 0 is not allowed. The mutex must be
 * of the same w/w lock class as was used to initialize the acquire context.
 *
 * A mutex acquired with this function must be released with ww_mutex_unlock.
 */</doc>
<doc f='linux-4.18.y/include/linux/ww_mutex.h' l='219'>/* __must_check */</doc>
<use f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='258' u='c' c='modeset_lock'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_modeset_lock.c' l='339' u='c' c='drm_modeset_lock'/>
<def f='linux-4.18.y/kernel/locking/mutex.c' l='1213' ll='1225' type='int ww_mutex_lock(struct ww_mutex * lock, struct ww_acquire_ctx * ctx)'/>
<dec f='linux-4.18.y/kernel/locking/mutex.c' l='1226' type='int ww_mutex_lock(struct ww_mutex * , struct ww_acquire_ctx * )'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1226' c='ww_mutex_lock'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1226' u='a'/>
<use f='linux-4.18.y/kernel/locking/mutex.c' l='1226' u='a'/>
