<dec f='linux-4.14.y/include/linux/kthread.h' l='180' type='struct kthread_worker * kthread_create_worker_on_cpu(int cpu, unsigned int flags, const char * namefmt)'/>
<def f='linux-4.14.y/kernel/kthread.c' l='721' ll='733' type='struct kthread_worker * kthread_create_worker_on_cpu(int cpu, unsigned int flags, const char * namefmt)'/>
<dec f='linux-4.14.y/kernel/kthread.c' l='734' type='struct kthread_worker * kthread_create_worker_on_cpu(int , unsigned int , const char * )'/>
<use f='linux-4.14.y/kernel/kthread.c' l='734' c='kthread_create_worker_on_cpu'/>
<use f='linux-4.14.y/kernel/kthread.c' l='734' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='734' u='a'/>
<doc f='linux-4.14.y/kernel/kthread.c' l='704'>/**
 * kthread_create_worker_on_cpu - create a kthread worker and bind it
 *	it to a given CPU and the associated NUMA node.
 * @cpu: CPU number
 * @flags: flags modifying the default behavior of the worker
 * @namefmt: printf-style name for the kthread worker (task).
 *
 * Use a valid CPU number if you want to bind the kthread worker
 * to the given CPU and the associated NUMA node.
 *
 * A good practice is to add the cpu number also into the worker name.
 * For example, use kthread_create_worker_on_cpu(cpu, &quot;helper/%d&quot;, cpu).
 *
 * Returns a pointer to the allocated worker on success, ERR_PTR(-ENOMEM)
 * when the needed structures could not get allocated, and ERR_PTR(-EINTR)
 * when the worker was SIGKILLed.
 */</doc>
<dec f='linux-4.14.y/include/linux/kthread.h' l='180' type='struct kthread_worker * kthread_create_worker_on_cpu(int cpu, unsigned int flags, const char * namefmt)'/>
<def f='linux-4.14.y/kernel/kthread.c' l='721' ll='733' type='struct kthread_worker * kthread_create_worker_on_cpu(int cpu, unsigned int flags, const char * namefmt)'/>
<dec f='linux-4.14.y/kernel/kthread.c' l='734' type='struct kthread_worker * kthread_create_worker_on_cpu(int , unsigned int , const char * )'/>
<use f='linux-4.14.y/kernel/kthread.c' l='734' c='kthread_create_worker_on_cpu'/>
<use f='linux-4.14.y/kernel/kthread.c' l='734' u='a'/>
<use f='linux-4.14.y/kernel/kthread.c' l='734' u='a'/>
<doc f='linux-4.14.y/kernel/kthread.c' l='704'>/**
 * kthread_create_worker_on_cpu - create a kthread worker and bind it
 *	it to a given CPU and the associated NUMA node.
 * @cpu: CPU number
 * @flags: flags modifying the default behavior of the worker
 * @namefmt: printf-style name for the kthread worker (task).
 *
 * Use a valid CPU number if you want to bind the kthread worker
 * to the given CPU and the associated NUMA node.
 *
 * A good practice is to add the cpu number also into the worker name.
 * For example, use kthread_create_worker_on_cpu(cpu, &quot;helper/%d&quot;, cpu).
 *
 * Returns a pointer to the allocated worker on success, ERR_PTR(-ENOMEM)
 * when the needed structures could not get allocated, and ERR_PTR(-EINTR)
 * when the worker was SIGKILLed.
 */</doc>
