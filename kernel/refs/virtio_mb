<def f='linux-4.14.y/include/linux/virtio_ring.h' l='25' ll='31' type='void virtio_mb(bool weak_barriers)'/>
<doc f='linux-4.14.y/include/linux/virtio_ring.h' l='9'>/*
 * Barriers in virtio are tricky.  Non-SMP virtio guests can&apos;t assume
 * they&apos;re not on an SMP host system, so they need to assume real
 * barriers.  Non-SMP virtio hosts could skip the barriers, but does
 * anyone care?
 *
 * For virtio_pci on SMP, we don&apos;t need to order with respect to MMIO
 * accesses through relaxed memory I/O windows, so virt_mb() et al are
 * sufficient.
 *
 * For using virtio to talk to real devices (eg. other heterogeneous
 * CPUs) we do need real barriers.  In theory, we could be using both
 * kinds of virtio, so it&apos;s a runtime decision, and the branch is
 * actually quite cheap.
 */</doc>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='560' u='c' c='virtqueue_kick_prepare'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='832' u='c' c='virtqueue_poll'/>
<def f='linux-4.14.y/include/linux/virtio_ring.h' l='25' ll='31' type='void virtio_mb(bool weak_barriers)'/>
<doc f='linux-4.14.y/include/linux/virtio_ring.h' l='9'>/*
 * Barriers in virtio are tricky.  Non-SMP virtio guests can&apos;t assume
 * they&apos;re not on an SMP host system, so they need to assume real
 * barriers.  Non-SMP virtio hosts could skip the barriers, but does
 * anyone care?
 *
 * For virtio_pci on SMP, we don&apos;t need to order with respect to MMIO
 * accesses through relaxed memory I/O windows, so virt_mb() et al are
 * sufficient.
 *
 * For using virtio to talk to real devices (eg. other heterogeneous
 * CPUs) we do need real barriers.  In theory, we could be using both
 * kinds of virtio, so it&apos;s a runtime decision, and the branch is
 * actually quite cheap.
 */</doc>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='560' u='c' c='virtqueue_kick_prepare'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='832' u='c' c='virtqueue_poll'/>
