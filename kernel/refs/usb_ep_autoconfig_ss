<dec f='linux-4.18.y/include/linux/usb/gadget.h' l='879' type='struct usb_ep * usb_ep_autoconfig_ss(struct usb_gadget * , struct usb_endpoint_descriptor * , struct usb_ss_ep_comp_descriptor * )'/>
<def f='linux-4.18.y/drivers/usb/gadget/epautoconf.c' l='63' ll='127' type='struct usb_ep * usb_ep_autoconfig_ss(struct usb_gadget * gadget, struct usb_endpoint_descriptor * desc, struct usb_ss_ep_comp_descriptor * ep_comp)'/>
<dec f='linux-4.18.y/drivers/usb/gadget/epautoconf.c' l='128' type='struct usb_ep * usb_ep_autoconfig_ss(struct usb_gadget * , struct usb_endpoint_descriptor * , struct usb_ss_ep_comp_descriptor * )'/>
<use f='linux-4.18.y/drivers/usb/gadget/epautoconf.c' l='128' c='usb_ep_autoconfig_ss'/>
<use f='linux-4.18.y/drivers/usb/gadget/epautoconf.c' l='128' u='a'/>
<use f='linux-4.18.y/drivers/usb/gadget/epautoconf.c' l='128' u='a'/>
<use f='linux-4.18.y/drivers/usb/gadget/epautoconf.c' l='166' u='c' c='usb_ep_autoconfig'/>
<doc f='linux-4.18.y/drivers/usb/gadget/epautoconf.c' l='19'>/**
 * usb_ep_autoconfig_ss() - choose an endpoint matching the ep
 * descriptor and ep companion descriptor
 * @gadget: The device to which the endpoint must belong.
 * @desc: Endpoint descriptor, with endpoint direction and transfer mode
 *    initialized.  For periodic transfers, the maximum packet
 *    size must also be initialized.  This is modified on
 *    success.
 * @ep_comp: Endpoint companion descriptor, with the required
 *    number of streams. Will be modified when the chosen EP
 *    supports a different number of streams.
 *
 * This routine replaces the usb_ep_autoconfig when needed
 * superspeed enhancments. If such enhancemnets are required,
 * the FD should call usb_ep_autoconfig_ss directly and provide
 * the additional ep_comp parameter.
 *
 * By choosing an endpoint to use with the specified descriptor,
 * this routine simplifies writing gadget drivers that work with
 * multiple USB device controllers.  The endpoint would be
 * passed later to usb_ep_enable(), along with some descriptor.
 *
 * That second descriptor won&apos;t always be the same as the first one.
 * For example, isochronous endpoints can be autoconfigured for high
 * bandwidth, and then used in several lower bandwidth altsettings.
 * Also, high and full speed descriptors will be different.
 *
 * Be sure to examine and test the results of autoconfiguration
 * on your hardware.  This code may not make the best choices
 * about how to use the USB controller, and it can&apos;t know all
 * the restrictions that may apply. Some combinations of driver
 * and hardware won&apos;t be able to autoconfigure.
 *
 * On success, this returns an claimed usb_ep, and modifies the endpoint
 * descriptor bEndpointAddress.  For bulk endpoints, the wMaxPacket value
 * is initialized as if the endpoint were used at full speed and
 * the bmAttribute field in the ep companion descriptor is
 * updated with the assigned number of streams if it is
 * different from the original value. To prevent the endpoint
 * from being returned by a later autoconfig call, claims it by
 * assigning ep-&gt;claimed to true.
 *
 * On failure, this returns a null endpoint descriptor.
 */</doc>
