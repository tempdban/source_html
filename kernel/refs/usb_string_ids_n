<dec f='linux-4.14.y/include/linux/usb/composite.h' l='521' type='int usb_string_ids_n(struct usb_composite_dev * c, unsigned int n)'/>
<def f='linux-4.14.y/drivers/usb/gadget/composite.c' l='1345' ll='1352' type='int usb_string_ids_n(struct usb_composite_dev * c, unsigned int n)'/>
<dec f='linux-4.14.y/drivers/usb/gadget/composite.c' l='1353' type='int usb_string_ids_n(struct usb_composite_dev * , unsigned int )'/>
<use f='linux-4.14.y/drivers/usb/gadget/composite.c' l='1353' c='usb_string_ids_n'/>
<use f='linux-4.14.y/drivers/usb/gadget/composite.c' l='1353' u='a'/>
<use f='linux-4.14.y/drivers/usb/gadget/composite.c' l='1353' u='a'/>
<doc f='linux-4.14.y/drivers/usb/gadget/composite.c' l='1326'>/**
 * usb_string_ids_n() - allocate unused string IDs in batch
 * @c: the device whose string descriptor IDs are being allocated
 * @n: number of string IDs to allocate
 * Context: single threaded during gadget setup
 *
 * Returns the first requested ID.  This ID and next @n-1 IDs are now
 * valid IDs.  At least provided that @n is non-zero because if it
 * is, returns last requested ID which is now very useful information.
 *
 * @usb_string_ids_n() is called from bind() callbacks to allocate
 * string IDs.  Drivers for functions, configurations, or gadgets will
 * then store that ID in the appropriate descriptors and string table.
 *
 * All string identifier should be allocated using this,
 * @usb_string_id() or @usb_string_ids_n() routine, to ensure that for
 * example different functions don&apos;t wrongly assign different meanings
 * to the same identifier.
 */</doc>
<use f='linux-4.14.y/drivers/usb/gadget/function/f_fs.c' l='1739' u='c' c='functionfs_bind'/>
