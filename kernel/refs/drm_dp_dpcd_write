<dec f='linux-4.14.y/include/drm/drm_dp_helper.h' l='1017' type='ssize_t drm_dp_dpcd_write(struct drm_dp_aux * aux, unsigned int offset, void * buffer, size_t size)'/>
<use f='linux-4.14.y/include/drm/drm_dp_helper.h' l='1047' u='c' c='drm_dp_dpcd_writeb'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='291' ll='296' type='ssize_t drm_dp_dpcd_write(struct drm_dp_aux * aux, unsigned int offset, void * buffer, size_t size)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='297' type='ssize_t drm_dp_dpcd_write(struct drm_dp_aux * , unsigned int , void * , size_t )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='297' c='drm_dp_dpcd_write'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='297' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='297' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='435' u='c' c='drm_dp_link_configure'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='277'>/**
 * drm_dp_dpcd_write() - write a series of bytes to the DPCD
 * @aux: DisplayPort AUX channel
 * @offset: address of the (first) register to write
 * @buffer: buffer containing the values to write
 * @size: number of bytes in @buffer
 *
 * Returns the number of bytes transferred on success, or a negative error
 * code on failure. -EIO is returned if the request was NAKed by the sink or
 * if the retry count was exceeded. If not all bytes were transferred, this
 * function returns -EPROTO. Errors from the underlying AUX channel transfer
 * function, with the exception of -EBUSY (which causes the transaction to
 * be retried), are propagated to the caller.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='1070' u='c' c='drm_dp_check_mstb_guid'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='1389' u='c' c='drm_dp_send_sideband_msg'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='2711' u='c' c='drm_dp_dpcd_write_payload'/>
<dec f='linux-4.14.y/include/drm/drm_dp_helper.h' l='1017' type='ssize_t drm_dp_dpcd_write(struct drm_dp_aux * aux, unsigned int offset, void * buffer, size_t size)'/>
<use f='linux-4.14.y/include/drm/drm_dp_helper.h' l='1047' u='c' c='drm_dp_dpcd_writeb'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='291' ll='296' type='ssize_t drm_dp_dpcd_write(struct drm_dp_aux * aux, unsigned int offset, void * buffer, size_t size)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='297' type='ssize_t drm_dp_dpcd_write(struct drm_dp_aux * , unsigned int , void * , size_t )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='297' c='drm_dp_dpcd_write'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='297' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='297' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='435' u='c' c='drm_dp_link_configure'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_dp_helper.c' l='277'>/**
 * drm_dp_dpcd_write() - write a series of bytes to the DPCD
 * @aux: DisplayPort AUX channel
 * @offset: address of the (first) register to write
 * @buffer: buffer containing the values to write
 * @size: number of bytes in @buffer
 *
 * Returns the number of bytes transferred on success, or a negative error
 * code on failure. -EIO is returned if the request was NAKed by the sink or
 * if the retry count was exceeded. If not all bytes were transferred, this
 * function returns -EPROTO. Errors from the underlying AUX channel transfer
 * function, with the exception of -EBUSY (which causes the transaction to
 * be retried), are propagated to the caller.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='1070' u='c' c='drm_dp_check_mstb_guid'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='1389' u='c' c='drm_dp_send_sideband_msg'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_dp_mst_topology.c' l='2711' u='c' c='drm_dp_dpcd_write_payload'/>
