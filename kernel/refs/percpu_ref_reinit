<dec f='linux-4.18.y/include/linux/percpu-refcount.h' l='111' type='void percpu_ref_reinit(struct percpu_ref * ref)'/>
<use f='linux-4.18.y/block/blk-mq.c' l='201' u='c' c='blk_mq_unfreeze_queue'/>
<use f='linux-4.18.y/kernel/cgroup/cgroup-v1.c' l='1256' u='c' c='cgroup1_mount'/>
<def f='linux-4.18.y/lib/percpu-refcount.c' l='357' ll='370' type='void percpu_ref_reinit(struct percpu_ref * ref)'/>
<dec f='linux-4.18.y/lib/percpu-refcount.c' l='371' type='void percpu_ref_reinit(struct percpu_ref * )'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='371' c='percpu_ref_reinit'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='371' u='a'/>
<use f='linux-4.18.y/lib/percpu-refcount.c' l='371' u='a'/>
<doc f='linux-4.18.y/lib/percpu-refcount.c' l='346'>/**
 * percpu_ref_reinit - re-initialize a percpu refcount
 * @ref: perpcu_ref to re-initialize
 *
 * Re-initialize @ref so that it&apos;s in the same state as when it finished
 * percpu_ref_init() ignoring %PERCPU_REF_INIT_DEAD.  @ref must have been
 * initialized successfully and reached 0 but not exited.
 *
 * Note that percpu_ref_tryget[_live]() are safe to perform on @ref while
 * this function is in progress.
 */</doc>
