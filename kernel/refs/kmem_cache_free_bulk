<dec f='linux-4.18.y/include/linux/slab.h' l='366' type='void kmem_cache_free_bulk(struct kmem_cache * , size_t , void ** )'/>
<use f='linux-4.18.y/include/linux/slab.h' l='375' u='c' c='kfree_bulk'/>
<doc f='linux-4.18.y/include/linux/slab.h' l='359'>/*
 * Bulk allocation and freeing operations. These are accelerated in an
 * allocator specific way to avoid taking locks repeatedly or building
 * metadata structures unnecessarily.
 *
 * Note that interrupts must be enabled when calling these functions.
 */</doc>
<def f='linux-4.18.y/mm/slab.c' l='3763' ll='3786' type='void kmem_cache_free_bulk(struct kmem_cache * orig_s, size_t size, void ** p)'/>
<dec f='linux-4.18.y/mm/slab.c' l='3787' type='void kmem_cache_free_bulk(struct kmem_cache * , size_t , void ** )'/>
<use f='linux-4.18.y/mm/slab.c' l='3787' c='kmem_cache_free_bulk'/>
<use f='linux-4.18.y/mm/slab.c' l='3787' u='a'/>
<use f='linux-4.18.y/mm/slab.c' l='3787' u='a'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='725' u='c' c='__kfree_skb_flush'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='748' u='c' c='_kfree_skb_defer'/>
