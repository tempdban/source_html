<dec f='linux-4.14.y/include/linux/ftrace.h' l='607' type='int ftrace_modify_call(struct dyn_ftrace * rec, unsigned long old_addr, unsigned long addr)'/>
<doc f='linux-4.14.y/include/linux/ftrace.h' l='586'>/**
 * ftrace_modify_call - convert from one addr to another (no nop)
 * @rec: the mcount call site record
 * @old_addr: the address expected to be currently called to
 * @addr: the address to change to
 *
 * This is a very sensitive operation and great care needs
 * to be taken by the arch.  The operation should carefully
 * read the location, check to see if what is read is indeed
 * what we expect it to be, and then on success of the compare,
 * it should write to the location.
 *
 * The code segment at @rec-&gt;ip should be a caller to @old_addr
 *
 * Return must be:
 *  0 on success
 *  -EFAULT on error reading the location
 *  -EINVAL on a failed compare of the contents
 *  -EPERM  on error writing to the location
 * Any other value will be considered a failure.
 */</doc>
<def f='linux-4.14.y/arch/x86/kernel/ftrace.c' l='222' ll='228' type='int ftrace_modify_call(struct dyn_ftrace * rec, unsigned long old_addr, unsigned long addr)'/>
<doc f='linux-4.14.y/arch/x86/kernel/ftrace.c' l='214'>/*
 * Should never be called:
 *  As it is only called by __ftrace_replace_code() which is called by
 *  ftrace_replace_code() that x86 overrides, and by ftrace_update_code()
 *  which is called to turn mcount into nops or nops into function calls
 *  but not to convert a function from not using regs to one that uses
 *  regs, which ftrace_modify_call() is for.
 */</doc>
<use f='linux-4.14.y/kernel/trace/ftrace.c' l='2477' u='c' c='__ftrace_replace_code'/>
