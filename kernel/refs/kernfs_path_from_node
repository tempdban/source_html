<dec f='linux-4.18.y/include/linux/kernfs.h' l='304' type='int kernfs_path_from_node(struct kernfs_node * root_kn, struct kernfs_node * kn, char * buf, size_t buflen)'/>
<use f='linux-4.18.y/include/linux/kernfs.h' l='482' u='c' c='kernfs_path'/>
<def f='linux-4.18.y/fs/kernfs/dir.c' l='209' ll='219' type='int kernfs_path_from_node(struct kernfs_node * to, struct kernfs_node * from, char * buf, size_t buflen)'/>
<dec f='linux-4.18.y/fs/kernfs/dir.c' l='220' type='int kernfs_path_from_node(struct kernfs_node * , struct kernfs_node * , char * , size_t )'/>
<use f='linux-4.18.y/fs/kernfs/dir.c' l='220' c='kernfs_path_from_node'/>
<use f='linux-4.18.y/fs/kernfs/dir.c' l='220' u='a'/>
<use f='linux-4.18.y/fs/kernfs/dir.c' l='220' u='a'/>
<doc f='linux-4.18.y/fs/kernfs/dir.c' l='193'>/**
 * kernfs_path_from_node - build path of node @to relative to @from.
 * @from: parent kernfs_node relative to which we need to build the path
 * @to: kernfs_node of interest
 * @buf: buffer to copy @to&apos;s path into
 * @buflen: size of @buf
 *
 * Builds @to&apos;s path relative to @from in @buf. @from and @to must
 * be on the same kernfs-root. If @from is not parent of @to, then a relative
 * path (which includes &apos;..&apos;s) as needed to reach from @from to @to is
 * returned.
 *
 * Returns the length of the full path.  If the full length is equal to or
 * greater than @buflen, @buf contains the truncated path with the trailing
 * &apos;\0&apos;.  On error, -errno is returned.
 */</doc>
<use f='linux-4.18.y/kernel/cgroup/cgroup.c' l='1724' u='c' c='cgroup_show_path'/>
<use f='linux-4.18.y/kernel/cgroup/cgroup.c' l='2117' u='c' c='cgroup_path_ns_locked'/>
