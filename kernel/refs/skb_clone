<dec f='linux-4.14.y/include/linux/skbuff.h' l='1022' type='struct sk_buff * skb_clone(struct sk_buff * skb, gfp_t priority)'/>
<use f='linux-4.14.y/include/linux/skbuff.h' l='1517' u='c' c='skb_share_check'/>
<use f='linux-4.14.y/include/linux/netlink.h' l='147' u='c' c='netlink_skb_clone'/>
<use f='linux-4.14.y/net/core/datagram.c' l='147' u='c' c='skb_set_peeked'/>
<use f='linux-4.14.y/net/core/dev.c' l='1921' u='c' c='dev_queue_xmit_nit'/>
<use f='linux-4.14.y/net/core/filter.c' l='1771' u='c' c='____bpf_clone_redirect'/>
<use f='linux-4.14.y/net/core/neighbour.c' l='904' u='c' c='neigh_probe'/>
<def f='linux-4.14.y/net/core/skbuff.c' l='1263' ll='1289' type='struct sk_buff * skb_clone(struct sk_buff * skb, gfp_t gfp_mask)'/>
<dec f='linux-4.14.y/net/core/skbuff.c' l='1290' type='struct sk_buff * skb_clone(struct sk_buff * , gfp_t )'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1290' c='skb_clone'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1290' u='a'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1290' u='a'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1540' u='c' c='skb_realloc_headroom'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1802' u='c' c='___pskb_trim'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='1925' u='c' c='__pskb_pull_tail'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='3589' u='c' c='skb_segment'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4234' u='c' c='skb_clone_sk'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4343' u='c' c='__skb_tstamp_tx'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4682' u='c' c='skb_checksum_maybe_trim'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='5282' u='c' c='pskb_carve_frag_list'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='5413' u='c' c='pskb_extract'/>
<doc f='linux-4.14.y/net/core/skbuff.c' l='1249'>/**
 *	skb_clone	-	duplicate an sk_buff
 *	@skb: buffer to clone
 *	@gfp_mask: allocation priority
 *
 *	Duplicate an &amp;sk_buff. The new one is not owned by a socket. Both
 *	copies share the same packet data but not structure. The new
 *	buffer has a reference count of 1. If the allocation fails the
 *	function returns %NULL otherwise the new buffer is returned.
 *
 *	If this function is called from an interrupt gfp_mask() must be
 *	%GFP_ATOMIC.
 */</doc>
<use f='linux-4.14.y/net/core/sock_reuseport.c' l='186' u='c' c='run_bpf'/>
<use f='linux-4.14.y/net/ipv4/ip_fragment.c' l='240' u='c' c='ip_expire'/>
<use f='linux-4.14.y/net/ipv4/ip_fragment.c' l='553' u='c' c='ip_frag_reasm'/>
<use f='linux-4.14.y/net/ipv4/ip_input.c' l='177' u='c' c='ip_call_ra_chain'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='367' u='c' c='ip_mc_output'/>
<use f='linux-4.14.y/net/ipv4/ip_output.c' l='383' u='c' c='ip_mc_output'/>
<use f='linux-4.14.y/net/ipv4/ip_sockglue.c' l='402' u='c' c='ip_icmp_error'/>
<use f='linux-4.14.y/net/ipv4/ping.c' l='989' u='c' c='ping_rcv'/>
<use f='linux-4.14.y/net/ipv4/raw.c' l='197' u='c' c='raw_v4_input'/>
<use f='linux-4.14.y/net/ipv4/tcp_fastopen.c' l='140' u='c' c='tcp_fastopen_add_skb'/>
<use f='linux-4.14.y/net/ipv4/tcp_output.c' l='1016' u='c' c='__tcp_transmit_skb'/>
<use f='linux-4.14.y/net/ipv4/udp.c' l='1990' u='c' c='__udp4_lib_mcast_deliver'/>
<use f='linux-4.14.y/net/netfilter/nf_dup_netdev.c' l='50' u='c' c='nf_dup_netdev_egress'/>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='265' u='c' c='__netlink_deliver_tap_skb'/>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='1254' u='c' c='netlink_trim'/>
<use f='linux-4.14.y/net/netlink/af_netlink.c' l='1404' u='c' c='do_one_broadcast'/>
<use f='linux-4.14.y/net/netlink/genetlink.c' l='1089' u='c' c='genlmsg_mcast'/>
<use f='linux-4.14.y/net/packet/af_packet.c' l='2117' u='c' c='packet_rcv'/>
<use f='linux-4.14.y/net/packet/af_packet.c' l='2262' u='c' c='tpacket_rcv'/>
