<def f='linux-4.14.y/kernel/sched/sched.h' l='211' ll='215'/>
<size>24</size>
<doc f='linux-4.14.y/kernel/sched/sched.h' l='187'>/*
 * To keep the bandwidth of -deadline tasks and groups under control
 * we need some place where:
 *  - store the maximum -deadline bandwidth of the system (the group);
 *  - cache the fraction of that bandwidth that is currently allocated.
 *
 * This is all done in the data structure below. It is similar to the
 * one used for RT-throttling (rt_bandwidth), with the main difference
 * that, since here we are only interested in admission control, we
 * do not decrease any runtime while the group &quot;executes&quot;, neither we
 * need a timer to replenish it.
 *
 * With respect to SMP, the bandwidth is given on a per-CPU basis,
 * meaning that:
 *  - dl_bw (&lt; 100%) is the bandwidth of the system (group) on each CPU;
 *  - dl_total_bw array contains, in the i-eth element, the currently
 *    allocated bandwidth on the i-eth CPU.
 * Moreover, groups consume bandwidth on each CPU, while tasks only
 * consume bandwidth on the CPU they&apos;re running on.
 * Finally, dl_total_bw_cpu is used to cache the index of dl_total_bw
 * that will be shown the next time the proc or cgroup controls will
 * be red. It on its turn can be changed by writing on its own
 * control.
 */</doc>
<mbr r='dl_bandwidth::dl_runtime_lock' o='0' t='raw_spinlock_t'/>
<mbr r='dl_bandwidth::dl_runtime' o='64' t='u64'/>
<mbr r='dl_bandwidth::dl_period' o='128' t='u64'/>
