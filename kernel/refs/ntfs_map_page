<def f='linux-4.14.y/fs/ntfs/aops.h' l='86' ll='99' type='struct page * ntfs_map_page(struct address_space * mapping, unsigned long index)'/>
<doc f='linux-4.14.y/fs/ntfs/aops.h' l='46'>/**
 * ntfs_map_page - map a page into accessible memory, reading it if necessary
 * @mapping:	address space for which to obtain the page
 * @index:	index into the page cache for @mapping of the page to map
 *
 * Read a page from the page cache of the address space @mapping at position
 * @index, where @index is in units of PAGE_SIZE, and not in bytes.
 *
 * If the page is not in memory it is loaded from disk first using the readpage
 * method defined in the address space operations of @mapping and the page is
 * added to the page cache of @mapping in the process.
 *
 * If the page belongs to an mst protected attribute and it is marked as such
 * in its ntfs inode (NInoMstProtected()) the mst fixups are applied but no
 * error checking is performed.  This means the caller has to verify whether
 * the ntfs record(s) contained in the page are valid or not using one of the
 * ntfs_is_XXXX_record{,p}() macros, where XXXX is the record type you are
 * expecting to see.  (For details of the macros, see fs/ntfs/layout.h.)
 *
 * If the page is in high memory it is mapped into memory directly addressible
 * by the kernel.
 *
 * Finally the page count is incremented, thus pinning the page into place.
 *
 * The above means that page_address(page) can be used on all pages obtained
 * with ntfs_map_page() to get the kernel virtual address of the page.
 *
 * When finished with the page, the caller has to call ntfs_unmap_page() to
 * unpin, unmap and release the page.
 *
 * Note this does not grant exclusive access. If such is desired, the caller
 * must provide it independently of the ntfs_{un}map_page() calls by using
 * a {rw_}semaphore or other means of serialization. A spin lock cannot be
 * used as ntfs_map_page() can block.
 *
 * The unlocked and uptodate page is returned on success or an encoded error
 * on failure. Caller has to test for error using the IS_ERR() macro on the
 * return value. If that evaluates to &apos;true&apos;, the negative error code can be
 * obtained using PTR_ERR() on the return value of ntfs_map_page().
 */</doc>
<use f='linux-4.14.y/fs/ntfs/bitmap.c' l='75' u='c' c='__ntfs_bitmap_set_bits_in_run'/>
<use f='linux-4.14.y/fs/ntfs/bitmap.c' l='127' u='c' c='__ntfs_bitmap_set_bits_in_run'/>
<use f='linux-4.14.y/fs/ntfs/dir.c' l='321' u='c' c='ntfs_lookup_inode_by_name'/>
<use f='linux-4.14.y/fs/ntfs/dir.c' l='1256' u='c' c='ntfs_readdir'/>
<use f='linux-4.14.y/fs/ntfs/dir.c' l='1299' u='c' c='ntfs_readdir'/>
<use f='linux-4.14.y/fs/ntfs/index.c' l='278' u='c' c='ntfs_index_lookup'/>
<use f='linux-4.14.y/fs/ntfs/lcnalloc.c' l='285' u='c' c='ntfs_cluster_alloc'/>
<use f='linux-4.14.y/fs/ntfs/logfile.c' l='401' u='c' c='ntfs_check_and_load_restart_page'/>
<use f='linux-4.14.y/fs/ntfs/logfile.c' l='547' u='c' c='ntfs_check_logfile'/>
<use f='linux-4.14.y/fs/ntfs/mft.c' l='85' u='c' c='map_mft_record_page'/>
<use f='linux-4.14.y/fs/ntfs/mft.c' l='490' u='c' c='ntfs_sync_mft_mirror'/>
<use f='linux-4.14.y/fs/ntfs/mft.c' l='1193' u='c' c='ntfs_mft_bitmap_find_and_alloc_free_rec_nolock'/>
<use f='linux-4.14.y/fs/ntfs/mft.c' l='1331' u='c' c='ntfs_mft_bitmap_extend_allocation_nolock'/>
<use f='linux-4.14.y/fs/ntfs/mft.c' l='2121' u='c' c='ntfs_mft_record_format'/>
<use f='linux-4.14.y/fs/ntfs/mft.c' l='2522' u='c' c='ntfs_mft_record_alloc'/>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1115' u='c' c='check_mft_mirror'/>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1123' u='c' c='check_mft_mirror'/>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1320' u='c' c='check_windows_hibernation_status'/>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1540' u='c' c='load_and_init_usnjrnl'/>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1623' u='c' c='load_and_init_attrdef'/>
<use f='linux-4.14.y/fs/ntfs/super.c' l='1692' u='c' c='load_and_init_upcase'/>
<use f='linux-4.14.y/fs/ntfs/usnjrnl.c' l='55' u='c' c='ntfs_stamp_usnjrnl'/>
