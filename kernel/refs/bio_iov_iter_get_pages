<dec f='linux-4.18.y/include/linux/bio.h' l='487' type='int bio_iov_iter_get_pages(struct bio * bio, struct iov_iter * iter)'/>
<def f='linux-4.18.y/block/bio.c' l='965' ll='978' type='int bio_iov_iter_get_pages(struct bio * bio, struct iov_iter * iter)'/>
<dec f='linux-4.18.y/block/bio.c' l='979' type='int bio_iov_iter_get_pages(struct bio * , struct iov_iter * )'/>
<use f='linux-4.18.y/block/bio.c' l='979' c='bio_iov_iter_get_pages'/>
<use f='linux-4.18.y/block/bio.c' l='979' u='a'/>
<use f='linux-4.18.y/block/bio.c' l='979' u='a'/>
<doc f='linux-4.18.y/block/bio.c' l='953'>/**
 * bio_iov_iter_get_pages - pin user or kernel pages and add them to a bio
 * @bio: bio to add pages to
 * @iter: iov iterator describing the region to be mapped
 *
 * Pins pages from *iter and appends them to @bio&apos;s bvec array. The
 * pages will have to be released using put_page() when done.
 * The function tries, but does not guarantee, to pin as many pages as
 * fit into the bio, or are requested in *iter, whatever is smaller.
 * If MM encounters an error pinning the requested pages, it stops.
 * Error is returned only if 0 pages could be pinned.
 */</doc>
<use f='linux-4.18.y/fs/block_dev.c' l='222' u='c' c='__blkdev_direct_IO_simple'/>
<use f='linux-4.18.y/fs/block_dev.c' l='363' u='c' c='__blkdev_direct_IO'/>
<use f='linux-4.18.y/fs/iomap.c' l='1053' u='c' c='iomap_dio_actor'/>
