<dec f='linux-4.14.y/include/linux/virtio.h' l='69' type='void * virtqueue_get_buf_ctx(struct virtqueue * vq, unsigned int * len, void ** ctx)'/>
<use f='linux-4.14.y/drivers/net/virtio_net.c' l='722' u='c' c='receive_mergeable'/>
<use f='linux-4.14.y/drivers/net/virtio_net.c' l='1092' u='c' c='virtnet_receive'/>
<def f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='699' ll='754' type='void * virtqueue_get_buf_ctx(struct virtqueue * _vq, unsigned int * len, void ** ctx)'/>
<dec f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='755' type='void * virtqueue_get_buf_ctx(struct virtqueue * , unsigned int * , void ** )'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='755' c='virtqueue_get_buf_ctx'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='755' u='a'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='755' u='a'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='759' u='c' c='virtqueue_get_buf'/>
<doc f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='683'>/**
 * virtqueue_get_buf - get the next used buffer
 * @vq: the struct virtqueue we&apos;re talking about.
 * @len: the length written into the buffer
 *
 * If the device wrote data into the buffer, @len will be set to the
 * amount written.  This means you don&apos;t need to clear the buffer
 * beforehand to ensure there&apos;s no data leakage in the case of short
 * writes.
 *
 * Caller must ensure we don&apos;t call this with other virtqueue
 * operations at the same time (except where noted).
 *
 * Returns NULL if there are no used buffers, or the &quot;data&quot; token
 * handed to virtqueue_add_*().
 */</doc>
<dec f='linux-4.14.y/include/linux/virtio.h' l='69' type='void * virtqueue_get_buf_ctx(struct virtqueue * vq, unsigned int * len, void ** ctx)'/>
<use f='linux-4.14.y/drivers/net/virtio_net.c' l='722' u='c' c='receive_mergeable'/>
<use f='linux-4.14.y/drivers/net/virtio_net.c' l='1092' u='c' c='virtnet_receive'/>
<def f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='699' ll='754' type='void * virtqueue_get_buf_ctx(struct virtqueue * _vq, unsigned int * len, void ** ctx)'/>
<dec f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='755' type='void * virtqueue_get_buf_ctx(struct virtqueue * , unsigned int * , void ** )'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='755' c='virtqueue_get_buf_ctx'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='755' u='a'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='755' u='a'/>
<use f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='759' u='c' c='virtqueue_get_buf'/>
<doc f='linux-4.14.y/drivers/virtio/virtio_ring.c' l='683'>/**
 * virtqueue_get_buf - get the next used buffer
 * @vq: the struct virtqueue we&apos;re talking about.
 * @len: the length written into the buffer
 *
 * If the device wrote data into the buffer, @len will be set to the
 * amount written.  This means you don&apos;t need to clear the buffer
 * beforehand to ensure there&apos;s no data leakage in the case of short
 * writes.
 *
 * Caller must ensure we don&apos;t call this with other virtqueue
 * operations at the same time (except where noted).
 *
 * Returns NULL if there are no used buffers, or the &quot;data&quot; token
 * handed to virtqueue_add_*().
 */</doc>
