<dec f='linux-4.14.y/include/drm/drm_plane_helper.h' l='66' type='int drm_primary_helper_disable(struct drm_plane * plane, struct drm_modeset_acquire_ctx * ctx)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='402' ll='406' type='int drm_primary_helper_disable(struct drm_plane * plane, struct drm_modeset_acquire_ctx * ctx)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='407' type='int drm_primary_helper_disable(struct drm_plane * , struct drm_modeset_acquire_ctx * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='407' c='drm_primary_helper_disable'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='407' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='407' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='426'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='426'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_plane_helper.c' l='381'>/**
 * drm_primary_helper_disable() - Helper for primary plane disable
 * @plane: plane to disable
 * @ctx: lock acquire context, not used here
 *
 * Provides a default plane disable handler for primary planes.  This is handler
 * is called in response to a userspace SetPlane operation on the plane with a
 * NULL framebuffer parameter.  It unconditionally fails the disable call with
 * -EINVAL the only way to disable the primary plane without driver support is
 * to disable the entire CRTC. Which does not match the plane
 * &amp;drm_plane_funcs.disable_plane hook.
 *
 * Note that some hardware may be able to disable the primary plane without
 * disabling the whole CRTC.  Drivers for such hardware should provide their
 * own disable handler that disables just the primary plane (and they&apos;ll likely
 * need to provide their own update handler as well to properly re-enable a
 * disabled primary plane).
 *
 * RETURNS:
 * Unconditionally returns -EINVAL.
 */</doc>
