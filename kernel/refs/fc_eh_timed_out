<dec f='linux-4.18.y/include/scsi/scsi_transport_fc.h' l='811' type='enum blk_eh_timer_return fc_eh_timed_out(struct scsi_cmnd * scmd)'/>
<def f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='2082' ll='2091' type='enum blk_eh_timer_return fc_eh_timed_out(struct scsi_cmnd * scmd)'/>
<dec f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='2092' type='enum blk_eh_timer_return fc_eh_timed_out(struct scsi_cmnd * )'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='2092' c='fc_eh_timed_out'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='2092' u='a'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='2092' u='a'/>
<doc f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='2060'>/**
 * fc_eh_timed_out - FC Transport I/O timeout intercept handler
 * @scmd:	The SCSI command which timed out
 *
 * This routine protects against error handlers getting invoked while a
 * rport is in a blocked state, typically due to a temporarily loss of
 * connectivity. If the error handlers are allowed to proceed, requests
 * to abort i/o, reset the target, etc will likely fail as there is no way
 * to communicate with the device to perform the requested function. These
 * failures may result in the midlayer taking the device offline, requiring
 * manual intervention to restore operation.
 *
 * This routine, called whenever an i/o times out, validates the state of
 * the underlying rport. If the rport is blocked, it returns
 * EH_RESET_TIMER, which will continue to reschedule the timeout.
 * Eventually, either the device will return, or devloss_tmo will fire,
 * and when the timeout then fires, it will be handled normally.
 * If the rport is not blocked, normal error handling continues.
 *
 * Notes:
 *	This routine assumes no locks are held on entry.
 */</doc>
