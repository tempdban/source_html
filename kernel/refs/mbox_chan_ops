<def f='linux-4.14.y/include/linux/mailbox_controller.h' l='47' ll='53'/>
<size>40</size>
<doc f='linux-4.14.y/include/linux/mailbox_controller.h' l='18'>/**
 * struct mbox_chan_ops - methods to control mailbox channels
 * @send_data:	The API asks the MBOX controller driver, in atomic
 *		context try to transmit a message on the bus. Returns 0 if
 *		data is accepted for transmission, -EBUSY while rejecting
 *		if the remote hasn&apos;t yet read the last data sent. Actual
 *		transmission of data is reported by the controller via
 *		mbox_chan_txdone (if it has some TX ACK irq). It must not
 *		sleep.
 * @startup:	Called when a client requests the chan. The controller
 *		could ask clients for additional parameters of communication
 *		to be provided via client&apos;s chan_data. This call may
 *		block. After this call the Controller must forward any
 *		data received on the chan by calling mbox_chan_received_data.
 *		The controller may do stuff that need to sleep.
 * @shutdown:	Called when a client relinquishes control of a chan.
 *		This call may block too. The controller must not forward
 *		any received data anymore.
 *		The controller may do stuff that need to sleep.
 * @last_tx_done: If the controller sets &apos;txdone_poll&apos;, the API calls
 *		  this to poll status of last TX. The controller must
 *		  give priority to IRQ method over polling and never
 *		  set both txdone_poll and txdone_irq. Only in polling
 *		  mode &apos;send_data&apos; is expected to return -EBUSY.
 *		  The controller may do stuff that need to sleep/block.
 *		  Used only if txdone_poll:=true &amp;&amp; txdone_irq:=false
 * @peek_data: Atomic check for any received data. Return true if controller
 *		  has some data to push to the client. False otherwise.
 */</doc>
<mbr r='mbox_chan_ops::send_data' o='0' t='int (*)(struct mbox_chan *, void *)'/>
<mbr r='mbox_chan_ops::startup' o='64' t='int (*)(struct mbox_chan *)'/>
<mbr r='mbox_chan_ops::shutdown' o='128' t='void (*)(struct mbox_chan *)'/>
<mbr r='mbox_chan_ops::last_tx_done' o='192' t='bool (*)(struct mbox_chan *)'/>
<mbr r='mbox_chan_ops::peek_data' o='256' t='bool (*)(struct mbox_chan *)'/>
