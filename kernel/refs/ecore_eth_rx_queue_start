<dec f='linux-4.18.y/drivers/net/qede/base/ecore_l2_api.h' l='208' type='enum _ecore_status_t ecore_eth_rx_queue_start(struct ecore_hwfn * p_hwfn, u16 opaque_fid, struct ecore_queue_start_common_params * p_params, u16 bd_max_bytes, dma_addr_t bd_chain_phys_addr, dma_addr_t cqe_pbl_addr, u16 cqe_pbl_size, struct ecore_rxq_start_ret_params * p_ret_params)'/>
<doc f='linux-4.18.y/drivers/net/qede/base/ecore_l2_api.h' l='190'>/**
 * @brief ecore_eth_rx_queue_start - RX Queue Start Ramrod
 *
 * This ramrod initializes an RX Queue for a VPort. An Assert is generated if
 * the VPort ID is not currently initialized.
 *
 * @param p_hwfn
 * @param opaque_fid
 * @p_params			Inputs; Relative for PF [SB being an exception]
 * @param bd_max_bytes		Maximum bytes that can be placed on a BD
 * @param bd_chain_phys_addr	Physical address of BDs for receive.
 * @param cqe_pbl_addr		Physical address of the CQE PBL Table.
 * @param cqe_pbl_size		Size of the CQE PBL Table
 * @param p_ret_params		Pointed struct to be filled with outputs.
 *
 * @return enum _ecore_status_t
 */</doc>
<def f='linux-4.18.y/drivers/net/qede/base/ecore_l2.c' l='985' ll='1024' type='enum _ecore_status_t ecore_eth_rx_queue_start(struct ecore_hwfn * p_hwfn, u16 opaque_fid, struct ecore_queue_start_common_params * p_params, u16 bd_max_bytes, dma_addr_t bd_chain_phys_addr, dma_addr_t cqe_pbl_addr, u16 cqe_pbl_size, struct ecore_rxq_start_ret_params * p_ret_params)'/>
<use f='linux-4.18.y/drivers/net/qede/qede_rxtx.c' l='615' u='c' c='qede_rx_queue_start'/>
