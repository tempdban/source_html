<def f='linux-4.18.y/include/linux/clockchips.h' l='100' ll='132'/>
<size>256</size>
<doc f='linux-4.18.y/include/linux/clockchips.h' l='70'>/**
 * struct clock_event_device - clock event device descriptor
 * @event_handler:	Assigned by the framework to be called by the low
 *			level handler of the event source
 * @set_next_event:	set next event function using a clocksource delta
 * @set_next_ktime:	set next event function using a direct ktime value
 * @next_event:		local storage for the next event in oneshot mode
 * @max_delta_ns:	maximum delta value in ns
 * @min_delta_ns:	minimum delta value in ns
 * @mult:		nanosecond to cycles multiplier
 * @shift:		nanoseconds to cycles divisor (power of two)
 * @state_use_accessors:current state of the device, assigned by the core code
 * @features:		features
 * @retries:		number of forced programming retries
 * @set_state_periodic:	switch state to periodic
 * @set_state_oneshot:	switch state to oneshot
 * @set_state_oneshot_stopped: switch state to oneshot_stopped
 * @set_state_shutdown:	switch state to shutdown
 * @tick_resume:	resume clkevt device
 * @broadcast:		function to broadcast events
 * @min_delta_ticks:	minimum delta value in ticks stored for reconfiguration
 * @max_delta_ticks:	maximum delta value in ticks stored for reconfiguration
 * @name:		ptr to clock event name
 * @rating:		variable to rate clock event devices
 * @irq:		IRQ number (only for non CPU local devices)
 * @bound_on:		Bound on CPU
 * @cpumask:		cpumask to indicate for which CPUs this device works
 * @list:		list head for the management code
 * @owner:		module reference
 */</doc>
<mbr r='clock_event_device::event_handler' o='0' t='void (*)(struct clock_event_device *)'/>
<mbr r='clock_event_device::set_next_event' o='64' t='int (*)(unsigned long, struct clock_event_device *)'/>
<mbr r='clock_event_device::set_next_ktime' o='128' t='int (*)(ktime_t, struct clock_event_device *)'/>
<mbr r='clock_event_device::next_event' o='192' t='ktime_t'/>
<mbr r='clock_event_device::max_delta_ns' o='256' t='u64'/>
<mbr r='clock_event_device::min_delta_ns' o='320' t='u64'/>
<mbr r='clock_event_device::mult' o='384' t='u32'/>
<mbr r='clock_event_device::shift' o='416' t='u32'/>
<mbr r='clock_event_device::state_use_accessors' o='448' t='enum clock_event_state'/>
<mbr r='clock_event_device::features' o='480' t='unsigned int'/>
<mbr r='clock_event_device::retries' o='512' t='unsigned long'/>
<mbr r='clock_event_device::set_state_periodic' o='576' t='int (*)(struct clock_event_device *)'/>
<mbr r='clock_event_device::set_state_oneshot' o='640' t='int (*)(struct clock_event_device *)'/>
<mbr r='clock_event_device::set_state_oneshot_stopped' o='704' t='int (*)(struct clock_event_device *)'/>
<mbr r='clock_event_device::set_state_shutdown' o='768' t='int (*)(struct clock_event_device *)'/>
<mbr r='clock_event_device::tick_resume' o='832' t='int (*)(struct clock_event_device *)'/>
<mbr r='clock_event_device::broadcast' o='896' t='void (*)(const struct cpumask *)'/>
<mbr r='clock_event_device::suspend' o='960' t='void (*)(struct clock_event_device *)'/>
<mbr r='clock_event_device::resume' o='1024' t='void (*)(struct clock_event_device *)'/>
<mbr r='clock_event_device::min_delta_ticks' o='1088' t='unsigned long'/>
<mbr r='clock_event_device::max_delta_ticks' o='1152' t='unsigned long'/>
<mbr r='clock_event_device::name' o='1216' t='const char *'/>
<mbr r='clock_event_device::rating' o='1280' t='int'/>
<mbr r='clock_event_device::irq' o='1312' t='int'/>
<mbr r='clock_event_device::bound_on' o='1344' t='int'/>
<mbr r='clock_event_device::cpumask' o='1408' t='const struct cpumask *'/>
<mbr r='clock_event_device::list' o='1472' t='struct list_head'/>
<mbr r='clock_event_device::owner' o='1600' t='struct module *'/>
