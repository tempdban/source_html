<def f='linux-4.18.y/include/drm/drm_plane.h' l='61' ll='161'/>
<size>144</size>
<doc f='linux-4.18.y/include/drm/drm_plane.h' l='35'>/**
 * struct drm_plane_state - mutable plane state
 * @plane: backpointer to the plane
 * @crtc_w: width of visible portion of plane on crtc
 * @crtc_h: height of visible portion of plane on crtc
 * @src_x: left position of visible portion of plane within
 *	plane (in 16.16)
 * @src_y: upper position of visible portion of plane within
 *	plane (in 16.16)
 * @src_w: width of visible portion of plane (in 16.16)
 * @src_h: height of visible portion of plane (in 16.16)
 * @alpha: opacity of the plane
 * @rotation: rotation of the plane
 * @zpos: priority of the given plane on crtc (optional)
 *	Note that multiple active planes on the same crtc can have an identical
 *	zpos value. The rule to solving the conflict is to compare the plane
 *	object IDs; the plane with a higher ID must be stacked on top of a
 *	plane with a lower ID.
 * @normalized_zpos: normalized value of zpos: unique, range from 0 to N-1
 *	where N is the number of active planes for given crtc. Note that
 *	the driver must set drm_mode_config.normalize_zpos or call
 *	drm_atomic_normalize_zpos() to update this before it can be trusted.
 * @src: clipped source coordinates of the plane (in 16.16)
 * @dst: clipped destination coordinates of the plane
 * @state: backpointer to global drm_atomic_state
 */</doc>
<mbr r='drm_plane_state::plane' o='0' t='struct drm_plane *'/>
<mbr r='drm_plane_state::crtc' o='64' t='struct drm_crtc *'/>
<mbr r='drm_plane_state::fb' o='128' t='struct drm_framebuffer *'/>
<mbr r='drm_plane_state::fence' o='192' t='struct dma_fence *'/>
<mbr r='drm_plane_state::crtc_x' o='256' t='int32_t'/>
<mbr r='drm_plane_state::crtc_y' o='288' t='int32_t'/>
<mbr r='drm_plane_state::crtc_w' o='320' t='uint32_t'/>
<mbr r='drm_plane_state::crtc_h' o='352' t='uint32_t'/>
<mbr r='drm_plane_state::src_x' o='384' t='uint32_t'/>
<mbr r='drm_plane_state::src_y' o='416' t='uint32_t'/>
<mbr r='drm_plane_state::src_h' o='448' t='uint32_t'/>
<mbr r='drm_plane_state::src_w' o='480' t='uint32_t'/>
<mbr r='drm_plane_state::alpha' o='512' t='u16'/>
<mbr r='drm_plane_state::rotation' o='544' t='unsigned int'/>
<mbr r='drm_plane_state::zpos' o='576' t='unsigned int'/>
<mbr r='drm_plane_state::normalized_zpos' o='608' t='unsigned int'/>
<mbr r='drm_plane_state::color_encoding' o='640' t='enum drm_color_encoding'/>
<mbr r='drm_plane_state::color_range' o='672' t='enum drm_color_range'/>
<mbr r='drm_plane_state::src' o='704' t='struct drm_rect'/>
<mbr r='drm_plane_state::dst' o='832' t='struct drm_rect'/>
<mbr r='drm_plane_state::visible' o='960' t='bool'/>
<mbr r='drm_plane_state::commit' o='1024' t='struct drm_crtc_commit *'/>
<mbr r='drm_plane_state::state' o='1088' t='struct drm_atomic_state *'/>
