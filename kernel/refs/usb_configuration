<def f='linux-4.14.y/include/linux/usb/composite.h' l='298' ll='331'/>
<size>224</size>
<doc f='linux-4.14.y/include/linux/usb/composite.h' l='256'>/**
 * struct usb_configuration - represents one gadget configuration
 * @label: For diagnostics, describes the configuration.
 * @strings: Tables of strings, keyed by identifiers assigned during @bind()
 *	and by language IDs provided in control requests.
 * @descriptors: Table of descriptors preceding all function descriptors.
 *	Examples include OTG and vendor-specific descriptors.
 * @unbind: Reverses @bind; called as a side effect of unregistering the
 *	driver which added this configuration.
 * @setup: Used to delegate control requests that aren&apos;t handled by standard
 *	device infrastructure or directed at a specific interface.
 * @bConfigurationValue: Copied into configuration descriptor.
 * @iConfiguration: Copied into configuration descriptor.
 * @bmAttributes: Copied into configuration descriptor.
 * @MaxPower: Power consumtion in mA. Used to compute bMaxPower in the
 *	configuration descriptor after considering the bus speed.
 * @cdev: assigned by @usb_add_config() before calling @bind(); this is
 *	the device associated with this configuration.
 *
 * Configurations are building blocks for gadget drivers structured around
 * function drivers.  Simple USB gadgets require only one function and one
 * configuration, and handle dual-speed hardware by always providing the same
 * functionality.  Slightly more complex gadgets may have more than one
 * single-function configuration at a given speed; or have configurations
 * that only work at one speed.
 *
 * Composite devices are, by definition, ones with configurations which
 * include more than one function.
 *
 * The lifecycle of a usb_configuration includes allocation, initialization
 * of the fields described above, and calling @usb_add_config() to set up
 * internal data and bind it to a specific device.  The configuration&apos;s
 * @bind() method is then used to initialize all the functions and then
 * call @usb_add_function() for them.
 *
 * Those functions would normally be independent of each other, but that&apos;s
 * not mandatory.  CDC WMC devices are an example where functions often
 * depend on other functions, with some functions subsidiary to others.
 * Such interdependency may be managed in any way, so long as all of the
 * descriptors complete by the time the composite driver returns from
 * its bind() routine.
 */</doc>
<mbr r='usb_configuration::label' o='0' t='const char *'/>
<mbr r='usb_configuration::strings' o='64' t='struct usb_gadget_strings **'/>
<mbr r='usb_configuration::descriptors' o='128' t='const struct usb_descriptor_header **'/>
<mbr r='usb_configuration::unbind' o='192' t='void (*)(struct usb_configuration *)'/>
<mbr r='usb_configuration::setup' o='256' t='int (*)(struct usb_configuration *, const struct usb_ctrlrequest *)'/>
<mbr r='usb_configuration::bConfigurationValue' o='320' t='u8'/>
<mbr r='usb_configuration::iConfiguration' o='328' t='u8'/>
<mbr r='usb_configuration::bmAttributes' o='336' t='u8'/>
<mbr r='usb_configuration::MaxPower' o='352' t='u16'/>
<mbr r='usb_configuration::cdev' o='384' t='struct usb_composite_dev *'/>
<mbr r='usb_configuration::list' o='448' t='struct list_head'/>
<mbr r='usb_configuration::functions' o='576' t='struct list_head'/>
<mbr r='usb_configuration::next_interface_id' o='704' t='u8'/>
<mbr r='usb_configuration::superspeed' o='712' t='unsigned int'/>
<mbr r='usb_configuration::highspeed' o='713' t='unsigned int'/>
<mbr r='usb_configuration::fullspeed' o='714' t='unsigned int'/>
<mbr r='usb_configuration::superspeed_plus' o='715' t='unsigned int'/>
<mbr r='usb_configuration::interface' o='768' t='struct usb_function *[16]'/>
