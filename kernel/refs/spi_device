<def f='linux-4.14.y/include/linux/spi/spi.h' l='142' ll='184'/>
<size>792</size>
<doc f='linux-4.14.y/include/linux/spi/spi.h' l='100'>/**
 * struct spi_device - Controller side proxy for an SPI slave device
 * @dev: Driver model representation of the device.
 * @controller: SPI controller used with the device.
 * @master: Copy of controller, for backwards compatibility.
 * @max_speed_hz: Maximum clock rate to be used with this chip
 *	(on this board); may be changed by the device&apos;s driver.
 *	The spi_transfer.speed_hz can override this for each transfer.
 * @chip_select: Chipselect, distinguishing chips handled by @controller.
 * @mode: The spi mode defines how data is clocked out and in.
 *	This may be changed by the device&apos;s driver.
 *	The &quot;active low&quot; default for chipselect mode can be overridden
 *	(by specifying SPI_CS_HIGH) as can the &quot;MSB first&quot; default for
 *	each word in a transfer (by specifying SPI_LSB_FIRST).
 * @bits_per_word: Data transfers involve one or more words; word sizes
 *	like eight or 12 bits are common.  In-memory wordsizes are
 *	powers of two bytes (e.g. 20 bit samples use 32 bits).
 *	This may be changed by the device&apos;s driver, or left at the
 *	default (0) indicating protocol words are eight bit bytes.
 *	The spi_transfer.bits_per_word can override this for each transfer.
 * @irq: Negative, or the number passed to request_irq() to receive
 *	interrupts from this device.
 * @controller_state: Controller&apos;s runtime state
 * @controller_data: Board-specific definitions for controller, such as
 *	FIFO initialization parameters; from board_info.controller_data
 * @modalias: Name of the driver to use with this device, or an alias
 *	for that name.  This appears in the sysfs &quot;modalias&quot; attribute
 *	for driver coldplugging, and in uevents used for hotplugging
 * @cs_gpio: gpio number of the chipselect line (optional, -ENOENT when
 *	when not using a GPIO line)
 *
 * @statistics: statistics for the spi_device
 *
 * A @spi_device is used to interchange data between an SPI slave
 * (usually a discrete chip) and CPU memory.
 *
 * In @dev, the platform_data is used to hold information about this
 * device that&apos;s meaningful to the device&apos;s protocol driver, but not
 * to its controller.  One example might be an identifier for a chip
 * variant with slightly different functionality; another might be
 * information about how this particular board wires the chip&apos;s pins.
 */</doc>
<mbr r='spi_device::dev' o='0' t='struct device'/>
<mbr r='spi_device::controller' o='3776' t='struct spi_controller *'/>
<mbr r='spi_device::master' o='3840' t='struct spi_controller *'/>
<mbr r='spi_device::max_speed_hz' o='3904' t='u32'/>
<mbr r='spi_device::chip_select' o='3936' t='u8'/>
<mbr r='spi_device::bits_per_word' o='3944' t='u8'/>
<mbr r='spi_device::mode' o='3952' t='u16'/>
<mbr r='spi_device::irq' o='3968' t='int'/>
<mbr r='spi_device::controller_state' o='4032' t='void *'/>
<mbr r='spi_device::controller_data' o='4096' t='void *'/>
<mbr r='spi_device::modalias' o='4160' t='char [32]'/>
<mbr r='spi_device::cs_gpio' o='4416' t='int'/>
<mbr r='spi_device::statistics' o='4480' t='struct spi_statistics'/>
