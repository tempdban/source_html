<dec f='linux-4.18.y/include/linux/cgroup.h' l='118' type='int cgroup_can_fork(struct task_struct * p)'/>
<def f='linux-4.18.y/kernel/cgroup/cgroup.c' l='5514' ll='5536' type='int cgroup_can_fork(struct task_struct * child)'/>
<doc f='linux-4.18.y/kernel/cgroup/cgroup.c' l='5506'>/**
 * cgroup_can_fork - called on a new task before the process is exposed
 * @child: the task in question.
 *
 * This calls the subsystem can_fork() callbacks. If the can_fork() callback
 * returns an error, the fork aborts with that error code. This allows for
 * a cgroup subsystem to conditionally allow or deny new forks.
 */</doc>
<use f='linux-4.18.y/kernel/fork.c' l='1906' u='c' c='copy_process'/>
