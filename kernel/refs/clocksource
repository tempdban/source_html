<def f='linux-4.14.y/include/linux/clocksource.h' l='80' ll='110'/>
<size>176</size>
<doc f='linux-4.14.y/include/linux/clocksource.h' l='30'>/**
 * struct clocksource - hardware abstraction for a free running counter
 *	Provides mostly state-free accessors to the underlying hardware.
 *	This is the structure used for system time.
 *
 * @name:		ptr to clocksource name
 * @list:		list head for registration
 * @rating:		rating value for selection (higher is better)
 *			To avoid rating inflation the following
 *			list should give you a guide as to how
 *			to assign your clocksource a rating
 *			1-99: Unfit for real use
 *				Only available for bootup and testing purposes.
 *			100-199: Base level usability.
 *				Functional for real use, but not desired.
 *			200-299: Good.
 *				A correct and usable clocksource.
 *			300-399: Desired.
 *				A reasonably fast and accurate clocksource.
 *			400-499: Perfect
 *				The ideal clocksource. A must-use where
 *				available.
 * @read:		returns a cycle value, passes clocksource as argument
 * @enable:		optional function to enable the clocksource
 * @disable:		optional function to disable the clocksource
 * @mask:		bitmask for two&apos;s complement
 *			subtraction of non 64 bit counters
 * @mult:		cycle to nanosecond multiplier
 * @shift:		cycle to nanosecond divisor (power of two)
 * @max_idle_ns:	max idle time permitted by the clocksource (nsecs)
 * @maxadj:		maximum adjustment value to mult (~11%)
 * @max_cycles:		maximum safe cycle value which won&apos;t overflow on multiplication
 * @flags:		flags describing special properties
 * @archdata:		arch-specific data
 * @suspend:		suspend function for the clocksource, if necessary
 * @resume:		resume function for the clocksource, if necessary
 * @mark_unstable:	Optional function to inform the clocksource driver that
 *			the watchdog marked the clocksource unstable
 * @owner:		module reference, must be set by clocksource in modules
 *
 * Note: This struct is not used in hotpathes of the timekeeping code
 * because the timekeeper caches the hot path fields in its own data
 * structure, so no line cache alignment is required,
 *
 * The pointer to the clocksource itself is handed to the read
 * callback. If you need extra information there you can wrap struct
 * clocksource into your own struct. Depending on the amount of
 * information you need you should consider to cache line align that
 * structure.
 */</doc>
<mbr r='clocksource::read' o='0' t='u64 (*)(struct clocksource *)'/>
<mbr r='clocksource::mask' o='64' t='u64'/>
<mbr r='clocksource::mult' o='128' t='u32'/>
<mbr r='clocksource::shift' o='160' t='u32'/>
<mbr r='clocksource::max_idle_ns' o='192' t='u64'/>
<mbr r='clocksource::maxadj' o='256' t='u32'/>
<mbr r='clocksource::archdata' o='288' t='struct arch_clocksource_data'/>
<mbr r='clocksource::max_cycles' o='320' t='u64'/>
<mbr r='clocksource::name' o='384' t='const char *'/>
<mbr r='clocksource::list' o='448' t='struct list_head'/>
<mbr r='clocksource::rating' o='576' t='int'/>
<mbr r='clocksource::enable' o='640' t='int (*)(struct clocksource *)'/>
<mbr r='clocksource::disable' o='704' t='void (*)(struct clocksource *)'/>
<mbr r='clocksource::flags' o='768' t='unsigned long'/>
<mbr r='clocksource::suspend' o='832' t='void (*)(struct clocksource *)'/>
<mbr r='clocksource::resume' o='896' t='void (*)(struct clocksource *)'/>
<mbr r='clocksource::mark_unstable' o='960' t='void (*)(struct clocksource *)'/>
<mbr r='clocksource::tick_stable' o='1024' t='void (*)(struct clocksource *)'/>
<mbr r='clocksource::wd_list' o='1088' t='struct list_head'/>
<mbr r='clocksource::cs_last' o='1216' t='u64'/>
<mbr r='clocksource::wd_last' o='1280' t='u64'/>
<mbr r='clocksource::owner' o='1344' t='struct module *'/>
