<def f='linux-4.18.y/include/linux/mm_inline.h' l='21' ll='24' type='int page_is_file_cache(struct page * page)'/>
<use f='linux-4.18.y/include/linux/mm_inline.h' l='78' u='c' c='page_lru_base_type'/>
<doc f='linux-4.18.y/include/linux/mm_inline.h' l='8'>/**
 * page_is_file_cache - should the page be on a file LRU or anon LRU?
 * @page: the page to test
 *
 * Returns 1 if @page is page cache page backed by a regular filesystem,
 * or 0 if @page is anonymous, tmpfs or otherwise ram or swap backed.
 * Used by functions that manipulate the LRU lists, to sort a page
 * onto the right LRU list.
 *
 * We would like to get this info without a page flag, but the state
 * needs to survive until the page is last deleted from the LRU, which
 * could be as far down as __page_cache_release.
 */</doc>
<use f='linux-4.18.y/mm/mprotect.c' l='98' u='c' c='change_pte_range'/>
<use f='linux-4.18.y/mm/swap.c' l='278' u='c' c='__activate_page'/>
<use f='linux-4.18.y/mm/swap.c' l='394' u='c' c='mark_page_accessed'/>
<use f='linux-4.18.y/mm/swap.c' l='517' u='c' c='lru_deactivate_file_fn'/>
<use f='linux-4.18.y/mm/swap.c' l='897' u='c' c='__pagevec_lru_add_fn'/>
<use f='linux-4.18.y/include/trace/events/vmscan.h' l='31' u='c' c='trace_event_raw_event_mm_vmscan_writepage'/>
<use f='linux-4.18.y/include/trace/events/vmscan.h' l='31' u='c' c='perf_trace_mm_vmscan_writepage'/>
<use f='linux-4.18.y/mm/vmscan.c' l='780' u='c' c='__remove_mapping'/>
<use f='linux-4.18.y/mm/vmscan.c' l='904' u='c' c='page_check_dirty_writeback'/>
<use f='linux-4.18.y/mm/vmscan.c' l='1172' u='c' c='shrink_page_list'/>
<use f='linux-4.18.y/mm/vmscan.c' l='1353' u='c' c='reclaim_clean_pages_from_list'/>
<use f='linux-4.18.y/mm/vmscan.c' l='1972' u='c' c='shrink_active_list'/>
