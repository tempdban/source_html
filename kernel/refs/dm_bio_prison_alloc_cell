<dec f='linux-4.14.y/drivers/md/dm-bio-prison-v1.h' l='59' type='struct dm_bio_prison_cell * dm_bio_prison_alloc_cell(struct dm_bio_prison * prison, gfp_t gfp)'/>
<def f='linux-4.14.y/drivers/md/dm-bio-prison-v1.c' l='62' ll='65' type='struct dm_bio_prison_cell * dm_bio_prison_alloc_cell(struct dm_bio_prison * prison, gfp_t gfp)'/>
<dec f='linux-4.14.y/drivers/md/dm-bio-prison-v1.c' l='66' type='struct dm_bio_prison_cell * dm_bio_prison_alloc_cell(struct dm_bio_prison * , gfp_t )'/>
<use f='linux-4.14.y/drivers/md/dm-bio-prison-v1.c' l='66' c='dm_bio_prison_alloc_cell'/>
<use f='linux-4.14.y/drivers/md/dm-bio-prison-v1.c' l='66' u='a'/>
<use f='linux-4.14.y/drivers/md/dm-bio-prison-v1.c' l='66' u='a'/>
<doc f='linux-4.14.y/drivers/md/dm-bio-prison-v1.h' l='52'>/*
 * These two functions just wrap a mempool.  This is a transitory step:
 * Eventually all bio prison clients should manage their own cell memory.
 *
 * Like mempool_alloc(), dm_bio_prison_alloc_cell() can only fail if called
 * in interrupt context or passed GFP_NOWAIT.
 */</doc>
<use f='linux-4.14.y/drivers/md/dm-thin.c' l='414' u='c' c='bio_detain'/>
