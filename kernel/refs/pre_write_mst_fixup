<dec f='linux-4.14.y/fs/ntfs/ntfs.h' l='104' type='int pre_write_mst_fixup(NTFS_RECORD * b, const u32 size)'/>
<use f='linux-4.14.y/fs/ntfs/aops.c' l='1167' u='c' c='ntfs_write_mst_block'/>
<use f='linux-4.14.y/fs/ntfs/mft.c' l='773' u='c' c='write_mft_record_nolock'/>
<def f='linux-4.14.y/fs/ntfs/mst.c' l='123' ll='169' type='int pre_write_mst_fixup(NTFS_RECORD * b, const u32 size)'/>
<doc f='linux-4.14.y/fs/ntfs/mst.c' l='102'>/**
 * pre_write_mst_fixup - apply multi sector transfer protection
 * @b:		pointer to the data to protect
 * @size:	size in bytes of @b
 *
 * Perform the necessary pre write multi sector transfer fixup on the data
 * pointer to by @b of @size.
 *
 * Return 0 if fixup applied (success) or -EINVAL if no fixup was performed
 * (assumed not needed). This is in contrast to post_read_mst_fixup() above.
 *
 * NOTE: We consider the absence / invalidity of an update sequence array to
 * mean that the structure is not subject to protection and hence doesn&apos;t need
 * to be fixed up. This means that you have to create a valid update sequence
 * array header in the ntfs record before calling this function, otherwise it
 * will fail (the header needs to contain the position of the update sequence
 * array together with the number of elements in the array). You also need to
 * initialise the update sequence number before calling this function
 * otherwise a random word will be used (whatever was in the record at that
 * position at that time).
 */</doc>
