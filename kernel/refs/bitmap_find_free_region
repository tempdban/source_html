<dec f='linux-4.18.y/include/linux/bitmap.h' l='183' type='int bitmap_find_free_region(unsigned long * bitmap, unsigned int bits, int order)'/>
<use f='linux-4.18.y/drivers/iommu/intel_irq_remapping.c' l='128' u='c' c='alloc_irte'/>
<def f='linux-4.18.y/lib/bitmap.c' l='1055' ll='1066' type='int bitmap_find_free_region(unsigned long * bitmap, unsigned int bits, int order)'/>
<dec f='linux-4.18.y/lib/bitmap.c' l='1067' type='int bitmap_find_free_region(unsigned long * , unsigned int , int )'/>
<use f='linux-4.18.y/lib/bitmap.c' l='1067' c='bitmap_find_free_region'/>
<use f='linux-4.18.y/lib/bitmap.c' l='1067' u='a'/>
<use f='linux-4.18.y/lib/bitmap.c' l='1067' u='a'/>
<doc f='linux-4.18.y/lib/bitmap.c' l='1041'>/**
 * bitmap_find_free_region - find a contiguous aligned mem region
 *	@bitmap: array of unsigned longs corresponding to the bitmap
 *	@bits: number of bits in the bitmap
 *	@order: region size (log base 2 of number of bits) to find
 *
 * Find a region of free (zero) bits in a @bitmap of @bits bits and
 * allocate them (set them to one).  Only consider regions of length
 * a power (@order) of two, aligned to that power of two, which
 * makes the search algorithm much faster.
 *
 * Return the bit offset in bitmap of the allocated region,
 * or -errno on failure.
 */</doc>
