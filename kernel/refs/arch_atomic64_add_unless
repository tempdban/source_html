<def f='linux-4.18.y/arch/x86/include/asm/atomic64_64.h' l='200' ll='208' type='bool arch_atomic64_add_unless(atomic64_t * v, long a, long u)'/>
<use f='linux-4.18.y/include/asm-generic/atomic-instrumented.h' l='97' u='c' c='atomic64_add_unless'/>
<use f='linux-4.18.y/include/asm-generic/atomic-instrumented.h' l='211' macro='1' u='c'/>
<doc f='linux-4.18.y/arch/x86/include/asm/atomic64_64.h' l='191'>/**
 * arch_atomic64_add_unless - add unless the number is a given value
 * @v: pointer of type atomic64_t
 * @a: the amount to add to v...
 * @u: ...unless v is equal to u.
 *
 * Atomically adds @a to @v, so long as it was not @u.
 * Returns the old value of @v.
 */</doc>
<def f='linux-4.18.y/arch/x86/include/asm/atomic64_32.h' l='287' ll='296' type='int arch_atomic64_add_unless(atomic64_t * v, long long a, long long u)'/>
<doc f='linux-4.18.y/arch/x86/include/asm/atomic64_32.h' l='278'>/**
 * arch_atomic64_add_unless - add unless the number is a given value
 * @v: pointer of type atomic64_t
 * @a: the amount to add to v...
 * @u: ...unless v is equal to u.
 *
 * Atomically adds @a to @v, so long as it was not @u.
 * Returns non-zero if the add was done, zero otherwise.
 */</doc>
