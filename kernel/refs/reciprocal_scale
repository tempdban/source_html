<def f='linux-4.18.y/include/linux/kernel.h' l='278' ll='281' type='u32 reciprocal_scale(u32 val, u32 ep_ro)'/>
<doc f='linux-4.18.y/include/linux/kernel.h' l='264'>/**
 * reciprocal_scale - &quot;scale&quot; a value into range [0, ep_ro)
 * @val: value
 * @ep_ro: right open interval endpoint
 *
 * Perform a &quot;reciprocal multiplication&quot; in order to &quot;scale&quot; a value into
 * range [0, @ep_ro), where the upper interval endpoint is right-open.
 * This is useful, e.g. for accessing a index of an array containing
 * @ep_ro elements, for example. Think of it as sort of modulus, only that
 * the result isn&apos;t that of modulo. ;) Note that if initial input is a
 * small value, then result will return 0.
 *
 * Return: a result based on @val in interval [0, @ep_ro).
 */</doc>
<use f='linux-4.18.y/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c' l='8212' u='c' c='ixgbe_select_queue'/>
<use f='linux-4.18.y/net/core/dev.c' l='2638' u='c' c='skb_tx_hash'/>
<use f='linux-4.18.y/net/core/dev.c' l='3401' u='c' c='get_xps_queue'/>
<use f='linux-4.18.y/net/core/dev.c' l='3822' u='c' c='get_rps_cpu'/>
<use f='linux-4.18.y/net/core/sock_reuseport.c' l='246' u='c' c='reuseport_select_sock'/>
<use f='linux-4.18.y/include/net/netfilter/nf_queue.h' l='106' u='c' c='nfqueue_hash'/>
<use f='linux-4.18.y/include/net/netfilter/nf_queue.h' l='110' u='c' c='nfqueue_hash'/>
<use f='linux-4.18.y/include/net/netfilter/nf_queue.h' l='114' u='c' c='nfqueue_hash'/>
<use f='linux-4.18.y/net/ipv4/udp.c' l='257' u='c' c='udp_lib_get_port'/>
<use f='linux-4.18.y/net/netfilter/nf_conntrack_core.c' l='209' u='c' c='scale_hash'/>
<use f='linux-4.18.y/net/netfilter/nf_conntrack_core.c' l='216' u='c' c='__hash_conntrack'/>
<use f='linux-4.18.y/net/netfilter/nf_conntrack_core.c' l='533' u='c' c='____nf_conntrack_find'/>
<use f='linux-4.18.y/net/netfilter/nf_conntrack_core.c' l='942' u='c' c='early_drop'/>
<use f='linux-4.18.y/net/netfilter/nf_conntrack_expect.c' l='92' u='c' c='nf_ct_expect_dst_hash'/>
<use f='linux-4.18.y/net/netfilter/nf_nat_core.c' l='151' u='c' c='hash_by_src'/>
<use f='linux-4.18.y/net/netfilter/nf_nat_core.c' l='301' u='c' c='find_best_ips_proto'/>
<use f='linux-4.18.y/net/netfilter/nf_nat_core.c' l='301' u='c' c='find_best_ips_proto'/>
<use f='linux-4.18.y/net/netfilter/nf_nat_core.c' l='301' u='c' c='find_best_ips_proto'/>
<use f='linux-4.18.y/net/netfilter/nf_nat_core.c' l='301' u='c' c='find_best_ips_proto'/>
<use f='linux-4.18.y/net/netfilter/nf_nat_core.c' l='301' u='c' c='find_best_ips_proto'/>
<use f='linux-4.18.y/net/netfilter/nf_nat_core.c' l='301' u='c' c='find_best_ips_proto'/>
<use f='linux-4.18.y/net/netfilter/nft_hash.c' l='39' u='c' c='nft_jhash_eval'/>
<use f='linux-4.18.y/net/netfilter/nft_hash.c' l='56' u='c' c='nft_jhash_map_eval'/>
<use f='linux-4.18.y/net/netfilter/nft_hash.c' l='82' u='c' c='nft_symhash_eval'/>
<use f='linux-4.18.y/net/netfilter/nft_hash.c' l='98' u='c' c='nft_symhash_map_eval'/>
<use f='linux-4.18.y/net/netfilter/nft_numgen.c' l='173' u='c' c='nft_ng_random_gen'/>
<use f='linux-4.18.y/net/netfilter/xt_HMARK.c' l='131' u='c' c='hmark_hash'/>
<use f='linux-4.18.y/net/netfilter/xt_cluster.c' l='59' u='c' c='xt_cluster_hash'/>
<use f='linux-4.18.y/net/netfilter/xt_hashlimit.c' l='188' u='c' c='hash_dst'/>
<use f='linux-4.18.y/net/packet/af_packet.c' l='1314' u='c' c='fanout_demux_hash'/>
