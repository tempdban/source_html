<dec f='linux-4.14.y/include/drm/drm_gem.h' l='300' type='struct page ** drm_gem_get_pages(struct drm_gem_object * obj)'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='543' ll='587' type='struct page ** drm_gem_get_pages(struct drm_gem_object * obj)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='588' type='struct page ** drm_gem_get_pages(struct drm_gem_object * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='588' c='drm_gem_get_pages'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='588' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='588' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_gem.c' l='522'>/**
 * drm_gem_get_pages - helper to allocate backing pages for a GEM object
 * from shmem
 * @obj: obj in question
 *
 * This reads the page-array of the shmem-backing storage of the given gem
 * object. An array of pages is returned. If a page is not allocated or
 * swapped-out, this will allocate/swap-in the required pages. Note that the
 * whole object is covered by the page-array and pinned in memory.
 *
 * Use drm_gem_put_pages() to release the array and unpin all pages.
 *
 * This uses the GFP-mask set on the shmem-mapping (see mapping_set_gfp_mask()).
 * If you require other GFP-masks, you have to do those allocations yourself.
 *
 * Note that you are not allowed to change gfp-zones during runtime. That is,
 * shmem_read_mapping_page_gfp() must be called with the same gfp_zone(gfp) as
 * set during initialization. If you have special zone constraints, set them
 * after drm_gem_init_object() via mapping_set_gfp_mask(). shmem-core takes care
 * to keep pages in the required zone during swap-in.
 */</doc>
