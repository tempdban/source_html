<dec f='linux-4.18.y/include/linux/mm.h' l='733' type='int finish_mkwrite_fault(struct vm_fault * vmf)'/>
<def f='linux-4.18.y/mm/memory.c' l='2650' ll='2665' type='int finish_mkwrite_fault(struct vm_fault * vmf)'/>
<use f='linux-4.18.y/mm/memory.c' l='2683' u='c' c='wp_pfn_shared'/>
<use f='linux-4.18.y/mm/memory.c' l='2706' u='c' c='wp_page_shared'/>
<doc f='linux-4.18.y/mm/memory.c' l='2635'>/**
 * finish_mkwrite_fault - finish page fault for a shared mapping, making PTE
 *			  writeable once the page is prepared
 *
 * @vmf: structure describing the fault
 *
 * This function handles all that is needed to finish a write page fault in a
 * shared mapping due to PTE being read-only once the mapped page is prepared.
 * It handles locking of PTE and modifying it. The function returns
 * VM_FAULT_WRITE on success, 0 when PTE got changed before we acquired PTE
 * lock.
 *
 * The function expects the page to be locked or other protection against
 * concurrent faults / writeback (such as DAX radix tree locks).
 */</doc>
