<def f='linux-4.18.y/include/linux/if_vlan.h' l='407' ll='420' type='struct sk_buff * vlan_insert_inner_tag(struct sk_buff * skb, __be16 vlan_proto, u16 vlan_tci, unsigned int mac_len)'/>
<use f='linux-4.18.y/include/linux/if_vlan.h' l='439' u='c' c='vlan_insert_tag'/>
<doc f='linux-4.18.y/include/linux/if_vlan.h' l='392'>/**
 * vlan_insert_inner_tag - inner VLAN tag inserting
 * @skb: skbuff to tag
 * @vlan_proto: VLAN encapsulation protocol
 * @vlan_tci: VLAN TCI to insert
 * @mac_len: MAC header length including outer vlan headers
 *
 * Inserts the VLAN tag into @skb as part of the payload at offset mac_len
 * Returns a VLAN tagged skb. If a new skb is created, @skb is freed.
 *
 * Following the skb_unshare() example, in case of error, the calling function
 * doesn&apos;t have to worry about freeing the original skb.
 *
 * Does not change skb-&gt;protocol so this function can be used during receive.
 */</doc>
