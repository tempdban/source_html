<dec f='linux-4.18.y/include/linux/skbuff.h' l='1826' type='void skb_queue_tail(struct sk_buff_head * list, struct sk_buff * newsk)'/>
<doc f='linux-4.18.y/include/linux/skbuff.h' l='1816'>/**
 *	__skb_queue_tail - queue a buffer at the list tail
 *	@list: list to use
 *	@newsk: buffer to queue
 *
 *	Queue a buffer at the end of a list. This function takes no locks
 *	and you must therefore hold required locks before calling it.
 *
 *	A buffer cannot be placed on two lists at the same time.
 */</doc>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_eem.c' l='514' u='c' c='eem_unwrap'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/f_ncm.c' l='1296' u='c' c='ncm_unwrap_ntb'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/rndis.c' l='1080' u='c' c='rndis_rm_hdr'/>
<use f='linux-4.18.y/drivers/usb/gadget/function/u_ether.c' l='277' u='c' c='rx_complete'/>
<use f='linux-4.18.y/kernel/audit.c' l='593' u='c' c='kauditd_hold_skb'/>
<use f='linux-4.18.y/kernel/audit.c' l='616' u='c' c='kauditd_retry_skb'/>
<use f='linux-4.18.y/kernel/audit.c' l='2355' u='c' c='audit_log_end'/>
<use f='linux-4.18.y/kernel/auditfilter.c' l='1079' u='c' c='audit_list_rules'/>
<use f='linux-4.18.y/kernel/auditfilter.c' l='1085' u='c' c='audit_list_rules'/>
<def f='linux-4.18.y/net/core/skbuff.c' l='2909' ll='2916' type='void skb_queue_tail(struct sk_buff_head * list, struct sk_buff * newsk)'/>
<dec f='linux-4.18.y/net/core/skbuff.c' l='2917' type='void skb_queue_tail(struct sk_buff_head * , struct sk_buff * )'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='2917' c='skb_queue_tail'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='2917' u='a'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='2917' u='a'/>
<use f='linux-4.18.y/net/core/skbuff.c' l='4213' u='c' c='sock_queue_err_skb'/>
<doc f='linux-4.18.y/net/core/skbuff.c' l='2898'>/**
 *	skb_queue_tail - queue a buffer at the list tail
 *	@list: list to use
 *	@newsk: buffer to queue
 *
 *	Queue a buffer at the tail of the list. This function takes the
 *	list lock and can be used safely with other locking &amp;sk_buff functions
 *	safely.
 *
 *	A buffer cannot be placed on two lists at the same time.
 */</doc>
<use f='linux-4.18.y/net/netlink/af_netlink.c' l='1263' u='c' c='__netlink_sendskb'/>
<use f='linux-4.18.y/net/unix/af_unix.c' l='1797' u='c' c='unix_dgram_sendmsg'/>
<use f='linux-4.18.y/net/unix/af_unix.c' l='1899' u='c' c='unix_stream_sendmsg'/>
