<dec f='linux-4.18.y/include/scsi/scsi_transport_fc.h' l='806' type='struct fc_vport * fc_vport_create(struct Scsi_Host * shost, int channel, struct fc_vport_identifiers * )'/>
<def f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='3471' ll='3481' type='struct fc_vport * fc_vport_create(struct Scsi_Host * shost, int channel, struct fc_vport_identifiers * ids)'/>
<dec f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='3482' type='struct fc_vport * fc_vport_create(struct Scsi_Host * , int , struct fc_vport_identifiers * )'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='3482' c='fc_vport_create'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='3482' u='a'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='3482' u='a'/>
<doc f='linux-4.18.y/drivers/scsi/scsi_transport_fc.c' l='3461'>/**
 * fc_vport_create - Admin App or LLDD requests creation of a vport
 * @shost:	scsi host the virtual port is connected to.
 * @channel:	channel on shost port connected to.
 * @ids:	The world wide names, FC4 port roles, etc for
 *              the virtual port.
 *
 * Notes:
 *	This routine assumes no locks are held on entry.
 */</doc>
<doc f='linux-4.18.y/include/scsi/scsi_transport_fc.h' l='802'>/* Note: when specifying vendor_id to fc_host_post_vendor_event()
	 *   be sure to read the Vendor Type and ID formatting requirements
	 *   specified in scsi_netlink.h
	 */</doc>
