<dec f='linux-4.18.y/include/linux/spi/spi.h' l='638' type='int devm_spi_register_controller(struct device * dev, struct spi_controller * ctlr)'/>
<def f='linux-4.18.y/drivers/spi/spi.c' l='2262' ll='2281' type='int devm_spi_register_controller(struct device * dev, struct spi_controller * ctlr)'/>
<dec f='linux-4.18.y/drivers/spi/spi.c' l='2282' type='int devm_spi_register_controller(struct device * , struct spi_controller * )'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2282' c='devm_spi_register_controller'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2282' u='a'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='2282' u='a'/>
<doc f='linux-4.18.y/drivers/spi/spi.c' l='2249'>/**
 * devm_spi_register_controller - register managed SPI master or slave
 *	controller
 * @dev:    device managing SPI controller
 * @ctlr: initialized controller, originally from spi_alloc_master() or
 *	spi_alloc_slave()
 * Context: can sleep
 *
 * Register a SPI device as with spi_register_controller() which will
 * automatically be unregistered and freed.
 *
 * Return: zero on success, else a negative error code.
 */</doc>
