<dec f='linux-4.18.y/include/linux/acpi.h' l='526' type='acpi_status acpi_pci_osc_control_set(acpi_handle handle, u32 * mask, u32 req)'/>
<def f='linux-4.18.y/drivers/acpi/pci_root.c' l='369' ll='421' type='acpi_status acpi_pci_osc_control_set(acpi_handle handle, u32 * mask, u32 req)'/>
<dec f='linux-4.18.y/drivers/acpi/pci_root.c' l='422' type='acpi_status acpi_pci_osc_control_set(acpi_handle , u32 * , u32 )'/>
<use f='linux-4.18.y/drivers/acpi/pci_root.c' l='422' c='acpi_pci_osc_control_set'/>
<use f='linux-4.18.y/drivers/acpi/pci_root.c' l='422' u='a'/>
<use f='linux-4.18.y/drivers/acpi/pci_root.c' l='422' u='a'/>
<use f='linux-4.18.y/drivers/acpi/pci_root.c' l='496' u='c' c='negotiate_os_control'/>
<doc f='linux-4.18.y/drivers/acpi/pci_root.c' l='354'>/**
 * acpi_pci_osc_control_set - Request control of PCI root _OSC features.
 * @handle: ACPI handle of a PCI root bridge (or PCIe Root Complex).
 * @mask: Mask of _OSC bits to request control of, place to store control mask.
 * @req: Mask of _OSC bits the control of is essential to the caller.
 *
 * Run _OSC query for @mask and if that is successful, compare the returned
 * mask of control bits with @req.  If all of the @req bits are set in the
 * returned mask, run _OSC request for it.
 *
 * The variable at the @mask address may be modified regardless of whether or
 * not the function returns success.  On success it will contain the mask of
 * _OSC bits the BIOS has granted control of, but its contents are meaningless
 * on failure.
 **/</doc>
