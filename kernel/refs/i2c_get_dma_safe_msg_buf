<dec f='linux-4.18.y/include/linux/i2c.h' l='861' type='u8 * i2c_get_dma_safe_msg_buf(struct i2c_msg * msg, unsigned int threshold)'/>
<def f='linux-4.18.y/drivers/i2c/i2c-core-base.c' l='2265' ll='2280' type='u8 * i2c_get_dma_safe_msg_buf(struct i2c_msg * msg, unsigned int threshold)'/>
<dec f='linux-4.18.y/drivers/i2c/i2c-core-base.c' l='2281' type='u8 * i2c_get_dma_safe_msg_buf(struct i2c_msg * , unsigned int )'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-base.c' l='2281' c='i2c_get_dma_safe_msg_buf'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-base.c' l='2281' u='a'/>
<use f='linux-4.18.y/drivers/i2c/i2c-core-base.c' l='2281' u='a'/>
<doc f='linux-4.18.y/drivers/i2c/i2c-core-base.c' l='2254'>/**
 * i2c_get_dma_safe_msg_buf() - get a DMA safe buffer for the given i2c_msg
 * @msg: the message to be checked
 * @threshold: the minimum number of bytes for which using DMA makes sense
 *
 * Return: NULL if a DMA safe buffer was not obtained. Use msg-&gt;buf with PIO.
 *	   Or a valid pointer to be used with DMA. After use, release it by
 *	   calling i2c_release_dma_safe_msg_buf().
 *
 * This function must only be called from process context!
 */</doc>
