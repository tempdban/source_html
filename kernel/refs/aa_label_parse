<dec f='linux-4.14.y/security/apparmor/include/label.h' l='330' type='struct aa_label * aa_label_parse(struct aa_label * base, const char * str, gfp_t gfp, bool create, bool force_stack)'/>
<use f='linux-4.14.y/security/apparmor/apparmorfs.c' l='683' u='c' c='query_data'/>
<use f='linux-4.14.y/security/apparmor/apparmorfs.c' l='779' u='c' c='query_label'/>
<use f='linux-4.14.y/security/apparmor/domain.c' l='400' u='c' c='x_table_lookup'/>
<use f='linux-4.14.y/security/apparmor/domain.c' l='478' u='c' c='x_to_label'/>
<use f='linux-4.14.y/security/apparmor/domain.c' l='1192' u='c' c='aa_change_profile'/>
<def f='linux-4.14.y/security/apparmor/label.c' l='1856' ll='1931' type='struct aa_label * aa_label_parse(struct aa_label * base, const char * str, gfp_t gfp, bool create, bool force_stack)'/>
<doc f='linux-4.14.y/security/apparmor/label.c' l='1845'>/**
 * aa_label_parse - parse, validate and convert a text string to a label
 * @base: base label to use for lookups (NOT NULL)
 * @str: null terminated text string (NOT NULL)
 * @gfp: allocation type
 * @create: true if should create compound labels if they don&apos;t exist
 * @force_stack: true if should stack even if no leading &amp;
 *
 * Returns: the matching refcounted label if present
 *     else ERRPTR
 */</doc>
