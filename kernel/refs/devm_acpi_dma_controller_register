<dec f='linux-4.14.y/include/linux/acpi_dma.h' l='67' type='int devm_acpi_dma_controller_register(struct device * dev, struct dma_chan *(*)(struct acpi_dma_spec *, struct acpi_dma *) acpi_dma_xlate, void * data)'/>
<def f='linux-4.14.y/drivers/dma/acpi-dma.c' l='239' ll='258' type='int devm_acpi_dma_controller_register(struct device * dev, struct dma_chan *(*)(struct acpi_dma_spec *, struct acpi_dma *) acpi_dma_xlate, void * data)'/>
<dec f='linux-4.14.y/drivers/dma/acpi-dma.c' l='259' type='int devm_acpi_dma_controller_register(struct device * , struct dma_chan *(*)(struct acpi_dma_spec *, struct acpi_dma *) , void * )'/>
<use f='linux-4.14.y/drivers/dma/acpi-dma.c' l='259' c='devm_acpi_dma_controller_register'/>
<use f='linux-4.14.y/drivers/dma/acpi-dma.c' l='259' u='a'/>
<use f='linux-4.14.y/drivers/dma/acpi-dma.c' l='259' u='a'/>
<doc f='linux-4.14.y/drivers/dma/acpi-dma.c' l='226'>/**
 * devm_acpi_dma_controller_register - resource managed acpi_dma_controller_register()
 * @dev:		device that is registering this DMA controller
 * @acpi_dma_xlate:	translation function
 * @data		pointer to controller specific data
 *
 * Managed acpi_dma_controller_register(). DMA controller registered by this
 * function are automatically freed on driver detach. See
 * acpi_dma_controller_register() for more information.
 *
 * Return:
 * 0 on success or appropriate errno value on error.
 */</doc>
