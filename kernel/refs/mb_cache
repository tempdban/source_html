<def f='linux-4.14.y/fs/mbcache.c' l='27' ll='42'/>
<size>152</size>
<doc f='linux-4.14.y/fs/mbcache.c' l='10'>/*
 * Mbcache is a simple key-value store. Keys need not be unique, however
 * key-value pairs are expected to be unique (we use this fact in
 * mb_cache_entry_delete()).
 *
 * Ext2 and ext4 use this cache for deduplication of extended attribute blocks.
 * Ext4 also uses it for deduplication of xattr values stored in inodes.
 * They use hash of data as a key and provide a value that may represent a
 * block or inode number. That&apos;s why keys need not be unique (hash of different
 * data may be the same). However user provided value always uniquely
 * identifies a cache entry.
 *
 * We provide functions for creation and removal of entries, search by key,
 * and a special &quot;delete entry with given key-value pair&quot; operation. Fixed
 * size hash table is used for fast key lookups.
 */</doc>
<mbr r='mb_cache::c_hash' o='0' t='struct hlist_bl_head *'/>
<mbr r='mb_cache::c_bucket_bits' o='64' t='int'/>
<mbr r='mb_cache::c_max_entries' o='128' t='unsigned long'/>
<mbr r='mb_cache::c_list_lock' o='192' t='spinlock_t'/>
<mbr r='mb_cache::c_list' o='256' t='struct list_head'/>
<mbr r='mb_cache::c_entry_count' o='384' t='unsigned long'/>
<mbr r='mb_cache::c_shrink' o='448' t='struct shrinker'/>
<mbr r='mb_cache::c_shrink_work' o='960' t='struct work_struct'/>
<def f='linux-4.14.y/fs/mbcache.c' l='27' ll='42'/>
<size>152</size>
<doc f='linux-4.14.y/fs/mbcache.c' l='10'>/*
 * Mbcache is a simple key-value store. Keys need not be unique, however
 * key-value pairs are expected to be unique (we use this fact in
 * mb_cache_entry_delete()).
 *
 * Ext2 and ext4 use this cache for deduplication of extended attribute blocks.
 * Ext4 also uses it for deduplication of xattr values stored in inodes.
 * They use hash of data as a key and provide a value that may represent a
 * block or inode number. That&apos;s why keys need not be unique (hash of different
 * data may be the same). However user provided value always uniquely
 * identifies a cache entry.
 *
 * We provide functions for creation and removal of entries, search by key,
 * and a special &quot;delete entry with given key-value pair&quot; operation. Fixed
 * size hash table is used for fast key lookups.
 */</doc>
<mbr r='mb_cache::c_hash' o='0' t='struct hlist_bl_head *'/>
<mbr r='mb_cache::c_bucket_bits' o='64' t='int'/>
<mbr r='mb_cache::c_max_entries' o='128' t='unsigned long'/>
<mbr r='mb_cache::c_list_lock' o='192' t='spinlock_t'/>
<mbr r='mb_cache::c_list' o='256' t='struct list_head'/>
<mbr r='mb_cache::c_entry_count' o='384' t='unsigned long'/>
<mbr r='mb_cache::c_shrink' o='448' t='struct shrinker'/>
<mbr r='mb_cache::c_shrink_work' o='960' t='struct work_struct'/>
