<dec f='linux-4.18.y/include/linux/usb/hcd.h' l='470' type='int usb_hcd_pci_probe(struct pci_dev * dev, const struct pci_device_id * id)'/>
<def f='linux-4.18.y/drivers/usb/core/hcd-pci.c' l='172' ll='298' type='int usb_hcd_pci_probe(struct pci_dev * dev, const struct pci_device_id * id)'/>
<dec f='linux-4.18.y/drivers/usb/core/hcd-pci.c' l='299' type='int usb_hcd_pci_probe(struct pci_dev * , const struct pci_device_id * )'/>
<use f='linux-4.18.y/drivers/usb/core/hcd-pci.c' l='299' c='usb_hcd_pci_probe'/>
<use f='linux-4.18.y/drivers/usb/core/hcd-pci.c' l='299' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/hcd-pci.c' l='299' u='a'/>
<doc f='linux-4.18.y/drivers/usb/core/hcd-pci.c' l='158'>/**
 * usb_hcd_pci_probe - initialize PCI-based HCDs
 * @dev: USB Host Controller being probed
 * @id: pci hotplug id connecting controller to HCD framework
 * Context: !in_interrupt()
 *
 * Allocates basic PCI resources for this USB host controller, and
 * then invokes the start() method for the HCD associated with it
 * through the hotplug entry&apos;s driver_data.
 *
 * Store this function in the HCD&apos;s struct pci_driver as probe().
 *
 * Return: 0 if successful.
 */</doc>
<use f='linux-4.18.y/drivers/usb/host/ehci-pci.c' l='363' u='c' c='ehci_pci_probe'/>
<use f='linux-4.18.y/drivers/usb/host/ohci-pci.c' l='294'/>
<use f='linux-4.18.y/drivers/usb/host/ohci-pci.c' l='294'/>
<use f='linux-4.18.y/drivers/usb/host/xhci-pci.c' l='300' u='c' c='xhci_pci_probe'/>
