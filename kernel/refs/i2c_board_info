<def f='linux-4.14.y/include/linux/i2c.h' l='327' ll='339'/>
<size>80</size>
<doc f='linux-4.14.y/include/linux/i2c.h' l='302'>/**
 * struct i2c_board_info - template for device creation
 * @type: chip type, to initialize i2c_client.name
 * @flags: to initialize i2c_client.flags
 * @addr: stored in i2c_client.addr
 * @platform_data: stored in i2c_client.dev.platform_data
 * @archdata: copied into i2c_client.dev.archdata
 * @of_node: pointer to OpenFirmware device node
 * @fwnode: device node supplied by the platform firmware
 * @properties: additional device properties for the device
 * @resources: resources associated with the device
 * @num_resources: number of resources in the @resources array
 * @irq: stored in i2c_client.irq
 *
 * I2C doesn&apos;t actually support hardware probing, although controllers and
 * devices may be able to use I2C_SMBUS_QUICK to tell whether or not there&apos;s
 * a device at a given address.  Drivers commonly need more information than
 * that, such as chip type, configuration, associated IRQ, and so on.
 *
 * i2c_board_info is used to build tables of information listing I2C devices
 * that are present.  This information is used to grow the driver model tree.
 * For mainboards this is done statically using i2c_register_board_info();
 * bus numbers identify adapters that aren&apos;t yet available.  For add-on boards,
 * i2c_new_device() does this dynamically with the adapter already known.
 */</doc>
<mbr r='i2c_board_info::type' o='0' t='char [20]'/>
<mbr r='i2c_board_info::flags' o='160' t='unsigned short'/>
<mbr r='i2c_board_info::addr' o='176' t='unsigned short'/>
<mbr r='i2c_board_info::platform_data' o='192' t='void *'/>
<mbr r='i2c_board_info::archdata' o='256' t='struct dev_archdata *'/>
<mbr r='i2c_board_info::of_node' o='320' t='struct device_node *'/>
<mbr r='i2c_board_info::fwnode' o='384' t='struct fwnode_handle *'/>
<mbr r='i2c_board_info::properties' o='448' t='const struct property_entry *'/>
<mbr r='i2c_board_info::resources' o='512' t='const struct resource *'/>
<mbr r='i2c_board_info::num_resources' o='576' t='unsigned int'/>
<mbr r='i2c_board_info::irq' o='608' t='int'/>
