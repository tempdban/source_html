<dec f='linux-4.14.y/include/linux/usb/hcd.h' l='415' type='int usb_hcd_link_urb_to_ep(struct usb_hcd * hcd, struct urb * urb)'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='503' u='c' c='rh_call_control'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='824' u='c' c='rh_queue_status'/>
<def f='linux-4.14.y/drivers/usb/core/hcd.c' l='1250' ll='1286' type='int usb_hcd_link_urb_to_ep(struct usb_hcd * hcd, struct urb * urb)'/>
<dec f='linux-4.14.y/drivers/usb/core/hcd.c' l='1287' type='int usb_hcd_link_urb_to_ep(struct usb_hcd * , struct urb * )'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='1287' c='usb_hcd_link_urb_to_ep'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='1287' u='a'/>
<use f='linux-4.14.y/drivers/usb/core/hcd.c' l='1287' u='a'/>
<doc f='linux-4.14.y/drivers/usb/core/hcd.c' l='1235'>/**
 * usb_hcd_link_urb_to_ep - add an URB to its endpoint queue
 * @hcd: host controller to which @urb was submitted
 * @urb: URB being submitted
 *
 * Host controller drivers should call this routine in their enqueue()
 * method.  The HCD&apos;s private spinlock must be held and interrupts must
 * be disabled.  The actions carried out here are required for URB
 * submission, as well as for endpoint shutdown and for usb_kill_urb.
 *
 * Return: 0 for no error, otherwise a negative error code (in which case
 * the enqueue() method must fail).  If no error occurs but enqueue() fails
 * anyway, it must call usb_hcd_unlink_urb_from_ep() before releasing
 * the private spinlock and returning.
 */</doc>
<use f='linux-4.14.y/drivers/usb/host/ehci-q.c' l='1135' u='c' c='submit_async'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-sched.c' l='950' u='c' c='intr_submit'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-sched.c' l='1980' u='c' c='itd_submit'/>
<use f='linux-4.14.y/drivers/usb/host/ehci-sched.c' l='2359' u='c' c='sitd_submit'/>
<use f='linux-4.14.y/drivers/usb/host/ohci-hcd.c' l='221' u='c' c='ohci_urb_enqueue'/>
<use f='linux-4.14.y/drivers/usb/host/xhci-ring.c' l='2963' u='c' c='prepare_transfer'/>
