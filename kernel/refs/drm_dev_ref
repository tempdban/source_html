<dec f='linux-4.14.y/include/drm/drm_drv.h' l='615' type='void drm_dev_ref(struct drm_device * dev)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='289' u='c' c='drm_minor_acquire'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='684' ll='688' type='void drm_dev_ref(struct drm_device * dev)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='689' type='void drm_dev_ref(struct drm_device * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='689' c='drm_dev_ref'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='689' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='689' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_drv.c' l='672'>/**
 * drm_dev_ref - Take reference of a DRM device
 * @dev: device to take reference of or NULL
 *
 * This increases the ref-count of @dev by one. You *must* already own a
 * reference when calling this. Use drm_dev_unref() to drop this reference
 * again.
 *
 * This function never fails. However, this function does not provide *any*
 * guarantee whether the device is alive or running. It only provides a
 * reference to the object and the memory associated with it.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_prime.c' l='321' u='c' c='drm_gem_dmabuf_export'/>
