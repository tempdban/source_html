<dec f='linux-4.14.y/include/drm/drm_auth.h' l='83' type='bool drm_is_current_master(struct drm_file * fpriv)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='174' u='c' c='drm_setmaster_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='212' u='c' c='drm_dropmaster_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='251' u='c' c='drm_master_release'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='289' ll='292' type='bool drm_is_current_master(struct drm_file * fpriv)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='293' type='bool drm_is_current_master(struct drm_file * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='293' c='drm_is_current_master'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='293' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='293' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='279'>/**
 * drm_is_current_master - checks whether @priv is the current master
 * @fpriv: DRM file private
 *
 * Checks whether @fpriv is current master on its device. This decides whether a
 * client is allowed to run DRM_MASTER IOCTLs.
 *
 * Most of the modern IOCTL which require DRM_MASTER are for kernel modesetting
 * - the current master is assumed to own the non-shareable display hardware.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_framebuffer.c' l='473' u='c' c='drm_mode_getfb'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_info.c' l='103' u='c' c='drm_clients_info'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='513' u='c' c='drm_ioctl_permit'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='225' u='c' c='drm_legacy_lock'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1068' u='c' c='vmw_master_check'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1134' u='c' c='vmw_generic_ioctl'/>
<dec f='linux-4.14.y/include/drm/drm_auth.h' l='83' type='bool drm_is_current_master(struct drm_file * fpriv)'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='174' u='c' c='drm_setmaster_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='212' u='c' c='drm_dropmaster_ioctl'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='251' u='c' c='drm_master_release'/>
<def f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='289' ll='292' type='bool drm_is_current_master(struct drm_file * fpriv)'/>
<dec f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='293' type='bool drm_is_current_master(struct drm_file * )'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='293' c='drm_is_current_master'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='293' u='a'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='293' u='a'/>
<doc f='linux-4.14.y/drivers/gpu/drm/drm_auth.c' l='279'>/**
 * drm_is_current_master - checks whether @priv is the current master
 * @fpriv: DRM file private
 *
 * Checks whether @fpriv is current master on its device. This decides whether a
 * client is allowed to run DRM_MASTER IOCTLs.
 *
 * Most of the modern IOCTL which require DRM_MASTER are for kernel modesetting
 * - the current master is assumed to own the non-shareable display hardware.
 */</doc>
<use f='linux-4.14.y/drivers/gpu/drm/drm_framebuffer.c' l='473' u='c' c='drm_mode_getfb'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_info.c' l='103' u='c' c='drm_clients_info'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_ioctl.c' l='513' u='c' c='drm_ioctl_permit'/>
<use f='linux-4.14.y/drivers/gpu/drm/drm_lock.c' l='225' u='c' c='drm_legacy_lock'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1068' u='c' c='vmw_master_check'/>
<use f='linux-4.14.y/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c' l='1134' u='c' c='vmw_generic_ioctl'/>
