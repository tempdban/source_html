<dec f='linux-4.18.y/include/linux/kthread.h' l='172' type='int kthread_worker_fn(void * worker_ptr)'/>
<use f='linux-4.18.y/drivers/block/loop.c' l='892' u='c' c='loop_kthread_worker_fn'/>
<use f='linux-4.18.y/drivers/md/dm-rq.c' l='724' u='r' c='dm_old_init_request_queue'/>
<use f='linux-4.18.y/drivers/spi/spi.c' l='1296' u='r' c='spi_init_queue'/>
<def f='linux-4.18.y/kernel/kthread.c' l='622' ll='667' type='int kthread_worker_fn(void * worker_ptr)'/>
<dec f='linux-4.18.y/kernel/kthread.c' l='668' type='int kthread_worker_fn(void * )'/>
<use f='linux-4.18.y/kernel/kthread.c' l='668' c='kthread_worker_fn'/>
<use f='linux-4.18.y/kernel/kthread.c' l='668' u='a'/>
<use f='linux-4.18.y/kernel/kthread.c' l='668' u='a'/>
<use f='linux-4.18.y/kernel/kthread.c' l='687' u='r' c='__kthread_create_worker'/>
<doc f='linux-4.18.y/kernel/kthread.c' l='607'>/**
 * kthread_worker_fn - kthread function to process kthread_worker
 * @worker_ptr: pointer to initialized kthread_worker
 *
 * This function implements the main cycle of kthread worker. It processes
 * work_list until it is stopped with kthread_stop(). It sleeps when the queue
 * is empty.
 *
 * The works are not allowed to keep any locks, disable preemption or interrupts
 * when they finish. There is defined a safe point for freezing when one work
 * finishes and before a new one is started.
 *
 * Also the works must not be handled by more than one worker at the same time,
 * see also kthread_queue_work().
 */</doc>
