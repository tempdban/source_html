<dec f='linux-4.18.y/include/linux/usb/hcd.h' l='496' type='void usb_hcd_poll_rh_status(struct usb_hcd * hcd)'/>
<def f='linux-4.18.y/drivers/usb/core/hcd.c' l='749' ll='789' type='void usb_hcd_poll_rh_status(struct usb_hcd * hcd)'/>
<dec f='linux-4.18.y/drivers/usb/core/hcd.c' l='790' type='void usb_hcd_poll_rh_status(struct usb_hcd * )'/>
<use f='linux-4.18.y/drivers/usb/core/hcd.c' l='790' c='usb_hcd_poll_rh_status'/>
<use f='linux-4.18.y/drivers/usb/core/hcd.c' l='790' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/hcd.c' l='790' u='a'/>
<use f='linux-4.18.y/drivers/usb/core/hcd.c' l='797' u='c' c='rh_timer_func'/>
<use f='linux-4.18.y/drivers/usb/core/hcd.c' l='2893' u='c' c='usb_add_hcd'/>
<doc f='linux-4.18.y/drivers/usb/core/hcd.c' l='741'>/*
 * Root Hub interrupt transfers are polled using a timer if the
 * driver requests it; otherwise the driver is responsible for
 * calling usb_hcd_poll_rh_status() when an event occurs.
 *
 * Completions are called in_interrupt(), but they may or may not
 * be in_irq().
 */</doc>
<use f='linux-4.18.y/drivers/usb/host/ehci-hcd.c' l='834' u='c' c='ehci_irq'/>
<use f='linux-4.18.y/drivers/usb/host/ohci-hcd.c' l='922' u='c' c='ohci_irq'/>
<use f='linux-4.18.y/drivers/usb/host/xhci-ring.c' l='1670' u='c' c='handle_port_status'/>
<use f='linux-4.18.y/drivers/usb/host/xhci.c' l='504' u='c' c='compliance_mode_recovery'/>
