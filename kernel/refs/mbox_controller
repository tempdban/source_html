<def f='linux-4.14.y/include/linux/mailbox_controller.h' l='74' ll='87'/>
<size>128</size>
<doc f='linux-4.14.y/include/linux/mailbox_controller.h' l='55'>/**
 * struct mbox_controller - Controller of a class of communication channels
 * @dev:		Device backing this controller
 * @ops:		Operators that work on each communication chan
 * @chans:		Array of channels
 * @num_chans:		Number of channels in the &apos;chans&apos; array.
 * @txdone_irq:		Indicates if the controller can report to API when
 *			the last transmitted data was read by the remote.
 *			Eg, if it has some TX ACK irq.
 * @txdone_poll:	If the controller can read but not report the TX
 *			done. Ex, some register shows the TX status but
 *			no interrupt rises. Ignored if &apos;txdone_irq&apos; is set.
 * @txpoll_period:	If &apos;txdone_poll&apos; is in effect, the API polls for
 *			last TX&apos;s status after these many millisecs
 * @of_xlate:		Controller driver specific mapping of channel via DT
 * @poll_hrt:		API private. hrtimer used to poll for TXDONE on all
 *			channels.
 * @node:		API private. To hook into list of controllers.
 */</doc>
<mbr r='mbox_controller::dev' o='0' t='struct device *'/>
<mbr r='mbox_controller::ops' o='64' t='const struct mbox_chan_ops *'/>
<mbr r='mbox_controller::chans' o='128' t='struct mbox_chan *'/>
<mbr r='mbox_controller::num_chans' o='192' t='int'/>
<mbr r='mbox_controller::txdone_irq' o='224' t='bool'/>
<mbr r='mbox_controller::txdone_poll' o='232' t='bool'/>
<mbr r='mbox_controller::txpoll_period' o='256' t='unsigned int'/>
<mbr r='mbox_controller::of_xlate' o='320' t='struct mbox_chan *(*)(struct mbox_controller *, const struct of_phandle_args *)'/>
<mbr r='mbox_controller::poll_hrt' o='384' t='struct hrtimer'/>
<mbr r='mbox_controller::node' o='896' t='struct list_head'/>
<def f='linux-4.14.y/include/linux/mailbox_controller.h' l='74' ll='87'/>
<size>128</size>
<doc f='linux-4.14.y/include/linux/mailbox_controller.h' l='55'>/**
 * struct mbox_controller - Controller of a class of communication channels
 * @dev:		Device backing this controller
 * @ops:		Operators that work on each communication chan
 * @chans:		Array of channels
 * @num_chans:		Number of channels in the &apos;chans&apos; array.
 * @txdone_irq:		Indicates if the controller can report to API when
 *			the last transmitted data was read by the remote.
 *			Eg, if it has some TX ACK irq.
 * @txdone_poll:	If the controller can read but not report the TX
 *			done. Ex, some register shows the TX status but
 *			no interrupt rises. Ignored if &apos;txdone_irq&apos; is set.
 * @txpoll_period:	If &apos;txdone_poll&apos; is in effect, the API polls for
 *			last TX&apos;s status after these many millisecs
 * @of_xlate:		Controller driver specific mapping of channel via DT
 * @poll_hrt:		API private. hrtimer used to poll for TXDONE on all
 *			channels.
 * @node:		API private. To hook into list of controllers.
 */</doc>
<mbr r='mbox_controller::dev' o='0' t='struct device *'/>
<mbr r='mbox_controller::ops' o='64' t='const struct mbox_chan_ops *'/>
<mbr r='mbox_controller::chans' o='128' t='struct mbox_chan *'/>
<mbr r='mbox_controller::num_chans' o='192' t='int'/>
<mbr r='mbox_controller::txdone_irq' o='224' t='bool'/>
<mbr r='mbox_controller::txdone_poll' o='232' t='bool'/>
<mbr r='mbox_controller::txpoll_period' o='256' t='unsigned int'/>
<mbr r='mbox_controller::of_xlate' o='320' t='struct mbox_chan *(*)(struct mbox_controller *, const struct of_phandle_args *)'/>
<mbr r='mbox_controller::poll_hrt' o='384' t='struct hrtimer'/>
<mbr r='mbox_controller::node' o='896' t='struct list_head'/>
