<dec f='linux-4.14.y/include/linux/security.h' l='81' type='int cap_ptrace_traceme(struct task_struct * parent)'/>
<def f='linux-4.14.y/security/commoncap.c' l='176' ll='193' type='int cap_ptrace_traceme(struct task_struct * parent)'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<doc f='linux-4.14.y/security/commoncap.c' l='163'>/**
 * cap_ptrace_traceme - Determine whether another process may trace the current
 * @parent: The task proposed to be the tracer
 *
 * If parent is in the same or an ancestor user_ns and has all current&apos;s
 * capabilities, then ptrace access is allowed.
 * If parent has the ptrace capability to current&apos;s user_ns, then ptrace
 * access is allowed.
 * Else denied.
 *
 * Determine whether the nominated task is permitted to trace the current
 * process, returning 0 if permission is granted, -ve if denied.
 */</doc>
<dec f='linux-4.14.y/include/linux/security.h' l='81' type='int cap_ptrace_traceme(struct task_struct * parent)'/>
<def f='linux-4.14.y/security/commoncap.c' l='176' ll='193' type='int cap_ptrace_traceme(struct task_struct * parent)'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<use f='linux-4.14.y/security/commoncap.c' l='1285'/>
<doc f='linux-4.14.y/security/commoncap.c' l='163'>/**
 * cap_ptrace_traceme - Determine whether another process may trace the current
 * @parent: The task proposed to be the tracer
 *
 * If parent is in the same or an ancestor user_ns and has all current&apos;s
 * capabilities, then ptrace access is allowed.
 * If parent has the ptrace capability to current&apos;s user_ns, then ptrace
 * access is allowed.
 * Else denied.
 *
 * Determine whether the nominated task is permitted to trace the current
 * process, returning 0 if permission is granted, -ve if denied.
 */</doc>
