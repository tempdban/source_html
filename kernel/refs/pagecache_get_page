<dec f='linux-4.14.y/include/linux/pagemap.h' l='260' type='struct page * pagecache_get_page(struct address_space * mapping, unsigned long offset, int fgp_flags, gfp_t cache_gfp_mask)'/>
<use f='linux-4.14.y/include/linux/pagemap.h' l='276' u='c' c='find_get_page'/>
<use f='linux-4.14.y/include/linux/pagemap.h' l='282' u='c' c='find_get_page_flags'/>
<use f='linux-4.14.y/include/linux/pagemap.h' l='301' u='c' c='find_lock_page'/>
<use f='linux-4.14.y/include/linux/pagemap.h' l='326' u='c' c='find_or_create_page'/>
<use f='linux-4.14.y/include/linux/pagemap.h' l='347' u='c' c='grab_cache_page_nowait'/>
<use f='linux-4.14.y/fs/f2fs/data.c' l='1955' u='c' c='f2fs_write_begin'/>
<use f='linux-4.14.y/fs/f2fs/gc.c' l='663' u='c' c='move_data_block'/>
<use f='linux-4.14.y/fs/f2fs/node.c' l='1240' u='c' c='flush_inline_data'/>
<def f='linux-4.14.y/mm/filemap.c' l='1436' ll='1499' type='struct page * pagecache_get_page(struct address_space * mapping, unsigned long offset, int fgp_flags, gfp_t gfp_mask)'/>
<dec f='linux-4.14.y/mm/filemap.c' l='1500' type='struct page * pagecache_get_page(struct address_space * , unsigned long , int , gfp_t )'/>
<use f='linux-4.14.y/mm/filemap.c' l='1500' c='pagecache_get_page'/>
<use f='linux-4.14.y/mm/filemap.c' l='1500' u='a'/>
<use f='linux-4.14.y/mm/filemap.c' l='1500' u='a'/>
<use f='linux-4.14.y/mm/filemap.c' l='2974' u='c' c='grab_cache_page_write_begin'/>
<doc f='linux-4.14.y/mm/filemap.c' l='1411'>/**
 * pagecache_get_page - find and get a page reference
 * @mapping: the address_space to search
 * @offset: the page index
 * @fgp_flags: PCG flags
 * @gfp_mask: gfp mask to use for the page cache data page allocation
 *
 * Looks up the page cache slot at @mapping &amp; @offset.
 *
 * PCG flags modify how the page is returned.
 *
 * @fgp_flags can be:
 *
 * - FGP_ACCESSED: the page will be marked accessed
 * - FGP_LOCK: Page is return locked
 * - FGP_CREAT: If page is not present then a new page is allocated using
 *   @gfp_mask and added to the page cache and the VM&apos;s LRU
 *   list. The page is returned locked and with an increased
 *   refcount. Otherwise, NULL is returned.
 *
 * If FGP_LOCK or FGP_CREAT are specified then the function may sleep even
 * if the GFP flags specified for FGP_CREAT are atomic.
 *
 * If there is a page cache page, it is returned with an increased refcount.
 */</doc>
