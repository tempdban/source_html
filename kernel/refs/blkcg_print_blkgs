<dec f='linux-4.14.y/include/linux/blk-cgroup.h' l='190' type='void blkcg_print_blkgs(struct seq_file * sf, struct blkcg * blkcg, u64 (*)(struct seq_file *, struct blkg_policy_data *, int) prfill, const struct blkcg_policy * pol, int data, bool show_total)'/>
<def f='linux-4.14.y/block/blk-cgroup.c' l='497' ll='517' type='void blkcg_print_blkgs(struct seq_file * sf, struct blkcg * blkcg, u64 (*)(struct seq_file *, struct blkg_policy_data *, int) prfill, const struct blkcg_policy * pol, int data, bool show_total)'/>
<dec f='linux-4.14.y/block/blk-cgroup.c' l='518' type='void blkcg_print_blkgs(struct seq_file * , struct blkcg * , u64 (*)(struct seq_file *, struct blkg_policy_data *, int) , const struct blkcg_policy * , int , bool )'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='518' c='blkcg_print_blkgs'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='518' u='a'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='518' u='a'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='624' u='c' c='blkg_print_stat_bytes'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='641' u='c' c='blkg_print_stat_ios'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='664' u='c' c='blkg_print_stat_bytes_recursive'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='679' u='c' c='blkg_print_stat_ios_recursive'/>
<doc f='linux-4.14.y/block/blk-cgroup.c' l='479'>/**
 * blkcg_print_blkgs - helper for printing per-blkg data
 * @sf: seq_file to print to
 * @blkcg: blkcg of interest
 * @prfill: fill function to print out a blkg
 * @pol: policy in question
 * @data: data to be passed to @prfill
 * @show_total: to print out sum of prfill return values or not
 *
 * This function invokes @prfill on each blkg of @blkcg if pd for the
 * policy specified by @pol exists.  @prfill is invoked with @sf, the
 * policy data and @data and the matching queue lock held.  If @show_total
 * is %true, the sum of the return values from @prfill is printed with
 * &quot;Total&quot; label at the end.
 *
 * This is to be used to construct print functions for
 * cftype-&gt;read_seq_string method.
 */</doc>
<dec f='linux-4.14.y/include/linux/blk-cgroup.h' l='190' type='void blkcg_print_blkgs(struct seq_file * sf, struct blkcg * blkcg, u64 (*)(struct seq_file *, struct blkg_policy_data *, int) prfill, const struct blkcg_policy * pol, int data, bool show_total)'/>
<def f='linux-4.14.y/block/blk-cgroup.c' l='497' ll='517' type='void blkcg_print_blkgs(struct seq_file * sf, struct blkcg * blkcg, u64 (*)(struct seq_file *, struct blkg_policy_data *, int) prfill, const struct blkcg_policy * pol, int data, bool show_total)'/>
<dec f='linux-4.14.y/block/blk-cgroup.c' l='518' type='void blkcg_print_blkgs(struct seq_file * , struct blkcg * , u64 (*)(struct seq_file *, struct blkg_policy_data *, int) , const struct blkcg_policy * , int , bool )'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='518' c='blkcg_print_blkgs'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='518' u='a'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='518' u='a'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='624' u='c' c='blkg_print_stat_bytes'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='641' u='c' c='blkg_print_stat_ios'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='664' u='c' c='blkg_print_stat_bytes_recursive'/>
<use f='linux-4.14.y/block/blk-cgroup.c' l='679' u='c' c='blkg_print_stat_ios_recursive'/>
<doc f='linux-4.14.y/block/blk-cgroup.c' l='479'>/**
 * blkcg_print_blkgs - helper for printing per-blkg data
 * @sf: seq_file to print to
 * @blkcg: blkcg of interest
 * @prfill: fill function to print out a blkg
 * @pol: policy in question
 * @data: data to be passed to @prfill
 * @show_total: to print out sum of prfill return values or not
 *
 * This function invokes @prfill on each blkg of @blkcg if pd for the
 * policy specified by @pol exists.  @prfill is invoked with @sf, the
 * policy data and @data and the matching queue lock held.  If @show_total
 * is %true, the sum of the return values from @prfill is printed with
 * &quot;Total&quot; label at the end.
 *
 * This is to be used to construct print functions for
 * cftype-&gt;read_seq_string method.
 */</doc>
