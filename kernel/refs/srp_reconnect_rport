<dec f='linux-4.18.y/include/scsi/scsi_transport_srp.h' l='117' type='int srp_reconnect_rport(struct srp_rport * rport)'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_srp.c' l='399' u='c' c='srp_reconnect_work'/>
<def f='linux-4.18.y/drivers/scsi/scsi_transport_srp.c' l='546' ll='598' type='int srp_reconnect_rport(struct srp_rport * rport)'/>
<dec f='linux-4.18.y/drivers/scsi/scsi_transport_srp.c' l='599' type='int srp_reconnect_rport(struct srp_rport * )'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_srp.c' l='599' c='srp_reconnect_rport'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_srp.c' l='599' u='a'/>
<use f='linux-4.18.y/drivers/scsi/scsi_transport_srp.c' l='599' u='a'/>
<doc f='linux-4.18.y/drivers/scsi/scsi_transport_srp.c' l='524'>/**
 * srp_reconnect_rport() - reconnect to an SRP target port
 * @rport: SRP target port.
 *
 * Blocks SCSI command queueing before invoking reconnect() such that
 * queuecommand() won&apos;t be invoked concurrently with reconnect() from outside
 * the SCSI EH. This is important since a reconnect() implementation may
 * reallocate resources needed by queuecommand().
 *
 * Notes:
 * - This function neither waits until outstanding requests have finished nor
 *   tries to abort these. It is the responsibility of the reconnect()
 *   function to finish outstanding commands before reconnecting to the target
 *   port.
 * - It is the responsibility of the caller to ensure that the resources
 *   reallocated by the reconnect() function won&apos;t be used while this function
 *   is in progress. One possible strategy is to invoke this function from
 *   the context of the SCSI EH thread only. Another possible strategy is to
 *   lock the rport mutex inside each SCSI LLD callback that can be invoked by
 *   the SCSI EH (the scsi_host_template.eh_*() functions and also the
 *   scsi_host_template.queuecommand() function).
 */</doc>
