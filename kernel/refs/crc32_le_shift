<dec f='linux-4.14.y/include/linux/crc32.h' l='32' type='u32 crc32_le_shift(u32 crc, size_t len)'/>
<use f='linux-4.14.y/include/linux/crc32.h' l='36' u='c' c='crc32_le_combine'/>
<doc f='linux-4.14.y/include/linux/crc32.h' l='14'>/**
 * crc32_le_combine - Combine two crc32 check values into one. For two
 * 		      sequences of bytes, seq1 and seq2 with lengths len1
 * 		      and len2, crc32_le() check values were calculated
 * 		      for each, crc1 and crc2.
 *
 * @crc1: crc32 of the first block
 * @crc2: crc32 of the second block
 * @len2: length of the second block
 *
 * Return: The crc32_le() check value of seq1 and seq2 concatenated,
 * 	   requiring only crc1, crc2, and len2. Note: If seq_full denotes
 * 	   the concatenated memory area of seq1 with seq2, and crc_full
 * 	   the crc32_le() value of seq_full, then crc_full ==
 * 	   crc32_le_combine(crc1, crc2, len2) when crc_full was seeded
 * 	   with the same initializer as crc1, and crc2 seed was 0. See
 * 	   also crc32_combine_test().
 */</doc>
<def f='linux-4.14.y/lib/crc32.c' l='269' ll='272' type='u32 crc32_le_shift(u32 crc, size_t len)'/>
<dec f='linux-4.14.y/lib/crc32.c' l='278' type='u32 crc32_le_shift(u32 , size_t )'/>
<use f='linux-4.14.y/lib/crc32.c' l='278' c='crc32_le_shift'/>
<use f='linux-4.14.y/lib/crc32.c' l='278' u='a'/>
<use f='linux-4.14.y/lib/crc32.c' l='278' u='a'/>
<dec f='linux-4.14.y/include/linux/crc32.h' l='32' type='u32 crc32_le_shift(u32 crc, size_t len)'/>
<use f='linux-4.14.y/include/linux/crc32.h' l='36' u='c' c='crc32_le_combine'/>
<doc f='linux-4.14.y/include/linux/crc32.h' l='14'>/**
 * crc32_le_combine - Combine two crc32 check values into one. For two
 * 		      sequences of bytes, seq1 and seq2 with lengths len1
 * 		      and len2, crc32_le() check values were calculated
 * 		      for each, crc1 and crc2.
 *
 * @crc1: crc32 of the first block
 * @crc2: crc32 of the second block
 * @len2: length of the second block
 *
 * Return: The crc32_le() check value of seq1 and seq2 concatenated,
 * 	   requiring only crc1, crc2, and len2. Note: If seq_full denotes
 * 	   the concatenated memory area of seq1 with seq2, and crc_full
 * 	   the crc32_le() value of seq_full, then crc_full ==
 * 	   crc32_le_combine(crc1, crc2, len2) when crc_full was seeded
 * 	   with the same initializer as crc1, and crc2 seed was 0. See
 * 	   also crc32_combine_test().
 */</doc>
<def f='linux-4.14.y/lib/crc32.c' l='269' ll='272' type='u32 crc32_le_shift(u32 crc, size_t len)'/>
<dec f='linux-4.14.y/lib/crc32.c' l='278' type='u32 crc32_le_shift(u32 , size_t )'/>
<use f='linux-4.14.y/lib/crc32.c' l='278' c='crc32_le_shift'/>
<use f='linux-4.14.y/lib/crc32.c' l='278' u='a'/>
<use f='linux-4.14.y/lib/crc32.c' l='278' u='a'/>
