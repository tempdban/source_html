<dec f='linux-4.14.y/include/linux/skbuff.h' l='4016' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * skb, unsigned int transport_len, __sum16 (*)(struct sk_buff *) skb_chkf)'/>
<def f='linux-4.14.y/net/core/skbuff.c' l='4710' ll='4740' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * skb, unsigned int transport_len, __sum16 (*)(struct sk_buff *) skb_chkf)'/>
<dec f='linux-4.14.y/net/core/skbuff.c' l='4741' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * , unsigned int , __sum16 (*)(struct sk_buff *) )'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4741' c='skb_checksum_trimmed'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4741' u='a'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4741' u='a'/>
<doc f='linux-4.14.y/net/core/skbuff.c' l='4695'>/**
 * skb_checksum_trimmed - validate checksum of an skb
 * @skb: the skb to check
 * @transport_len: the data length beyond the network header
 * @skb_chkf: checksum function to use
 *
 * Applies the given checksum function skb_chkf to the provided skb.
 * Returns a checked and maybe trimmed skb. Returns NULL on error.
 *
 * If the skb has data beyond the given transport length, then a
 * trimmed &amp; cloned skb is checked and returned.
 *
 * Caller needs to set the skb transport header and free any returned skb if it
 * differs from the provided skb.
 */</doc>
<use f='linux-4.14.y/net/ipv4/igmp.c' l='1536' u='c' c='__ip_mc_check_igmp'/>
<dec f='linux-4.14.y/include/linux/skbuff.h' l='4016' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * skb, unsigned int transport_len, __sum16 (*)(struct sk_buff *) skb_chkf)'/>
<def f='linux-4.14.y/net/core/skbuff.c' l='4710' ll='4740' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * skb, unsigned int transport_len, __sum16 (*)(struct sk_buff *) skb_chkf)'/>
<dec f='linux-4.14.y/net/core/skbuff.c' l='4741' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * , unsigned int , __sum16 (*)(struct sk_buff *) )'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4741' c='skb_checksum_trimmed'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4741' u='a'/>
<use f='linux-4.14.y/net/core/skbuff.c' l='4741' u='a'/>
<doc f='linux-4.14.y/net/core/skbuff.c' l='4695'>/**
 * skb_checksum_trimmed - validate checksum of an skb
 * @skb: the skb to check
 * @transport_len: the data length beyond the network header
 * @skb_chkf: checksum function to use
 *
 * Applies the given checksum function skb_chkf to the provided skb.
 * Returns a checked and maybe trimmed skb. Returns NULL on error.
 *
 * If the skb has data beyond the given transport length, then a
 * trimmed &amp; cloned skb is checked and returned.
 *
 * Caller needs to set the skb transport header and free any returned skb if it
 * differs from the provided skb.
 */</doc>
<use f='linux-4.14.y/net/ipv4/igmp.c' l='1536' u='c' c='__ip_mc_check_igmp'/>
