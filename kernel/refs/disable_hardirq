<dec f='linux-4.18.y/include/linux/interrupt.h' l='212' type='bool disable_hardirq(unsigned int irq)'/>
<def f='linux-4.18.y/kernel/irq/manage.c' l='544' ll='550' type='bool disable_hardirq(unsigned int irq)'/>
<dec f='linux-4.18.y/kernel/irq/manage.c' l='551' type='bool disable_hardirq(unsigned int )'/>
<use f='linux-4.18.y/kernel/irq/manage.c' l='551' c='disable_hardirq'/>
<use f='linux-4.18.y/kernel/irq/manage.c' l='551' u='a'/>
<use f='linux-4.18.y/kernel/irq/manage.c' l='551' u='a'/>
<doc f='linux-4.18.y/kernel/irq/manage.c' l='527'>/**
 *	disable_hardirq - disables an irq and waits for hardirq completion
 *	@irq: Interrupt to disable
 *
 *	Disable the selected interrupt line.  Enables and Disables are
 *	nested.
 *	This function waits for any pending hard IRQ handlers for this
 *	interrupt to complete before returning. If you use this function while
 *	holding a resource the hard IRQ handler may need you will deadlock.
 *
 *	When used to optimistically disable an interrupt from atomic context
 *	the return value must be checked.
 *
 *	Returns: false if a threaded handler is active.
 *
 *	This function may be called - with care - from IRQ context.
 */</doc>
