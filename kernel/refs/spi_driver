<def f='linux-4.14.y/include/linux/spi/spi.h' l='254' ll='260'/>
<size>152</size>
<doc f='linux-4.14.y/include/linux/spi/spi.h' l='229'>/**
 * struct spi_driver - Host side &quot;protocol&quot; driver
 * @id_table: List of SPI devices supported by this driver
 * @probe: Binds this driver to the spi device.  Drivers can verify
 *	that the device is actually present, and may need to configure
 *	characteristics (such as bits_per_word) which weren&apos;t needed for
 *	the initial configuration done during system setup.
 * @remove: Unbinds this driver from the spi device
 * @shutdown: Standard shutdown callback used during system state
 *	transitions such as powerdown/halt and kexec
 * @driver: SPI device drivers should initialize the name and owner
 *	field of this structure.
 *
 * This represents the kind of device driver that uses SPI messages to
 * interact with the hardware at the other end of a SPI link.  It&apos;s called
 * a &quot;protocol&quot; driver because it works through messages rather than talking
 * directly to SPI hardware (which is what the underlying SPI controller
 * driver does to pass those messages).  These protocols are defined in the
 * specification for the device(s) supported by the driver.
 *
 * As a rule, those device protocols represent the lowest level interface
 * supported by a driver, and it will support upper level interfaces too.
 * Examples of such upper levels include frameworks like MTD, networking,
 * MMC, RTC, filesystem character device nodes, and hardware monitoring.
 */</doc>
<mbr r='spi_driver::id_table' o='0' t='const struct spi_device_id *'/>
<mbr r='spi_driver::probe' o='64' t='int (*)(struct spi_device *)'/>
<mbr r='spi_driver::remove' o='128' t='int (*)(struct spi_device *)'/>
<mbr r='spi_driver::shutdown' o='192' t='void (*)(struct spi_device *)'/>
<mbr r='spi_driver::driver' o='256' t='struct device_driver'/>
