<def f='linux-4.18.y/include/linux/crypto.h' l='265' ll='278'/>
<size>64</size>
<doc f='linux-4.18.y/include/linux/crypto.h' l='214'>/**
 * struct ablkcipher_alg - asynchronous block cipher definition
 * @min_keysize: Minimum key size supported by the transformation. This is the
 *		 smallest key length supported by this transformation algorithm.
 *		 This must be set to one of the pre-defined values as this is
 *		 not hardware specific. Possible values for this field can be
 *		 found via git grep &quot;_MIN_KEY_SIZE&quot; include/crypto/
 * @max_keysize: Maximum key size supported by the transformation. This is the
 *		 largest key length supported by this transformation algorithm.
 *		 This must be set to one of the pre-defined values as this is
 *		 not hardware specific. Possible values for this field can be
 *		 found via git grep &quot;_MAX_KEY_SIZE&quot; include/crypto/
 * @setkey: Set key for the transformation. This function is used to either
 *	    program a supplied key into the hardware or store the key in the
 *	    transformation context for programming it later. Note that this
 *	    function does modify the transformation context. This function can
 *	    be called multiple times during the existence of the transformation
 *	    object, so one must make sure the key is properly reprogrammed into
 *	    the hardware. This function is also responsible for checking the key
 *	    length for validity. In case a software fallback was put in place in
 *	    the @cra_init call, this function might need to use the fallback if
 *	    the algorithm doesn&apos;t support all of the key sizes.
 * @encrypt: Encrypt a scatterlist of blocks. This function is used to encrypt
 *	     the supplied scatterlist containing the blocks of data. The crypto
 *	     API consumer is responsible for aligning the entries of the
 *	     scatterlist properly and making sure the chunks are correctly
 *	     sized. In case a software fallback was put in place in the
 *	     @cra_init call, this function might need to use the fallback if
 *	     the algorithm doesn&apos;t support all of the key sizes. In case the
 *	     key was stored in transformation context, the key might need to be
 *	     re-programmed into the hardware in this function. This function
 *	     shall not modify the transformation context, as this function may
 *	     be called in parallel with the same transformation object.
 * @decrypt: Decrypt a single block. This is a reverse counterpart to @encrypt
 *	     and the conditions are exactly the same.
 * @givencrypt: Update the IV for encryption. With this function, a cipher
 *	        implementation may provide the function on how to update the IV
 *	        for encryption.
 * @givdecrypt: Update the IV for decryption. This is the reverse of
 *	        @givencrypt .
 * @geniv: The transformation implementation may use an &quot;IV generator&quot; provided
 *	   by the kernel crypto API. Several use cases have a predefined
 *	   approach how IVs are to be updated. For such use cases, the kernel
 *	   crypto API provides ready-to-use implementations that can be
 *	   referenced with this variable.
 * @ivsize: IV size applicable for transformation. The consumer must provide an
 *	    IV of exactly that size to perform the encrypt or decrypt operation.
 *
 * All fields except @givencrypt , @givdecrypt , @geniv and @ivsize are
 * mandatory and must be filled.
 */</doc>
<mbr r='ablkcipher_alg::setkey' o='0' t='int (*)(struct crypto_ablkcipher *, const u8 *, unsigned int)'/>
<mbr r='ablkcipher_alg::encrypt' o='64' t='int (*)(struct ablkcipher_request *)'/>
<mbr r='ablkcipher_alg::decrypt' o='128' t='int (*)(struct ablkcipher_request *)'/>
<mbr r='ablkcipher_alg::givencrypt' o='192' t='int (*)(struct skcipher_givcrypt_request *)'/>
<mbr r='ablkcipher_alg::givdecrypt' o='256' t='int (*)(struct skcipher_givcrypt_request *)'/>
<mbr r='ablkcipher_alg::geniv' o='320' t='const char *'/>
<mbr r='ablkcipher_alg::min_keysize' o='384' t='unsigned int'/>
<mbr r='ablkcipher_alg::max_keysize' o='416' t='unsigned int'/>
<mbr r='ablkcipher_alg::ivsize' o='448' t='unsigned int'/>
