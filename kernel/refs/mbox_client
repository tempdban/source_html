<def f='linux-4.14.y/include/linux/mailbox_client.h' l='32' ll='41'/>
<size>56</size>
<doc f='linux-4.14.y/include/linux/mailbox_client.h' l='18'>/**
 * struct mbox_client - User of a mailbox
 * @dev:		The client device
 * @tx_block:		If the mbox_send_message should block until data is
 *			transmitted.
 * @tx_tout:		Max block period in ms before TX is assumed failure
 * @knows_txdone:	If the client could run the TX state machine. Usually
 *			if the client receives some ACK packet for transmission.
 *			Unused if the controller already has TX_Done/RTR IRQ.
 * @rx_callback:	Atomic callback to provide client the data received
 * @tx_prepare: 	Atomic callback to ask client to prepare the payload
 *			before initiating the transmission if required.
 * @tx_done:		Atomic callback to tell client of data transmission
 */</doc>
<mbr r='mbox_client::dev' o='0' t='struct device *'/>
<mbr r='mbox_client::tx_block' o='64' t='bool'/>
<mbr r='mbox_client::tx_tout' o='128' t='unsigned long'/>
<mbr r='mbox_client::knows_txdone' o='192' t='bool'/>
<mbr r='mbox_client::rx_callback' o='256' t='void (*)(struct mbox_client *, void *)'/>
<mbr r='mbox_client::tx_prepare' o='320' t='void (*)(struct mbox_client *, void *)'/>
<mbr r='mbox_client::tx_done' o='384' t='void (*)(struct mbox_client *, void *, int)'/>
<def f='linux-4.14.y/include/linux/mailbox_client.h' l='32' ll='41'/>
<size>56</size>
<doc f='linux-4.14.y/include/linux/mailbox_client.h' l='18'>/**
 * struct mbox_client - User of a mailbox
 * @dev:		The client device
 * @tx_block:		If the mbox_send_message should block until data is
 *			transmitted.
 * @tx_tout:		Max block period in ms before TX is assumed failure
 * @knows_txdone:	If the client could run the TX state machine. Usually
 *			if the client receives some ACK packet for transmission.
 *			Unused if the controller already has TX_Done/RTR IRQ.
 * @rx_callback:	Atomic callback to provide client the data received
 * @tx_prepare: 	Atomic callback to ask client to prepare the payload
 *			before initiating the transmission if required.
 * @tx_done:		Atomic callback to tell client of data transmission
 */</doc>
<mbr r='mbox_client::dev' o='0' t='struct device *'/>
<mbr r='mbox_client::tx_block' o='64' t='bool'/>
<mbr r='mbox_client::tx_tout' o='128' t='unsigned long'/>
<mbr r='mbox_client::knows_txdone' o='192' t='bool'/>
<mbr r='mbox_client::rx_callback' o='256' t='void (*)(struct mbox_client *, void *)'/>
<mbr r='mbox_client::tx_prepare' o='320' t='void (*)(struct mbox_client *, void *)'/>
<mbr r='mbox_client::tx_done' o='384' t='void (*)(struct mbox_client *, void *, int)'/>
