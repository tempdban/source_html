<dec f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e.h' l='908' type='struct i40e_veb * i40e_veb_setup(struct i40e_pf * pf, u16 flags, u16 uplink_seid, u16 downlink_seid, u8 enabled_tc)'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_debugfs.c' l='865' u='c' c='i40e_dbg_command_write'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_main.c' l='9426' u='c' c='i40e_ndo_bridge_setlink'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_main.c' l='10346' u='c' c='i40e_vsi_setup'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_main.c' l='10349' u='c' c='i40e_vsi_setup'/>
<def f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_main.c' l='10751' ll='10816' type='struct i40e_veb * i40e_veb_setup(struct i40e_pf * pf, u16 flags, u16 uplink_seid, u16 vsi_seid, u8 enabled_tc)'/>
<doc f='linux-4.14.y/drivers/net/ethernet/intel/i40e/i40e_main.c' l='10735'>/**
 * i40e_veb_setup - Set up a VEB
 * @pf: board private structure
 * @flags: VEB setup flags
 * @uplink_seid: the switch element to link to
 * @vsi_seid: the initial VSI seid
 * @enabled_tc: Enabled TC bit-map
 *
 * This allocates the sw VEB structure and links it into the switch
 * It is possible and legal for this to be a duplicate of an already
 * existing VEB.  It is also possible for both uplink and vsi seids
 * to be zero, in order to create a floating VEB.
 *
 * Returns pointer to the successfully allocated VEB sw struct on
 * success, otherwise returns NULL on failure.
 **/</doc>
