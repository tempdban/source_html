<dec f='linux-4.18.y/lib/librte_ring/rte_ring.h' l='177' type='int rte_ring_init(struct rte_ring * r, const char * name, unsigned int count, unsigned int flags)'/>
<doc f='linux-4.18.y/lib/librte_ring/rte_ring.h' l='143'>/**
 * Initialize a ring structure.
 *
 * Initialize a ring structure in memory pointed by &quot;r&quot;. The size of the
 * memory area must be large enough to store the ring structure and the
 * object table. It is advised to use rte_ring_get_memsize() to get the
 * appropriate size.
 *
 * The ring size is set to *count*, which must be a power of two. Water
 * marking is disabled by default. The real usable ring size is
 * *count-1* instead of *count* to differentiate a free ring from an
 * empty ring.
 *
 * The ring is not added in RTE_TAILQ_RING global list. Indeed, the
 * memory given by the caller may not be shareable among dpdk
 * processes.
 *
 * @param r
 *   The pointer to the ring structure followed by the objects table.
 * @param name
 *   The name of the ring.
 * @param count
 *   The number of elements in the ring (must be a power of 2).
 * @param flags
 *   An OR of the following:
 *    - RING_F_SP_ENQ: If this flag is set, the default behavior when
 *      using ``rte_ring_enqueue()`` or ``rte_ring_enqueue_bulk()``
 *      is &quot;single-producer&quot;. Otherwise, it is &quot;multi-producers&quot;.
 *    - RING_F_SC_DEQ: If this flag is set, the default behavior when
 *      using ``rte_ring_dequeue()`` or ``rte_ring_dequeue_bulk()``
 *      is &quot;single-consumer&quot;. Otherwise, it is &quot;multi-consumers&quot;.
 * @return
 *   0 on success, or a negative value on error.
 */</doc>
<use f='linux-4.18.y/lib/librte_eventdev/rte_event_ring.c' l='30' u='c' c='rte_event_ring_init'/>
<def f='linux-4.18.y/lib/librte_ring/rte_ring.c' l='65' ll='107' type='int rte_ring_init(struct rte_ring * r, const char * name, unsigned int count, unsigned int flags)'/>
<use f='linux-4.18.y/lib/librte_ring/rte_ring.c' l='161' u='c' c='rte_ring_create'/>
