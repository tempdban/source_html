<dec f='linux-4.14.y/kernel/workqueue.c' l='72' type='1'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='806' u='r' c='too_many_workers'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='1985' u='r' c='manage_workers'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='1988' u='r' c='manage_workers'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='1994' u='r' c='manage_workers'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='3321' u='r' c='put_unbound_pool'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='3321' u='r' c='put_unbound_pool'/>
<use f='linux-4.14.y/kernel/workqueue.c' l='3322' u='r' c='put_unbound_pool'/>
<doc f='linux-4.14.y/kernel/workqueue.c' l='56'>/*
	 * worker_pool flags
	 *
	 * A bound pool is either associated or disassociated with its CPU.
	 * While associated (!DISASSOCIATED), all workers are bound to the
	 * CPU and none has %WORKER_UNBOUND set and concurrency management
	 * is in effect.
	 *
	 * While DISASSOCIATED, the cpu may be offline and all workers have
	 * %WORKER_UNBOUND set and concurrency management disabled, and may
	 * be executing on any CPU.  The pool behaves as an unbound one.
	 *
	 * Note that DISASSOCIATED should be flipped only while holding
	 * attach_mutex to avoid changing binding state while
	 * worker_attach_to_pool() is in progress.
	 */</doc>
<doc f='linux-4.14.y/kernel/workqueue.c' l='72'>/* being managed */</doc>
