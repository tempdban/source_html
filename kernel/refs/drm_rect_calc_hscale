<dec f='linux-4.18.y/include/drm/drm_rect.h' l='179' type='int drm_rect_calc_hscale(const struct drm_rect * src, const struct drm_rect * dst, int min_hscale, int max_hscale)'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_atomic_helper.c' l='757' u='c' c='drm_atomic_helper_check_plane_state'/>
<def f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='157' ll='172' type='int drm_rect_calc_hscale(const struct drm_rect * src, const struct drm_rect * dst, int min_hscale, int max_hscale)'/>
<dec f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='173' type='int drm_rect_calc_hscale(const struct drm_rect * , const struct drm_rect * , int , int )'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='173' c='drm_rect_calc_hscale'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='173' u='a'/>
<use f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='173' u='a'/>
<doc f='linux-4.18.y/drivers/gpu/drm/drm_rect.c' l='140'>/**
 * drm_rect_calc_hscale - calculate the horizontal scaling factor
 * @src: source window rectangle
 * @dst: destination window rectangle
 * @min_hscale: minimum allowed horizontal scaling factor
 * @max_hscale: maximum allowed horizontal scaling factor
 *
 * Calculate the horizontal scaling factor as
 * (@src width) / (@dst width).
 *
 * If the scale is below 1 &lt;&lt; 16, round down. If the scale is above
 * 1 &lt;&lt; 16, round up. This will calculate the scale with the most
 * pessimistic limit calculation.
 *
 * RETURNS:
 * The horizontal scaling factor, or errno of out of limits.
 */</doc>
