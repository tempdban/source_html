<dec f='linux-4.18.y/include/linux/clk.h' l='597' type='struct clk * clk_get_sys(const char * dev_id, const char * con_id)'/>
<doc f='linux-4.18.y/include/linux/clk.h' l='582'>/**
 * clk_get_sys - get a clock based upon the device name
 * @dev_id: device name
 * @con_id: connection ID
 *
 * Returns a struct clk corresponding to the clock producer, or
 * valid IS_ERR() condition containing errno.  The implementation
 * uses @dev_id and @con_id to determine the clock consumer, and
 * thereby the clock producer. In contrast to clk_get() this function
 * takes the device name instead of the device itself for identification.
 *
 * Drivers must assume that the clock source is not enabled.
 *
 * clk_get_sys should not be called from within interrupt context.
 */</doc>
<def f='linux-4.18.y/drivers/clk/clkdev.c' l='169' ll='194' type='struct clk * clk_get_sys(const char * dev_id, const char * con_id)'/>
<dec f='linux-4.18.y/drivers/clk/clkdev.c' l='195' type='struct clk * clk_get_sys(const char * , const char * )'/>
<use f='linux-4.18.y/drivers/clk/clkdev.c' l='195' c='clk_get_sys'/>
<use f='linux-4.18.y/drivers/clk/clkdev.c' l='195' u='a'/>
<use f='linux-4.18.y/drivers/clk/clkdev.c' l='195' u='a'/>
<use f='linux-4.18.y/drivers/clk/clkdev.c' l='208' u='c' c='clk_get'/>
