<dec f='linux-4.14.y/include/linux/netdevice.h' l='3727' type='int register_netdev(struct net_device * dev)'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e100.c' l='2960' u='c' c='e100_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e1000/e1000_main.c' l='1225' u='c' c='e1000_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e1000e/netdev.c' l='7363' u='c' c='e1000_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/igb_main.c' l='2658' u='c' c='igb_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igbvf/netdev.c' l='2899' u='c' c='igbvf_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c' l='10461' u='c' c='ixgbe_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c' l='4136' u='c' c='ixgbevf_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/realtek/8139cp.c' l='2007' u='c' c='cp_init_one'/>
<use f='linux-4.14.y/drivers/net/ethernet/realtek/8139too.c' l='1039' u='c' c='rtl8139_init_one'/>
<use f='linux-4.14.y/drivers/net/loopback.c' l='214' u='c' c='loopback_net_init'/>
<use f='linux-4.14.y/drivers/net/virtio_net.c' l='2640' u='c' c='virtnet_probe'/>
<use f='linux-4.14.y/drivers/net/vmxnet3/vmxnet3_drv.c' l='3481' u='c' c='vmxnet3_probe_device'/>
<def f='linux-4.14.y/net/core/dev.c' l='7746' ll='7754' type='int register_netdev(struct net_device * dev)'/>
<dec f='linux-4.14.y/net/core/dev.c' l='7755' type='int register_netdev(struct net_device * )'/>
<use f='linux-4.14.y/net/core/dev.c' l='7755' c='register_netdev'/>
<use f='linux-4.14.y/net/core/dev.c' l='7755' u='a'/>
<use f='linux-4.14.y/net/core/dev.c' l='7755' u='a'/>
<doc f='linux-4.14.y/net/core/dev.c' l='7733'>/**
 *	register_netdev	- register a network device
 *	@dev: device to register
 *
 *	Take a completed network device structure and add it to the kernel
 *	interfaces. A %NETDEV_REGISTER message is sent to the netdev notifier
 *	chain. 0 is returned on success. A negative errno code is returned
 *	on a failure to set up the device, or if the name is a duplicate.
 *
 *	This is a wrapper around register_netdevice that takes the rtnl semaphore
 *	and expands the device name if you passed a format string to
 *	alloc_netdev.
 */</doc>
<dec f='linux-4.14.y/include/linux/netdevice.h' l='3727' type='int register_netdev(struct net_device * dev)'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e100.c' l='2960' u='c' c='e100_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e1000/e1000_main.c' l='1225' u='c' c='e1000_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/e1000e/netdev.c' l='7363' u='c' c='e1000_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igb/igb_main.c' l='2658' u='c' c='igb_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/igbvf/netdev.c' l='2899' u='c' c='igbvf_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c' l='10461' u='c' c='ixgbe_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c' l='4136' u='c' c='ixgbevf_probe'/>
<use f='linux-4.14.y/drivers/net/ethernet/realtek/8139cp.c' l='2007' u='c' c='cp_init_one'/>
<use f='linux-4.14.y/drivers/net/ethernet/realtek/8139too.c' l='1039' u='c' c='rtl8139_init_one'/>
<use f='linux-4.14.y/drivers/net/loopback.c' l='214' u='c' c='loopback_net_init'/>
<use f='linux-4.14.y/drivers/net/virtio_net.c' l='2640' u='c' c='virtnet_probe'/>
<use f='linux-4.14.y/drivers/net/vmxnet3/vmxnet3_drv.c' l='3481' u='c' c='vmxnet3_probe_device'/>
<def f='linux-4.14.y/net/core/dev.c' l='7746' ll='7754' type='int register_netdev(struct net_device * dev)'/>
<dec f='linux-4.14.y/net/core/dev.c' l='7755' type='int register_netdev(struct net_device * )'/>
<use f='linux-4.14.y/net/core/dev.c' l='7755' c='register_netdev'/>
<use f='linux-4.14.y/net/core/dev.c' l='7755' u='a'/>
<use f='linux-4.14.y/net/core/dev.c' l='7755' u='a'/>
<doc f='linux-4.14.y/net/core/dev.c' l='7733'>/**
 *	register_netdev	- register a network device
 *	@dev: device to register
 *
 *	Take a completed network device structure and add it to the kernel
 *	interfaces. A %NETDEV_REGISTER message is sent to the netdev notifier
 *	chain. 0 is returned on success. A negative errno code is returned
 *	on a failure to set up the device, or if the name is a duplicate.
 *
 *	This is a wrapper around register_netdevice that takes the rtnl semaphore
 *	and expands the device name if you passed a format string to
 *	alloc_netdev.
 */</doc>
