<dec f='linux-4.18.y/lib/librte_eal/common/include/rte_memzone.h' l='197' type='const struct rte_memzone * rte_memzone_reserve_aligned(const char * name, size_t len, int socket_id, unsigned int flags, unsigned int align)'/>
<doc f='linux-4.18.y/lib/librte_eal/common/include/rte_memzone.h' l='135'>/**
 * Reserve a portion of physical memory with alignment on a specified
 * boundary.
 *
 * This function reserves some memory with alignment on a specified
 * boundary, and returns a pointer to a correctly filled memzone
 * descriptor. If the allocation cannot be done or if the alignment
 * is not a power of 2, returns NULL.
 *
 * @note Reserving memzones with len set to 0 will only attempt to allocate
 *   memzones from memory that is already available. It will not trigger any
 *   new allocations.
 *
 * @note: When reserving memzones with len set to 0, it is preferable to also
 *   set a valid socket_id. Setting socket_id to SOCKET_ID_ANY is supported, but
 *   will likely not yield expected results. Specifically, the resulting memzone
 *   may not necessarily be the biggest memzone available, but rather biggest
 *   memzone available on socket id corresponding to an lcore from which
 *   reservation was called.
 *
 * @param name
 *   The name of the memzone. If it already exists, the function will
 *   fail and return NULL.
 * @param len
 *   The size of the memory to be reserved. If it
 *   is 0, the biggest contiguous zone will be reserved.
 * @param socket_id
 *   The socket identifier in the case of
 *   NUMA. The value can be SOCKET_ID_ANY if there is no NUMA
 *   constraint for the reserved zone.
 * @param flags
 *   The flags parameter is used to request memzones to be
 *   taken from specifically sized hugepages.
 *   - RTE_MEMZONE_2MB - Reserved from 2MB pages
 *   - RTE_MEMZONE_1GB - Reserved from 1GB pages
 *   - RTE_MEMZONE_16MB - Reserved from 16MB pages
 *   - RTE_MEMZONE_16GB - Reserved from 16GB pages
 *   - RTE_MEMZONE_256KB - Reserved from 256KB pages
 *   - RTE_MEMZONE_256MB - Reserved from 256MB pages
 *   - RTE_MEMZONE_512MB - Reserved from 512MB pages
 *   - RTE_MEMZONE_4GB - Reserved from 4GB pages
 *   - RTE_MEMZONE_SIZE_HINT_ONLY - Allow alternative page size to be used if
 *                                  the requested page size is unavailable.
 *                                  If this flag is not set, the function
 *                                  will return error on an unavailable size
 *                                  request.
 *   - RTE_MEMZONE_IOVA_CONTIG - Ensure reserved memzone is IOVA-contiguous.
 *                               This option should be used when allocating
 *                               memory intended for hardware rings etc.
 * @param align
 *   Alignment for resulting memzone. Must be a power of 2.
 * @return
 *   A pointer to a correctly-filled read-only memzone descriptor, or NULL
 *   on error.
 *   On error case, rte_errno will be set appropriately:
 *    - E_RTE_NO_CONFIG - function could not get pointer to rte_config structure
 *    - E_RTE_SECONDARY - function was called from a secondary process instance
 *    - ENOSPC - the maximum number of memzones has already been allocated
 *    - EEXIST - a memzone with the same name already exists
 *    - ENOMEM - no appropriate memory area found in which to create memzone
 *    - EINVAL - invalid parameters
 */</doc>
<use f='linux-4.18.y/drivers/common/qat/qat_qp.c' l='144' u='c' c='queue_dma_zone_reserve'/>
<use f='linux-4.18.y/drivers/crypto/virtio/virtio_cryptodev.c' l='405' u='c' c='virtio_crypto_queue_setup'/>
<use f='linux-4.18.y/drivers/net/bnxt/bnxt_ring.c' l='147' u='c' c='bnxt_alloc_rings'/>
<use f='linux-4.18.y/drivers/net/cxgbe/sge.c' l='1473' u='c' c='alloc_ring'/>
<use f='linux-4.18.y/drivers/net/enic/enic_main.c' l='364' u='c' c='enic_alloc_consistent'/>
<use f='linux-4.18.y/drivers/net/enic/enic_main.c' l='977' u='c' c='enic_alloc_wq'/>
<use f='linux-4.18.y/drivers/net/i40e/i40e_rxtx.c' l='2331' u='c' c='i40e_memzone_reserve'/>
<use f='linux-4.18.y/drivers/net/qede/base/bcm_osal.c' l='136' u='c' c='osal_dma_alloc_coherent'/>
<use f='linux-4.18.y/drivers/net/qede/base/bcm_osal.c' l='175' u='c' c='osal_dma_alloc_coherent_aligned'/>
<use f='linux-4.18.y/drivers/net/qede/qede_filter.c' l='295' u='c' c='qede_config_arfs_filter'/>
<use f='linux-4.18.y/drivers/net/virtio/virtio_ethdev.c' l='394' u='c' c='virtio_init_queue'/>
<use f='linux-4.18.y/drivers/net/virtio/virtio_ethdev.c' l='420' u='c' c='virtio_init_queue'/>
<use f='linux-4.18.y/drivers/net/vmxnet3/vmxnet3_ethdev.c' l='171' u='c' c='gpa_zone_reserve'/>
<use f='linux-4.18.y/drivers/net/vmxnet3/vmxnet3_ethdev.c' l='178' u='c' c='gpa_zone_reserve'/>
<def f='linux-4.18.y/lib/librte_eal/common/eal_common_memzone.c' l='222' ll='228' type='const struct rte_memzone * rte_memzone_reserve_aligned(const char * name, size_t len, int socket_id, unsigned int flags, unsigned int align)'/>
<doc f='linux-4.18.y/lib/librte_eal/common/eal_common_memzone.c' l='218'>/*
 * Return a pointer to a correctly filled memzone descriptor (with a
 * specified alignment). If the allocation cannot be done, return NULL.
 */</doc>
<use f='linux-4.18.y/lib/librte_ethdev/rte_ethdev.c' l='3452' u='c' c='rte_eth_dma_zone_reserve'/>
<use f='linux-4.18.y/lib/librte_eventdev/rte_event_crypto_adapter.c' l='130' u='c' c='eca_init'/>
<use f='linux-4.18.y/lib/librte_eventdev/rte_event_eth_rx_adapter.c' l='1193' u='c' c='rte_event_eth_rx_adapter_init'/>
<use f='linux-4.18.y/lib/librte_mempool/rte_mempool.c' l='511' u='c' c='rte_mempool_populate_default'/>
<use f='linux-4.18.y/lib/librte_mempool/rte_mempool.c' l='529' u='c' c='rte_mempool_populate_default'/>
<use f='linux-4.18.y/lib/librte_mempool/rte_mempool.c' l='539' u='c' c='rte_mempool_populate_default'/>
<use f='linux-4.18.y/lib/librte_ring/rte_ring.c' l='155' u='c' c='rte_ring_create'/>
