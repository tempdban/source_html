<dec f='linux-4.14.y/security/apparmor/include/file.h' l='197' type='int aa_path_link(struct aa_label * label, struct dentry * old_dentry, const struct path * new_dir, struct dentry * new_dentry)'/>
<def f='linux-4.14.y/security/apparmor/file.c' l='472' ll='493' type='int aa_path_link(struct aa_label * label, struct dentry * old_dentry, const struct path * new_dir, struct dentry * new_dentry)'/>
<doc f='linux-4.14.y/security/apparmor/file.c' l='454'>/**
 * aa_path_link - Handle hard link permission check
 * @label: the label being enforced  (NOT NULL)
 * @old_dentry: the target dentry  (NOT NULL)
 * @new_dir: directory the new link will be created in  (NOT NULL)
 * @new_dentry: the link being created  (NOT NULL)
 *
 * Handle the permission test for a link &amp; target pair.  Permission
 * is encoded as a pair where the link permission is determined
 * first, and if allowed, the target is tested.  The target test
 * is done from the point of the link match (not start of DFA)
 * making the target permission dependent on the link permission match.
 *
 * The subset test if required forces that permissions granted
 * on link are a subset of the permission granted to target.
 *
 * Returns: %0 if allowed else error
 */</doc>
<use f='linux-4.14.y/security/apparmor/lsm.c' l='336' u='c' c='apparmor_path_link'/>
<dec f='linux-4.14.y/security/apparmor/include/file.h' l='197' type='int aa_path_link(struct aa_label * label, struct dentry * old_dentry, const struct path * new_dir, struct dentry * new_dentry)'/>
<def f='linux-4.14.y/security/apparmor/file.c' l='472' ll='493' type='int aa_path_link(struct aa_label * label, struct dentry * old_dentry, const struct path * new_dir, struct dentry * new_dentry)'/>
<doc f='linux-4.14.y/security/apparmor/file.c' l='454'>/**
 * aa_path_link - Handle hard link permission check
 * @label: the label being enforced  (NOT NULL)
 * @old_dentry: the target dentry  (NOT NULL)
 * @new_dir: directory the new link will be created in  (NOT NULL)
 * @new_dentry: the link being created  (NOT NULL)
 *
 * Handle the permission test for a link &amp; target pair.  Permission
 * is encoded as a pair where the link permission is determined
 * first, and if allowed, the target is tested.  The target test
 * is done from the point of the link match (not start of DFA)
 * making the target permission dependent on the link permission match.
 *
 * The subset test if required forces that permissions granted
 * on link are a subset of the permission granted to target.
 *
 * Returns: %0 if allowed else error
 */</doc>
<use f='linux-4.14.y/security/apparmor/lsm.c' l='336' u='c' c='apparmor_path_link'/>
