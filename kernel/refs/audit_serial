<dec f='linux-4.18.y/include/linux/audit.h' l='324' type='unsigned int audit_serial()'/>
<doc f='linux-4.18.y/include/linux/audit.h' l='323'>/* Private API (for audit.c only) */</doc>
<def f='linux-4.18.y/kernel/audit.c' l='1716' ll='1721' type='unsigned int audit_serial()'/>
<use f='linux-4.18.y/kernel/audit.c' l='1728' u='c' c='audit_get_stamp'/>
<doc f='linux-4.18.y/kernel/audit.c' l='1699'>/**
 * audit_serial - compute a serial number for the audit record
 *
 * Compute a serial number for the audit record.  Audit records are
 * written to user-space as soon as they are generated, so a complete
 * audit record may be written in several pieces.  The timestamp of the
 * record and this serial number are used by the user-space tools to
 * determine which pieces belong to the same audit record.  The
 * (timestamp,serial) tuple is unique for each syscall and is live from
 * syscall entry to syscall exit.
 *
 * NOTE: Another possibility is to store the formatted records off the
 * audit context (for those records that have a context), and emit them
 * all at syscall exit.  However, this could delay the reporting of
 * significant errors until syscall exit (or never, if the system
 * halts).
 */</doc>
<use f='linux-4.18.y/kernel/auditsc.c' l='1989' u='c' c='auditsc_get_stamp'/>
