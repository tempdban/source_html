<def f='linux-4.18.y/include/linux/hwspinlock.h' l='251' ll='255' type='int hwspin_lock_timeout_irq(struct hwspinlock * hwlock, unsigned int to)'/>
<use f='linux-4.18.y/drivers/base/regmap/regmap.c' l='428' u='c' c='regmap_lock_hwlock_irq'/>
<doc f='linux-4.18.y/include/linux/hwspinlock.h' l='234'>/**
 * hwspin_lock_timeout_irq() - lock hwspinlock, with timeout, disable irqs
 * @hwlock: the hwspinlock to be locked
 * @to: timeout value in msecs
 *
 * This function locks the underlying @hwlock. If the @hwlock
 * is already taken, the function will busy loop waiting for it to
 * be released, but give up when @timeout msecs have elapsed.
 *
 * Upon a successful return from this function, preemption and local interrupts
 * are disabled so the caller must not sleep, and is advised to release the
 * hwspinlock as soon as possible.
 *
 * Returns 0 when the @hwlock was successfully taken, and an appropriate
 * error code otherwise (most notably an -ETIMEDOUT if the @hwlock is still
 * busy after @timeout msecs). The function will never sleep.
 */</doc>
