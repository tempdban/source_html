<dec f='master/drivers/net/nfp/nfpcore/nfp_cpp.h' l='473' type='int nfp_cpp_write(struct nfp_cpp * cpp, uint32_t cpp_id, unsigned long long address, const void * kernel_vaddr, size_t length)'/>
<doc f='master/drivers/net/nfp/nfpcore/nfp_cpp.h' l='462'>/*
 * Write a block of data to a NFP CPP ID
 *
 * @param[in]	cpp	NFP CPP handle
 * @param[in]	cpp_id	NFP CPP ID
 * @param[in]	address	Offset into the NFP CPP ID address space
 * @param[in]	kernel_vaddr	Buffer to copy write data from
 * @param[in]	length	Size of the area to reserve
 *
 * @return bytes written on success, -1 on failure (and set errno accordingly).
 */</doc>
<use f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='495' u='c' c='nfp_cpp_writel'/>
<use f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='520' u='c' c='nfp_cpp_writeq'/>
<def f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='719' ll='735' type='int nfp_cpp_write(struct nfp_cpp * cpp, uint32_t destination, unsigned long long address, const void * kernel_vaddr, size_t length)'/>
<doc f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='711'>/*
 * nfp_cpp_write - write to CPP target
 * @cpp:        CPP handle
 * @destination:    CPP id
 * @address:        offset into CPP target
 * @kernel_vaddr:   kernel buffer to read from
 * @length:     number of bytes to write
 */</doc>
<use f='master/drivers/net/nfp/nfpcore/nfp_nsp.c' l='325' u='c' c='nfp_nsp_command_buf'/>
<use f='master/drivers/net/nfp/nfpcore/nfp_nsp.c' l='332' u='c' c='nfp_nsp_command_buf'/>
