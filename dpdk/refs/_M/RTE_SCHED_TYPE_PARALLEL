<dec f='dpdk_1805/lib/librte_eventdev/rte_eventdev.h' l='927'/>
<use f='dpdk_1805/app/test-eventdev/evt_options.h' l='175' u='c'/>
<use f='dpdk_1805/app/test-eventdev/evt_options.h' l='249' u='c'/>
<doc f='dpdk_1805/lib/librte_eventdev/rte_eventdev.h' l='909'>/**&lt; Atomic scheduling
 *
 * Events from an atomic flow of an event queue can be scheduled only to a
 * single port at a time. The port is guaranteed to have exclusive (atomic)
 * access to the associated flow context, which enables the user to avoid SW
 * synchronization. Atomic flows also help to maintain event ordering
 * since only one port at a time can process events from a flow of an
 * event queue.
 *
 * The atomic queue synchronization context is dedicated to the port until
 * application call rte_event_dequeue_burst() from the same port,
 * which implicitly releases the context. User may allow the scheduler to
 * release the context earlier than that by invoking rte_event_enqueue_burst()
 * with RTE_EVENT_OP_RELEASE operation.
 *
 * @see rte_event_queue_setup(), rte_event_dequeue_burst(), RTE_EVENT_OP_RELEASE
 */</doc>
<use f='dpdk_1805/app/test-eventdev/evt_options.c' l='284' u='c'/>
<use f='dpdk_1805/drivers/event/opdl/opdl_evdev.c' l='278' u='c'/>
<use f='dpdk_1805/drivers/event/sw/sw_evdev.c' l='77' u='c'/>
<use f='dpdk_1805/drivers/event/sw/sw_evdev_selftest.c' l='233' u='c'/>
