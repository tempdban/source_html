<dec f='dpdk_1805/lib/librte_eventdev/rte_eventdev.h' l='518' type='int rte_event_dev_configure(uint8_t dev_id, const struct rte_event_dev_config * dev_conf)'/>
<doc f='dpdk_1805/lib/librte_eventdev/rte_eventdev.h' l='498'>/**
 * Configure an event device.
 *
 * This function must be invoked first before any other function in the
 * API. This function can also be re-invoked when a device is in the
 * stopped state.
 *
 * The caller may use rte_event_dev_info_get() to get the capability of each
 * resources available for this event device.
 *
 * @param dev_id
 *   The identifier of the device to configure.
 * @param dev_conf
 *   The event device configuration structure.
 *
 * @return
 *   - 0: Success, device configured.
 *   - &lt;0: Error code returned by the driver configuration function.
 */</doc>
<use f='dpdk_1805/app/test-eventdev/test_order_atq.c' l='130' u='c' c='order_atq_eventdev_setup'/>
<use f='dpdk_1805/app/test-eventdev/test_order_queue.c' l='130' u='c' c='order_queue_eventdev_setup'/>
<use f='dpdk_1805/app/test-eventdev/test_perf_atq.c' l='187' u='c' c='perf_atq_eventdev_setup'/>
<use f='dpdk_1805/app/test-eventdev/test_perf_queue.c' l='188' u='c' c='perf_queue_eventdev_setup'/>
<use f='dpdk_1805/app/test-eventdev/test_pipeline_atq.c' l='349' u='c' c='pipeline_atq_eventdev_setup'/>
<use f='dpdk_1805/app/test-eventdev/test_pipeline_queue.c' l='358' u='c' c='pipeline_queue_eventdev_setup'/>
<use f='dpdk_1805/drivers/event/opdl/opdl_test.c' l='101' u='c' c='init'/>
<use f='dpdk_1805/drivers/event/sw/sw_evdev_selftest.c' l='160' u='c' c='init'/>
<use f='dpdk_1805/lib/librte_eventdev/rte_event_crypto_adapter.c' l='170' u='c' c='eca_default_config_cb'/>
<use f='dpdk_1805/lib/librte_eventdev/rte_event_eth_rx_adapter.c' l='615' u='c' c='default_conf_cb'/>
<use f='dpdk_1805/lib/librte_eventdev/rte_event_timer_adapter.c' l='85' u='c' c='default_port_conf_cb'/>
<def f='dpdk_1805/lib/librte_eventdev/rte_eventdev.c' l='357' ll='499' type='int rte_event_dev_configure(uint8_t dev_id, const struct rte_event_dev_config * dev_conf)'/>
