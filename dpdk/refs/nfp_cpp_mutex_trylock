<dec f='master/drivers/net/nfp/nfpcore/nfp_cpp.h' l='779' type='int nfp_cpp_mutex_trylock(struct nfp_cpp_mutex * mutex)'/>
<doc f='master/drivers/net/nfp/nfpcore/nfp_cpp.h' l='772'>/*
 * Attempt to lock a mutex handle, using the NFP MU Atomic Engine
 *
 * @param mutex		NFP CPP Mutex handle
 * @return		0 if the lock succeeded, -1 on failure (and errno set
 *			appropriately).
 */</doc>
<use f='master/drivers/net/nfp/nfpcore/nfp_mutex.c' l='263' u='c' c='nfp_cpp_mutex_lock'/>
<def f='master/drivers/net/nfp/nfpcore/nfp_mutex.c' l='343' ll='424' type='int nfp_cpp_mutex_trylock(struct nfp_cpp_mutex * mutex)'/>
<doc f='master/drivers/net/nfp/nfpcore/nfp_mutex.c' l='331'>/*
 * Attempt to lock a mutex handle, using the NFP MU Atomic Engine
 *
 * Valid lock states:
 *
 *      0x....0000      - Unlocked
 *      0x....000f      - Locked
 *
 * @param mutex     NFP CPP Mutex handle
 * @return      0 if the lock succeeded, -1 on failure (and errno set
 *		appropriately).
 */</doc>
<use f='master/drivers/net/nfp/nfpcore/nfp_resource.c' l='126' u='c' c='nfp_resource_try_acquire'/>
