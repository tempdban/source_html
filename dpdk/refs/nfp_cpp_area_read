<dec f='master/drivers/net/nfp/nfpcore/nfp_cpp.h' l='391' type='int nfp_cpp_area_read(struct nfp_cpp_area * area, unsigned long offset, void * buffer, size_t length)'/>
<doc f='master/drivers/net/nfp/nfpcore/nfp_cpp.h' l='379'>/*
 * Read from a NFP CPP area handle into a buffer. The area must be acquired with
 * &apos;nfp_cpp_area_acquire()&apos; before calling this operation.
 *
 * @param[in]	area	NFP CPP area handle
 * @param[in]	offset	Offset into the area
 * @param[in]	buffer	Location of buffer to receive the data
 * @param[in]	length	Length of the data to read
 *
 * @return bytes read on success, -1 on failure (and set errno accordingly).
 *
 */</doc>
<def f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='320' ll='328' type='int nfp_cpp_area_read(struct nfp_cpp_area * area, unsigned long offset, void * kernel_vaddr, size_t length)'/>
<use f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='433' u='c' c='nfp_cpp_area_readl'/>
<use f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='457' u='c' c='nfp_cpp_area_readq'/>
<use f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='705' u='c' c='nfp_cpp_read'/>
<doc f='master/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='306'>/*
 * nfp_cpp_area_read - read data from CPP area
 *
 * @area:       CPP area handle
 * @offset:     offset into CPP area
 * @kernel_vaddr:   kernel address to put data into
 * @length:     number of bytes to read
 *
 * Read data from indicated CPP region.
 *
 * NOTE: @offset and @length must be 32-bit aligned values.
 *
 * NOTE: Area must have been locked down with an &apos;acquire&apos;.
 */</doc>
