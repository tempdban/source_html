<dec f='dpdk_1805/lib/librte_mempool/rte_mempool.h' l='1032' type='int rte_mempool_populate_iova(struct rte_mempool * mp, char * vaddr, rte_iova_t iova, size_t len, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<doc f='dpdk_1805/lib/librte_mempool/rte_mempool.h' l='1005'>/**
 * Add physically contiguous memory for objects in the pool at init
 *
 * Add a virtually and physically contiguous memory chunk in the pool
 * where objects can be instantiated.
 *
 * If the given IO address is unknown (iova = RTE_BAD_IOVA),
 * the chunk doesn&apos;t need to be physically contiguous (only virtually),
 * and allocated objects may span two pages.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param vaddr
 *   The virtual address of memory that should be used to store objects.
 * @param iova
 *   The IO address
 * @param len
 *   The length of memory in bytes.
 * @param free_cb
 *   The callback used to free this chunk when destroying the mempool.
 * @param opaque
 *   An opaque argument passed to free_cb.
 * @return
 *   The number of objects added on success.
 *   On error, the chunk is not added in the memory list of the
 *   mempool and a negative errno is returned.
 */</doc>
<def f='dpdk_1805/lib/librte_mempool/rte_mempool.c' l='280' ll='337' type='int rte_mempool_populate_iova(struct rte_mempool * mp, char * vaddr, rte_iova_t iova, size_t len, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<use f='dpdk_1805/lib/librte_mempool/rte_mempool.c' l='358' u='c' c='rte_mempool_populate_virt'/>
<use f='dpdk_1805/lib/librte_mempool/rte_mempool.c' l='381' u='c' c='rte_mempool_populate_virt'/>
<use f='dpdk_1805/lib/librte_mempool/rte_mempool.c' l='560' u='c' c='rte_mempool_populate_default'/>
<doc f='dpdk_1805/lib/librte_mempool/rte_mempool.c' l='276'>/* Add objects in the pool, using a physically contiguous memory
 * zone. Return the number of objects added, or a negative value
 * on error.
 */</doc>
