<dec f='dpdk_1805/lib/librte_efd/rte_efd.h' l='271' type='void rte_efd_lookup_bulk(const struct rte_efd_table * table, unsigned int socket_id, int num_keys, const void ** key_list, efd_value_t * value_list)'/>
<def f='dpdk_1805/lib/librte_efd/rte_efd.c' l='1300' ll='1335' type='void rte_efd_lookup_bulk(const struct rte_efd_table *const table, const unsigned int socket_id, const int num_keys, const void ** key_list, efd_value_t *const value_list)'/>
<doc f='dpdk_1805/lib/librte_efd/rte_efd.h' l='249'>/**
 * Looks up the value associated with several keys.
 * This operation is multi-thread safe.
 *
 * NOTE: Lookups will *always* succeed - this is a property of
 * using a perfect hash table.
 * If the specified key was never inserted, a pseudorandom answer will be returned.
 * There is no way to know based on the lookup if the key was ever inserted
 * originally, so this must be tracked elsewhere.
 *
 * @param table
 *   EFD table to reference
 * @param socket_id
 *   Socket ID to use to lookup existing value (ideally caller&apos;s socket id)
 * @param num_keys
 *   Number of keys in the key_list array, must be less than RTE_EFD_BURST_MAX
 * @param key_list
 *   Array of num_keys pointers which point to keys to look up
 * @param value_list
 *   Array of size num_keys where lookup values will be stored
 */</doc>
