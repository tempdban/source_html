<dec f='master/lib/librte_member/rte_member_vbf.h' l='16' type='int rte_member_create_vbf(struct rte_member_setsum * ss, const struct rte_member_parameters * params)'/>
<use f='master/lib/librte_member/rte_member.c' l='148' u='c' c='rte_member_create'/>
<def f='master/lib/librte_member/rte_member_vbf.c' l='28' ll='127' type='int rte_member_create_vbf(struct rte_member_setsum * ss, const struct rte_member_parameters * params)'/>
<doc f='master/lib/librte_member/rte_member_vbf.c' l='16'>/*
 * vBF currently implemented as a big array.
 * The BFs have a vertical layout. Bits in same location of all bfs will stay
 * in the same cache line.
 * For example, if we have 32 bloom filters, we use a uint32_t array to
 * represent all of them. array[0] represent the first location of all the
 * bloom filters, array[1] represents the second location of all the
 * bloom filters, etc. The advantage of this layout is to minimize the average
 * number of memory accesses to test all bloom filters.
 *
 * Currently the implementation supports vBF containing 1,2,4,8,16,32 BFs.
 */</doc>
