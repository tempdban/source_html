<dec f='dpdk_1805/lib/librte_net/rte_net.h' l='55' type='int rte_net_skip_ip6_ext(uint16_t proto, const struct rte_mbuf * m, uint32_t * off, int * frag)'/>
<doc f='dpdk_1805/lib/librte_net/rte_net.h' l='31'>/**
 * Skip IPv6 header extensions.
 *
 * This function skips all IPv6 extensions, returning size of
 * complete header including options and final protocol value.
 *
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * @param proto
 *   Protocol field of IPv6 header.
 * @param m
 *   The packet mbuf to be parsed.
 * @param off
 *   On input, must contain the offset to the first byte following
 *   IPv6 header, on output, contains offset to the first byte
 *   of next layer (after any IPv6 extension header)
 * @param frag
 *   Contains 1 in output if packet is an IPv6 fragment.
 * @return
 *   Protocol that follows IPv6 header.
 *   -1 if an error occurs during mbuf parsing.
 */</doc>
<def f='dpdk_1805/lib/librte_net/rte_net.c' l='181' ll='224' type='int rte_net_skip_ip6_ext(uint16_t proto, const struct rte_mbuf * m, uint32_t * off, int * frag)'/>
<use f='dpdk_1805/lib/librte_net/rte_net.c' l='320' u='c' c='rte_net_get_ptype'/>
<use f='dpdk_1805/lib/librte_net/rte_net.c' l='456' u='c' c='rte_net_get_ptype'/>
<doc f='dpdk_1805/lib/librte_net/rte_net.c' l='180'>/* parse ipv6 extended headers, update offset and return next proto */</doc>
