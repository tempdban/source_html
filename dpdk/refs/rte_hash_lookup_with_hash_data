<dec f='master/lib/librte_hash/rte_hash.h' l='337' type='int rte_hash_lookup_with_hash_data(const struct rte_hash * h, const void * key, hash_sig_t sig, void ** data)'/>
<doc f='master/lib/librte_hash/rte_hash.h' l='314'>/**
 * Find a key-value pair with a pre-computed hash value
 * to an existing hash table.
 * This operation is multi-thread safe with regarding to other lookup threads.
 * Read-write concurrency can be enabled by setting flag during
 * table creation.
 *
 * @param h
 *   Hash table to look in.
 * @param key
 *   Key to find.
 * @param sig
 *   Precomputed hash value for &apos;key&apos;
 * @param data
 *   Output with pointer to data returned from the hash table.
 * @return
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key, and is the same
 *     value that was returned when the key was added.
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if the key is not found.
 */</doc>
<def f='master/lib/librte_hash/rte_cuckoo_hash.c' l='937' ll='943' type='int rte_hash_lookup_with_hash_data(const struct rte_hash * h, const void * key, hash_sig_t sig, void ** data)'/>
