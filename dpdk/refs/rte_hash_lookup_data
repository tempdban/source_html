<dec f='dpdk_1805/lib/librte_hash/rte_hash.h' l='312' type='int rte_hash_lookup_data(const struct rte_hash * h, const void * key, void ** data)'/>
<doc f='dpdk_1805/lib/librte_hash/rte_hash.h' l='292'>/**
 * Find a key-value pair in the hash table.
 * This operation is multi-thread safe with regarding to other lookup threads.
 * Read-write concurrency can be enabled by setting flag during
 * table creation.
 *
 * @param h
 *   Hash table to look in.
 * @param key
 *   Key to find.
 * @param data
 *   Output with pointer to data returned from the hash table.
 * @return
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key, and is the same
 *     value that was returned when the key was added.
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if the key is not found.
 */</doc>
<def f='dpdk_1805/lib/librte_hash/rte_cuckoo_hash.c' l='945' ll='950' type='int rte_hash_lookup_data(const struct rte_hash * h, const void * key, void ** data)'/>
<use f='dpdk_1805/lib/librte_vhost/vhost_crypto.c' l='399' u='c' c='vhost_crypto_close_sess'/>
<use f='dpdk_1805/lib/librte_vhost/vhost_crypto.c' l='1001' u='c' c='vhost_crypto_process_one_req'/>
