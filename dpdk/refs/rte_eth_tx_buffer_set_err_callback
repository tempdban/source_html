<dec f='master/lib/librte_ethdev/rte_ethdev.h' l='2444' type='int rte_eth_tx_buffer_set_err_callback(struct rte_eth_dev_tx_buffer * buffer, buffer_tx_error_fn callback, void * userdata)'/>
<doc f='master/lib/librte_ethdev/rte_ethdev.h' l='2419'>/**
 * Configure a callback for buffered packets which cannot be sent
 *
 * Register a specific callback to be called when an attempt is made to send
 * all packets buffered on an ethernet port, but not all packets can
 * successfully be sent. The callback registered here will be called only
 * from calls to rte_eth_tx_buffer() and rte_eth_tx_buffer_flush() APIs.
 * The default callback configured for each queue by default just frees the
 * packets back to the calling mempool. If additional behaviour is required,
 * for example, to count dropped packets, or to retry transmission of packets
 * which cannot be sent, this function should be used to register a suitable
 * callback function to implement the desired behaviour.
 * The example callback &quot;rte_eth_count_unsent_packet_callback()&quot; is also
 * provided as reference.
 *
 * @param buffer
 *   The port identifier of the Ethernet device.
 * @param callback
 *   The function to be used as the callback.
 * @param userdata
 *   Arbitrary parameter to be passed to the callback function
 * @return
 *   0 on success, or -1 on error with rte_errno set appropriately
 */</doc>
<def f='master/lib/librte_ethdev/rte_ethdev.c' l='1676' ll='1683' type='int rte_eth_tx_buffer_set_err_callback(struct rte_eth_dev_tx_buffer * buffer, buffer_tx_error_fn cbfn, void * userdata)'/>
<use f='master/lib/librte_ethdev/rte_ethdev.c' l='1695' u='c' c='rte_eth_tx_buffer_init'/>
