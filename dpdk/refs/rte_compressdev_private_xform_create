<dec f='dpdk_1805/lib/librte_compressdev/rte_compressdev.h' l='513' type='int rte_compressdev_private_xform_create(uint8_t dev_id, const struct rte_comp_xform * xform, void ** private_xform)'/>
<doc f='dpdk_1805/lib/librte_compressdev/rte_compressdev.h' l='489'>/**
 * This should alloc a private_xform from the device&apos;s mempool and initialise
 * it. The application should call this API when setting up for stateless
 * processing on a device. If it returns non-shareable, then the appl cannot
 * share this handle with multiple in-flight ops and should call this API again
 * to get a separate handle for every in-flight op.
 * The handle returned is only valid for use with ops of op_type STATELESS.
 *
 * @param dev_id
 *   Compress device identifier
 * @param xform
 *   xform data
 * @param private_xform
 *   Pointer to where PMD&apos;s private_xform handle should be stored
 *
 * @return
 *  - if successful returns 0
 *    and valid private_xform handle
 *  - &lt;0 in error cases
 *  - Returns -EINVAL if input parameters are invalid.
 *  - Returns -ENOTSUP if comp device does not support the comp transform.
 *  - Returns -ENOMEM if the private_xform could not be allocated.
 */</doc>
<def f='dpdk_1805/lib/librte_compressdev/rte_compressdev.c' l='659' ll='682' type='int rte_compressdev_private_xform_create(uint8_t dev_id, const struct rte_comp_xform * xform, void ** priv_xform)'/>
