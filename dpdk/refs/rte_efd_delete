<dec f='dpdk_1805/lib/librte_efd/rte_efd.h' l='222' type='int rte_efd_delete(struct rte_efd_table * table, unsigned int socket_id, const void * key, efd_value_t * prev_value)'/>
<def f='dpdk_1805/lib/librte_efd/rte_efd.c' l='1163' ll='1218' type='int rte_efd_delete(struct rte_efd_table *const table, const unsigned int socket_id, const void * key, efd_value_t *const prev_value)'/>
<doc f='dpdk_1805/lib/librte_efd/rte_efd.h' l='203'>/**
 * Removes any value currently associated with the specified key from the table
 * This operation is not multi-thread safe
 * and should only be called from one thread.
 *
 * @param table
 *   EFD table to reference
 * @param socket_id
 *   Socket ID to use to lookup existing value (ideally caller&apos;s socket id)
 * @param key
 *   EFD table key to delete
 * @param prev_value
 *   If not NULL, will store the previous value here before deleting it
 *
 * @return
 *   0 - successfully found and deleted the key
 *   nonzero otherwise
 */</doc>
