<def f='master/drivers/bus/dpaa/include/dpaa_rbtree.h' l='32' ll='34'/>
<size>16</size>
<doc f='master/drivers/bus/dpaa/include/dpaa_rbtree.h' l='15'>/* Linux has a good RB-tree implementation, that we can&apos;t use (GPL). It also has
 * a flat/hooked-in interface that virtually requires license-contamination in
 * order to write a caller-compatible implementation. Instead, I&apos;ve created an
 * RB-tree encapsulation on top of linux&apos;s primitives (it does some of the work
 * the client logic would normally do), and this gives us something we can
 * reimplement on LWE. Unfortunately there&apos;s no good+free RB-tree
 * implementations out there that are license-compatible and &quot;flat&quot; (ie. no
 * dynamic allocation). I did find a malloc-based one that I could convert, but
 * that will be a task for later on. For now, LWE&apos;s RB-tree is implemented using
 * an ordered linked-list.
 *
 * Note, the only linux-esque type is &quot;struct rb_node&quot;, because it&apos;s used
 * statically in the exported header, so it can&apos;t be opaque. Our version doesn&apos;t
 * include a &quot;rb_parent_color&quot; field because we&apos;re doing linked-list instead of
 * a true rb-tree.
 */</doc>
<mbr r='rb_node::prev' o='0' t='struct rb_node *'/>
<mbr r='rb_node::next' o='64' t='struct rb_node *'/>
