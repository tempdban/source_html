<dec f='master/lib/librte_ethdev/rte_ethdev.h' l='1647' type='int rte_eth_tx_queue_setup(uint16_t port_id, uint16_t tx_queue_id, uint16_t nb_tx_desc, unsigned int socket_id, const struct rte_eth_txconf * tx_conf)'/>
<use f='master/app/pdump/main.c' l='544' u='c' c='configure_vdev'/>
<doc f='master/lib/librte_ethdev/rte_ethdev.h' l='1599'>/**
 * Allocate and set up a transmit queue for an Ethernet device.
 *
 * @param port_id
 *   The port identifier of the Ethernet device.
 * @param tx_queue_id
 *   The index of the transmit queue to set up.
 *   The value must be in the range [0, nb_tx_queue - 1] previously supplied
 *   to rte_eth_dev_configure().
 * @param nb_tx_desc
 *   The number of transmit descriptors to allocate for the transmit ring.
 * @param socket_id
 *   The *socket_id* argument is the socket identifier in case of NUMA.
 *   Its value can be *SOCKET_ID_ANY* if there is no NUMA constraint for
 *   the DMA memory allocated for the transmit descriptors of the ring.
 * @param tx_conf
 *   The pointer to the configuration data to be used for the transmit queue.
 *   NULL value is allowed, in which case default TX configuration
 *   will be used.
 *   The *tx_conf* structure contains the following data:
 *   - The *tx_thresh* structure with the values of the Prefetch, Host, and
 *     Write-Back threshold registers of the transmit ring.
 *     When setting Write-Back threshold to the value greater then zero,
 *     *tx_rs_thresh* value should be explicitly set to one.
 *   - The *tx_free_thresh* value indicates the [minimum] number of network
 *     buffers that must be pending in the transmit ring to trigger their
 *     [implicit] freeing by the driver transmit function.
 *   - The *tx_rs_thresh* value indicates the [minimum] number of transmit
 *     descriptors that must be pending in the transmit ring before setting the
 *     RS bit on a descriptor by the driver transmit function.
 *     The *tx_rs_thresh* value should be less or equal then
 *     *tx_free_thresh* value, and both of them should be less then
 *     *nb_tx_desc* - 3.
 *   - The *offloads* member contains Tx offloads to be enabled.
 *     If an offloading set in tx_conf-&gt;offloads
 *     hasn&apos;t been set in the input argument eth_conf-&gt;txmode.offloads
 *     to rte_eth_dev_configure(), it is a new added offloading, it must be
 *     per-queue type and it is enabled for the queue.
 *     No need to repeat any bit in tx_conf-&gt;offloads which has already been
 *     enabled in rte_eth_dev_configure() at port level. An offloading enabled
 *     at port level can&apos;t be disabled at queue level.
 *
 *     Note that setting *tx_free_thresh* or *tx_rs_thresh* value to 0 forces
 *     the transmit function to use default values.
 * @return
 *   - 0: Success, the transmit queue is correctly set up.
 *   - -ENOMEM: Unable to allocate the transmit ring descriptors.
 */</doc>
<use f='master/app/test-eventdev/test_perf_common.c' l='730' u='c' c='perf_ethdev_setup'/>
<use f='master/app/test-eventdev/test_pipeline_common.c' l='274' u='c' c='pipeline_ethdev_setup'/>
<use f='master/app/test-pmd/cmdline.c' l='2618' u='c' c='cmd_setup_rxtx_queue_parsed'/>
<use f='master/app/test-pmd/testpmd.c' l='1691' u='c' c='start_port'/>
<use f='master/app/test-pmd/testpmd.c' l='1696' u='c' c='start_port'/>
<use f='master/drivers/net/bonding/rte_eth_bond_pmd.c' l='1755' u='c' c='slave_configure_slow_queue'/>
<use f='master/drivers/net/bonding/rte_eth_bond_pmd.c' l='1867' u='c' c='slave_configure'/>
<use f='master/drivers/net/failsafe/failsafe_ether.c' l='102' u='c' c='fs_eth_dev_conf_apply'/>
<use f='master/drivers/net/failsafe/failsafe_ops.c' l='697' u='c' c='fs_tx_queue_setup'/>
<use f='master/drivers/net/netvsc/hn_vf.c' l='388' u='c' c='hn_vf_tx_queue_setup'/>
<def f='master/lib/librte_ethdev/rte_ethdev.c' l='1556' ll='1651' type='int rte_eth_tx_queue_setup(uint16_t port_id, uint16_t tx_queue_id, uint16_t nb_tx_desc, unsigned int socket_id, const struct rte_eth_txconf * tx_conf)'/>
