<dec f='dpdk_1805/drivers/net/e1000/base/e1000_nvm.h' l='88' type='s32 e1000_write_nvm_spi(struct e1000_hw * hw, u16 offset, u16 words, u16 * data)'/>
<use f='dpdk_1805/drivers/net/e1000/base/e1000_80003es2lan.c' l='620' u='c' c='e1000_write_nvm_80003es2lan'/>
<use f='dpdk_1805/drivers/net/e1000/base/e1000_82541.c' l='171' u='r' c='e1000_init_nvm_params_82541'/>
<use f='dpdk_1805/drivers/net/e1000/base/e1000_82571.c' l='807' u='c' c='e1000_write_nvm_82571'/>
<use f='dpdk_1805/drivers/net/e1000/base/e1000_82575.c' l='389' u='r' c='e1000_init_nvm_params_82575'/>
<def f='dpdk_1805/drivers/net/e1000/base/e1000_nvm.c' l='606' ll='672' type='s32 e1000_write_nvm_spi(struct e1000_hw * hw, u16 offset, u16 words, u16 * data)'/>
<doc f='dpdk_1805/drivers/net/e1000/base/e1000_nvm.c' l='594'>/**
 *  e1000_write_nvm_spi - Write to EEPROM using SPI
 *  @hw: pointer to the HW structure
 *  @offset: offset within the EEPROM to be written to
 *  @words: number of words to write
 *  @data: 16 bit word(s) to be written to the EEPROM
 *
 *  Writes data to EEPROM at offset using SPI interface.
 *
 *  If e1000_update_nvm_checksum is not called after this function , the
 *  EEPROM will most likely contain an invalid checksum.
 **/</doc>
<dec f='dpdk_1805/kernel/linux/kni/ethtool/igb/e1000_nvm.h' l='51' type='s32 e1000_write_nvm_spi(struct e1000_hw * hw, u16 offset, u16 words, u16 * data)'/>
<use f='dpdk_1805/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='354' u='r' c='e1000_init_nvm_params_82575'/>
<def f='dpdk_1805/kernel/linux/kni/ethtool/igb/e1000_nvm.c' l='492' ll='558' type='s32 e1000_write_nvm_spi(struct e1000_hw * hw, u16 offset, u16 words, u16 * data)'/>
<doc f='dpdk_1805/kernel/linux/kni/ethtool/igb/e1000_nvm.c' l='480'>/**
 *  e1000_write_nvm_spi - Write to EEPROM using SPI
 *  @hw: pointer to the HW structure
 *  @offset: offset within the EEPROM to be written to
 *  @words: number of words to write
 *  @data: 16 bit word(s) to be written to the EEPROM
 *
 *  Writes data to EEPROM at offset using SPI interface.
 *
 *  If e1000_update_nvm_checksum is not called after this function , the
 *  EEPROM will most likely contain an invalid checksum.
 **/</doc>
