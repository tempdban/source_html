<dec f='master/lib/librte_pipeline/rte_pipeline.h' l='414' type='int rte_pipeline_table_entry_add(struct rte_pipeline * p, uint32_t table_id, void * key, struct rte_pipeline_table_entry * entry, int * key_found, struct rte_pipeline_table_entry ** entry_ptr)'/>
<doc f='master/lib/librte_pipeline/rte_pipeline.h' l='391'>/**
 * Pipeline table entry add
 *
 * @param p
 *   Handle to pipeline instance
 * @param table_id
 *   Table ID (returned by previous invocation of pipeline table create)
 * @param key
 *   Table entry key
 * @param entry
 *   New contents for the table entry identified by key
 * @param key_found
 *   On successful invocation, set to TRUE (value different than 0) if key was
 *   already present in the table before the add operation and to FALSE (value
 *   0) if not
 * @param entry_ptr
 *   On successful invocation, pointer to the table entry associated with key.
 *   This can be used for further read-write accesses to this table entry and
 *   is valid until the key is deleted from the table or re-added (usually for
 *   associating different actions and/or action meta-data to the current key)
 * @return
 *   0 on success, error code otherwise
 */</doc>
<use f='master/drivers/net/softnic/rte_eth_softnic_thread.c' l='1211' u='c' c='softnic_pipeline_table_rule_add'/>
<use f='master/drivers/net/softnic/rte_eth_softnic_thread.c' l='1434' u='c' c='softnic_pipeline_table_rule_add_bulk'/>
<use f='master/drivers/net/softnic/rte_eth_softnic_thread.c' l='2467' u='c' c='pipeline_msg_handle_table_rule_add'/>
<use f='master/drivers/net/softnic/rte_eth_softnic_thread.c' l='2592' u='c' c='pipeline_msg_handle_table_rule_add_bulk'/>
<def f='master/lib/librte_pipeline/rte_pipeline.c' l='482' ll='541' type='int rte_pipeline_table_entry_add(struct rte_pipeline * p, uint32_t table_id, void * key, struct rte_pipeline_table_entry * entry, int * key_found, struct rte_pipeline_table_entry ** entry_ptr)'/>
