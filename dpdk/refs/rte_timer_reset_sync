<dec f='master/lib/librte_timer/rte_timer.h' l='228' type='void rte_timer_reset_sync(struct rte_timer * tim, uint64_t ticks, enum rte_timer_type type, unsigned int tim_lcore, rte_timer_cb_t fct, void * arg)'/>
<doc f='master/lib/librte_timer/rte_timer.h' l='201'>/**
 * Loop until rte_timer_reset() succeeds.
 *
 * Reset and start the timer associated with the timer handle. Always
 * succeed. See rte_timer_reset() for details.
 *
 * @param tim
 *   The timer handle.
 * @param ticks
 *   The number of cycles (see rte_get_hpet_hz()) before the callback
 *   function is called.
 * @param type
 *   The type can be either:
 *   - PERIODICAL: The timer is automatically reloaded after execution
 *     (returns to the PENDING state)
 *   - SINGLE: The timer is one-shot, that is, the timer goes to a
 *     STOPPED state after execution.
 * @param tim_lcore
 *   The ID of the lcore where the timer callback function has to be
 *   executed. If tim_lcore is LCORE_ID_ANY, the timer library will
 *   launch it on a different core for each call (round-robin).
 * @param fct
 *   The callback function of the timer.
 * @param arg
 *   The user argument of the callback function.
 */</doc>
<use f='master/lib/librte_eventdev/rte_event_timer_adapter.c' l='568' u='c' c='sw_event_timer_cb'/>
<def f='master/lib/librte_timer/rte_timer.c' l='419' ll='427' type='void rte_timer_reset_sync(struct rte_timer * tim, uint64_t ticks, enum rte_timer_type type, unsigned int tim_lcore, rte_timer_cb_t fct, void * arg)'/>
<doc f='master/lib/librte_timer/rte_timer.c' l='418'>/* loop until rte_timer_reset() succeed */</doc>
