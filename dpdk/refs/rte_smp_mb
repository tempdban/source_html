<def f='master/lib/librte_eal/common/include/arch/x86/rte_atomic.h' l='66' ll='74' type='void rte_smp_mb()'/>
<doc f='master/lib/librte_eal/common/include/arch/x86/rte_atomic.h' l='34'>/*
 * From Intel Software Development Manual; Vol 3;
 * 8.2.2 Memory Ordering in P6 and More Recent Processor Families:
 * ...
 * . Reads are not reordered with other reads.
 * . Writes are not reordered with older reads.
 * . Writes to memory are not reordered with other writes,
 *   with the following exceptions:
 *   . streaming stores (writes) executed with the non-temporal move
 *     instructions (MOVNTI, MOVNTQ, MOVNTDQ, MOVNTPS, and MOVNTPD); and
 *   . string operations (see Section 8.2.4.1).
 *  ...
 * . Reads may be reordered with older writes to different locations but not
 * with older writes to the same location.
 * . Reads or writes cannot be reordered with I/O instructions,
 * locked instructions, or serializing instructions.
 * . Reads cannot pass earlier LFENCE and MFENCE instructions.
 * . Writes ... cannot pass earlier LFENCE, SFENCE, and MFENCE instructions.
 * . LFENCE instructions cannot pass earlier reads.
 * . SFENCE instructions cannot pass earlier writes ...
 * . MFENCE instructions cannot pass earlier reads, writes ...
 *
 * As pointed by Java guys, that makes possible to use lock-prefixed
 * instructions to get the same effect as mfence and on most modern HW
 * that gives a better perfomance then using mfence:
 * https://shipilev.net/blog/2014/on-the-fence-with-dependencies/
 * Basic idea is to use lock prefixed add with some dummy memory location
 * as the destination. From their experiments 128B(2 cache lines) below
 * current stack pointer looks like a good candidate.
 * So below we use that techinque for rte_smp_mb() implementation.
 */</doc>
<use f='master/drivers/bus/vmbus/vmbus_bufring.c' l='59' u='c' c='vmbus_txbr_need_signal'/>
<use f='master/lib/librte_bpf/bpf_pkt.c' l='96' u='c' c='bpf_eth_cbi_inuse'/>
<use f='master/lib/librte_bpf/bpf_pkt.c' l='119' u='c' c='bpf_eth_cbi_wait'/>
<use f='master/lib/librte_bpf/bpf_pkt.c' l='457' u='c' c='bpf_eth_cbi_unload'/>
<use f='master/lib/librte_vhost/vhost.h' l='672' u='c' c='vhost_vring_call_split'/>
<use f='master/lib/librte_vhost/vhost.h' l='703' u='c' c='vhost_vring_call_packed'/>
