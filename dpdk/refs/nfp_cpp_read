<dec f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_cpp.h' l='459' type='int nfp_cpp_read(struct nfp_cpp * cpp, uint32_t cpp_id, unsigned long long address, void * kernel_vaddr, size_t length)'/>
<doc f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_cpp.h' l='448'>/*
 * Read a block of data from a NFP CPP ID
 *
 * @param[in]	cpp	NFP CPP handle
 * @param[in]	cpp_id	NFP CPP ID
 * @param[in]	address	Offset into the NFP CPP ID address space
 * @param[in]	kernel_vaddr	Buffer to copy read data to
 * @param[in]	length	Size of the area to reserve
 *
 * @return bytes read on success, -1 on failure (and set errno accordingly).
 */</doc>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='482' u='c' c='nfp_cpp_readl'/>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='507' u='c' c='nfp_cpp_readq'/>
<def f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='692' ll='709' type='int nfp_cpp_read(struct nfp_cpp * cpp, uint32_t destination, unsigned long long address, void * kernel_vaddr, size_t length)'/>
<doc f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_cppcore.c' l='684'>/*
 * nfp_cpp_read - read from CPP target
 * @cpp:        CPP handle
 * @destination:    CPP id
 * @address:        offset into CPP target
 * @kernel_vaddr:   kernel buffer for result
 * @length:     number of bytes to read
 */</doc>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_hwinfo.c' l='106' u='c' c='nfp_hwinfo_try_fetch'/>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_mip.c' l='44' u='c' c='nfp_mip_try_read'/>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_nffw.c' l='140' u='c' c='nfp_nffw_info_open'/>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_nsp.c' l='343' u='c' c='nfp_nsp_command_buf'/>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_resource.c' l='91' u='c' c='nfp_cpp_resource_find'/>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_rtsym.c' l='155' u='c' c='__nfp_rtsym_table_read'/>
<use f='dpdk_1805/drivers/net/nfp/nfpcore/nfp_rtsym.c' l='159' u='c' c='__nfp_rtsym_table_read'/>
