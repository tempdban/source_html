<dec f='dpdk_1805/lib/librte_eal/common/include/rte_eal_interrupts.h' l='181' type='int rte_intr_efd_enable(struct rte_intr_handle * intr_handle, uint32_t nb_efd)'/>
<doc f='dpdk_1805/lib/librte_eal/common/include/rte_eal_interrupts.h' l='166'>/**
 * It enables the packet I/O interrupt event if it&apos;s necessary.
 * It creates event fd for each interrupt vector when MSIX is used,
 * otherwise it multiplexes a single event fd.
 *
 * @param intr_handle
 *   Pointer to the interrupt handle.
 * @param nb_efd
 *   Number of interrupt vector trying to enable.
 *   The value 0 is not allowed.
 * @return
 *   - On success, zero.
 *   - On failure, a negative value.
 */</doc>
<use f='dpdk_1805/drivers/net/avf/avf_ethdev.c' l='297' u='c' c='avf_config_rx_queues_irqs'/>
<use f='dpdk_1805/drivers/net/bnxt/bnxt_ethdev.c' l='339' u='c' c='bnxt_init_chip'/>
<use f='dpdk_1805/drivers/net/e1000/em_ethdev.c' l='588' u='c' c='eth_em_start'/>
<use f='dpdk_1805/drivers/net/e1000/igb_ethdev.c' l='1322' u='c' c='eth_igb_start'/>
<use f='dpdk_1805/drivers/net/e1000/igb_ethdev.c' l='3248' u='c' c='igbvf_dev_start'/>
<use f='dpdk_1805/drivers/net/enic/enic_main.c' l='467' u='c' c='enic_rxq_intr_init'/>
<use f='dpdk_1805/drivers/net/failsafe/failsafe_ops.c' l='366' u='c' c='fs_rx_queue_setup'/>
<use f='dpdk_1805/drivers/net/fm10k/fm10k_ethdev.c' l='2430' u='c' c='fm10k_dev_rxq_interrupt_setup'/>
<use f='dpdk_1805/drivers/net/i40e/i40e_ethdev.c' l='2182' u='c' c='i40e_dev_start'/>
<use f='dpdk_1805/drivers/net/i40e/i40e_ethdev_vf.c' l='1964' u='c' c='i40evf_dev_start'/>
<use f='dpdk_1805/drivers/net/ixgbe/ixgbe_ethdev.c' l='2579' u='c' c='ixgbe_dev_start'/>
<use f='dpdk_1805/drivers/net/ixgbe/ixgbe_ethdev.c' l='5089' u='c' c='ixgbevf_dev_start'/>
<use f='dpdk_1805/drivers/net/nfp/nfp_net.c' l='731' u='c' c='nfp_net_start'/>
<use f='dpdk_1805/drivers/net/virtio/virtio_ethdev.c' l='1396' u='c' c='virtio_configure_intr'/>
<def f='dpdk_1805/lib/librte_eal/linuxapp/eal/eal_interrupts.c' l='1153' ll='1189' type='int rte_intr_efd_enable(struct rte_intr_handle * intr_handle, uint32_t nb_efd)'/>
