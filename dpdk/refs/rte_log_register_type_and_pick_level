<dec f='dpdk_1805/lib/librte_eal/common/include/rte_log.h' l='229' type='int rte_log_register_type_and_pick_level(const char * name, uint32_t level_def)'/>
<doc f='dpdk_1805/lib/librte_eal/common/include/rte_log.h' l='210'>/**
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * Register a dynamic log type and try to pick its level from EAL options
 *
 * rte_log_register() is called inside. If successful, the function tries
 * to search for matching regexp in the list of EAL log level options and
 * pick the level from the last matching entry. If nothing can be applied
 * from the list, the level will be set to the user-defined default value.
 *
 * @param name
 *    Name for the log type to be registered
 * @param level_def
 *    Fallback level to be set if the global list has no matching options
 * @return
 *    - &gt;=0: the newly registered log type
 *    - &lt;0: rte_log_register() error value
 */</doc>
<use f='dpdk_1805/drivers/net/sfc/sfc.c' l='1099' u='c' c='sfc_register_logtype'/>
<use f='dpdk_1805/drivers/net/sfc/sfc_ethdev.c' l='2099' u='c' c='sfc_driver_register_logtype'/>
<def f='dpdk_1805/lib/librte_eal/common/eal_common_log.c' l='271' ll='298' type='int rte_log_register_type_and_pick_level(const char * name, uint32_t level_def)'/>
<doc f='dpdk_1805/lib/librte_eal/common/eal_common_log.c' l='270'>/* Register an extended log type and try to pick its level from EAL options */</doc>
