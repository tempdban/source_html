<dec f='master/lib/librte_flow_classify/rte_flow_classify.h' l='230' type='struct rte_flow_classify_rule * rte_flow_classify_table_entry_add(struct rte_flow_classifier * cls, const struct rte_flow_attr * attr, const struct rte_flow_item * pattern, const struct rte_flow_action * actions, int * key_found, struct rte_flow_error * error)'/>
<def f='master/lib/librte_flow_classify/rte_flow_classify.c' l='486' ll='566' type='struct rte_flow_classify_rule * rte_flow_classify_table_entry_add(struct rte_flow_classifier * cls, const struct rte_flow_attr * attr, const struct rte_flow_item * pattern, const struct rte_flow_action * actions, int * key_found, struct rte_flow_error * error)'/>
<doc f='master/lib/librte_flow_classify/rte_flow_classify.h' l='210'>/**
 * Add a flow classify rule to the flow_classifer table.
 *
 * @param[in] cls
 *   Flow classifier handle
 * @param[in] attr
 *   Flow rule attributes
 * @param[in] pattern
 *   Pattern specification (list terminated by the END pattern item).
 * @param[in] actions
 *   Associated actions (list terminated by the END pattern item).
 * @param[out] key_found
 *  returns 1 if rule present already, 0 otherwise.
 * @param[out] error
 *   Perform verbose error reporting if not NULL. Structure
 *   initialised in case of error only.
 * @return
 *   A valid handle in case of success, NULL otherwise.
 */</doc>
