<dec f='master/lib/librte_gso/rte_gso.h' l='115' type='int rte_gso_segment(struct rte_mbuf * pkt, const struct rte_gso_ctx * ctx, struct rte_mbuf ** pkts_out, uint16_t nb_pkts_out)'/>
<doc f='master/lib/librte_gso/rte_gso.h' l='68'>/**
 * Segmentation function, which supports processing of both single- and
 * multi- MBUF packets.
 *
 * Note that we refer to the packets that are segmented from the input
 * packet as &apos;GSO segments&apos;. rte_gso_segment() doesn&apos;t check if the
 * input packet has correct checksums, and doesn&apos;t update checksums for
 * output GSO segments. Additionally, it doesn&apos;t process IP fragment
 * packets.
 *
 * Before calling rte_gso_segment(), applications must set proper ol_flags
 * for the packet. The GSO library uses the same macros as that of TSO.
 * For example, set PKT_TX_TCP_SEG and PKT_TX_IPV4 in ol_flags to segment
 * a TCP/IPv4 packet. If rte_gso_segment() succeeds, the PKT_TX_TCP_SEG
 * flag is removed for all GSO segments and the input packet.
 *
 * Each of the newly-created GSO segments is organized as a two-segment
 * MBUF, where the first segment is a standard MBUF, which stores a copy
 * of packet header, and the second is an indirect MBUF which points to
 * a section of data in the input packet. Since each GSO segment has
 * multiple MBUFs (i.e. typically 2 MBUFs), the driver of the interface which
 * the GSO segments are sent to should support transmission of multi-segment
 * packets.
 *
 * If the input packet is GSO&apos;d, its mbuf refcnt reduces by 1. Therefore,
 * when all GSO segments are freed, the input packet is freed automatically.
 *
 * If the memory space in pkts_out or MBUF pools is insufficient, this
 * function fails, and it returns (-1) * errno. Otherwise, GSO succeeds,
 * and this function returns the number of output GSO segments filled in
 * pkts_out.
 *
 * @param pkt
 *  The packet mbuf to segment.
 * @param ctx
 *  GSO context object pointer.
 * @param pkts_out
 *  Pointer array used to store the MBUF addresses of output GSO
 *  segments, when rte_gso_segment() succeeds.
 * @param nb_pkts_out
 *  The max number of items that pkts_out can keep.
 *
 * @return
 *  - The number of GSO segments filled in pkts_out on success.
 *  - Return -ENOMEM if run out of memory in MBUF pools.
 *  - Return -EINVAL for invalid parameters.
 */</doc>
<use f='master/app/test-pmd/csumonly.c' l='947' u='c' c='pkt_burst_checksum_forward'/>
<use f='master/drivers/net/tap/rte_eth_tap.c' l='652' u='c' c='pmd_tx_burst'/>
<def f='master/lib/librte_gso/rte_gso.c' l='26' ll='95' type='int rte_gso_segment(struct rte_mbuf * pkt, const struct rte_gso_ctx * gso_ctx, struct rte_mbuf ** pkts_out, uint16_t nb_pkts_out)'/>
