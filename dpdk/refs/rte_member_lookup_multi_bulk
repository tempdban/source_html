<dec f='dpdk_1805/lib/librte_member/rte_member.h' l='400' type='int rte_member_lookup_multi_bulk(const struct rte_member_setsum * setsum, const void ** keys, uint32_t num_keys, uint32_t max_match_per_key, uint32_t * match_count, member_set_t * set_ids)'/>
<def f='dpdk_1805/lib/librte_member/rte_member.c' l='244' ll='264' type='int rte_member_lookup_multi_bulk(const struct rte_member_setsum * setsum, const void ** keys, uint32_t num_keys, uint32_t max_match_per_key, uint32_t * match_count, member_set_t * set_ids)'/>
<doc f='dpdk_1805/lib/librte_member/rte_member.h' l='373'>/**
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * Lookup a bulk of keys in set-summary (SS) for multiple matches each key.
 * Each key lookup will find all matched entries (multiple match).
 * Note that for cache mode HT, each key can have at most one match. So
 * multi-match function is mainly used for vBF and non-cache mode HT.
 *
 * @param setsum
 *   Pointer of a setsummary.
 * @param keys
 *   Pointer of the keys to be looked up.
 * @param num_keys
 *   The number of keys that will be lookup.
 * @param max_match_per_key
 *   The possible maximum number of matches for each key.
 * @param match_count
 *   Output the number of matches for each key in an array.
 * @param set_ids
 *   Return set ids for all the matches of all keys. Users pass in a
 *   preallocated 2D array with first dimension as key index and second
 *   dimension as match index. For example set_ids[bulk_size][max_match_per_key]
 * @return
 *   The number of keys that found one or more matches in the set-summary.
 */</doc>
