<dec f='dpdk_1805/drivers/net/dpaa2/mc/fsl_dpni.h' l='1118' type='int dpni_set_taildrop(struct fsl_mc_io * mc_io, uint32_t cmd_flags, uint16_t token, enum dpni_congestion_point cg_point, enum dpni_queue_type q_type, uint8_t tc, uint8_t q_index, struct dpni_taildrop * taildrop)'/>
<use f='dpdk_1805/drivers/net/dpaa2/dpaa2_ethdev.c' l='493' u='c' c='dpaa2_dev_rx_queue_setup'/>
<def f='dpdk_1805/drivers/net/dpaa2/mc/dpni.c' l='1851' ll='1882' type='int dpni_set_taildrop(struct fsl_mc_io * mc_io, uint32_t cmd_flags, uint16_t token, enum dpni_congestion_point cg_point, enum dpni_queue_type qtype, uint8_t tc, uint8_t index, struct dpni_taildrop * taildrop)'/>
<doc f='dpdk_1805/drivers/net/dpaa2/mc/dpni.c' l='1830'>/**
 * dpni_set_taildrop() - Set taildrop per queue or TC
 *
 * Setting a per-TC taildrop (cg_point = DPNI_CP_GROUP) will reset any current
 * congestion notification or early drop (WRED) configuration previously applied
 * to the same TC.
 *
 * @mc_io:	Pointer to MC portal&apos;s I/O object
 * @cmd_flags:	Command flags; one or more of &apos;MC_CMD_FLAG_&apos;
 * @token:	Token of DPNI object
 * @cg_point:	Congestion point, DPNI_CP_QUEUE is only supported in
 *		combination with DPNI_QUEUE_RX.
 * @q_type:	Queue type, can be DPNI_QUEUE_RX or DPNI_QUEUE_TX.
 * @tc:		Traffic class to apply this taildrop to
 * @q_index:	Index of the queue if the DPNI supports multiple queues for
 *		traffic distribution.
 *		Ignored if CONGESTION_POINT is not DPNI_CP_QUEUE.
 * @taildrop:	Taildrop structure
 *
 * Return:	&apos;0&apos; on Success; Error code otherwise.
 */</doc>
