<def f='dpdk_1805/lib/librte_ring/rte_ring_generic.h' l='55' ll='100' type='unsigned int __rte_ring_move_prod_head(struct rte_ring * r, unsigned int is_sp, unsigned int n, enum rte_ring_queue_behavior behavior, uint32_t * old_head, uint32_t * new_head, uint32_t * free_entries)'/>
<use f='dpdk_1805/lib/librte_ring/rte_ring.h' l='343' u='c' c='__rte_ring_do_enqueue'/>
<doc f='dpdk_1805/lib/librte_ring/rte_ring_generic.h' l='32'>/**
 * @internal This function updates the producer head for enqueue
 *
 * @param r
 *   A pointer to the ring structure
 * @param is_sp
 *   Indicates whether multi-producer path is needed or not
 * @param n
 *   The number of elements we will want to enqueue, i.e. how far should the
 *   head be moved
 * @param behavior
 *   RTE_RING_QUEUE_FIXED:    Enqueue a fixed number of items from a ring
 *   RTE_RING_QUEUE_VARIABLE: Enqueue as many items as possible from ring
 * @param old_head
 *   Returns head value as it was before the move, i.e. where enqueue starts
 * @param new_head
 *   Returns the current/new head value i.e. where enqueue finishes
 * @param free_entries
 *   Returns the amount of free space in the ring BEFORE head was moved
 * @return
 *   Actual number of objects enqueued.
 *   If behavior == RTE_RING_QUEUE_FIXED, this will be 0 or n only.
 */</doc>
<use f='dpdk_1805/lib/librte_eventdev/rte_event_ring.h' l='94' u='c' c='rte_event_ring_enqueue_burst'/>
