<dec f='master/drivers/net/e1000/base/e1000_mac.h' l='79' type='s32 e1000_write_8bit_ctrl_reg_generic(struct e1000_hw * hw, u32 reg, u32 offset, u8 data)'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1983' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1984' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1985' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1986' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1989' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1990' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1993' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1994' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1995' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1996' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='1999' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='2000' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_82575.c' l='2001' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/drivers/net/e1000/base/e1000_api.c' l='1328' u='c' c='e1000_write_8bit_ctrl_reg'/>
<def f='master/drivers/net/e1000/base/e1000_mac.c' l='2225' ll='2249' type='s32 e1000_write_8bit_ctrl_reg_generic(struct e1000_hw * hw, u32 reg, u32 offset, u8 data)'/>
<doc f='master/drivers/net/e1000/base/e1000_mac.c' l='2214'>/**
 *  e1000_write_8bit_ctrl_reg_generic - Write a 8bit CTRL register
 *  @hw: pointer to the HW structure
 *  @reg: 32bit register offset such as E1000_SCTL
 *  @offset: register offset to write to
 *  @data: data to write at register offset
 *
 *  Writes an address/data control type register.  There are several of these
 *  and they all have the format address &lt;&lt; 8 | data and bit 31 is polled for
 *  completion.
 **/</doc>
<dec f='master/kernel/linux/kni/ethtool/igb/e1000_mac.h' l='50' type='s32 e1000_write_8bit_ctrl_reg_generic(struct e1000_hw * hw, u32 reg, u32 offset, u8 data)'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1934' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1935' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1936' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1937' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1940' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1941' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1944' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1945' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1946' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1947' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1950' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1951' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1952' u='c' c='e1000_reset_init_script_82575'/>
<use f='master/kernel/linux/kni/ethtool/igb/e1000_api.c' l='1063' u='c' c='e1000_write_8bit_ctrl_reg'/>
<def f='master/kernel/linux/kni/ethtool/igb/e1000_mac.c' l='2057' ll='2081' type='s32 e1000_write_8bit_ctrl_reg_generic(struct e1000_hw * hw, u32 reg, u32 offset, u8 data)'/>
<doc f='master/kernel/linux/kni/ethtool/igb/e1000_mac.c' l='2046'>/**
 *  e1000_write_8bit_ctrl_reg_generic - Write a 8bit CTRL register
 *  @hw: pointer to the HW structure
 *  @reg: 32bit register offset such as E1000_SCTL
 *  @offset: register offset to write to
 *  @data: data to write at register offset
 *
 *  Writes an address/data control type register.  There are several of these
 *  and they all have the format address &lt;&lt; 8 | data and bit 31 is polled for
 *  completion.
 **/</doc>
