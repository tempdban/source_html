<dec f='master/lib/librte_gso/gso_common.h' l='138' type='int gso_do_segment(struct rte_mbuf * pkt, uint16_t pkt_hdr_offset, uint16_t pyld_unit_size, struct rte_mempool * direct_pool, struct rte_mempool * indirect_pool, struct rte_mbuf ** pkts_out, uint16_t nb_pkts_out)'/>
<def f='master/lib/librte_gso/gso_common.c' l='41' ll='124' type='int gso_do_segment(struct rte_mbuf * pkt, uint16_t pkt_hdr_offset, uint16_t pyld_unit_size, struct rte_mempool * direct_pool, struct rte_mempool * indirect_pool, struct rte_mbuf ** pkts_out, uint16_t nb_pkts_out)'/>
<doc f='master/lib/librte_gso/gso_common.h' l='109'>/**
 * Internal function which divides the input packet into small segments.
 * Each of the newly-created segments is organized as a two-segment MBUF,
 * where the first segment is a standard mbuf, which stores a copy of
 * packet header, and the second is an indirect mbuf which points to a
 * section of data in the input packet.
 *
 * @param pkt
 *  Packet to segment.
 * @param pkt_hdr_offset
 *  Packet header offset, measured in bytes.
 * @param pyld_unit_size
 *  The max payload length of a GSO segment.
 * @param direct_pool
 *  MBUF pool used for allocating direct buffers for output segments.
 * @param indirect_pool
 *  MBUF pool used for allocating indirect buffers for output segments.
 * @param pkts_out
 *  Pointer array used to keep the mbuf addresses of output segments. If
 *  the memory space in pkts_out is insufficient, gso_do_segment() fails
 *  and returns -EINVAL.
 * @param nb_pkts_out
 *  The max number of items that pkts_out can keep.
 *
 * @return
 *  - The number of segments created in the event of success.
 *  - Return -ENOMEM if run out of memory in MBUF pools.
 *  - Return -EINVAL for invalid parameters.
 */</doc>
<use f='master/lib/librte_gso/gso_tcp4.c' l='67' u='c' c='gso_tcp4_segment'/>
<use f='master/lib/librte_gso/gso_tunnel_tcp4.c' l='89' u='c' c='gso_tunnel_tcp4_segment'/>
<use f='master/lib/librte_gso/gso_udp4.c' l='75' u='c' c='gso_udp4_segment'/>
