<dec f='dpdk_1805/lib/librte_mbuf/rte_mbuf.h' l='1168' type='struct rte_mempool * rte_pktmbuf_pool_create_by_ops(const char * name, unsigned int n, unsigned int cache_size, uint16_t priv_size, uint16_t data_room_size, int socket_id, const char * ops_name)'/>
<doc f='dpdk_1805/lib/librte_mbuf/rte_mbuf.h' l='1130'>/**
 * Create a mbuf pool with a given mempool ops name
 *
 * This function creates and initializes a packet mbuf pool. It is
 * a wrapper to rte_mempool functions.
 *
 * @param name
 *   The name of the mbuf pool.
 * @param n
 *   The number of elements in the mbuf pool. The optimum size (in terms
 *   of memory usage) for a mempool is when n is a power of two minus one:
 *   n = (2^q - 1).
 * @param cache_size
 *   Size of the per-core object cache. See rte_mempool_create() for
 *   details.
 * @param priv_size
 *   Size of application private are between the rte_mbuf structure
 *   and the data buffer. This value must be aligned to RTE_MBUF_PRIV_ALIGN.
 * @param data_room_size
 *   Size of data buffer in each mbuf, including RTE_PKTMBUF_HEADROOM.
 * @param socket_id
 *   The socket identifier where the memory should be allocated. The
 *   value can be *SOCKET_ID_ANY* if there is no NUMA constraint for the
 *   reserved zone.
 * @param ops_name
 *   The mempool ops name to be used for this mempool instead of
 *   default mempool. The value can be *NULL* to use default mempool.
 * @return
 *   The pointer to the new allocated mempool, on success. NULL on error
 *   with rte_errno set appropriately. Possible rte_errno values include:
 *    - E_RTE_NO_CONFIG - function could not get pointer to rte_config structure
 *    - E_RTE_SECONDARY - function was called from a secondary process instance
 *    - EINVAL - cache size provided is too large, or priv_size is not aligned.
 *    - ENOSPC - the maximum number of memzones has already been allocated
 *    - EEXIST - a memzone with the same name already exists
 *    - ENOMEM - no appropriate memory area found in which to create memzone
 */</doc>
<def f='dpdk_1805/lib/librte_mbuf/rte_mbuf.c' l='110' ll='158' type='struct rte_mempool * rte_pktmbuf_pool_create_by_ops(const char * name, unsigned int n, unsigned int cache_size, uint16_t priv_size, uint16_t data_room_size, int socket_id, const char * ops_name)'/>
<use f='dpdk_1805/lib/librte_mbuf/rte_mbuf.c' l='166' u='c' c='rte_pktmbuf_pool_create'/>
<doc f='dpdk_1805/lib/librte_mbuf/rte_mbuf.c' l='109'>/* Helper to create a mbuf pool with given mempool ops name*/</doc>
