<dec f='dpdk_1805/lib/librte_eal/common/include/rte_memory.h' l='482' type='int rte_mem_alloc_validator_register(const char * name, rte_mem_alloc_validator_t clb, int socket_id, size_t limit)'/>
<doc f='dpdk_1805/lib/librte_eal/common/include/rte_memory.h' l='447'>/**
 * @brief Register validator callback for memory allocations.
 *
 * Callbacks registered by this function will be called right before memory
 * allocator is about to trigger allocation of more pages from the system if
 * said allocation will bring total memory usage above specified limit on
 * specified socket. User will be able to cancel pending allocation if callback
 * returns -1.
 *
 * @note callbacks will happen while memory hotplug subsystem is write-locked,
 *       therefore some functions (e.g. `rte_memseg_walk()`) will cause a
 *       deadlock when called from within such callbacks.
 *
 * @note validator callbacks not being supported is an expected error condition,
 *       so user code needs to handle this situation. In these cases, return
 *       value will be -1, and rte_errno will be set to ENOTSUP.
 *
 * @param name
 *   Name associated with specified callback to be added to the list.
 *
 * @param clb
 *   Callback function pointer.
 *
 * @param socket_id
 *   Socket ID on which to watch for allocations.
 *
 * @param limit
 *   Limit above which to trigger callbacks.
 *
 * @return
 *   0 on successful callback register
 *   -1 on unsuccessful callback register, with rte_errno value indicating
 *   reason for failure.
 */</doc>
<def f='dpdk_1805/lib/librte_eal/common/eal_common_memory.c' l='353' ll='365' type='int rte_mem_alloc_validator_register(const char * name, rte_mem_alloc_validator_t clb, int socket_id, size_t limit)'/>
<use f='dpdk_1805/lib/librte_eal/linuxapp/eal/eal_memory.c' l='1744' u='c' c='eal_hugepage_init'/>
