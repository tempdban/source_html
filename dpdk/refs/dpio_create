<dec f='master/drivers/bus/fslmc/mc/fsl_dpio.h' l='49' type='int dpio_create(struct fsl_mc_io * mc_io, uint16_t dprc_token, uint32_t cmd_flags, const struct dpio_cfg * cfg, uint32_t * obj_id)'/>
<def f='master/drivers/bus/fslmc/mc/dpio.c' l='101' ll='130' type='int dpio_create(struct fsl_mc_io * mc_io, uint16_t dprc_token, uint32_t cmd_flags, const struct dpio_cfg * cfg, uint32_t * obj_id)'/>
<doc f='master/drivers/bus/fslmc/mc/dpio.c' l='79'>/**
 * dpio_create() - Create the DPIO object.
 * @mc_io:	Pointer to MC portal&apos;s I/O object
 * @dprc_token:	Parent container token; &apos;0&apos; for default container
 * @cmd_flags:	Command flags; one or more of &apos;MC_CMD_FLAG_&apos;
 * @cfg:	Configuration structure
 * @obj_id:	Returned object id
 *
 * Create the DPIO object, allocate required resources and
 * perform required initialization.
 *
 * The object can be created either by declaring it in the
 * DPL file, or by calling this function.
 *
 * The function accepts an authentication token of a parent
 * container that this object should be assigned to. The token
 * can be &apos;0&apos; so the object will be assigned to the default container.
 * The newly created object can be opened with the returned
 * object id and using the container&apos;s associated tokens and MC portals.
 *
 * Return:	&apos;0&apos; on Success; Error code otherwise.
 */</doc>
