<dec f='dpdk_1805/lib/librte_ethdev/rte_tm.h' l='1116' type='int rte_tm_node_type_get(uint16_t port_id, uint32_t node_id, int * is_leaf, struct rte_tm_error * error)'/>
<use f='dpdk_1805/app/test-pmd/cmdline_tm.c' l='505' u='c' c='cmd_show_port_tm_node_cap_parsed'/>
<use f='dpdk_1805/app/test-pmd/cmdline_tm.c' l='735' u='c' c='cmd_show_port_tm_node_type_parsed'/>
<doc f='dpdk_1805/lib/librte_ethdev/rte_tm.h' l='1096'>/**
 * Traffic manager node ID validate and type (i.e. leaf or non-leaf) get
 *
 * The leaf nodes have predefined IDs in the range of 0 .. (N-1), where N is
 * the number of TX queues of the current Ethernet port. The non-leaf nodes
 * have their IDs generated by the application outside of the above range,
 * which is reserved for leaf nodes.
 *
 * @param[in] port_id
 *   The port identifier of the Ethernet device.
 * @param[in] node_id
 *   Node ID value. Needs to be valid.
 * @param[out] is_leaf
 *   Set to non-zero value when node is leaf and to zero otherwise (non-leaf).
 * @param[out] error
 *   Error details. Filled in only on error, when not NULL.
 * @return
 *   0 on success, non-zero error code otherwise.
 */</doc>
<def f='dpdk_1805/lib/librte_ethdev/rte_tm.c' l='86' ll='95' type='int rte_tm_node_type_get(uint16_t port_id, uint32_t node_id, int * is_leaf, struct rte_tm_error * error)'/>
<doc f='dpdk_1805/lib/librte_ethdev/rte_tm.c' l='85'>/* Check node type (leaf or non-leaf) */</doc>
