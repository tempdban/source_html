<dec f='master/drivers/bus/fslmc/mc/fsl_dpcon.h' l='39' type='int dpcon_create(struct fsl_mc_io * mc_io, uint16_t dprc_token, uint32_t cmd_flags, const struct dpcon_cfg * cfg, uint32_t * obj_id)'/>
<def f='master/drivers/bus/fslmc/mc/dpcon.c' l='102' ll='128' type='int dpcon_create(struct fsl_mc_io * mc_io, uint16_t dprc_token, uint32_t cmd_flags, const struct dpcon_cfg * cfg, uint32_t * obj_id)'/>
<doc f='master/drivers/bus/fslmc/mc/dpcon.c' l='81'>/**
 * dpcon_create() - Create the DPCON object.
 * @mc_io:	Pointer to MC portal&apos;s I/O object
 * @dprc_token:	Parent container token; &apos;0&apos; for default container
 * @cmd_flags:	Command flags; one or more of &apos;MC_CMD_FLAG_&apos;
 * @cfg:	Configuration structure
 * @obj_id:	Returned object id; use in subsequent API calls
 *
 * Create the DPCON object, allocate required resources and
 * perform required initialization.
 *
 * The object can be created either by declaring it in the
 * DPL file, or by calling this function.
 *
 * This function accepts an authentication token of a parent
 * container that this object should be assigned to and returns
 * an object id. This object_id will be used in all subsequent calls to
 * this specific object.
 *
 * Return:	&apos;0&apos; on Success; Error code otherwise.
 */</doc>
