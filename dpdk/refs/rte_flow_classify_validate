<dec f='master/lib/librte_flow_classify/rte_flow_classify.h' l='204' type='int rte_flow_classify_validate(struct rte_flow_classifier * cls, const struct rte_flow_attr * attr, const struct rte_flow_item * pattern, const struct rte_flow_action * actions, struct rte_flow_error * error)'/>
<def f='master/lib/librte_flow_classify/rte_flow_classify.c' l='91' ll='169' type='int rte_flow_classify_validate(struct rte_flow_classifier * cls, const struct rte_flow_attr * attr, const struct rte_flow_item * pattern, const struct rte_flow_action * actions, struct rte_flow_error * error)'/>
<use f='master/lib/librte_flow_classify/rte_flow_classify.c' l='511' u='c' c='rte_flow_classify_table_entry_add'/>
<doc f='master/lib/librte_flow_classify/rte_flow_classify.h' l='186'>/**
 * Flow classify validate
 *
 * @param cls
 *   Handle to flow classifier instance
 * @param[in] attr
 *   Flow rule attributes
 * @param[in] pattern
 *   Pattern specification (list terminated by the END pattern item).
 * @param[in] actions
 *   Associated actions (list terminated by the END pattern item).
 * @param[out] error
 *   Perform verbose error reporting if not NULL. Structure
 *   initialised in case of error only.
 * @return
 *   0 on success, error code otherwise
 */</doc>
