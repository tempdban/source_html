<dec f='dpdk_1805/lib/librte_eal/common/include/rte_eal.h' l='174' type='int rte_eal_init(int argc, char ** argv)'/>
<use f='dpdk_1805/app/pdump/main.c' l='819' u='c' c='main'/>
<doc f='dpdk_1805/lib/librte_eal/common/include/rte_eal.h' l='116'>/**
 * Initialize the Environment Abstraction Layer (EAL).
 *
 * This function is to be executed on the MASTER lcore only, as soon
 * as possible in the application&apos;s main() function.
 *
 * The function finishes the initialization process before main() is called.
 * It puts the SLAVE lcores in the WAIT state.
 *
 * When the multi-partition feature is supported, depending on the
 * configuration (if CONFIG_RTE_EAL_MAIN_PARTITION is disabled), this
 * function waits to ensure that the magic number is set before
 * returning. See also the rte_eal_get_configuration() function. Note:
 * This behavior may change in the future.
 *
 * @param argc
 *   A non-negative value.  If it is greater than 0, the array members
 *   for argv[0] through argv[argc] (non-inclusive) shall contain pointers
 *   to strings.
 * @param argv
 *   An array of strings.  The contents of the array, as well as the strings
 *   which are pointed to by the array, may be modified by this function.
 * @return
 *   - On success, the number of parsed arguments, which is greater or
 *     equal to zero. After the call to rte_eal_init(),
 *     all arguments argv[x] with x &lt; ret may have been modified by this
 *     function call and should not be further interpreted by the
 *     application.  The EAL does not take any ownership of the memory used
 *     for either the argv array, or its members.
 *   - On failure, -1 and rte_errno is set to a value indicating the cause
 *     for failure.  In some instances, the application will need to be
 *     restarted as part of clearing the issue.
 *
 *   Error codes returned via rte_errno:
 *     EACCES indicates a permissions issue.
 *
 *     EAGAIN indicates either a bus or system resource was not available,
 *            setup may be attempted again.
 *
 *     EALREADY indicates that the rte_eal_init function has already been
 *              called, and cannot be called again.
 *
 *     EFAULT indicates the tailq configuration name was not found in
 *            memory configuration.
 *
 *     EINVAL indicates invalid parameters were passed as argv/argc.
 *
 *     ENOMEM indicates failure likely caused by an out-of-memory condition.
 *
 *     ENODEV indicates memory setup issues.
 *
 *     ENOTSUP indicates that the EAL cannot initialize on this system.
 *
 *     EPROTO indicates that the PCI bus is either not present, or is not
 *            readable by the eal.
 *
 *     ENOEXEC indicates that a service core failed to launch successfully.
 */</doc>
<use f='dpdk_1805/app/proc-info/main.c' l='615' u='c' c='main'/>
<use f='dpdk_1805/app/test-bbdev/main.c' l='306' u='c' c='main'/>
<use f='dpdk_1805/app/test-crypto-perf/main.c' l='417' u='c' c='main'/>
<use f='dpdk_1805/app/test-eventdev/evt_main.c' l='70' u='c' c='main'/>
<use f='dpdk_1805/app/test-pmd/testpmd.c' l='2661' u='c' c='main'/>
<def f='dpdk_1805/lib/librte_eal/linuxapp/eal/eal.c' l='773' ll='1045' type='int rte_eal_init(int argc, char ** argv)'/>
<doc f='dpdk_1805/lib/librte_eal/linuxapp/eal/eal.c' l='772'>/* Launch threads, called at application init(). */</doc>
