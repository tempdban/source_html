<def f='master/lib/librte_ring/rte_ring.h' l='932' ll='939' type='unsigned int rte_ring_dequeue_burst(struct rte_ring * r, void ** obj_table, unsigned int n, unsigned int * available)'/>
<use f='master/app/pdump/main.c' l='444' u='c' c='pdump_rxtx'/>
<doc f='master/lib/librte_ring/rte_ring.h' l='913'>/**
 * Dequeue multiple objects from a ring up to a maximum number.
 *
 * This function calls the multi-consumers or the single-consumer
 * version, depending on the default behaviour that was specified at
 * ring creation time (see flags).
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects) that will be filled.
 * @param n
 *   The number of objects to dequeue from the ring to the obj_table.
 * @param available
 *   If non-NULL, returns the number of remaining ring entries after the
 *   dequeue has finished.
 * @return
 *   - Number of objects dequeued
 */</doc>
<use f='master/drivers/baseband/null/bbdev_null.c' l='177' u='c' c='dequeue_dec_ops'/>
<use f='master/drivers/baseband/null/bbdev_null.c' l='190' u='c' c='dequeue_enc_ops'/>
<use f='master/drivers/compress/octeontx/otx_zip_pmd.c' l='529' u='c' c='zip_pmd_dequeue_burst_sync'/>
<use f='master/drivers/crypto/null/null_crypto_pmd.c' l='149' u='c' c='null_crypto_pmd_dequeue_burst'/>
<use f='master/drivers/crypto/scheduler/scheduler_multicore.c' l='94' u='c' c='schedule_dequeue'/>
<use f='master/drivers/crypto/scheduler/scheduler_multicore.c' l='200' u='c' c='mc_scheduler_worker'/>
<use f='master/drivers/net/ring/rte_eth_ring.c' l='77' u='c' c='eth_ring_rx'/>
<use f='master/lib/librte_eventdev/rte_event_timer_adapter.c' l='717' u='c' c='sw_event_timer_adapter_service_func'/>
