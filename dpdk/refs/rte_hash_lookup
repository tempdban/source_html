<dec f='master/lib/librte_hash/rte_hash.h' l='358' type='int32_t rte_hash_lookup(const struct rte_hash * h, const void * key)'/>
<doc f='master/lib/librte_hash/rte_hash.h' l='340'>/**
 * Find a key in the hash table.
 * This operation is multi-thread safe with regarding to other lookup threads.
 * Read-write concurrency can be enabled by setting flag during
 * table creation.
 *
 * @param h
 *   Hash table to look in.
 * @param key
 *   Key to find.
 * @return
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if the key is not found.
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key, and is the same
 *     value that was returned when the key was added.
 */</doc>
<use f='master/drivers/net/i40e/i40e_ethdev.c' l='7527' u='c' c='i40e_sw_tunnel_filter_lookup'/>
<use f='master/drivers/net/i40e/i40e_ethdev.c' l='9818' u='c' c='i40e_sw_ethertype_filter_lookup'/>
<use f='master/drivers/net/i40e/i40e_fdir.c' l='1395' u='c' c='i40e_sw_fdir_filter_lookup'/>
<use f='master/drivers/net/ixgbe/ixgbe_ethdev.c' l='7701' u='c' c='ixgbe_l2_tn_filter_lookup'/>
<use f='master/drivers/net/ixgbe/ixgbe_fdir.c' l='1149' u='c' c='ixgbe_fdir_filter_lookup'/>
<def f='master/lib/librte_hash/rte_cuckoo_hash.c' l='930' ll='935' type='int32_t rte_hash_lookup(const struct rte_hash * h, const void * key)'/>
<use f='master/lib/librte_table/rte_table_hash_cuckoo.c' l='171' u='c' c='rte_table_hash_cuckoo_entry_add'/>
<use f='master/lib/librte_table/rte_table_hash_cuckoo.c' l='282' u='c' c='rte_table_hash_cuckoo_lookup'/>
