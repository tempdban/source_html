<def f='master/drivers/bus/fslmc/qbman/include/fsl_qbman_base.h' l='57' ll='65'/>
<size>40</size>
<doc f='master/drivers/bus/fslmc/qbman/include/fsl_qbman_base.h' l='39'>/**
 * struct qbman_swp_desc - qbman software portal descriptor structure
 * @block: The QBMan instance.
 * @cena_bar: Cache-enabled portal register map.
 * @cinh_bar: Cache-inhibited portal register map.
 * @irq: -1 if unused (or unassigned)
 * @idx: SWPs within a QBMan are indexed. -1 if opaque to the user.
 * @qman_version: the qman version.
 * @eqcr_mode: Select the eqcr mode, currently only valid bit ring mode and
 * valid bit array mode are supported.
 *
 * Descriptor for a QBMan software portal, expressed in terms that make sense to
 * the user context. Ie. on MC, this information is likely to be true-physical,
 * and instantiated statically at compile-time. On GPP, this information is
 * likely to be obtained via &quot;discovery&quot; over a partition&apos;s &quot;MC bus&quot;
 * (ie. in response to a MC portal command), and would take into account any
 * virtualisation of the GPP user&apos;s address space and/or interrupt numbering.
 */</doc>
<mbr r='qbman_swp_desc::block' o='0' t='const struct qbman_block_desc *'/>
<mbr r='qbman_swp_desc::cena_bar' o='64' t='uint8_t *'/>
<mbr r='qbman_swp_desc::cinh_bar' o='128' t='uint8_t *'/>
<mbr r='qbman_swp_desc::irq' o='192' t='int'/>
<mbr r='qbman_swp_desc::idx' o='224' t='int'/>
<mbr r='qbman_swp_desc::qman_version' o='256' t='uint32_t'/>
<mbr r='qbman_swp_desc::eqcr_mode' o='288' t='enum qbman_eqcr_mode'/>
