<dec f='dpdk_1805/lib/librte_hash/rte_hash.h' l='289' type='int rte_hash_get_key_with_position(const struct rte_hash * h, const int32_t position, void ** key)'/>
<doc f='dpdk_1805/lib/librte_hash/rte_hash.h' l='271'>/**
 * Find a key in the hash table given the position.
 * This operation is multi-thread safe with regarding to other lookup threads.
 * Read-write concurrency can be enabled by setting flag during
 * table creation.
 *
 * @param h
 *   Hash table to get the key from.
 * @param position
 *   Position returned when the key was inserted.
 * @param key
 *   Output containing a pointer to the key
 * @return
 *   - 0 if retrieved successfully
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if no valid key is found in the given position.
 */</doc>
<def f='dpdk_1805/lib/librte_hash/rte_cuckoo_hash.c' l='1063' ll='1081' type='int rte_hash_get_key_with_position(const struct rte_hash * h, const int32_t position, void ** key)'/>
