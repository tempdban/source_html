<def f='dpdk_1805/lib/librte_mbuf/rte_mbuf.h' l='2079' ll='2102' type='int rte_pktmbuf_chain(struct rte_mbuf * head, struct rte_mbuf * tail)'/>
<doc f='dpdk_1805/lib/librte_mbuf/rte_mbuf.h' l='2063'>/**
 * Chain an mbuf to another, thereby creating a segmented packet.
 *
 * Note: The implementation will do a linear walk over the segments to find
 * the tail entry. For cases when there are many segments, it&apos;s better to
 * chain the entries manually.
 *
 * @param head
 *   The head of the mbuf chain (the first packet)
 * @param tail
 *   The mbuf to put last in the chain
 *
 * @return
 *   - 0, on success.
 *   - -EOVERFLOW, if the chain segment limit exceeded
 */</doc>
<use f='dpdk_1805/app/test-bbdev/test_bbdev_perf.c' l='605' u='c' c='init_op_data_objs'/>
<use f='dpdk_1805/lib/librte_ip_frag/rte_ipv4_reassembly.c' l='41' u='c' c='ipv4_frag_reassemble'/>
<use f='dpdk_1805/lib/librte_ip_frag/rte_ipv4_reassembly.c' l='61' u='c' c='ipv4_frag_reassemble'/>
<use f='dpdk_1805/lib/librte_ip_frag/rte_ipv6_reassembly.c' l='64' u='c' c='ipv6_frag_reassemble'/>
<use f='dpdk_1805/lib/librte_ip_frag/rte_ipv6_reassembly.c' l='84' u='c' c='ipv6_frag_reassemble'/>
