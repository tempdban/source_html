<dec f='master/lib/librte_eal/common/include/rte_fbarray.h' l='79' type='int rte_fbarray_init(struct rte_fbarray * arr, const char * name, unsigned int len, unsigned int elt_sz)'/>
<doc f='master/lib/librte_eal/common/include/rte_fbarray.h' l='54'>/**
 * Set up ``rte_fbarray`` structure and allocate underlying resources.
 *
 * Call this function to correctly set up ``rte_fbarray`` and allocate
 * underlying files that will be backing the data in the current process. Note
 * that in order to use and share ``rte_fbarray`` between multiple processes,
 * data pointed to by ``arr`` pointer must itself be allocated in shared memory.
 *
 * @param arr
 *   Valid pointer to allocated ``rte_fbarray`` structure.
 *
 * @param name
 *   Unique name to be assigned to this array.
 *
 * @param len
 *   Number of elements initially available in the array.
 *
 * @param elt_sz
 *   Size of each element.
 *
 * @return
 *  - 0 on success.
 *  - -1 on failure, with ``rte_errno`` indicating reason for failure.
 */</doc>
<def f='master/lib/librte_eal/common/eal_common_fbarray.c' l='679' ll='777' type='int rte_fbarray_init(struct rte_fbarray * arr, const char * name, unsigned int len, unsigned int elt_sz)'/>
<use f='master/lib/librte_eal/common/eal_common_memzone.c' l='373' u='c' c='rte_eal_memzone_init'/>
<use f='master/lib/librte_eal/linuxapp/eal/eal_memalloc.c' l='1467' u='c' c='secondary_msl_create_walk'/>
<use f='master/lib/librte_eal/linuxapp/eal/eal_memory.c' l='822' u='c' c='alloc_memseg_list'/>
<use f='master/lib/librte_eal/linuxapp/eal/eal_memory.c' l='1356' u='c' c='eal_legacy_hugepage_init'/>
