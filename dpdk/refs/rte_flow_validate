<dec f='master/lib/librte_ethdev/rte_flow.h' l='1987' type='int rte_flow_validate(uint16_t port_id, const struct rte_flow_attr * attr, const struct rte_flow_item * pattern, const struct rte_flow_action * actions, struct rte_flow_error * error)'/>
<doc f='master/lib/librte_ethdev/rte_flow.h' l='1934'>/**
 * Check whether a flow rule can be created on a given port.
 *
 * The flow rule is validated for correctness and whether it could be accepted
 * by the device given sufficient resources. The rule is checked against the
 * current device mode and queue configuration. The flow rule may also
 * optionally be validated against existing flow rules and device resources.
 * This function has no effect on the target device.
 *
 * The returned value is guaranteed to remain valid only as long as no
 * successful calls to rte_flow_create() or rte_flow_destroy() are made in
 * the meantime and no device parameter affecting flow rules in any way are
 * modified, due to possible collisions or resource limitations (although in
 * such cases EINVAL should not be returned).
 *
 * @param port_id
 *   Port identifier of Ethernet device.
 * @param[in] attr
 *   Flow rule attributes.
 * @param[in] pattern
 *   Pattern specification (list terminated by the END pattern item).
 * @param[in] actions
 *   Associated actions (list terminated by the END action).
 * @param[out] error
 *   Perform verbose error reporting if not NULL. PMDs initialize this
 *   structure in case of error only.
 *
 * @return
 *   0 if flow rule is valid and can be created. A negative errno value
 *   otherwise (rte_errno is also set), the following errors are defined:
 *
 *   -ENOSYS: underlying device does not support this functionality.
 *
 *   -EIO: underlying device is removed.
 *
 *   -EINVAL: unknown or invalid rule specification.
 *
 *   -ENOTSUP: valid but unsupported rule specification (e.g. partial
 *   bit-masks are unsupported).
 *
 *   -EEXIST: collision with an existing rule. Only returned if device
 *   supports flow rule collision checking and there was a flow rule
 *   collision. Not receiving this return code is no guarantee that creating
 *   the rule will not fail due to a collision.
 *
 *   -ENOMEM: not enough memory to execute the function, or if the device
 *   supports resource validation, resource limitation on the device.
 *
 *   -EBUSY: action cannot be performed due to busy device resources, may
 *   succeed if the affected queues or even the entire port are in a stopped
 *   state (see rte_eth_dev_rx_queue_stop() and rte_eth_dev_stop()).
 */</doc>
<use f='master/app/test-pmd/config.c' l='1379' u='c' c='port_flow_validate'/>
<use f='master/drivers/net/bonding/rte_eth_bond_flow.c' l='56' u='c' c='bond_flow_validate'/>
<use f='master/drivers/net/bonding/rte_eth_bond_pmd.c' l='178' u='c' c='bond_ethdev_8023ad_flow_verify'/>
<use f='master/drivers/net/failsafe/failsafe_flow.c' l='61' u='c' c='fs_flow_validate'/>
<def f='master/lib/librte_ethdev/rte_flow.c' l='151' ll='169' type='int rte_flow_validate(uint16_t port_id, const struct rte_flow_attr * attr, const struct rte_flow_item * pattern, const struct rte_flow_action * actions, struct rte_flow_error * error)'/>
<doc f='master/lib/librte_ethdev/rte_flow.c' l='150'>/* Check whether a flow rule can be created on a given port. */</doc>
