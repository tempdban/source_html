<dec f='dpdk_1805/lib/librte_bpf/rte_bpf.h' l='139' type='struct rte_bpf * rte_bpf_elf_load(const struct rte_bpf_prm * prm, const char * fname, const char * sname)'/>
<doc f='dpdk_1805/lib/librte_bpf/rte_bpf.h' l='121'>/**
 * Create a new eBPF execution context and load BPF code from given ELF
 * file into it.
 *
 * @param prm
 *  Parameters used to create and initialise the BPF exeution context.
 * @param fname
 *  Pathname for a ELF file.
 * @param sname
 *  Name of the executable section within the file to load.
 * @return
 *   BPF handle that is used in future BPF operations,
 *   or NULL on error, with error code set in rte_errno.
 *   Possible rte_errno errors include:
 *   - EINVAL - invalid parameter passed to function
 *   - ENOMEM - can&apos;t reserve enough memory
 */</doc>
<def f='dpdk_1805/lib/librte_bpf/bpf_load.c' l='87' ll='101' macro='1' type='struct rte_bpf * rte_bpf_elf_load(const struct rte_bpf_prm * prm, const char * fname, const char * sname)'/>
<use f='dpdk_1805/lib/librte_bpf/bpf_pkt.c' l='535' u='c' c='bpf_eth_elf_load'/>
