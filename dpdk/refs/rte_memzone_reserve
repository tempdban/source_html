<dec f='dpdk_1805/lib/librte_eal/common/include/rte_memzone.h' l='127' type='const struct rte_memzone * rte_memzone_reserve(const char * name, size_t len, int socket_id, unsigned int flags)'/>
<doc f='dpdk_1805/lib/librte_eal/common/include/rte_memzone.h' l='73'>/**
 * Reserve a portion of physical memory.
 *
 * This function reserves some memory and returns a pointer to a
 * correctly filled memzone descriptor. If the allocation cannot be
 * done, return NULL.
 *
 * @note Reserving memzones with len set to 0 will only attempt to allocate
 *   memzones from memory that is already available. It will not trigger any
 *   new allocations.
 *
 * @note Reserving IOVA-contiguous memzones with len set to 0 is not currently
 *   supported.
 *
 * @param name
 *   The name of the memzone. If it already exists, the function will
 *   fail and return NULL.
 * @param len
 *   The size of the memory to be reserved. If it
 *   is 0, the biggest contiguous zone will be reserved.
 * @param socket_id
 *   The socket identifier in the case of
 *   NUMA. The value can be SOCKET_ID_ANY if there is no NUMA
 *   constraint for the reserved zone.
 * @param flags
 *   The flags parameter is used to request memzones to be
 *   taken from specifically sized hugepages.
 *   - RTE_MEMZONE_2MB - Reserved from 2MB pages
 *   - RTE_MEMZONE_1GB - Reserved from 1GB pages
 *   - RTE_MEMZONE_16MB - Reserved from 16MB pages
 *   - RTE_MEMZONE_16GB - Reserved from 16GB pages
 *   - RTE_MEMZONE_256KB - Reserved from 256KB pages
 *   - RTE_MEMZONE_256MB - Reserved from 256MB pages
 *   - RTE_MEMZONE_512MB - Reserved from 512MB pages
 *   - RTE_MEMZONE_4GB - Reserved from 4GB pages
 *   - RTE_MEMZONE_SIZE_HINT_ONLY - Allow alternative page size to be used if
 *                                  the requested page size is unavailable.
 *                                  If this flag is not set, the function
 *                                  will return error on an unavailable size
 *                                  request.
 *   - RTE_MEMZONE_IOVA_CONTIG - Ensure reserved memzone is IOVA-contiguous.
 *                               This option should be used when allocating
 *                               memory intended for hardware rings etc.
 * @return
 *   A pointer to a correctly-filled read-only memzone descriptor, or NULL
 *   on error.
 *   On error case, rte_errno will be set appropriately:
 *    - E_RTE_NO_CONFIG - function could not get pointer to rte_config structure
 *    - E_RTE_SECONDARY - function was called from a secondary process instance
 *    - ENOSPC - the maximum number of memzones has already been allocated
 *    - EEXIST - a memzone with the same name already exists
 *    - ENOMEM - no appropriate memory area found in which to create memzone
 *    - EINVAL - invalid parameters
 */</doc>
<use f='dpdk_1805/drivers/event/opdl/opdl_ring.c' l='939' u='c' c='opdl_ring_create'/>
<use f='dpdk_1805/lib/librte_bbdev/rte_bbdev.c' l='122' u='c' c='rte_bbdev_data_alloc'/>
<use f='dpdk_1805/lib/librte_compressdev/rte_compressdev.c' l='197' u='c' c='rte_compressdev_data_alloc'/>
<use f='dpdk_1805/lib/librte_cryptodev/rte_cryptodev.c' l='519' u='c' c='rte_cryptodev_data_alloc'/>
<use f='dpdk_1805/lib/librte_distributor/rte_distributor.c' l='621' u='c' c='rte_distributor_create_v1705'/>
<use f='dpdk_1805/lib/librte_distributor/rte_distributor_v20.c' l='382' u='c' c='rte_distributor_create_v20'/>
<def f='dpdk_1805/lib/librte_eal/common/eal_common_memzone.c' l='274' ll='280' type='const struct rte_memzone * rte_memzone_reserve(const char * name, size_t len, int socket_id, unsigned int flags)'/>
<doc f='dpdk_1805/lib/librte_eal/common/eal_common_memzone.c' l='270'>/*
 * Return a pointer to a correctly filled memzone descriptor. If the
 * allocation cannot be done, return NULL.
 */</doc>
<use f='dpdk_1805/lib/librte_ethdev/rte_ethdev.c' l='210' u='c' c='rte_eth_dev_shared_data_prepare'/>
<use f='dpdk_1805/lib/librte_eventdev/rte_event_ring.c' l='82' u='c' c='rte_event_ring_create'/>
<use f='dpdk_1805/lib/librte_eventdev/rte_event_timer_adapter.c' l='173' u='c' c='rte_event_timer_adapter_create_ext'/>
<use f='dpdk_1805/lib/librte_eventdev/rte_eventdev.c' l='1244' u='c' c='rte_eventdev_data_alloc'/>
<use f='dpdk_1805/lib/librte_kni/rte_kni.c' l='116' u='c' c='kni_memzone_reserve'/>
<use f='dpdk_1805/lib/librte_latencystats/rte_latencystats.c' l='212' u='c' c='rte_latencystats_init'/>
<use f='dpdk_1805/lib/librte_mbuf/rte_mbuf_pool_ops.c' l='22' u='c' c='rte_mbuf_set_platform_mempool_ops'/>
<use f='dpdk_1805/lib/librte_mbuf/rte_mbuf_pool_ops.c' l='59' u='c' c='rte_mbuf_set_user_mempool_ops'/>
<use f='dpdk_1805/lib/librte_mempool/rte_mempool.c' l='963' u='c' c='rte_mempool_create_empty'/>
<use f='dpdk_1805/lib/librte_metrics/rte_metrics.c' l='70' u='c' c='rte_metrics_init'/>
