<def f='dpdk_1805/lib/librte_mbuf/rte_mbuf.h' l='1481' ll='1517' type='void rte_pktmbuf_attach(struct rte_mbuf * mi, struct rte_mbuf * m)'/>
<use f='dpdk_1805/lib/librte_mbuf/rte_mbuf.h' l='1725' u='c' c='rte_pktmbuf_clone'/>
<doc f='dpdk_1805/lib/librte_mbuf/rte_mbuf.h' l='1460'>/**
 * Attach packet mbuf to another packet mbuf.
 *
 * If the mbuf we are attaching to isn&apos;t a direct buffer and is attached to
 * an external buffer, the mbuf being attached will be attached to the
 * external buffer instead of mbuf indirection.
 *
 * Otherwise, the mbuf will be indirectly attached. After attachment we
 * refer the mbuf we attached as &apos;indirect&apos;, while mbuf we attached to as
 * &apos;direct&apos;.  The direct mbuf&apos;s reference counter is incremented.
 *
 * Right now, not supported:
 *  - attachment for already indirect mbuf (e.g. - mi has to be direct).
 *  - mbuf we trying to attach (mi) is used by someone else
 *    e.g. it&apos;s reference counter is greater then 1.
 *
 * @param mi
 *   The indirect packet mbuf.
 * @param m
 *   The packet mbuf we&apos;re attaching to.
 */</doc>
<use f='dpdk_1805/lib/librte_gso/gso_common.c' l='89' u='c' c='gso_do_segment'/>
<use f='dpdk_1805/lib/librte_ip_frag/rte_ipv4_fragmentation.c' l='138' u='c' c='rte_ipv4_fragment_packet'/>
<use f='dpdk_1805/lib/librte_ip_frag/rte_ipv6_fragmentation.c' l='132' u='c' c='rte_ipv6_fragment_packet'/>
