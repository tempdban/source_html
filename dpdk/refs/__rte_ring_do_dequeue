<def f='master/lib/librte_ring/rte_ring.h' l='378' ll='399' type='unsigned int __rte_ring_do_dequeue(struct rte_ring * r, void ** obj_table, unsigned int n, enum rte_ring_queue_behavior behavior, unsigned int is_sc, unsigned int * available)'/>
<use f='master/lib/librte_ring/rte_ring.h' l='557' u='c' c='rte_ring_mc_dequeue_bulk'/>
<use f='master/lib/librte_ring/rte_ring.h' l='581' u='c' c='rte_ring_sc_dequeue_bulk'/>
<use f='master/lib/librte_ring/rte_ring.h' l='608' u='c' c='rte_ring_dequeue_bulk'/>
<use f='master/lib/librte_ring/rte_ring.h' l='884' u='c' c='rte_ring_mc_dequeue_burst'/>
<use f='master/lib/librte_ring/rte_ring.h' l='909' u='c' c='rte_ring_sc_dequeue_burst'/>
<use f='master/lib/librte_ring/rte_ring.h' l='936' u='c' c='rte_ring_dequeue_burst'/>
<doc f='master/lib/librte_ring/rte_ring.h' l='358'>/**
 * @internal Dequeue several objects from the ring
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects).
 * @param n
 *   The number of objects to pull from the ring.
 * @param behavior
 *   RTE_RING_QUEUE_FIXED:    Dequeue a fixed number of items from a ring
 *   RTE_RING_QUEUE_VARIABLE: Dequeue as many items as possible from ring
 * @param is_sc
 *   Indicates whether to use single consumer or multi-consumer head update
 * @param available
 *   returns the number of remaining ring entries after the dequeue has finished
 * @return
 *   - Actual number of objects dequeued.
 *     If behavior == RTE_RING_QUEUE_FIXED, this will be 0 or n only.
 */</doc>
