<dec f='dpdk_1805/lib/librte_cryptodev/rte_crypto.h' l='202' type='struct rte_mempool * rte_crypto_op_pool_create(const char * name, enum rte_crypto_op_type type, unsigned int nb_elts, unsigned int cache_size, uint16_t priv_size, int socket_id)'/>
<doc f='dpdk_1805/lib/librte_cryptodev/rte_crypto.h' l='182'>/**
 * Creates a crypto operation pool
 *
 * @param	name		pool name
 * @param	type		crypto operation type, use
 *				RTE_CRYPTO_OP_TYPE_UNDEFINED for a pool which
 *				supports all operation types
 * @param	nb_elts		number of elements in pool
 * @param	cache_size	Number of elements to cache on lcore, see
 *				*rte_mempool_create* for further details about
 *				cache size
 * @param	priv_size	Size of private data to allocate with each
 *				operation
 * @param	socket_id	Socket to allocate memory on
 *
 * @return
 *  - On success pointer to mempool
 *  - On failure NULL
 */</doc>
<def f='dpdk_1805/lib/librte_cryptodev/rte_cryptodev.c' l='1466' ll='1529' type='struct rte_mempool * rte_crypto_op_pool_create(const char * name, enum rte_crypto_op_type type, unsigned int nb_elts, unsigned int cache_size, uint16_t priv_size, int socket_id)'/>
