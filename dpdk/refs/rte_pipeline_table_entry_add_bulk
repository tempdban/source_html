<dec f='dpdk_1805/lib/librte_pipeline/rte_pipeline.h' l='473' type='int rte_pipeline_table_entry_add_bulk(struct rte_pipeline * p, uint32_t table_id, void ** keys, struct rte_pipeline_table_entry ** entries, uint32_t n_keys, int * key_found, struct rte_pipeline_table_entry ** entries_ptr)'/>
<doc f='dpdk_1805/lib/librte_pipeline/rte_pipeline.h' l='447'>/**
 * Pipeline table entry add bulk
 *
 * @param p
 *   Handle to pipeline instance
 * @param table_id
 *   Table ID (returned by previous invocation of pipeline table create)
 * @param keys
 *   Array containing table entry keys
 * @param entries
 *   Array containing new contents for every table entry identified by key
 * @param n_keys
 *   Number of keys to add
 * @param key_found
 *   On successful invocation, key_found for every item in the array is set to
 *   TRUE (value different than 0) if key was already present in the table
 *   before the add operation and to FALSE (value 0) if not
 * @param entries_ptr
 *   On successful invocation, array *entries_ptr stores pointer to every table
 *   entry associated with key. This can be used for further read-write accesses
 *   to this table entry and is valid until the key is deleted from the table or
 *   re-added (usually for associating different actions and/or action meta-data
 *   to the current key)
 * @return
 *   0 on success, error code otherwise
 */</doc>
<use f='dpdk_1805/drivers/net/softnic/rte_eth_softnic_thread.c' l='1423' u='c' c='softnic_pipeline_table_rule_add_bulk'/>
<use f='dpdk_1805/drivers/net/softnic/rte_eth_softnic_thread.c' l='2581' u='c' c='pipeline_msg_handle_table_rule_add_bulk'/>
<def f='dpdk_1805/lib/librte_pipeline/rte_pipeline.c' l='582' ll='646' type='int rte_pipeline_table_entry_add_bulk(struct rte_pipeline * p, uint32_t table_id, void ** keys, struct rte_pipeline_table_entry ** entries, uint32_t n_keys, int * key_found, struct rte_pipeline_table_entry ** entries_ptr)'/>
