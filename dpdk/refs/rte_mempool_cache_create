<dec f='dpdk_1805/lib/librte_mempool/rte_mempool.h' l='1156' type='struct rte_mempool_cache * rte_mempool_cache_create(uint32_t size, int socket_id)'/>
<doc f='dpdk_1805/lib/librte_mempool/rte_mempool.h' l='1141'>/**
 * Create a user-owned mempool cache.
 *
 * This can be used by non-EAL threads to enable caching when they
 * interact with a mempool.
 *
 * @param size
 *   The size of the mempool cache. See rte_mempool_create()&apos;s cache_size
 *   parameter description for more information. The same limits and
 *   considerations apply here too.
 * @param socket_id
 *   The socket identifier in the case of NUMA. The value can be
 *   SOCKET_ID_ANY if there is no NUMA constraint for the reserved zone.
 */</doc>
<def f='dpdk_1805/lib/librte_mempool/rte_mempool.c' l='710' ll='731' type='struct rte_mempool_cache * rte_mempool_cache_create(uint32_t size, int socket_id)'/>
<doc f='dpdk_1805/lib/librte_mempool/rte_mempool.c' l='705'>/*
 * Create and initialize a cache for objects that are retrieved from and
 * returned to an underlying mempool. This structure is identical to the
 * local_cache[lcore_id] pointed to by the mempool structure.
 */</doc>
