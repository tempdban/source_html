<def f='master/lib/librte_ring/rte_ring.h' l='645' ll='649' type='int rte_ring_sc_dequeue(struct rte_ring * r, void ** obj_p)'/>
<doc f='master/lib/librte_ring/rte_ring.h' l='633'>/**
 * Dequeue one object from a ring (NOT multi-consumers safe).
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_p
 *   A pointer to a void * pointer (object) that will be filled.
 * @return
 *   - 0: Success; objects dequeued.
 *   - -ENOENT: Not enough entries in the ring to dequeue, no object is
 *     dequeued.
 */</doc>
<use f='master/drivers/event/sw/sw_evdev_scheduler.c' l='164' u='c' c='sw_schedule_parallel_to_cq'/>
<use f='master/drivers/mempool/bucket/rte_mempool_bucket.c' l='269' u='c' c='bucket_adopt_orphans'/>
<use f='master/drivers/net/softnic/rte_eth_softnic_thread.c' l='191' u='c' c='thread_msg_send_recv'/>
<use f='master/drivers/net/softnic/rte_eth_softnic_thread.c' l='384' u='c' c='thread_msg_recv'/>
<use f='master/drivers/net/softnic/rte_eth_softnic_thread.c' l='705' u='c' c='pipeline_msg_send_recv'/>
<use f='master/drivers/net/softnic/rte_eth_softnic_thread.c' l='1976' u='c' c='pipeline_msg_recv'/>
<use f='master/lib/librte_efd/rte_efd.c' l='1015' u='c' c='efd_compute_update'/>
<use f='master/lib/librte_hash/rte_cuckoo_hash.c' l='770' u='c' c='__rte_hash_add_key_with_hash'/>
