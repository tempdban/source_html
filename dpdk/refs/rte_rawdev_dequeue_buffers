<dec f='master/lib/librte_rawdev/rte_rawdev.h' l='419' type='int rte_rawdev_dequeue_buffers(uint16_t dev_id, struct rte_rawdev_buf ** buffers, unsigned int count, rte_rawdev_obj_t context)'/>
<doc f='master/lib/librte_rawdev/rte_rawdev.h' l='393'>/**
 * Dequeue a stream of buffers from the device.
 *
 * Rather than specifying a queue, this API passes along an opaque object
 * to the driver implementation. That object can be a queue or any other
 * contextual information necessary for the device to dequeue buffers.
 *
 * Application should have allocated enough space to store `count` response
 * buffers.
 * Releasing buffers dequeued is responsibility of the application.
 *
 * @param dev_id
 *   The identifier of the device to configure.
 * @param buffers
 *   Collection of buffers dequeued
 * @param count
 *   Max buffers expected to be dequeued
 * @param context
 *   Opaque context information.
 * @return
 *   &gt;=0 for buffers dequeued
 *  !0 for failure.
 *  Whether partial enqueue is failure or success is defined between app
 *  and driver implementation.
 */</doc>
<use f='master/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='382' u='c' c='test_rawdev_enqdeq'/>
<def f='master/lib/librte_rawdev/rte_rawdev.c' l='230' ll='243' type='int rte_rawdev_dequeue_buffers(uint16_t dev_id, struct rte_rawdev_buf ** buffers, unsigned int count, rte_rawdev_obj_t context)'/>
