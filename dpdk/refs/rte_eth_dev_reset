<dec f='dpdk_1805/lib/librte_ethdev/rte_ethdev.h' l='1845' type='int rte_eth_dev_reset(uint16_t port_id)'/>
<doc f='dpdk_1805/lib/librte_ethdev/rte_ethdev.h' l='1808'>/**
 * Reset a Ethernet device and keep its port id.
 *
 * When a port has to be reset passively, the DPDK application can invoke
 * this function. For example when a PF is reset, all its VFs should also
 * be reset. Normally a DPDK application can invoke this function when
 * RTE_ETH_EVENT_INTR_RESET event is detected, but can also use it to start
 * a port reset in other circumstances.
 *
 * When this function is called, it first stops the port and then calls the
 * PMD specific dev_uninit( ) and dev_init( ) to return the port to initial
 * state, in which no Tx and Rx queues are setup, as if the port has been
 * reset and not started. The port keeps the port id it had before the
 * function call.
 *
 * After calling rte_eth_dev_reset( ), the application should use
 * rte_eth_dev_configure( ), rte_eth_rx_queue_setup( ),
 * rte_eth_tx_queue_setup( ), and rte_eth_dev_start( )
 * to reconfigure the device as appropriate.
 *
 * Note: To avoid unexpected behavior, the application should stop calling
 * Tx and Rx functions before calling rte_eth_dev_reset( ). For thread
 * safety, all these controlling functions should be called from the same
 * thread.
 *
 * @param port_id
 *   The port identifier of the Ethernet device.
 *
 * @return
 *   - (0) if successful.
 *   - (-EINVAL) if port identifier is invalid.
 *   - (-ENOTSUP) if hardware doesn&apos;t support this function.
 *   - (-EPERM) if not ran from the primary process.
 *   - (-EIO) if re-initialisation failed or device is removed.
 *   - (-ENOMEM) if the reset failed due to OOM.
 *   - (-EAGAIN) if the reset temporarily failed and should be retried later.
 */</doc>
<use f='dpdk_1805/app/test-pmd/testpmd.c' l='1949' u='c' c='reset_port'/>
<def f='dpdk_1805/lib/librte_ethdev/rte_ethdev.c' l='1377' ll='1392' type='int rte_eth_dev_reset(uint16_t port_id)'/>
