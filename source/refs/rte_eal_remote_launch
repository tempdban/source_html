<dec f='dpdk_18.05/lib/librte_eal/common/include/rte_launch.h' l='65' type='int rte_eal_remote_launch(lcore_function_t * f, void * arg, unsigned int slave_id)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/include/rte_launch.h' l='32'>/**
 * Launch a function on another lcore.
 *
 * To be executed on the MASTER lcore only.
 *
 * Sends a message to a slave lcore (identified by the slave_id) that
 * is in the WAIT state (this is true after the first call to
 * rte_eal_init()). This can be checked by first calling
 * rte_eal_wait_lcore(slave_id).
 *
 * When the remote lcore receives the message, it switches to
 * the RUNNING state, then calls the function f with argument arg. Once the
 * execution is done, the remote lcore switches to a FINISHED state and
 * the return value of f is stored in a local variable to be read using
 * rte_eal_wait_lcore().
 *
 * The MASTER lcore returns as soon as the message is sent and knows
 * nothing about the completion of f.
 *
 * Note: This function is not designed to offer optimum
 * performance. It is just a practical way to launch a function on
 * another lcore at initialization time.
 *
 * @param f
 *   The function to be called.
 * @param arg
 *   The argument for the function.
 * @param slave_id
 *   The identifier of the lcore on which the function should be executed.
 * @return
 *   - 0: Success. Execution of function f started on the remote lcore.
 *   - (-EBUSY): The remote lcore is not in a WAIT state.
 */</doc>
<use f='dpdk_18.05/app/test-bbdev/test_bbdev_perf.c' l='1650' u='c' c='throughput_test'/>
<use f='dpdk_18.05/app/test-crypto-perf/main.c' l='564' u='c' c='main'/>
<use f='dpdk_18.05/app/test-crypto-perf/main.c' l='591' u='c' c='main'/>
<use f='dpdk_18.05/app/test-eventdev/test_order_common.c' l='245' u='c' c='order_launch_lcores'/>
<use f='dpdk_18.05/app/test-eventdev/test_order_common.c' l='257' u='c' c='order_launch_lcores'/>
<use f='dpdk_18.05/app/test-eventdev/test_perf_common.c' l='254' u='c' c='perf_launch_lcores'/>
<use f='dpdk_18.05/app/test-eventdev/test_perf_common.c' l='268' u='c' c='perf_launch_lcores'/>
<use f='dpdk_18.05/app/test-eventdev/test_pipeline_common.c' l='122' u='c' c='pipeline_launch_lcores'/>
<use f='dpdk_18.05/app/test-pmd/testpmd.c' l='1230' u='c' c='launch_packet_forwarding'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_multicore.c' l='254' u='c' c='scheduler_start'/>
<use f='dpdk_18.05/drivers/event/sw/sw_evdev_selftest.c' l='2971' u='c' c='worker_loopback'/>
<use f='dpdk_18.05/drivers/event/sw/sw_evdev_selftest.c' l='2972' u='c' c='worker_loopback'/>
<use f='dpdk_18.05/lib/librte_eal/common/eal_common_launch.c' l='58' u='c' c='rte_eal_mp_remote_launch'/>
<use f='dpdk_18.05/lib/librte_eal/common/rte_service.c' l='676' u='c' c='rte_service_lcore_start'/>
<def f='dpdk_18.05/lib/librte_eal/linuxapp/eal/eal_thread.c' l='36' ll='66' type='int rte_eal_remote_launch(int (*)(void *) f, void * arg, unsigned int slave_id)'/>
<doc f='dpdk_18.05/lib/librte_eal/linuxapp/eal/eal_thread.c' l='31'>/*
 * Send a message to a slave lcore identified by slave_id to call a
 * function f with argument arg. Once the execution is done, the
 * remote lcore switch in FINISHED state.
 */</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_launch.h' l='65' type='int rte_eal_remote_launch(lcore_function_t * f, void * arg, unsigned int slave_id)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_launch.h' l='32'>/**
 * Launch a function on another lcore.
 *
 * To be executed on the MASTER lcore only.
 *
 * Sends a message to a slave lcore (identified by the slave_id) that
 * is in the WAIT state (this is true after the first call to
 * rte_eal_init()). This can be checked by first calling
 * rte_eal_wait_lcore(slave_id).
 *
 * When the remote lcore receives the message, it switches to
 * the RUNNING state, then calls the function f with argument arg. Once the
 * execution is done, the remote lcore switches to a FINISHED state and
 * the return value of f is stored in a local variable to be read using
 * rte_eal_wait_lcore().
 *
 * The MASTER lcore returns as soon as the message is sent and knows
 * nothing about the completion of f.
 *
 * Note: This function is not designed to offer optimum
 * performance. It is just a practical way to launch a function on
 * another lcore at initialization time.
 *
 * @param f
 *   The function to be called.
 * @param arg
 *   The argument for the function.
 * @param slave_id
 *   The identifier of the lcore on which the function should be executed.
 * @return
 *   - 0: Success. Execution of function f started on the remote lcore.
 *   - (-EBUSY): The remote lcore is not in a WAIT state.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-bbdev/test_bbdev_perf.c' l='1587' u='c' c='throughput_test'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/main.c' l='558' u='c' c='main'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/main.c' l='585' u='c' c='main'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-eventdev/test_order_common.c' l='245' u='c' c='order_launch_lcores'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-eventdev/test_order_common.c' l='257' u='c' c='order_launch_lcores'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-eventdev/test_perf_common.c' l='126' u='c' c='perf_launch_lcores'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-eventdev/test_perf_common.c' l='140' u='c' c='perf_launch_lcores'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-eventdev/test_pipeline_common.c' l='122' u='c' c='pipeline_launch_lcores'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-pmd/testpmd.c' l='1195' u='c' c='launch_packet_forwarding'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/scheduler/scheduler_multicore.c' l='254' u='c' c='scheduler_start'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/event/octeontx/ssovf_evdev_selftest.c' l='642' u='c' c='launch_workers_and_wait'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/event/octeontx/ssovf_evdev_selftest.c' l='651' u='c' c='launch_workers_and_wait'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/event/sw/sw_evdev_selftest.c' l='2971' u='c' c='worker_loopback'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/event/sw/sw_evdev_selftest.c' l='2972' u='c' c='worker_loopback'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_launch.c' l='58' u='c' c='rte_eal_mp_remote_launch'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/rte_service.c' l='676' u='c' c='rte_service_lcore_start'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/linuxapp/eal/eal_thread.c' l='36' ll='66' type='int rte_eal_remote_launch(int (*)(void *) f, void * arg, unsigned int slave_id)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/linuxapp/eal/eal_thread.c' l='31'>/*
 * Send a message to a slave lcore identified by slave_id to call a
 * function f with argument arg. Once the execution is done, the
 * remote lcore switch in FINISHED state.
 */</doc>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_launch.h' l='65' type='int rte_eal_remote_launch(lcore_function_t * f, void * arg, unsigned int slave_id)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_launch.h' l='32'>/**
 * Launch a function on another lcore.
 *
 * To be executed on the MASTER lcore only.
 *
 * Sends a message to a slave lcore (identified by the slave_id) that
 * is in the WAIT state (this is true after the first call to
 * rte_eal_init()). This can be checked by first calling
 * rte_eal_wait_lcore(slave_id).
 *
 * When the remote lcore receives the message, it switches to
 * the RUNNING state, then calls the function f with argument arg. Once the
 * execution is done, the remote lcore switches to a FINISHED state and
 * the return value of f is stored in a local variable to be read using
 * rte_eal_wait_lcore().
 *
 * The MASTER lcore returns as soon as the message is sent and knows
 * nothing about the completion of f.
 *
 * Note: This function is not designed to offer optimum
 * performance. It is just a practical way to launch a function on
 * another lcore at initialization time.
 *
 * @param f
 *   The function to be called.
 * @param arg
 *   The argument for the function.
 * @param slave_id
 *   The identifier of the lcore on which the function should be executed.
 * @return
 *   - 0: Success. Execution of function f started on the remote lcore.
 *   - (-EBUSY): The remote lcore is not in a WAIT state.
 */</doc>
<use f='vpp_1804/src/plugins/dpdk/thread.c' l='52' u='c' c='dpdk_launch_thread'/>
