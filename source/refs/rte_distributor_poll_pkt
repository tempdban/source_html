<dec f='dpdk_18.05/lib/librte_distributor/rte_distributor.h' l='234' type='int rte_distributor_poll_pkt(struct rte_distributor * d, unsigned int worker_id, struct rte_mbuf ** mbufs)'/>
<def f='dpdk_18.05/lib/librte_distributor/rte_distributor.c' l='122' macro='1' type='int rte_distributor_poll_pkt(struct rte_distributor * d, unsigned int worker_id, struct rte_mbuf ** pkts)'/>
<use f='dpdk_18.05/lib/librte_distributor/rte_distributor.c' l='144' u='c' c='rte_distributor_get_pkt_v1705'/>
<use f='dpdk_18.05/lib/librte_distributor/rte_distributor.c' l='151' u='c' c='rte_distributor_get_pkt_v1705'/>
<doc f='dpdk_18.05/lib/librte_distributor/rte_distributor.h' l='215'>/**
 * API called by a worker to check for a new packet that was previously
 * requested by a call to rte_distributor_request_pkt(). It does not wait
 * for the new packet to be available, but returns NULL if the request has
 * not yet been fulfilled by the distributor.
 *
 * @param d
 *   The distributor instance to be used
 * @param worker_id
 *   The worker instance number to use - must be less that num_workers passed
 *   at distributor creation time.
 * @param mbufs
 *   The array of mbufs being given to the worker
 *
 * @return
 *   The number of packets being given to the worker thread, zero if no
 *   packet is yet available.
 */</doc>
