<def f='dpdk/lib/librte_mbuf/rte_mbuf.h' l='988' ll='996' type='struct rte_mbuf * rte_mbuf_raw_alloc(struct rte_mempool * mp)'/>
<use f='dpdk/lib/librte_mbuf/rte_mbuf.h' l='1253' u='c' c='rte_pktmbuf_alloc'/>
<doc f='dpdk/lib/librte_mbuf/rte_mbuf.h' l='969'>/**
 * Allocate an uninitialized mbuf from mempool *mp*.
 *
 * This function can be used by PMDs (especially in RX functions) to
 * allocate an uninitialized mbuf. The driver is responsible of
 * initializing all the required fields. See rte_pktmbuf_reset().
 * For standard needs, prefer rte_pktmbuf_alloc().
 *
 * The caller can expect that the following fields of the mbuf structure
 * are initialized: buf_addr, buf_iova, buf_len, refcnt=1, nb_segs=1,
 * next=NULL, pool, priv_size. The other fields must be initialized
 * by the caller.
 *
 * @param mp
 *   The mempool from which mbuf is allocated.
 * @return
 *   - The pointer to the new mbuf on success.
 *   - NULL if allocation failed.
 */</doc>
<use f='dpdk/app/test-pmd/flowgen.c' l='165' u='c' c='pkt_burst_flow_gen'/>
<use f='dpdk/app/test-pmd/txonly.c' l='192' u='c' c='pkt_burst_transmit'/>
<use f='dpdk/app/test-pmd/txonly.c' l='215' u='c' c='pkt_burst_transmit'/>
<use f='dpdk/drivers/net/ixgbe/ixgbe_rxtx.c' l='1808' u='c' c='ixgbe_recv_pkts'/>
<use f='dpdk/drivers/net/ixgbe/ixgbe_rxtx.c' l='2079' u='c' c='ixgbe_recv_pkts_lro'/>
<use f='dpdk/drivers/net/ixgbe/ixgbe_rxtx.c' l='4270' u='c' c='ixgbe_alloc_rx_queue_mbufs'/>
<use f='dpdk/drivers/net/virtio/virtio_rxtx.c' l='456' u='c' c='virtio_dev_rx_queue_setup_finish'/>
<use f='dpdk/drivers/net/virtio/virtio_rxtx.c' l='782' u='c' c='virtio_recv_pkts'/>
<use f='dpdk/drivers/net/virtio/virtio_rxtx.c' l='955' u='c' c='virtio_recv_mergeable_pkts'/>
