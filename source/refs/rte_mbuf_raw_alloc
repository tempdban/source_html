<def f='dpdk_18.05/lib/librte_mbuf/rte_mbuf.h' l='988' ll='996' type='struct rte_mbuf * rte_mbuf_raw_alloc(struct rte_mempool * mp)'/>
<use f='dpdk_18.05/lib/librte_mbuf/rte_mbuf.h' l='1253' u='c' c='rte_pktmbuf_alloc'/>
<doc f='dpdk_18.05/lib/librte_mbuf/rte_mbuf.h' l='969'>/**
 * Allocate an uninitialized mbuf from mempool *mp*.
 *
 * This function can be used by PMDs (especially in RX functions) to
 * allocate an uninitialized mbuf. The driver is responsible of
 * initializing all the required fields. See rte_pktmbuf_reset().
 * For standard needs, prefer rte_pktmbuf_alloc().
 *
 * The caller can expect that the following fields of the mbuf structure
 * are initialized: buf_addr, buf_iova, buf_len, refcnt=1, nb_segs=1,
 * next=NULL, pool, priv_size. The other fields must be initialized
 * by the caller.
 *
 * @param mp
 *   The mempool from which mbuf is allocated.
 * @return
 *   - The pointer to the new mbuf on success.
 *   - NULL if allocation failed.
 */</doc>
<use f='dpdk_18.05/app/test-pmd/flowgen.c' l='165' u='c' c='pkt_burst_flow_gen'/>
<use f='dpdk_18.05/app/test-pmd/txonly.c' l='192' u='c' c='pkt_burst_transmit'/>
<use f='dpdk_18.05/app/test-pmd/txonly.c' l='215' u='c' c='pkt_burst_transmit'/>
<use f='dpdk_18.05/drivers/net/i40e/i40e_rxtx.c' l='690' u='c' c='i40e_recv_pkts'/>
<use f='dpdk_18.05/drivers/net/i40e/i40e_rxtx.c' l='806' u='c' c='i40e_recv_scattered_pkts'/>
<use f='dpdk_18.05/drivers/net/i40e/i40e_rxtx.c' l='2545' u='c' c='i40e_alloc_rx_queue_mbufs'/>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_rxtx.c' l='1808' u='c' c='ixgbe_recv_pkts'/>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_rxtx.c' l='2079' u='c' c='ixgbe_recv_pkts_lro'/>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_rxtx.c' l='4270' u='c' c='ixgbe_alloc_rx_queue_mbufs'/>
<use f='dpdk_18.05/drivers/net/virtio/virtio_rxtx.c' l='456' u='c' c='virtio_dev_rx_queue_setup_finish'/>
<use f='dpdk_18.05/drivers/net/virtio/virtio_rxtx.c' l='782' u='c' c='virtio_recv_pkts'/>
<use f='dpdk_18.05/drivers/net/virtio/virtio_rxtx.c' l='955' u='c' c='virtio_recv_mergeable_pkts'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mbuf/rte_mbuf.h' l='875' ll='883' type='struct rte_mbuf * rte_mbuf_raw_alloc(struct rte_mempool * mp)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mbuf/rte_mbuf.h' l='1222' u='c' c='rte_pktmbuf_alloc'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mbuf/rte_mbuf.h' l='856'>/**
 * Allocate an uninitialized mbuf from mempool *mp*.
 *
 * This function can be used by PMDs (especially in RX functions) to
 * allocate an uninitialized mbuf. The driver is responsible of
 * initializing all the required fields. See rte_pktmbuf_reset().
 * For standard needs, prefer rte_pktmbuf_alloc().
 *
 * The caller can expect that the following fields of the mbuf structure
 * are initialized: buf_addr, buf_iova, buf_len, refcnt=1, nb_segs=1,
 * next=NULL, pool, priv_size. The other fields must be initialized
 * by the caller.
 *
 * @param mp
 *   The mempool from which mbuf is allocated.
 * @return
 *   - The pointer to the new mbuf on success.
 *   - NULL if allocation failed.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-pmd/flowgen.c' l='165' u='c' c='pkt_burst_flow_gen'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-pmd/txonly.c' l='192' u='c' c='pkt_burst_transmit'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-pmd/txonly.c' l='215' u='c' c='pkt_burst_transmit'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/avf/avf_rxtx.c' l='218' u='c' c='alloc_rxq_mbufs'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/avf/avf_rxtx.c' l='814' u='c' c='avf_recv_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/avf/avf_rxtx.c' l='948' u='c' c='avf_recv_scattered_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/bnxt/bnxt_rxr.c' l='57' u='c' c='__bnxt_alloc_rx_data'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/em_rxtx.c' l='739' u='c' c='eth_em_recv_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/em_rxtx.c' l='919' u='c' c='eth_em_recv_scattered_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/em_rxtx.c' l='1617' u='c' c='em_alloc_rx_queue_mbufs'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/igb_rxtx.c' l='868' u='c' c='eth_igb_recv_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/igb_rxtx.c' l='1059' u='c' c='eth_igb_recv_scattered_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/igb_rxtx.c' l='2169' u='c' c='igb_alloc_rx_queue_mbufs'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/enic/enic_main.c' l='277' u='c' c='enic_alloc_rx_queue_mbufs'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/enic/enic_rxtx.c' l='279' u='c' c='enic_recv_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/i40e/i40e_rxtx.c' l='693' u='c' c='i40e_recv_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/i40e/i40e_rxtx.c' l='809' u='c' c='i40e_recv_scattered_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/i40e/i40e_rxtx.c' l='2407' u='c' c='i40e_alloc_rx_queue_mbufs'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/ixgbe_rxtx.c' l='1808' u='c' c='ixgbe_recv_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/ixgbe_rxtx.c' l='2079' u='c' c='ixgbe_recv_pkts_lro'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/ixgbe_rxtx.c' l='4150' u='c' c='ixgbe_alloc_rx_queue_mbufs'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/qede/qede_rxtx.c' l='19' u='c' c='qede_alloc_rx_buffer'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/virtio/virtio_rxtx.c' l='459' u='c' c='virtio_dev_rx_queue_setup_finish'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/virtio/virtio_rxtx.c' l='785' u='c' c='virtio_recv_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/virtio/virtio_rxtx.c' l='958' u='c' c='virtio_recv_mergeable_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/vmxnet3/vmxnet3_rxtx.c' l='630' u='c' c='vmxnet3_post_rx_bufs'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/vmxnet3/vmxnet3_rxtx.c' l='720' u='c' c='vmxnet3_recv_pkts'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mbuf.h' l='875' ll='883' type='struct rte_mbuf * rte_mbuf_raw_alloc(struct rte_mempool * mp)'/>
<use f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mbuf.h' l='1222' u='c' c='rte_pktmbuf_alloc'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mbuf.h' l='856'>/**
 * Allocate an uninitialized mbuf from mempool *mp*.
 *
 * This function can be used by PMDs (especially in RX functions) to
 * allocate an uninitialized mbuf. The driver is responsible of
 * initializing all the required fields. See rte_pktmbuf_reset().
 * For standard needs, prefer rte_pktmbuf_alloc().
 *
 * The caller can expect that the following fields of the mbuf structure
 * are initialized: buf_addr, buf_iova, buf_len, refcnt=1, nb_segs=1,
 * next=NULL, pool, priv_size. The other fields must be initialized
 * by the caller.
 *
 * @param mp
 *   The mempool from which mbuf is allocated.
 * @return
 *   - The pointer to the new mbuf on success.
 *   - NULL if allocation failed.
 */</doc>
