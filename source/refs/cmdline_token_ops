<def f='dpdk/lib/librte_cmdline/cmdline_parse.h' l='61' ll='72'/>
<size>32</size>
<doc f='dpdk/lib/librte_cmdline/cmdline_parse.h' l='42'>/**
 * A token is defined by this structure.
 *
 * parse() takes the token as first argument, then the source buffer
 * starting at the token we want to parse. The 3rd arg is a pointer
 * where we store the parsed data (as binary). It returns the number of
 * parsed chars on success and a negative value on error.
 *
 * complete_get_nb() returns the number of possible values for this
 * token if completion is possible. If it is NULL or if it returns 0,
 * no completion is possible.
 *
 * complete_get_elt() copy in dstbuf (the size is specified in the
 * parameter) the i-th possible completion for this token.  returns 0
 * on success or and a negative value on error.
 *
 * get_help() fills the dstbuf with the help for the token. It returns
 * -1 on error and 0 on success.
 */</doc>
<mbr r='cmdline_token_ops::parse' o='0' t='int (*)(cmdline_parse_token_hdr_t *, const char *, void *, unsigned int)'/>
<mbr r='cmdline_token_ops::complete_get_nb' o='64' t='int (*)(cmdline_parse_token_hdr_t *)'/>
<mbr r='cmdline_token_ops::complete_get_elt' o='128' t='int (*)(cmdline_parse_token_hdr_t *, int, char *, unsigned int)'/>
<mbr r='cmdline_token_ops::get_help' o='192' t='int (*)(cmdline_parse_token_hdr_t *, char *, unsigned int)'/>
