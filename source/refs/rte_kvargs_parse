<dec f='dpdk/lib/librte_kvargs/rte_kvargs.h' l='71' type='struct rte_kvargs * rte_kvargs_parse(const char * args, const char *const * valid_keys)'/>
<use f='dpdk/app/pdump/main.c' l='247' u='c' c='parse_pdump'/>
<doc f='dpdk/lib/librte_kvargs/rte_kvargs.h' l='53'>/**
 * Allocate a rte_kvargs and store key/value associations from a string
 *
 * The function allocates and fills a rte_kvargs structure from a given
 * string whose format is key1=value1,key2=value2,...
 *
 * The structure can be freed with rte_kvargs_free().
 *
 * @param args
 *   The input string containing the key/value associations
 * @param valid_keys
 *   A list of valid keys (table of const char *, the last must be NULL).
 *   This argument is ignored if NULL
 *
 * @return
 *   - A pointer to an allocated rte_kvargs structure on success
 *   - NULL on error
 */</doc>
<use f='dpdk/drivers/baseband/null/bbdev_null.c' l='227' u='c' c='parse_bbdev_null_params'/>
<use f='dpdk/drivers/bus/ifpga/ifpga_bus.c' l='102' u='c' c='ifpga_scan_one'/>
<use f='dpdk/drivers/bus/ifpga/ifpga_bus.c' l='206' u='c' c='ifpga_scan'/>
<use f='dpdk/drivers/crypto/scheduler/scheduler_pmd.c' l='397' u='c' c='scheduler_parse_init_params'/>
<use f='dpdk/drivers/event/opdl/opdl_evdev.c' l='653' u='c' c='opdl_probe'/>
<use f='dpdk/drivers/event/sw/sw_evdev.c' l='850' u='c' c='sw_probe'/>
<use f='dpdk/drivers/net/bonding/rte_eth_bond_pmd.c' l='3072' u='c' c='bond_probe'/>
<use f='dpdk/drivers/net/failsafe/failsafe_args.c' l='410' u='c' c='failsafe_args_parse'/>
<use f='dpdk/drivers/net/kni/rte_eth_kni.c' l='386' u='c' c='eth_kni_kvargs_process'/>
<use f='dpdk/drivers/net/null/rte_eth_null.c' l='631' u='c' c='rte_pmd_null_probe'/>
<use f='dpdk/drivers/net/ring/rte_eth_ring.c' l='552' u='c' c='rte_pmd_ring_probe'/>
<use f='dpdk/drivers/net/softnic/rte_eth_softnic.c' l='574' u='c' c='pmd_parse_args'/>
<use f='dpdk/drivers/net/tap/rte_eth_tap.c' l='1702' u='c' c='rte_pmd_tun_probe'/>
<use f='dpdk/drivers/net/tap/rte_eth_tap.c' l='1774' u='c' c='rte_pmd_tap_probe'/>
<use f='dpdk/drivers/net/vdev_netvsc/vdev_netvsc.c' l='677' u='c' c='vdev_netvsc_vdev_probe'/>
<use f='dpdk/drivers/net/virtio/virtio_ethdev.c' l='1739' u='c' c='vdpa_mode_selected'/>
<use f='dpdk/drivers/net/virtio/virtio_user_ethdev.c' l='478' u='c' c='virtio_user_pmd_probe'/>
<use f='dpdk/drivers/raw/ifpga_rawdev/ifpga_rawdev.c' l='550' u='c' c='ifpga_cfg_probe'/>
<use f='dpdk/drivers/raw/skeleton_rawdev/skeleton_rawdev.c' l='662' u='c' c='skeldev_parse_vdev_args'/>
<use f='dpdk/lib/librte_compressdev/rte_compressdev_pmd.c' l='62' u='c' c='rte_compressdev_pmd_parse_input_args'/>
<use f='dpdk/lib/librte_cryptodev/rte_cryptodev_pmd.c' l='57' u='c' c='rte_cryptodev_pmd_parse_input_args'/>
<def f='dpdk/lib/librte_kvargs/rte_kvargs.c' l='161' ll='182' type='struct rte_kvargs * rte_kvargs_parse(const char * args, const char *const * valid_keys)'/>
<doc f='dpdk/lib/librte_kvargs/rte_kvargs.c' l='156'>/*
 * Parse the arguments &quot;key=value,key=value,...&quot; string and return
 * an allocated structure that contains a key/value list. Also
 * check if only valid keys were used.
 */</doc>
<use f='dpdk/drivers/net/vhost/rte_eth_vhost.c' l='1360' u='c' c='rte_pmd_vhost_probe'/>
