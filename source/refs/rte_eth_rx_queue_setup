<dec f='dpdk_18.05/lib/librte_ethdev/rte_ethdev.h' l='1634' type='int rte_eth_rx_queue_setup(uint16_t port_id, uint16_t rx_queue_id, uint16_t nb_rx_desc, unsigned int socket_id, const struct rte_eth_rxconf * rx_conf, struct rte_mempool * mb_pool)'/>
<doc f='dpdk_18.05/lib/librte_ethdev/rte_ethdev.h' l='1585'>/**
 * Allocate and set up a receive queue for an Ethernet device.
 *
 * The function allocates a contiguous block of memory for *nb_rx_desc*
 * receive descriptors from a memory zone associated with *socket_id*
 * and initializes each receive descriptor with a network buffer allocated
 * from the memory pool *mb_pool*.
 *
 * @param port_id
 *   The port identifier of the Ethernet device.
 * @param rx_queue_id
 *   The index of the receive queue to set up.
 *   The value must be in the range [0, nb_rx_queue - 1] previously supplied
 *   to rte_eth_dev_configure().
 * @param nb_rx_desc
 *   The number of receive descriptors to allocate for the receive ring.
 * @param socket_id
 *   The *socket_id* argument is the socket identifier in case of NUMA.
 *   The value can be *SOCKET_ID_ANY* if there is no NUMA constraint for
 *   the DMA memory allocated for the receive descriptors of the ring.
 * @param rx_conf
 *   The pointer to the configuration data to be used for the receive queue.
 *   NULL value is allowed, in which case default RX configuration
 *   will be used.
 *   The *rx_conf* structure contains an *rx_thresh* structure with the values
 *   of the Prefetch, Host, and Write-Back threshold registers of the receive
 *   ring.
 *   In addition it contains the hardware offloads features to activate using
 *   the DEV_RX_OFFLOAD_* flags.
 *   If an offloading set in rx_conf-&gt;offloads
 *   hasn&apos;t been set in the input argument eth_conf-&gt;rxmode.offloads
 *   to rte_eth_dev_configure(), it is a new added offloading, it must be
 *   per-queue type and it is enabled for the queue.
 *   No need to repeat any bit in rx_conf-&gt;offloads which has already been
 *   enabled in rte_eth_dev_configure() at port level. An offloading enabled
 *   at port level can&apos;t be disabled at queue level.
 * @param mb_pool
 *   The pointer to the memory pool from which to allocate *rte_mbuf* network
 *   memory buffers to populate each descriptor of the receive ring.
 * @return
 *   - 0: Success, receive queue correctly set up.
 *   - -EIO: if device is removed.
 *   - -EINVAL: The size of network buffers which can be allocated from the
 *      memory pool does not fit the various buffer sizes allowed by the
 *      device controller.
 *   - -ENOMEM: Unable to allocate the receive ring descriptors or to
 *      allocate network memory buffers from the memory pool when
 *      initializing receive descriptors.
 */</doc>
<use f='dpdk_18.05/app/test-eventdev/test_perf_common.c' l='717' u='c' c='perf_ethdev_setup'/>
<use f='dpdk_18.05/app/test-eventdev/test_pipeline_common.c' l='259' u='c' c='pipeline_ethdev_setup'/>
<use f='dpdk_18.05/app/test-pmd/cmdline.c' l='2484' u='c' c='cmd_setup_rxtx_queue_parsed'/>
<use f='dpdk_18.05/app/test-pmd/testpmd.c' l='1691' u='c' c='start_port'/>
<use f='dpdk_18.05/app/test-pmd/testpmd.c' l='1706' u='c' c='start_port'/>
<use f='dpdk_18.05/drivers/net/bonding/rte_eth_bond_pmd.c' l='1740' u='c' c='slave_configure_slow_queue'/>
<use f='dpdk_18.05/drivers/net/bonding/rte_eth_bond_pmd.c' l='1850' u='c' c='slave_configure'/>
<use f='dpdk_18.05/drivers/net/failsafe/failsafe_ether.c' l='89' u='c' c='fs_eth_dev_conf_apply'/>
<use f='dpdk_18.05/drivers/net/failsafe/failsafe_ops.c' l='374' u='c' c='fs_rx_queue_setup'/>
<def f='dpdk_18.05/lib/librte_ethdev/rte_ethdev.c' l='1451' ll='1595' type='int rte_eth_rx_queue_setup(uint16_t port_id, uint16_t rx_queue_id, uint16_t nb_rx_desc, unsigned int socket_id, const struct rte_eth_rxconf * rx_conf, struct rte_mempool * mp)'/>
