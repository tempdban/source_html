<dec f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_common.h' l='128' type='s32 ixgbe_get_san_mac_addr_generic(struct ixgbe_hw * hw, u8 * san_mac_addr)'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_82599.c' l='348' u='r' c='ixgbe_init_ops_82599'/>
<def f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_common.c' l='3585' ll='3629' type='s32 ixgbe_get_san_mac_addr_generic(struct ixgbe_hw * hw, u8 * san_mac_addr)'/>
<doc f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_common.c' l='3575'>/**
 *  ixgbe_get_san_mac_addr_generic - SAN MAC address retrieval from the EEPROM
 *  @hw: pointer to hardware structure
 *  @san_mac_addr: SAN MAC address
 *
 *  Reads the SAN MAC address from the EEPROM, if it&apos;s available.  This is
 *  per-port, so set_lan_id() must be called before reading the addresses.
 *  set_lan_id() is called by identify_sfp(), but this cannot be relied
 *  upon for non-SFP connections, so we must call it here.
 **/</doc>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x540.c' l='95' u='r' c='ixgbe_init_ops_X540'/>
<dec f='dpdk_18.05/kernel/linux/kni/ethtool/ixgbe/ixgbe_common.h' l='81' type='s32 ixgbe_get_san_mac_addr_generic(struct ixgbe_hw * hw, u8 * san_mac_addr)'/>
<use f='dpdk_18.05/kernel/linux/kni/ethtool/ixgbe/ixgbe_82599.c' l='229' u='a' c='ixgbe_init_ops_82599'/>
<def f='dpdk_18.05/kernel/linux/kni/ethtool/ixgbe/ixgbe_common.c' l='2873' ll='2909' type='s32 ixgbe_get_san_mac_addr_generic(struct ixgbe_hw * hw, u8 * san_mac_addr)'/>
<doc f='dpdk_18.05/kernel/linux/kni/ethtool/ixgbe/ixgbe_common.c' l='2863'>/**
 *  ixgbe_get_san_mac_addr_generic - SAN MAC address retrieval from the EEPROM
 *  @hw: pointer to hardware structure
 *  @san_mac_addr: SAN MAC address
 *
 *  Reads the SAN MAC address from the EEPROM, if it&apos;s available.  This is
 *  per-port, so set_lan_id() must be called before reading the addresses.
 *  set_lan_id() is called by identify_sfp(), but this cannot be relied
 *  upon for non-SFP connections, so we must call it here.
 **/</doc>
<use f='dpdk_18.05/kernel/linux/kni/ethtool/ixgbe/ixgbe_x540.c' l='64' u='a' c='ixgbe_init_ops_X540'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_common.h' l='128' type='s32 ixgbe_get_san_mac_addr_generic(struct ixgbe_hw * hw, u8 * san_mac_addr)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_82599.c' l='348' u='r' c='ixgbe_init_ops_82599'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_common.c' l='3585' ll='3629' type='s32 ixgbe_get_san_mac_addr_generic(struct ixgbe_hw * hw, u8 * san_mac_addr)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_common.c' l='3575'>/**
 *  ixgbe_get_san_mac_addr_generic - SAN MAC address retrieval from the EEPROM
 *  @hw: pointer to hardware structure
 *  @san_mac_addr: SAN MAC address
 *
 *  Reads the SAN MAC address from the EEPROM, if it&apos;s available.  This is
 *  per-port, so set_lan_id() must be called before reading the addresses.
 *  set_lan_id() is called by identify_sfp(), but this cannot be relied
 *  upon for non-SFP connections, so we must call it here.
 **/</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x540.c' l='95' u='r' c='ixgbe_init_ops_X540'/>
