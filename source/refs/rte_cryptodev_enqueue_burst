<def f='dpdk_18.05/lib/librte_cryptodev/rte_cryptodev.h' l='888' ll='896' type='uint16_t rte_cryptodev_enqueue_burst(uint8_t dev_id, uint16_t qp_id, struct rte_crypto_op ** ops, uint16_t nb_ops)'/>
<doc f='dpdk_18.05/lib/librte_cryptodev/rte_cryptodev.h' l='857'>/**
 * Enqueue a burst of operations for processing on a crypto device.
 *
 * The rte_cryptodev_enqueue_burst() function is invoked to place
 * crypto operations on the queue *qp_id* of the device designated by
 * its *dev_id*.
 *
 * The *nb_ops* parameter is the number of operations to process which are
 * supplied in the *ops* array of *rte_crypto_op* structures.
 *
 * The rte_cryptodev_enqueue_burst() function returns the number of
 * operations it actually enqueued for processing. A return value equal to
 * *nb_ops* means that all packets have been enqueued.
 *
 * @param	dev_id		The identifier of the device.
 * @param	qp_id		The index of the queue pair which packets are
 *				to be enqueued for processing. The value
 *				must be in the range [0, nb_queue_pairs - 1]
 *				previously supplied to
 *				 *rte_cryptodev_configure*.
 * @param	ops		The address of an array of *nb_ops* pointers
 *				to *rte_crypto_op* structures which contain
 *				the crypto operations to be processed.
 * @param	nb_ops		The number of operations to process.
 *
 * @return
 * The number of operations actually enqueued on the crypto device. The return
 * value can be less than the value of the *nb_ops* parameter when the
 * crypto devices queue is full or if invalid parameters are specified in
 * a *rte_crypto_op*.
 */</doc>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_latency.c' l='160' u='c' c='cperf_latency_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_latency.c' l='221' u='c' c='cperf_latency_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_latency.c' l='270' u='c' c='cperf_latency_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_pmd_cyclecount.c' l='239' u='c' c='pmd_cyclecount_bench_enq'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_throughput.c' l='122' u='c' c='cperf_throughput_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_throughput.c' l='196' u='c' c='cperf_throughput_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_throughput.c' l='234' u='c' c='cperf_throughput_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_verify.c' l='314' u='c' c='cperf_verify_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_verify.c' l='356' u='c' c='cperf_verify_test_runner'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_failover.c' l='32' u='c' c='failover_slave_enqueue'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_multicore.c' l='192' u='c' c='mc_scheduler_worker'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_multicore.c' l='202' u='c' c='mc_scheduler_worker'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_pkt_size_distr.c' l='151' u='c' c='schedule_enqueue'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_pkt_size_distr.c' l='161' u='c' c='schedule_enqueue'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_roundrobin.c' l='34' u='c' c='schedule_enqueue'/>
<use f='dpdk_18.05/lib/librte_eventdev/rte_event_crypto_adapter.c' l='388' u='c' c='eca_enq_to_cryptodev'/>
<use f='dpdk_18.05/lib/librte_eventdev/rte_event_crypto_adapter.c' l='441' u='c' c='eca_crypto_enq_flush'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_cryptodev/rte_cryptodev.h' l='883' ll='891' type='uint16_t rte_cryptodev_enqueue_burst(uint8_t dev_id, uint16_t qp_id, struct rte_crypto_op ** ops, uint16_t nb_ops)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_cryptodev/rte_cryptodev.h' l='852'>/**
 * Enqueue a burst of operations for processing on a crypto device.
 *
 * The rte_cryptodev_enqueue_burst() function is invoked to place
 * crypto operations on the queue *qp_id* of the device designated by
 * its *dev_id*.
 *
 * The *nb_ops* parameter is the number of operations to process which are
 * supplied in the *ops* array of *rte_crypto_op* structures.
 *
 * The rte_cryptodev_enqueue_burst() function returns the number of
 * operations it actually enqueued for processing. A return value equal to
 * *nb_ops* means that all packets have been enqueued.
 *
 * @param	dev_id		The identifier of the device.
 * @param	qp_id		The index of the queue pair which packets are
 *				to be enqueued for processing. The value
 *				must be in the range [0, nb_queue_pairs - 1]
 *				previously supplied to
 *				 *rte_cryptodev_configure*.
 * @param	ops		The address of an array of *nb_ops* pointers
 *				to *rte_crypto_op* structures which contain
 *				the crypto operations to be processed.
 * @param	nb_ops		The number of operations to process.
 *
 * @return
 * The number of operations actually enqueued on the crypto device. The return
 * value can be less than the value of the *nb_ops* parameter when the
 * crypto devices queue is full or if invalid parameters are specified in
 * a *rte_crypto_op*.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_latency.c' l='160' u='c' c='cperf_latency_test_runner'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_latency.c' l='221' u='c' c='cperf_latency_test_runner'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_latency.c' l='270' u='c' c='cperf_latency_test_runner'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_pmd_cyclecount.c' l='239' u='c' c='pmd_cyclecount_bench_enq'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_throughput.c' l='122' u='c' c='cperf_throughput_test_runner'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_throughput.c' l='196' u='c' c='cperf_throughput_test_runner'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_throughput.c' l='234' u='c' c='cperf_throughput_test_runner'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_verify.c' l='314' u='c' c='cperf_verify_test_runner'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_verify.c' l='356' u='c' c='cperf_verify_test_runner'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/scheduler/scheduler_failover.c' l='32' u='c' c='failover_slave_enqueue'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/scheduler/scheduler_multicore.c' l='192' u='c' c='mc_scheduler_worker'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/scheduler/scheduler_multicore.c' l='202' u='c' c='mc_scheduler_worker'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/scheduler/scheduler_pkt_size_distr.c' l='151' u='c' c='schedule_enqueue'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/scheduler/scheduler_pkt_size_distr.c' l='161' u='c' c='schedule_enqueue'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/scheduler/scheduler_roundrobin.c' l='34' u='c' c='schedule_enqueue'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_cryptodev.h' l='883' ll='891' type='uint16_t rte_cryptodev_enqueue_burst(uint8_t dev_id, uint16_t qp_id, struct rte_crypto_op ** ops, uint16_t nb_ops)'/>
<use f='vpp_1804/src/plugins/dpdk/ipsec/ipsec.h' l='302' u='c' c='crypto_enqueue_ops'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_cryptodev.h' l='852'>/**
 * Enqueue a burst of operations for processing on a crypto device.
 *
 * The rte_cryptodev_enqueue_burst() function is invoked to place
 * crypto operations on the queue *qp_id* of the device designated by
 * its *dev_id*.
 *
 * The *nb_ops* parameter is the number of operations to process which are
 * supplied in the *ops* array of *rte_crypto_op* structures.
 *
 * The rte_cryptodev_enqueue_burst() function returns the number of
 * operations it actually enqueued for processing. A return value equal to
 * *nb_ops* means that all packets have been enqueued.
 *
 * @param	dev_id		The identifier of the device.
 * @param	qp_id		The index of the queue pair which packets are
 *				to be enqueued for processing. The value
 *				must be in the range [0, nb_queue_pairs - 1]
 *				previously supplied to
 *				 *rte_cryptodev_configure*.
 * @param	ops		The address of an array of *nb_ops* pointers
 *				to *rte_crypto_op* structures which contain
 *				the crypto operations to be processed.
 * @param	nb_ops		The number of operations to process.
 *
 * @return
 * The number of operations actually enqueued on the crypto device. The return
 * value can be less than the value of the *nb_ops* parameter when the
 * crypto devices queue is full or if invalid parameters are specified in
 * a *rte_crypto_op*.
 */</doc>
