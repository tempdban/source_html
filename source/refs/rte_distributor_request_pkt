<dec f='dpdk_18.05/lib/librte_distributor/rte_distributor.h' l='211' type='void rte_distributor_request_pkt(struct rte_distributor * d, unsigned int worker_id, struct rte_mbuf ** oldpkt, unsigned int count)'/>
<def f='dpdk_18.05/lib/librte_distributor/rte_distributor.c' l='81' macro='1' type='void rte_distributor_request_pkt(struct rte_distributor * d, unsigned int worker_id, struct rte_mbuf ** oldpkt, unsigned int count)'/>
<use f='dpdk_18.05/lib/librte_distributor/rte_distributor.c' l='142' u='c' c='rte_distributor_get_pkt_v1705'/>
<doc f='dpdk_18.05/lib/librte_distributor/rte_distributor.h' l='188'>/**
 * API called by a worker to request a new packet to process.
 * Any previous packet given to the worker is assumed to have completed
 * processing, and may be optionally returned to the distributor via
 * the oldpkt parameter.
 * Unlike rte_distributor_get_pkt_burst(), this function does not wait for a
 * new packet to be provided by the distributor.
 *
 * NOTE: after calling this function, rte_distributor_poll_pkt_burst() should
 * be used to poll for the packet requested. The rte_distributor_get_pkt_burst()
 * API should *not* be used to try and retrieve the new packet.
 *
 * @param d
 *   The distributor instance to be used
 * @param worker_id
 *   The worker instance number to use - must be less that num_workers passed
 *   at distributor creation time.
 * @param oldpkt
 *   The returning packets, if any, processed by the worker
 * @param count
 *   The number of returning packets
 */</doc>
