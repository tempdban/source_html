<dec f='dpdk/lib/librte_eal/common/include/rte_log.h' l='298' type='int rte_vlog(uint32_t level, uint32_t logtype, const char * format, struct __va_list_tag * ap)'/>
<doc f='dpdk/lib/librte_eal/common/include/rte_log.h' l='272'>/**
 * Generates a log message.
 *
 * The message will be sent in the stream defined by the previous call
 * to rte_openlog_stream().
 *
 * The level argument determines if the log should be displayed or
 * not, depending on the global rte_logs variable. A trailing
 * newline may be added if needed.
 *
 * The preferred alternative is the RTE_LOG() because it adds the
 * level and type in the logged string.
 *
 * @param level
 *   Log level. A value between RTE_LOG_EMERG (1) and RTE_LOG_DEBUG (8).
 * @param logtype
 *   The log type, for example, RTE_LOGTYPE_EAL.
 * @param format
 *   The format string, as in printf(3), followed by the variable arguments
 *   required by the format.
 * @param ap
 *   The va_list of the variable arguments required by the format.
 * @return
 *   - 0: Success.
 *   - Negative on error.
 */</doc>
<def f='dpdk/lib/librte_eal/common/eal_common_log.c' l='398' ll='431' type='int rte_vlog(uint32_t level, uint32_t logtype, const char * format, struct __va_list_tag * ap)'/>
<use f='dpdk/lib/librte_eal/common/eal_common_log.c' l='445' u='c' c='rte_log'/>
<doc f='dpdk/lib/librte_eal/common/eal_common_log.c' l='394'>/*
 * Generates a log message The message will be sent in the stream
 * defined by the previous call to rte_openlog_stream().
 */</doc>
<use f='dpdk/lib/librte_eal/linuxapp/eal/eal_debug.c' l='58' u='c' c='__rte_panic'/>
<use f='dpdk/lib/librte_eal/linuxapp/eal/eal_debug.c' l='79' u='c' c='rte_exit'/>
