<def f='dpdk_18.05/lib/librte_ring/rte_ring.h' l='904' ll='910' type='unsigned int rte_ring_sc_dequeue_burst(struct rte_ring * r, void ** obj_table, unsigned int n, unsigned int * available)'/>
<doc f='dpdk_18.05/lib/librte_ring/rte_ring.h' l='887'>/**
 * Dequeue several objects from a ring (NOT multi-consumers safe).When the
 * request objects are more than the available objects, only dequeue the
 * actual number of objects
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects) that will be filled.
 * @param n
 *   The number of objects to dequeue from the ring to the obj_table.
 * @param available
 *   If non-NULL, returns the number of remaining ring entries after the
 *   dequeue has finished.
 * @return
 *   - n: Actual number of objects dequeued, 0 if ring is empty
 */</doc>
<use f='dpdk_18.05/drivers/net/softnic/rte_eth_softnic.c' l='273' u='c' c='run_default'/>
<use f='dpdk_18.05/drivers/net/softnic/rte_eth_softnic.c' l='342' u='c' c='run_tm'/>
<use f='dpdk_18.05/lib/librte_port/rte_port_frag.c' l='159' u='c' c='rte_port_ring_reader_frag_rx'/>
<use f='dpdk_18.05/lib/librte_port/rte_port_ring.c' l='85' u='c' c='rte_port_ring_reader_rx'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ring/rte_ring.h' l='908' ll='914' type='unsigned int rte_ring_sc_dequeue_burst(struct rte_ring * r, void ** obj_table, unsigned int n, unsigned int * available)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ring/rte_ring.h' l='891'>/**
 * Dequeue several objects from a ring (NOT multi-consumers safe).When the
 * request objects are more than the available objects, only dequeue the
 * actual number of objects
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects) that will be filled.
 * @param n
 *   The number of objects to dequeue from the ring to the obj_table.
 * @param available
 *   If non-NULL, returns the number of remaining ring entries after the
 *   dequeue has finished.
 * @return
 *   - n: Actual number of objects dequeued, 0 if ring is empty
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/softnic/rte_eth_softnic.c' l='267' u='c' c='run_default'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/softnic/rte_eth_softnic.c' l='336' u='c' c='run_tm'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_ring.h' l='908' ll='914' type='unsigned int rte_ring_sc_dequeue_burst(struct rte_ring * r, void ** obj_table, unsigned int n, unsigned int * available)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_ring.h' l='891'>/**
 * Dequeue several objects from a ring (NOT multi-consumers safe).When the
 * request objects are more than the available objects, only dequeue the
 * actual number of objects
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects) that will be filled.
 * @param n
 *   The number of objects to dequeue from the ring to the obj_table.
 * @param available
 *   If non-NULL, returns the number of remaining ring entries after the
 *   dequeue has finished.
 * @return
 *   - n: Actual number of objects dequeued, 0 if ring is empty
 */</doc>
<use f='vpp_1804/src/plugins/dpdk/hqos/hqos.c' l='429' u='c' c='dpdk_hqos_thread_internal_hqos_dbg_bypass'/>
<use f='vpp_1804/src/plugins/dpdk/hqos/hqos.c' l='520' u='c' c='dpdk_hqos_thread_internal'/>
