<dec f='dpdk/lib/librte_mempool/rte_mempool.h' l='1193' type='int rte_mempool_populate_virt(struct rte_mempool * mp, char * addr, size_t len, size_t pg_sz, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<doc f='dpdk/lib/librte_mempool/rte_mempool.h' l='1168'>/**
 * Add virtually contiguous memory for objects in the pool at init
 *
 * Add a virtually contiguous memory chunk in the pool where objects can
 * be instantiated.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param addr
 *   The virtual address of memory that should be used to store objects.
 *   Must be page-aligned.
 * @param len
 *   The length of memory in bytes. Must be page-aligned.
 * @param pg_sz
 *   The size of memory pages in this virtual area.
 * @param free_cb
 *   The callback used to free this chunk when destroying the mempool.
 * @param opaque
 *   An opaque argument passed to free_cb.
 * @return
 *   The number of objects added on success.
 *   On error, the chunk is not added in the memory list of the
 *   mempool and a negative errno is returned.
 */</doc>
<def f='dpdk/lib/librte_mempool/rte_mempool.c' l='486' ll='539' type='int rte_mempool_populate_virt(struct rte_mempool * mp, char * addr, size_t len, size_t pg_sz, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<use f='dpdk/lib/librte_mempool/rte_mempool.c' l='709' u='c' c='rte_mempool_populate_default'/>
<use f='dpdk/lib/librte_mempool/rte_mempool.c' l='800' u='c' c='rte_mempool_populate_anon'/>
<doc f='dpdk/lib/librte_mempool/rte_mempool.c' l='483'>/* Populate the mempool with a virtual area. Return the number of
 * objects added, or a negative value on error.
 */</doc>
