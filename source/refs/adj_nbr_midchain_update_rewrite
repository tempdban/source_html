<dec f='vpp_1804/src/vnet/adj/adj_midchain.h' l='47' type='void adj_nbr_midchain_update_rewrite(adj_index_t adj_index, adj_midchain_fixup_t fixup, const void * fixup_data, adj_flags_t flags, u8 * rewrite)'/>
<doc f='vpp_1804/src/vnet/adj/adj_midchain.h' l='27'>/**
 * @brief
 *  Convert an existing neighbour adjacency into a midchain
 *
 * @param adj_index
 *  The index of the neighbour adjacency.
 *
 * @param fixup
 *  The function that will be invoked at paket switch time to &apos;fixup&apos;
 *  the rewrite applied with necessary per-packet info (i.e. length, checksums).
 * @param fixup_data
 *  Context data set by the caller that is provided as an argument in the
 *  fixup function.
 *
 * @param flags
 *  Flags controlling the adjacency behaviour
 *
 * @param rewrite
 *  The rewrite.
 */</doc>
<def f='vpp_1804/src/vnet/adj/adj_midchain.c' l='505' ll='540' type='void adj_nbr_midchain_update_rewrite(adj_index_t adj_index, adj_midchain_fixup_t fixup, const void * fixup_data, adj_flags_t flags, u8 * rewrite)'/>
<doc f='vpp_1804/src/vnet/adj/adj_midchain.c' l='498'>/**
 * adj_nbr_midchain_update_rewrite
 *
 * Update the adjacency&apos;s rewrite string. A NULL string implies the
 * rewrite is reset (i.e. when ARP/ND etnry is gone).
 * NB: the adj being updated may be handling traffic in the DP.
 */</doc>
<use f='vpp_1804/src/vnet/gre/gre.c' l='311' u='c' c='gre_update_adj'/>
<use f='vpp_1804/src/vnet/ipip/ipip.c' l='219' u='c' c='ipip_update_adj'/>
<use f='vpp_1804/src/vnet/ipip/sixrd.c' l='203' u='c' c='sixrd_update_adj'/>
<use f='vpp_1804/src/vnet/ipip/sixrd.c' l='226' u='c' c='sixrd_update_adj'/>
<use f='vpp_1804/src/vnet/lisp-gpe/lisp_gpe_adjacency.c' l='350' u='c' c='lisp_gpe_update_adjacency'/>
<use f='vpp_1804/src/vnet/mpls/mpls_tunnel.c' l='402' u='c' c='mpls_tunnel_update_adj'/>
<use f='vpp_1804/src/plugins/pppoe/pppoe.c' l='187' u='c' c='pppoe_update_adj'/>
