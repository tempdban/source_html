<def f='dpdk/lib/librte_acl/rte_acl.h' l='237' ll='245'/>
<dec f='dpdk/lib/librte_acl/rte_acl.h' l='317' type='int rte_acl_classify_alg(const struct rte_acl_ctx * ctx, const uint8_t ** data, uint32_t * results, uint32_t num, uint32_t categories, enum rte_acl_classify_alg alg)'/>
<doc f='dpdk/lib/librte_acl/rte_acl.h' l='234'>/**
 *  Available implementations of ACL classify.
 */</doc>
<doc f='dpdk/lib/librte_acl/rte_acl.h' l='282'>/**
 * Perform search using specified algorithm for a matching ACL rule for
 * each input data buffer.
 * Each input data buffer can have up to *categories* matches.
 * That implies that results array should be big enough to hold
 * (categories * num) elements.
 * Also categories parameter should be either one or multiple of
 * RTE_ACL_RESULTS_MULTIPLIER and can&apos;t be bigger than RTE_ACL_MAX_CATEGORIES.
 * If more than one rule is applicable for given input buffer and
 * given category, then rule with highest priority will be returned as a match.
 * Note, that it is a caller&apos;s responsibility to ensure that input parameters
 * are valid and point to correct memory locations.
 *
 * @param ctx
 *   ACL context to search with.
 * @param data
 *   Array of pointers to input data buffers to perform search.
 *   Note that all fields in input data buffers supposed to be in network
 *   byte order (MSB).
 * @param results
 *   Array of search results, *categories* results per each input data buffer.
 * @param num
 *   Number of elements in the input data buffers array.
 * @param categories
 *   Number of maximum possible matches for each input buffer, one possible
 *   match per category.
 * @param alg
 *   Algorithm to be used for the search.
 *   It is the caller responsibility to ensure that the value refers to the
 *   existing algorithm, and that it could be run on the given CPU.
 * @return
 *   zero on successful completion.
 *   -EINVAL for incorrect arguments.
 */</doc>
<def f='dpdk/lib/librte_acl/rte_acl.c' l='119' ll='129' type='int rte_acl_classify_alg(const struct rte_acl_ctx * ctx, const uint8_t ** data, uint32_t * results, uint32_t num, uint32_t categories, enum rte_acl_classify_alg alg)'/>
<use f='dpdk/lib/librte_acl/rte_acl.c' l='135' u='c' c='rte_acl_classify'/>
