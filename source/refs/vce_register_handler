<dec f='vpp_1804/src/vcl/vcl_event.h' l='129' type='vce_event_handler_reg_t * vce_register_handler(vce_event_thread_t * evt, vce_event_key_t * evk, vce_event_callback_t cb, void * cb_args)'/>
<def f='vpp_1804/src/vcl/vcl_event.c' l='97' ll='154' type='vce_event_handler_reg_t * vce_register_handler(vce_event_thread_t * evt, vce_event_key_t * evk, vce_event_callback_t cb, void * cb_args)'/>
<doc f='vpp_1804/src/vcl/vcl_event.h' l='114'>/**
 * @brief vce_register_handler
 * - used by functions who need to be notified that an event has occurred
 *   on a vce_event_key_t (i.e. event type (enum) and sessionID)
 * - if a handler already exists, the index to the old handler is stored
 *   inside the new handler for re-instatement on vce_unregister_handler()

 * @param evt - vce_event_thread_t - event system state
 * @param evk - vce_event_key_t current an eventID from enum in consumer and
 * 		sessionID
 * @param cb  - vce_event_callback_t function to handle event
 * @param cb_args - args that the callback needs passed back to it.
 * @return vce_handler_reg_t - the function that needs event notification
 *   needs to block on a condvar mutex to reduce spin. That is in here.
 */</doc>
<use f='vpp_1804/src/vcl/vppcom.c' l='2764' u='c' c='vppcom_session_register_listener'/>
<use f='vpp_1804/src/vcl/vppcom.c' l='2842' u='c' c='vppcom_session_accept'/>
<use f='vpp_1804/src/vcl/vppcom.c' l='3568' u='c' c='vppcom_select'/>
<use f='vpp_1804/src/vcl/vppcom.c' l='3888' u='c' c='vppcom_epoll_ctl'/>
