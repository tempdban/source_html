<def f='dpdk/lib/librte_ring/rte_ring.h' l='335' ll='355' type='unsigned int __rte_ring_do_enqueue(struct rte_ring * r, void *const * obj_table, unsigned int n, enum rte_ring_queue_behavior behavior, unsigned int is_sp, unsigned int * free_space)'/>
<use f='dpdk/lib/librte_ring/rte_ring.h' l='422' u='c' c='rte_ring_mp_enqueue_bulk'/>
<use f='dpdk/lib/librte_ring/rte_ring.h' l='445' u='c' c='rte_ring_sp_enqueue_bulk'/>
<use f='dpdk/lib/librte_ring/rte_ring.h' l='472' u='c' c='rte_ring_enqueue_bulk'/>
<use f='dpdk/lib/librte_ring/rte_ring.h' l='805' u='c' c='rte_ring_mp_enqueue_burst'/>
<use f='dpdk/lib/librte_ring/rte_ring.h' l='828' u='c' c='rte_ring_sp_enqueue_burst'/>
<use f='dpdk/lib/librte_ring/rte_ring.h' l='855' u='c' c='rte_ring_enqueue_burst'/>
<doc f='dpdk/lib/librte_ring/rte_ring.h' l='315'>/**
 * @internal Enqueue several objects on the ring
 *
  * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects).
 * @param n
 *   The number of objects to add in the ring from the obj_table.
 * @param behavior
 *   RTE_RING_QUEUE_FIXED:    Enqueue a fixed number of items from a ring
 *   RTE_RING_QUEUE_VARIABLE: Enqueue as many items as possible from ring
 * @param is_sp
 *   Indicates whether to use single producer or multi-producer head update
 * @param free_space
 *   returns the amount of space after the enqueue operation has finished
 * @return
 *   Actual number of objects enqueued.
 *   If behavior == RTE_RING_QUEUE_FIXED, this will be 0 or n only.
 */</doc>
