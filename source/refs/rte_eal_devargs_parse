<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_devargs.h' l='113' type='int rte_eal_devargs_parse(const char * dev, struct rte_devargs * da)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_devargs.h' l='96'>/**
 * Parse a device string.
 *
 * Verify that a bus is capable of handling the device passed
 * in argument. Store which bus will handle the device, its name
 * and the eventual device parameters.
 *
 * @param dev
 *   The device declaration string.
 * @param da
 *   The devargs structure holding the device information.
 *
 * @return
 *   - 0 on success.
 *   - Negative errno on error.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/failsafe/failsafe_args.c' l='65' u='c' c='fs_parse_device'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/failsafe/failsafe_eal.c' l='72' u='c' c='fs_bus_init'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_dev.c' l='139' u='c' c='rte_eal_hotplug_add'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_devargs.c' l='61' ll='113' type='int rte_eal_devargs_parse(const char * dev, struct rte_devargs * da)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_devargs.c' l='140' u='c' c='rte_eal_devargs_add'/>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_devargs.h' l='113' type='int rte_eal_devargs_parse(const char * dev, struct rte_devargs * da)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_devargs.h' l='96'>/**
 * Parse a device string.
 *
 * Verify that a bus is capable of handling the device passed
 * in argument. Store which bus will handle the device, its name
 * and the eventual device parameters.
 *
 * @param dev
 *   The device declaration string.
 * @param da
 *   The devargs structure holding the device information.
 *
 * @return
 *   - 0 on success.
 *   - Negative errno on error.
 */</doc>
