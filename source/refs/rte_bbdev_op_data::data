<dec f='dpdk_18.05/lib/librte_bbdev/rte_bbdev_op.h' l='159' type='struct rte_mbuf *'/>
<offset>0</offset>
<doc f='dpdk_18.05/lib/librte_bbdev/rte_bbdev_op.h' l='130'>/**&lt; The mbuf data structure representing the data for BBDEV operation.
	 *
	 * This mbuf pointer can point to one Code Block (CB) data buffer or
	 * multiple CBs contiguously located next to each other.
	 * A Transport Block (TB) represents a whole piece of data that is
	 * divided into one or more CBs. Maximum number of CBs can be contained
	 * in one TB is defined by RTE_BBDEV_MAX_CODE_BLOCKS.
	 *
	 * An mbuf data structure cannot represent more than one TB. The
	 * smallest piece of data that can be contained in one mbuf is one CB.
	 * An mbuf can include one contiguous CB, subset of contiguous CBs that
	 * are belonging to one TB, or all contiguous CBs that are belonging to
	 * one TB.
	 *
	 * If a BBDEV PMD supports the extended capability &quot;Scatter-Gather&quot;,
	 * then it is capable of collecting (gathering) non-contiguous
	 * (scattered) data from multiple locations in the memory.
	 * This capability is reported by the capability flags:
	 * - RTE_BBDEV_TURBO_ENC_SCATTER_GATHER and
	 * - RTE_BBDEV_TURBO_DEC_SCATTER_GATHER.
	 * Only if a BBDEV PMD supports this feature, chained mbuf data
	 * structures are accepted. A chained mbuf can represent one
	 * non-contiguous CB or multiple non-contiguous CBs.
	 * If BBDEV PMD does not support this feature, it will assume inbound
	 * mbuf data contains one segment.
	 *
	 * The output mbuf data though is always one segment, even if the input
	 * was a chained mbuf.
	 */</doc>
<use f='dpdk_18.05/app/test-bbdev/test_bbdev_perf.c' l='566' u='w' c='init_op_data_objs'/>
<use f='dpdk_18.05/app/test-bbdev/test_bbdev_perf.c' l='644' u='r' c='limit_input_llr_val_range'/>
<use f='dpdk_18.05/app/test-bbdev/test_bbdev_perf.c' l='853' u='r' c='validate_op_chain'/>
