<dec f='dpdk/lib/librte_eal/common/include/rte_memory.h' l='361' type='int rte_mem_event_callback_register(const char * name, rte_mem_event_callback_t clb, void * arg)'/>
<doc f='dpdk/lib/librte_eal/common/include/rte_memory.h' l='335'>/**
 * Function used to register callbacks for memory events.
 *
 * @note callbacks will happen while memory hotplug subsystem is write-locked,
 *       therefore some functions (e.g. `rte_memseg_walk()`) will cause a
 *       deadlock when called from within such callbacks.
 *
 * @note mem event callbacks not being supported is an expected error condition,
 *       so user code needs to handle this situation. In these cases, return
 *       value will be -1, and rte_errno will be set to ENOTSUP.
 *
 * @param name
 *   Name associated with specified callback to be added to the list.
 *
 * @param clb
 *   Callback function pointer.
 *
 * @param arg
 *   Argument to pass to the callback.
 *
 * @return
 *   0 on successful callback register
 *   -1 on unsuccessful callback register, with rte_errno value indicating
 *   reason for failure.
 */</doc>
<use f='dpdk/drivers/net/virtio/virtio_user/virtio_user_dev.c' l='448' u='c' c='virtio_user_dev_init'/>
<def f='dpdk/lib/librte_eal/common/eal_common_memory.c' l='695' ll='706' type='int rte_mem_event_callback_register(const char * name, rte_mem_event_callback_t clb, void * arg)'/>
<doc f='dpdk/lib/librte_eal/common/eal_common_memory.c' l='691'>/*
 * Defining here because declared in rte_memory.h, but the actual implementation
 * is in eal_common_memalloc.c, like all other memalloc internals.
 */</doc>
<use f='dpdk/lib/librte_eal/linuxapp/eal/eal_vfio.c' l='782' u='c' c='rte_vfio_setup_device'/>
