<def f='dpdk_18.05/lib/librte_eventdev/rte_event_ring.h' l='86' ll='107' type='unsigned int rte_event_ring_enqueue_burst(struct rte_event_ring * r, const struct rte_event * events, unsigned int n, uint16_t * free_space)'/>
<doc f='dpdk_18.05/lib/librte_eventdev/rte_event_ring.h' l='66'>/**
 * Enqueue a set of events onto a ring
 *
 * Note: this API enqueues by copying the events themselves onto the ring,
 * rather than just placing a pointer to each event onto the ring. This
 * means that statically-allocated events can safely be enqueued by this
 * API.
 *
 * @param r
 *   pointer to the event ring
 * @param events
 *   pointer to an array of struct rte_event objects
 * @param n
 *   number of events in the array to enqueue
 * @param free_space
 *   if non-null, is updated to indicate the amount of free space in the
 *   ring once the enqueue has completed.
 * @return
 *   the number of elements, n&apos;, enqueued to the ring, 0 &lt;= n&apos; &lt;= n
 */</doc>
<use f='dpdk_18.05/drivers/event/sw/sw_evdev_scheduler.c' l='99' u='c' c='sw_schedule_atomic_to_cq'/>
<use f='dpdk_18.05/drivers/event/sw/sw_evdev_scheduler.c' l='554' u='c' c='sw_event_schedule'/>
<use f='dpdk_18.05/drivers/event/sw/sw_evdev_worker.c' l='27' u='c' c='sw_event_release'/>
<use f='dpdk_18.05/drivers/event/sw/sw_evdev_worker.c' l='49' u='c' c='enqueue_burst_with_ops'/>
