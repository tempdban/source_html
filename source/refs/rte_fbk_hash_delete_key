<def f='dpdk_18.05/lib/librte_hash/rte_fbk_hash.h' l='228' ll='233' type='int rte_fbk_hash_delete_key(struct rte_fbk_hash_table * ht, uint32_t key)'/>
<doc f='dpdk_18.05/lib/librte_hash/rte_fbk_hash.h' l='217'>/**
 * Remove a key from an existing hash table. This operation is not multi-thread
 * safe and should only be called from one thread.
 *
 * @param ht
 *   Hash table to remove the key from.
 * @param key
 *   Key to remove from the hash table.
 * @return
 *   0 if ok, or negative value on error.
 */</doc>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_hash/rte_fbk_hash.h' l='228' ll='233' type='int rte_fbk_hash_delete_key(struct rte_fbk_hash_table * ht, uint32_t key)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_hash/rte_fbk_hash.h' l='217'>/**
 * Remove a key from an existing hash table. This operation is not multi-thread
 * safe and should only be called from one thread.
 *
 * @param ht
 *   Hash table to remove the key from.
 * @param key
 *   Key to remove from the hash table.
 * @return
 *   0 if ok, or negative value on error.
 */</doc>
