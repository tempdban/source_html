<dec f='dpdk_18.05/lib/librte_efd/rte_efd.h' l='200' type='int rte_efd_update(struct rte_efd_table * table, unsigned int socket_id, const void * key, efd_value_t value)'/>
<def f='dpdk_18.05/lib/librte_efd/rte_efd.c' l='1140' ll='1161' type='int rte_efd_update(struct rte_efd_table *const table, const unsigned int socket_id, const void * key, const efd_value_t value)'/>
<doc f='dpdk_18.05/lib/librte_efd/rte_efd.h' l='170'>/**
 * Computes an updated table entry for the supplied key/value pair.
 * The update is then immediately applied to the provided table and
 * all socket-local copies of the chunks are updated.
 * This operation is not multi-thread safe
 * and should only be called one from thread.
 *
 * @param table
 *   EFD table to reference
 * @param socket_id
 *   Socket ID to use to lookup existing value (ideally caller&apos;s socket id)
 * @param key
 *   EFD table key to modify
 * @param value
 *   Value to associate with the key
 *
 * @return
 *  RTE_EFD_UPDATE_WARN_GROUP_FULL
 *     Operation is insert, and the last available space in the
 *     key&apos;s group was just used
 *     Future inserts may fail as groups fill up
 *     This operation was still successful, and entry contains a valid update
 *  RTE_EFD_UPDATE_FAILED
 *     Either the EFD failed to find a suitable perfect hash or the group was full
 *     This is a fatal error, and the table is now in an indeterminite state
 *  RTE_EFD_UPDATE_NO_CHANGE
 *     Operation resulted in no change to the table (same value already exists)
 *  0 - success
 */</doc>
