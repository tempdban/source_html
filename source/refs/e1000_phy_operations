<def f='dpdk/kernel/linux/kni/ethtool/igb/e1000_hw.h' l='532' ll='557'/>
<size>192</size>
<doc f='dpdk/kernel/linux/kni/ethtool/igb/e1000_hw.h' l='518'>/* When to use various PHY register access functions:
 *
 *                 Func   Caller
 *   Function      Does   Does    When to use
 *   ~~~~~~~~~~~~  ~~~~~  ~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *   X_reg         L,P,A  n/a     for simple PHY reg accesses
 *   X_reg_locked  P,A    L       for multiple accesses of different regs
 *                                on different pages
 *   X_reg_page    A      L,P     for multiple accesses of different regs
 *                                on the same page
 *
 * Where X=[read|write], L=locking, P=sets page, A=register access
 *
 */</doc>
<mbr r='e1000_phy_operations::init_params' o='0' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::acquire' o='64' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::check_polarity' o='128' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::check_reset_block' o='192' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::commit' o='256' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::force_speed_duplex' o='320' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::get_cfg_done' o='384' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::get_cable_length' o='448' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::get_info' o='512' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::set_page' o='576' t='s32 (*)(struct e1000_hw *, u16)'/>
<mbr r='e1000_phy_operations::read_reg' o='640' t='s32 (*)(struct e1000_hw *, u32, u16 *)'/>
<mbr r='e1000_phy_operations::read_reg_locked' o='704' t='s32 (*)(struct e1000_hw *, u32, u16 *)'/>
<mbr r='e1000_phy_operations::read_reg_page' o='768' t='s32 (*)(struct e1000_hw *, u32, u16 *)'/>
<mbr r='e1000_phy_operations::release' o='832' t='void (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::reset' o='896' t='s32 (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::set_d0_lplu_state' o='960' t='s32 (*)(struct e1000_hw *, bool)'/>
<mbr r='e1000_phy_operations::set_d3_lplu_state' o='1024' t='s32 (*)(struct e1000_hw *, bool)'/>
<mbr r='e1000_phy_operations::write_reg' o='1088' t='s32 (*)(struct e1000_hw *, u32, u16)'/>
<mbr r='e1000_phy_operations::write_reg_locked' o='1152' t='s32 (*)(struct e1000_hw *, u32, u16)'/>
<mbr r='e1000_phy_operations::write_reg_page' o='1216' t='s32 (*)(struct e1000_hw *, u32, u16)'/>
<mbr r='e1000_phy_operations::power_up' o='1280' t='void (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::power_down' o='1344' t='void (*)(struct e1000_hw *)'/>
<mbr r='e1000_phy_operations::read_i2c_byte' o='1408' t='s32 (*)(struct e1000_hw *, u8, u8, u8 *)'/>
<mbr r='e1000_phy_operations::write_i2c_byte' o='1472' t='s32 (*)(struct e1000_hw *, u8, u8, u8)'/>
