<def f='dpdk_18.05/lib/librte_ring/rte_ring.h' l='82' ll='105'/>
<size>384</size>
<doc f='dpdk_18.05/lib/librte_ring/rte_ring.h' l='72'>/**
 * An RTE ring structure.
 *
 * The producer and the consumer have a head and a tail index. The particularity
 * of these index is that they are not between 0 and size(ring). These indexes
 * are between 0 and 2^32, and we mask their value when we access the ring[]
 * field. Thanks to this assumption, we can do subtractions between 2 index
 * values in a modulo-32bit base: that&apos;s why the overflow of the indexes is not
 * a problem.
 */</doc>
<mbr r='rte_ring::name' o='0' t='char [32]'/>
<mbr r='rte_ring::flags' o='256' t='int'/>
<mbr r='rte_ring::memzone' o='320' t='const struct rte_memzone *'/>
<mbr r='rte_ring::size' o='384' t='uint32_t'/>
<mbr r='rte_ring::mask' o='416' t='uint32_t'/>
<mbr r='rte_ring::capacity' o='448' t='uint32_t'/>
<mbr r='rte_ring::pad0' o='512' t='char'/>
<mbr r='rte_ring::prod' o='1024' t='struct rte_ring_headtail'/>
<mbr r='rte_ring::pad1' o='1536' t='char'/>
<mbr r='rte_ring::cons' o='2048' t='struct rte_ring_headtail'/>
<mbr r='rte_ring::pad2' o='2560' t='char'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ring/rte_ring.h' l='90' ll='109'/>
<size>384</size>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ring/rte_ring.h' l='80'>/**
 * An RTE ring structure.
 *
 * The producer and the consumer have a head and a tail index. The particularity
 * of these index is that they are not between 0 and size(ring). These indexes
 * are between 0 and 2^32, and we mask their value when we access the ring[]
 * field. Thanks to this assumption, we can do subtractions between 2 index
 * values in a modulo-32bit base: that&apos;s why the overflow of the indexes is not
 * a problem.
 */</doc>
<mbr r='rte_ring::name' o='0' t='char [32]'/>
<mbr r='rte_ring::flags' o='256' t='int'/>
<mbr r='rte_ring::memzone' o='320' t='const struct rte_memzone *'/>
<mbr r='rte_ring::size' o='384' t='uint32_t'/>
<mbr r='rte_ring::mask' o='416' t='uint32_t'/>
<mbr r='rte_ring::capacity' o='448' t='uint32_t'/>
<mbr r='rte_ring::prod' o='1024' t='struct rte_ring_headtail'/>
<mbr r='rte_ring::cons' o='2048' t='struct rte_ring_headtail'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_ring.h' l='90' ll='109'/>
<size>384</size>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_ring.h' l='80'>/**
 * An RTE ring structure.
 *
 * The producer and the consumer have a head and a tail index. The particularity
 * of these index is that they are not between 0 and size(ring). These indexes
 * are between 0 and 2^32, and we mask their value when we access the ring[]
 * field. Thanks to this assumption, we can do subtractions between 2 index
 * values in a modulo-32bit base: that&apos;s why the overflow of the indexes is not
 * a problem.
 */</doc>
<mbr r='rte_ring::name' o='0' t='char [32]'/>
<mbr r='rte_ring::flags' o='256' t='int'/>
<mbr r='rte_ring::memzone' o='320' t='const struct rte_memzone *'/>
<mbr r='rte_ring::size' o='384' t='uint32_t'/>
<mbr r='rte_ring::mask' o='416' t='uint32_t'/>
<mbr r='rte_ring::capacity' o='448' t='uint32_t'/>
<mbr r='rte_ring::prod' o='1024' t='struct rte_ring_headtail'/>
<mbr r='rte_ring::cons' o='2048' t='struct rte_ring_headtail'/>
