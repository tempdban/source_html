<dec f='dpdk_18.05/lib/librte_ethdev/rte_mtr_driver.h' l='186' type='const struct rte_mtr_ops * rte_mtr_ops_get(uint16_t port_id, struct rte_mtr_error * error)'/>
<def f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='14' ll='41' type='const struct rte_mtr_ops * rte_mtr_ops_get(uint16_t port_id, struct rte_mtr_error * error)'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_capabilities_get'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_meter_profile_add'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_meter_profile_delete'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_create'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_destroy'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_meter_enable'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_meter_disable'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_meter_profile_update'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_meter_dscp_table_update'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_policer_actions_update'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_stats_update'/>
<use f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='46' u='c' c='rte_mtr_stats_read'/>
<doc f='dpdk_18.05/lib/librte_ethdev/rte_mtr.c' l='13'>/* Get generic traffic metering &amp; policing operations structure from a port. */</doc>
<doc f='dpdk_18.05/lib/librte_ethdev/rte_mtr_driver.h' l='173'>/**
 * Get generic traffic metering and policing operations structure from a port
 *
 * @param[in] port_id
 *   The port identifier of the Ethernet device.
 * @param[out] error
 *   Error details
 *
 * @return
 *   The traffic metering and policing operations structure associated with
 *   port_id on success, NULL otherwise.
 */</doc>
