<dec f='dpdk_18.05/lib/librte_pipeline/rte_pipeline.h' l='504' type='int rte_pipeline_table_entry_delete_bulk(struct rte_pipeline * p, uint32_t table_id, void ** keys, uint32_t n_keys, int * key_found, struct rte_pipeline_table_entry ** entries)'/>
<def f='dpdk_18.05/lib/librte_pipeline/rte_pipeline.c' l='648' ll='686' type='int rte_pipeline_table_entry_delete_bulk(struct rte_pipeline * p, uint32_t table_id, void ** keys, uint32_t n_keys, int * key_found, struct rte_pipeline_table_entry ** entries)'/>
<doc f='dpdk_18.05/lib/librte_pipeline/rte_pipeline.h' l='481'>/**
 * Pipeline table entry delete bulk
 *
 * @param p
 *   Handle to pipeline instance
 * @param table_id
 *   Table ID (returned by previous invocation of pipeline table create)
 * @param keys
 *   Array containing table entry keys
 * @param n_keys
 *   Number of keys to delete
 * @param key_found
 *   On successful invocation, key_found for every item in the array is set to
 *   TRUE (value different than 0) if key was found in the table before the
 *   delete operation and to FALSE (value 0) if not
 * @param entries
 *   If entries pointer is NULL, this pointer is ignored for every entry found.
 *   Else, after successful invocation, if specific key is found in the table
 *   and entry points to a valid buffer, the table entry contents (as it was
 *   before the delete was performed) is copied to this buffer.
 * @return
 *   0 on success, error code otherwise
 */</doc>
