<dec f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_atomic.h' l='1061' type='int rte_atomic64_test_and_set(rte_atomic64_t * v)'/>
<def f='dpdk_18.05/lib/librte_eal/common/include/arch/x86/rte_atomic_64.h' l='200' ll='203' type='int rte_atomic64_test_and_set(rte_atomic64_t * v)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_atomic.h' l='1050'>/**
 * Atomically test and set a 64-bit atomic counter.
 *
 * If the counter value is already set, return 0 (failed). Otherwise, set
 * the counter value to 1 and return 1 (success).
 *
 * @param v
 *   A pointer to the atomic counter.
 * @return
 *   0 if failed; else 1, success.
 */</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_atomic.h' l='971' type='int rte_atomic64_test_and_set(rte_atomic64_t * v)'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/arch/x86/rte_atomic_64.h' l='188' ll='191' type='int rte_atomic64_test_and_set(rte_atomic64_t * v)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_atomic.h' l='960'>/**
 * Atomically test and set a 64-bit atomic counter.
 *
 * If the counter value is already set, return 0 (failed). Otherwise, set
 * the counter value to 1 and return 1 (success).
 *
 * @param v
 *   A pointer to the atomic counter.
 * @return
 *   0 if failed; else 1, success.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/liquidio/lio_rxtx.c' l='1057' u='c' c='lio_flush_iq'/>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_atomic.h' l='971' type='int rte_atomic64_test_and_set(rte_atomic64_t * v)'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_atomic_64.h' l='188' ll='191' type='int rte_atomic64_test_and_set(rte_atomic64_t * v)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_atomic.h' l='960'>/**
 * Atomically test and set a 64-bit atomic counter.
 *
 * If the counter value is already set, return 0 (failed). Otherwise, set
 * the counter value to 1 and return 1 (success).
 *
 * @param v
 *   A pointer to the atomic counter.
 * @return
 *   0 if failed; else 1, success.
 */</doc>
