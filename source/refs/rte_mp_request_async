<dec f='dpdk/lib/librte_eal/common/include/rte_eal.h' l='355' type='int rte_mp_request_async(struct rte_mp_msg * req, const struct timespec * ts, rte_mp_async_reply_t clb)'/>
<doc f='dpdk/lib/librte_eal/common/include/rte_eal.h' l='332'>/**
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * Send a request to the peer process and expect a reply in a separate callback.
 *
 * This function sends a request message to the peer process, and will not
 * block. Instead, reply will be received in a separate callback.
 *
 * @param req
 *   The req argument contains the customized request message.
 *
 * @param ts
 *   The ts argument specifies how long we can wait for the peer(s) to reply.
 *
 * @param clb
 *   The callback to trigger when all responses for this request have arrived.
 *
 * @return
 *  - On success, return 0.
 *  - On failure, return -1, and the reason will be stored in rte_errno.
 */</doc>
<def f='dpdk/lib/librte_eal/common/eal_common_proc.c' l='1056' ll='1200' type='int rte_mp_request_async(struct rte_mp_msg * req, const struct timespec * ts, rte_mp_async_reply_t clb)'/>
<use f='dpdk/lib/librte_eal/common/malloc_mp.c' l='313' u='c' c='handle_request'/>
<use f='dpdk/lib/librte_eal/common/malloc_mp.c' l='458' u='c' c='handle_sync_response'/>
