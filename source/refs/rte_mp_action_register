<dec f='dpdk/lib/librte_eal/common/include/rte_eal.h' l='265' type='int rte_mp_action_register(const char * name, rte_mp_t action)'/>
<doc f='dpdk/lib/librte_eal/common/include/rte_eal.h' l='244'>/**
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * Register an action function for primary/secondary communication.
 *
 * Call this function to register an action, if the calling component wants
 * to response the messages from the corresponding component in its primary
 * process or secondary processes.
 *
 * @param name
 *   The name argument plays as the nonredundant key to find the action.
 *
 * @param action
 *   The action argument is the function pointer to the action function.
 *
 * @return
 *  - 0 on success.
 *  - (&lt;0) on failure.
 */</doc>
<use f='dpdk/drivers/bus/vdev/vdev.c' l='400' u='c' c='vdev_scan'/>
<def f='dpdk/lib/librte_eal/common/eal_common_proc.c' l='190' ll='216' type='int rte_mp_action_register(const char * name, rte_mp_t action)'/>
<use f='dpdk/lib/librte_eal/common/malloc_mp.c' l='719' u='c' c='register_mp_requests'/>
<use f='dpdk/lib/librte_eal/common/malloc_mp.c' l='725' u='c' c='register_mp_requests'/>
<use f='dpdk/lib/librte_eal/common/malloc_mp.c' l='730' u='c' c='register_mp_requests'/>
<use f='dpdk/lib/librte_eal/common/malloc_mp.c' l='735' u='c' c='register_mp_requests'/>
<use f='dpdk/lib/librte_eal/linuxapp/eal/eal_vfio_mp_sync.c' l='95' u='c' c='vfio_mp_sync_setup'/>
<use f='dpdk/lib/librte_pdump/rte_pdump.c' l='411' u='c' c='rte_pdump_init'/>
