<dec f='dpdk/lib/librte_mempool/rte_mempool.h' l='1079' type='struct rte_mempool * rte_mempool_create_empty(const char * name, unsigned int n, unsigned int elt_size, unsigned int cache_size, unsigned int private_data_size, int socket_id, unsigned int flags)'/>
<doc f='dpdk/lib/librte_mempool/rte_mempool.h' l='1044'>/**
 * Create an empty mempool
 *
 * The mempool is allocated and initialized, but it is not populated: no
 * memory is allocated for the mempool elements. The user has to call
 * rte_mempool_populate_*() to add memory chunks to the pool. Once
 * populated, the user may also want to initialize each object with
 * rte_mempool_obj_iter().
 *
 * @param name
 *   The name of the mempool.
 * @param n
 *   The maximum number of elements that can be added in the mempool.
 *   The optimum size (in terms of memory usage) for a mempool is when n
 *   is a power of two minus one: n = (2^q - 1).
 * @param elt_size
 *   The size of each element.
 * @param cache_size
 *   Size of the cache. See rte_mempool_create() for details.
 * @param private_data_size
 *   The size of the private data appended after the mempool
 *   structure. This is useful for storing some private data after the
 *   mempool structure, as is done for rte_mbuf_pool for example.
 * @param socket_id
 *   The *socket_id* argument is the socket identifier in the case of
 *   NUMA. The value can be *SOCKET_ID_ANY* if there is no NUMA
 *   constraint for the reserved zone.
 * @param flags
 *   Flags controlling the behavior of the mempool. See
 *   rte_mempool_create() for details.
 * @return
 *   The pointer to the new allocated mempool, on success. NULL on error
 *   with rte_errno set appropriately. See rte_mempool_create() for details.
 */</doc>
<use f='dpdk/app/test-crypto-perf/cperf_test_common.c' l='188' u='c' c='cperf_alloc_common_memory'/>
<use f='dpdk/app/test-pmd/testpmd.c' l='518' u='c' c='mbuf_pool_create'/>
<use f='dpdk/lib/librte_mbuf/rte_mbuf.c' l='132' u='c' c='rte_pktmbuf_pool_create_by_ops'/>
<def f='dpdk/lib/librte_mempool/rte_mempool.c' l='889' ll='1016' type='struct rte_mempool * rte_mempool_create_empty(const char * name, unsigned int n, unsigned int elt_size, unsigned int cache_size, unsigned int private_data_size, int socket_id, unsigned int flags)'/>
<use f='dpdk/lib/librte_mempool/rte_mempool.c' l='1029' u='c' c='rte_mempool_create'/>
<use f='dpdk/lib/librte_mempool/rte_mempool.c' l='1103' u='c' c='rte_mempool_xmem_create'/>
<doc f='dpdk/lib/librte_mempool/rte_mempool.c' l='888'>/* create an empty mempool */</doc>
