<def f='dpdk/lib/librte_hash/rte_jhash.h' l='308' ll='316' type='uint32_t rte_jhash(const void * key, uint32_t length, uint32_t initval)'/>
<doc f='dpdk/lib/librte_hash/rte_jhash.h' l='291'>/**
 * The most generic version, hashes an arbitrary sequence
 * of bytes.  No alignment or length assumptions are made about
 * the input key.  For keys not aligned to four byte boundaries
 * or a multiple of four bytes in length, the memory region
 * just after may be read (but not used in the computation).
 * This may cross a page boundary.
 *
 * @param key
 *   Key to calculate hash of.
 * @param length
 *   Length of key in bytes.
 * @param initval
 *   Initialising value of hash.
 * @return
 *   Calculated hash value.
 */</doc>
<use f='dpdk/drivers/net/tap/tap_flow.c' l='1304' u='c' c='tap_flow_set_handle'/>
<use f='dpdk/lib/librte_efd/rte_efd.c' l='33' u='c' c='efd_compute_ids'/>
<use f='dpdk/lib/librte_hash/rte_cuckoo_hash.c' l='98' u='r' c='rte_hash_create'/>
<use f='dpdk/lib/librte_vhost/vhost_crypto.c' l='1170' u='r' c='rte_vhost_crypto_create'/>
