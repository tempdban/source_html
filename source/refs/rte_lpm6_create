<dec f='dpdk_18.05/lib/librte_lpm/rte_lpm6.h' l='55' type='struct rte_lpm6 * rte_lpm6_create(const char * name, int socket_id, const struct rte_lpm6_config * config)'/>
<def f='dpdk_18.05/lib/librte_lpm/rte_lpm6.c' l='117' ll='204' type='struct rte_lpm6 * rte_lpm6_create(const char * name, int socket_id, const struct rte_lpm6_config * config)'/>
<doc f='dpdk_18.05/lib/librte_lpm/rte_lpm6.c' l='114'>/*
 * Allocates memory for LPM object
 */</doc>
<doc f='dpdk_18.05/lib/librte_lpm/rte_lpm6.h' l='35'>/**
 * Create an LPM object.
 *
 * @param name
 *   LPM object name
 * @param socket_id
 *   NUMA socket ID for LPM table memory allocation
 * @param config
 *   Structure containing the configuration
 * @return
 *   Handle to LPM object on success, NULL otherwise with rte_errno set
 *   to an appropriate values. Possible rte_errno values include:
 *    - E_RTE_NO_CONFIG - function could not get pointer to rte_config structure
 *    - E_RTE_SECONDARY - function was called from a secondary process instance
 *    - EINVAL - invalid parameter passed to function
 *    - ENOSPC - the maximum number of memzones has already been allocated
 *    - EEXIST - a memzone with the same name already exists
 *    - ENOMEM - no appropriate memory area found in which to create memzone
 */</doc>
<use f='dpdk_18.05/lib/librte_table/rte_table_lpm_ipv6.c' l='106' u='c' c='rte_table_lpm_ipv6_create'/>
