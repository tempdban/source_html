<dec f='dpdk/lib/librte_hash/rte_hash.h' l='243' type='int32_t rte_hash_del_key_with_hash(const struct rte_hash * h, const void * key, hash_sig_t sig)'/>
<doc f='dpdk/lib/librte_hash/rte_hash.h' l='224'>/**
 * Remove a key from an existing hash table.
 * This operation is not multi-thread safe
 * and should only be called from one thread.
 *
 * @param h
 *   Hash table to remove the key from.
 * @param key
 *   Key to remove from the hash table.
 * @param sig
 *   Precomputed hash value for &apos;key&apos;.
 * @return
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if the key is not found.
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key, and is the same
 *     value that was returned when the key was added.
 */</doc>
<def f='dpdk/lib/librte_hash/rte_cuckoo_hash.c' l='871' ll='877' type='int32_t rte_hash_del_key_with_hash(const struct rte_hash * h, const void * key, hash_sig_t sig)'/>
