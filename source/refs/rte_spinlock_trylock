<dec f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_spinlock.h' l='96' type='int rte_spinlock_trylock(rte_spinlock_t * sl)'/>
<use f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_spinlock.h' l='243' u='c' c='rte_spinlock_recursive_trylock'/>
<def f='dpdk_18.05/lib/librte_eal/common/include/arch/x86/rte_spinlock.h' l='54' ll='66' type='int rte_spinlock_trylock(rte_spinlock_t * sl)'/>
<use f='dpdk_18.05/lib/librte_eal/common/include/arch/x86/rte_spinlock.h' l='124' u='c' c='rte_spinlock_trylock_tm'/>
<doc f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_spinlock.h' l='87'>/**
 * Try to take the lock.
 *
 * @param sl
 *   A pointer to the spinlock.
 * @return
 *   1 if the lock is successfully taken; 0 otherwise.
 */</doc>
<use f='dpdk_18.05/drivers/net/bonding/rte_eth_bond_pmd.c' l='2388' u='c' c='bond_ethdev_slave_link_status_change_monitor'/>
<use f='dpdk_18.05/lib/librte_eventdev/rte_event_crypto_adapter.c' l='646' u='c' c='eca_service_func'/>
<use f='dpdk_18.05/lib/librte_eventdev/rte_event_eth_rx_adapter.c' l='554' u='c' c='event_eth_rx_adapter_service_func'/>
<use f='dpdk_18.05/lib/librte_vhost/virtio_net.c' l='1444' u='c' c='rte_vhost_dequeue_burst'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_spinlock.h' l='96' type='int rte_spinlock_trylock(rte_spinlock_t * sl)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_spinlock.h' l='243' u='c' c='rte_spinlock_recursive_trylock'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/arch/x86/rte_spinlock.h' l='54' ll='66' type='int rte_spinlock_trylock(rte_spinlock_t * sl)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/arch/x86/rte_spinlock.h' l='122' u='c' c='rte_spinlock_trylock_tm'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_spinlock.h' l='87'>/**
 * Try to take the lock.
 *
 * @param sl
 *   A pointer to the spinlock.
 * @return
 *   1 if the lock is successfully taken; 0 otherwise.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/bonding/rte_eth_bond_pmd.c' l='2368' u='c' c='bond_ethdev_slave_link_status_change_monitor'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/cxgbe/base/adapter.h' l='644' u='c' c='t4_os_trylock'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/fm10k/fm10k_ethdev.c' l='114' u='c' c='fm10k_mbx_lock'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/sfc/sfc.h' l='279' u='c' c='sfc_adapter_trylock'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/sfc/sfc_ev.c' l='545' u='c' c='sfc_ev_mgmt_qpoll'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eventdev/rte_event_eth_rx_adapter.c' l='540' u='c' c='event_eth_rx_adapter_service_func'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_vhost/virtio_net.c' l='1435' u='c' c='rte_vhost_dequeue_burst'/>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_spinlock.h' l='96' type='int rte_spinlock_trylock(rte_spinlock_t * sl)'/>
<use f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_spinlock.h' l='243' u='c' c='rte_spinlock_recursive_trylock'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_spinlock.h' l='54' ll='66' type='int rte_spinlock_trylock(rte_spinlock_t * sl)'/>
<use f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_spinlock.h' l='122' u='c' c='rte_spinlock_trylock_tm'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_spinlock.h' l='87'>/**
 * Try to take the lock.
 *
 * @param sl
 *   A pointer to the spinlock.
 * @return
 *   1 if the lock is successfully taken; 0 otherwise.
 */</doc>
