<dec f='dpdk_18.05/lib/librte_mempool/rte_mempool.h' l='837' type='int rte_mempool_set_ops_byname(struct rte_mempool * mp, const char * name, void * pool_config)'/>
<doc f='dpdk_18.05/lib/librte_mempool/rte_mempool.h' l='819'>/**
 * Set the ops of a mempool.
 *
 * This can only be done on a mempool that is not populated, i.e. just after
 * a call to rte_mempool_create_empty().
 *
 * @param mp
 *   Pointer to the memory pool.
 * @param name
 *   Name of the ops structure to use for this mempool.
 * @param pool_config
 *   Opaque data that can be passed by the application to the ops functions.
 * @return
 *   - 0: Success; the mempool is now using the requested ops functions.
 *   - -EINVAL - Invalid ops struct name provided.
 *   - -EEXIST - mempool already has an ops struct assigned.
 */</doc>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_common.c' l='200' u='c' c='cperf_alloc_common_memory'/>
<use f='dpdk_18.05/lib/librte_mbuf/rte_mbuf.c' l='139' u='c' c='rte_pktmbuf_pool_create_by_ops'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='1039' u='c' c='rte_mempool_create'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='1041' u='c' c='rte_mempool_create'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='1043' u='c' c='rte_mempool_create'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='1045' u='c' c='rte_mempool_create'/>
<def f='dpdk_18.05/lib/librte_mempool/rte_mempool_ops.c' l='154' ll='179' type='int rte_mempool_set_ops_byname(struct rte_mempool * mp, const char * name, void * pool_config)'/>
<doc f='dpdk_18.05/lib/librte_mempool/rte_mempool_ops.c' l='153'>/* sets mempool ops previously registered by rte_mempool_register_ops. */</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='593' type='int rte_mempool_set_ops_byname(struct rte_mempool * mp, const char * name, void * pool_config)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='575'>/**
 * Set the ops of a mempool.
 *
 * This can only be done on a mempool that is not populated, i.e. just after
 * a call to rte_mempool_create_empty().
 *
 * @param mp
 *   Pointer to the memory pool.
 * @param name
 *   Name of the ops structure to use for this mempool.
 * @param pool_config
 *   Opaque data that can be passed by the application to the ops functions.
 * @return
 *   - 0: Success; the mempool is now using the requested ops functions.
 *   - -EINVAL - Invalid ops struct name provided.
 *   - -EEXIST - mempool already has an ops struct assigned.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-crypto-perf/cperf_test_common.c' l='196' u='c' c='cperf_alloc_common_memory'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mbuf/rte_mbuf.c' l='154' u='c' c='rte_pktmbuf_pool_create_by_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='918' u='c' c='rte_mempool_create'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='920' u='c' c='rte_mempool_create'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='922' u='c' c='rte_mempool_create'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='924' u='c' c='rte_mempool_create'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='127' ll='152' type='int rte_mempool_set_ops_byname(struct rte_mempool * mp, const char * name, void * pool_config)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='126'>/* sets mempool ops previously registered by rte_mempool_register_ops. */</doc>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='593' type='int rte_mempool_set_ops_byname(struct rte_mempool * mp, const char * name, void * pool_config)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='575'>/**
 * Set the ops of a mempool.
 *
 * This can only be done on a mempool that is not populated, i.e. just after
 * a call to rte_mempool_create_empty().
 *
 * @param mp
 *   Pointer to the memory pool.
 * @param name
 *   Name of the ops structure to use for this mempool.
 * @param pool_config
 *   Opaque data that can be passed by the application to the ops functions.
 * @return
 *   - 0: Success; the mempool is now using the requested ops functions.
 *   - -EINVAL - Invalid ops struct name provided.
 *   - -EEXIST - mempool already has an ops struct assigned.
 */</doc>
