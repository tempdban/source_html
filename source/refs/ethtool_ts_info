<def f='include/linux/ethtool.h' l='1162' ll='1170'/>
<size>44</size>
<doc f='include/linux/ethtool.h' l='1144'>/**
 * struct ethtool_ts_info - holds a device&apos;s timestamping and PHC association
 * @cmd: command number = %ETHTOOL_GET_TS_INFO
 * @so_timestamping: bit mask of the sum of the supported SO_TIMESTAMPING flags
 * @phc_index: device index of the associated PHC, or -1 if there is none
 * @tx_types: bit mask of the supported hwtstamp_tx_types enumeration values
 * @rx_filters: bit mask of the supported hwtstamp_rx_filters enumeration values
 *
 * The bits in the &apos;tx_types&apos; and &apos;rx_filters&apos; fields correspond to
 * the &apos;hwtstamp_tx_types&apos; and &apos;hwtstamp_rx_filters&apos; enumeration values,
 * respectively.  For example, if the device supports HWTSTAMP_TX_ON,
 * then (1 &lt;&lt; HWTSTAMP_TX_ON) in &apos;tx_types&apos; will be set.
 *
 * Drivers should only report the filters they actually support without
 * upscaling in the SIOCSHWTSTAMP ioctl. If the SIOCSHWSTAMP request for
 * HWTSTAMP_FILTER_V1_SYNC is supported by HWTSTAMP_FILTER_V1_EVENT, then the
 * driver should only report HWTSTAMP_FILTER_V1_EVENT in this op.
 */</doc>
<mbr r='ethtool_ts_info::cmd' o='0' t='__u32'/>
<mbr r='ethtool_ts_info::so_timestamping' o='32' t='__u32'/>
<mbr r='ethtool_ts_info::phc_index' o='64' t='__s32'/>
<mbr r='ethtool_ts_info::tx_types' o='96' t='__u32'/>
<mbr r='ethtool_ts_info::tx_reserved' o='128' t='__u32 [3]'/>
<mbr r='ethtool_ts_info::rx_filters' o='224' t='__u32'/>
<mbr r='ethtool_ts_info::rx_reserved' o='256' t='__u32 [3]'/>
