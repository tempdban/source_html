<dec f='dpdk_18.05/lib/librte_hash/rte_hash.h' l='301' type='int rte_hash_lookup_with_hash_data(const struct rte_hash * h, const void * key, hash_sig_t sig, void ** data)'/>
<doc f='dpdk_18.05/lib/librte_hash/rte_hash.h' l='282'>/**
 * Find a key-value pair with a pre-computed hash value
 * to an existing hash table.
 * This operation is multi-thread safe.
 *
 * @param h
 *   Hash table to look in.
 * @param key
 *   Key to find.
 * @param sig
 *   Precomputed hash value for &apos;key&apos;
 * @param data
 *   Output with pointer to data returned from the hash table.
 * @return
 *   0 if successful lookup
 *   - EINVAL if the parameters are invalid.
 *   - ENOENT if the key is not found.
 */</doc>
<def f='dpdk_18.05/lib/librte_hash/rte_cuckoo_hash.c' l='765' ll='771' type='int rte_hash_lookup_with_hash_data(const struct rte_hash * h, const void * key, hash_sig_t sig, void ** data)'/>
