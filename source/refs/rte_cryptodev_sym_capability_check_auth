<dec f='dpdk/lib/librte_cryptodev/rte_cryptodev.h' l='248' type='int rte_cryptodev_sym_capability_check_auth(const struct rte_cryptodev_symmetric_capability * capability, uint16_t key_size, uint16_t digest_size, uint16_t iv_size)'/>
<doc f='dpdk/lib/librte_cryptodev/rte_cryptodev.h' l='234'>/**
 * Check if key size and initial vector are supported
 * in crypto auth capability
 *
 * @param	capability	Description of the symmetric crypto capability.
 * @param	key_size	Auth key size.
 * @param	digest_size	Auth digest size.
 * @param	iv_size		Auth initial vector size.
 *
 * @return
 *   - Return 0 if the parameters are in range of the capability.
 *   - Return -1 if the parameters are out of range of the capability.
 */</doc>
<use f='dpdk/app/test-crypto-perf/main.c' l='231' u='c' c='cperf_verify_devices_capabilities'/>
<def f='dpdk/lib/librte_cryptodev/rte_cryptodev.c' l='304' ll='319' type='int rte_cryptodev_sym_capability_check_auth(const struct rte_cryptodev_symmetric_capability * capability, uint16_t key_size, uint16_t digest_size, uint16_t iv_size)'/>
