<def f='dpdk_18.05/lib/librte_cryptodev/rte_cryptodev.h' l='845' ll='855' type='uint16_t rte_cryptodev_dequeue_burst(uint8_t dev_id, uint16_t qp_id, struct rte_crypto_op ** ops, uint16_t nb_ops)'/>
<doc f='dpdk_18.05/lib/librte_cryptodev/rte_cryptodev.h' l='809'>/**
 *
 * Dequeue a burst of processed crypto operations from a queue on the crypto
 * device. The dequeued operation are stored in *rte_crypto_op* structures
 * whose pointers are supplied in the *ops* array.
 *
 * The rte_cryptodev_dequeue_burst() function returns the number of ops
 * actually dequeued, which is the number of *rte_crypto_op* data structures
 * effectively supplied into the *ops* array.
 *
 * A return value equal to *nb_ops* indicates that the queue contained
 * at least *nb_ops* operations, and this is likely to signify that other
 * processed operations remain in the devices output queue. Applications
 * implementing a &quot;retrieve as many processed operations as possible&quot; policy
 * can check this specific case and keep invoking the
 * rte_cryptodev_dequeue_burst() function until a value less than
 * *nb_ops* is returned.
 *
 * The rte_cryptodev_dequeue_burst() function does not provide any error
 * notification to avoid the corresponding overhead.
 *
 * @param	dev_id		The symmetric crypto device identifier
 * @param	qp_id		The index of the queue pair from which to
 *				retrieve processed packets. The value must be
 *				in the range [0, nb_queue_pair - 1] previously
 *				supplied to rte_cryptodev_configure().
 * @param	ops		The address of an array of pointers to
 *				*rte_crypto_op* structures that must be
 *				large enough to store *nb_ops* pointers in it.
 * @param	nb_ops		The maximum number of operations to dequeue.
 *
 * @return
 *   - The number of operations actually dequeued, which is the number
 *   of pointers to *rte_crypto_op* structures effectively supplied to the
 *   *ops* array.
 */</doc>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_latency.c' l='225' u='c' c='cperf_latency_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_latency.c' l='273' u='c' c='cperf_latency_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_pmd_cyclecount.c' l='270' u='c' c='pmd_cyclecount_bench_deq'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_throughput.c' l='210' u='c' c='cperf_throughput_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_throughput.c' l='237' u='c' c='cperf_throughput_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_verify.c' l='328' u='c' c='cperf_verify_test_runner'/>
<use f='dpdk_18.05/app/test-crypto-perf/cperf_test_verify.c' l='359' u='c' c='cperf_verify_test_runner'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_failover.c' l='88' u='c' c='schedule_dequeue'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_failover.c' l='101' u='c' c='schedule_dequeue'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_multicore.c' l='217' u='c' c='mc_scheduler_worker'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_pkt_size_distr.c' l='200' u='c' c='schedule_dequeue'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_pkt_size_distr.c' l='213' u='c' c='schedule_dequeue'/>
<use f='dpdk_18.05/drivers/crypto/scheduler/scheduler_roundrobin.c' l='86' u='c' c='schedule_dequeue'/>
<use f='dpdk_18.05/lib/librte_eventdev/rte_event_crypto_adapter.c' l='595' u='c' c='eca_crypto_adapter_deq_run'/>
