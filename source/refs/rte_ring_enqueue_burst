<def f='dpdk/lib/librte_ring/rte_ring.h' l='851' ll='857' type='unsigned int rte_ring_enqueue_burst(struct rte_ring * r, void *const * obj_table, unsigned int n, unsigned int * free_space)'/>
<doc f='dpdk/lib/librte_ring/rte_ring.h' l='832'>/**
 * Enqueue several objects on a ring.
 *
 * This function calls the multi-producer or the single-producer
 * version depending on the default behavior that was specified at
 * ring creation time (see flags).
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects).
 * @param n
 *   The number of objects to add in the ring from the obj_table.
 * @param free_space
 *   if non-NULL, returns the amount of space in the ring after the
 *   enqueue operation has finished.
 * @return
 *   - n: Actual number of objects enqueued.
 */</doc>
<use f='dpdk/drivers/baseband/null/bbdev_null.c' l='147' u='c' c='enqueue_dec_ops'/>
<use f='dpdk/drivers/baseband/null/bbdev_null.c' l='162' u='c' c='enqueue_enc_ops'/>
<use f='dpdk/drivers/crypto/scheduler/scheduler_multicore.c' l='52' u='c' c='schedule_enqueue'/>
<use f='dpdk/drivers/crypto/scheduler/scheduler_multicore.c' l='211' u='c' c='mc_scheduler_worker'/>
<use f='dpdk/drivers/crypto/scheduler/scheduler_multicore.c' l='229' u='c' c='mc_scheduler_worker'/>
<use f='dpdk/drivers/net/ring/rte_eth_ring.c' l='91' u='c' c='eth_ring_tx'/>
<use f='dpdk/drivers/net/softnic/rte_eth_softnic.c' l='244' u='c' c='pmd_tx_pkt_burst'/>
<use f='dpdk/lib/librte_pdump/rte_pdump.c' l='156' u='c' c='pdump_copy'/>
