<dec f='dpdk_18.05/lib/librte_eal/common/include/rte_eal_interrupts.h' l='181' type='int rte_intr_efd_enable(struct rte_intr_handle * intr_handle, uint32_t nb_efd)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/include/rte_eal_interrupts.h' l='166'>/**
 * It enables the packet I/O interrupt event if it&apos;s necessary.
 * It creates event fd for each interrupt vector when MSIX is used,
 * otherwise it multiplexes a single event fd.
 *
 * @param intr_handle
 *   Pointer to the interrupt handle.
 * @param nb_efd
 *   Number of interrupt vector trying to enable.
 *   The value 0 is not allowed.
 * @return
 *   - On success, zero.
 *   - On failure, a negative value.
 */</doc>
<use f='dpdk_18.05/drivers/net/failsafe/failsafe_ops.c' l='366' u='c' c='fs_rx_queue_setup'/>
<use f='dpdk_18.05/drivers/net/i40e/i40e_ethdev.c' l='2138' u='c' c='i40e_dev_start'/>
<use f='dpdk_18.05/drivers/net/i40e/i40e_ethdev_vf.c' l='1977' u='c' c='i40evf_dev_start'/>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_ethdev.c' l='2579' u='c' c='ixgbe_dev_start'/>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_ethdev.c' l='5072' u='c' c='ixgbevf_dev_start'/>
<use f='dpdk_18.05/drivers/net/virtio/virtio_ethdev.c' l='1391' u='c' c='virtio_configure_intr'/>
<def f='dpdk_18.05/lib/librte_eal/linuxapp/eal/eal_interrupts.c' l='1155' ll='1191' type='int rte_intr_efd_enable(struct rte_intr_handle * intr_handle, uint32_t nb_efd)'/>
