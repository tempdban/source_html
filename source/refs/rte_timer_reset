<dec f='dpdk_18.05/lib/librte_timer/rte_timer.h' l='196' type='int rte_timer_reset(struct rte_timer * tim, uint64_t ticks, enum rte_timer_type type, unsigned int tim_lcore, rte_timer_cb_t fct, void * arg)'/>
<use f='dpdk_18.05/lib/librte_eventdev/rte_event_timer_adapter.c' l='736' u='c' c='sw_event_timer_adapter_service_func'/>
<doc f='dpdk_18.05/lib/librte_timer/rte_timer.h' l='154'>/**
 * Reset and start the timer associated with the timer handle.
 *
 * The rte_timer_reset() function resets and starts the timer
 * associated with the timer handle *tim*. When the timer expires after
 * *ticks* HPET cycles, the function specified by *fct* will be called
 * with the argument *arg* on core *tim_lcore*.
 *
 * If the timer associated with the timer handle is already running
 * (in the RUNNING state), the function will fail. The user has to check
 * the return value of the function to see if there is a chance that the
 * timer is in the RUNNING state.
 *
 * If the timer is being configured on another core (the CONFIG state),
 * it will also fail.
 *
 * If the timer is pending or stopped, it will be rescheduled with the
 * new parameters.
 *
 * @param tim
 *   The timer handle.
 * @param ticks
 *   The number of cycles (see rte_get_hpet_hz()) before the callback
 *   function is called.
 * @param type
 *   The type can be either:
 *   - PERIODICAL: The timer is automatically reloaded after execution
 *     (returns to the PENDING state)
 *   - SINGLE: The timer is one-shot, that is, the timer goes to a
 *     STOPPED state after execution.
 * @param tim_lcore
 *   The ID of the lcore where the timer callback function has to be
 *   executed. If tim_lcore is LCORE_ID_ANY, the timer library will
 *   launch it on a different core for each call (round-robin).
 * @param fct
 *   The callback function of the timer.
 * @param arg
 *   The user argument of the callback function.
 * @return
 *   - 0: Success; the timer is scheduled.
 *   - (-1): Timer is in the RUNNING or CONFIG state.
 */</doc>
<def f='dpdk_18.05/lib/librte_timer/rte_timer.c' l='396' ll='416' type='int rte_timer_reset(struct rte_timer * tim, uint64_t ticks, enum rte_timer_type type, unsigned int tim_lcore, rte_timer_cb_t fct, void * arg)'/>
<use f='dpdk_18.05/lib/librte_timer/rte_timer.c' l='424' u='c' c='rte_timer_reset_sync'/>
<doc f='dpdk_18.05/lib/librte_timer/rte_timer.c' l='395'>/* Reset and start the timer associated with the timer handle tim */</doc>
