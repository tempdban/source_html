<dec f='include/mbedtls/ecdsa.h' l='198' type='int mbedtls_ecdsa_write_signature(mbedtls_ecdsa_context * ctx, mbedtls_md_type_t md_alg, const unsigned char * hash, size_t hlen, unsigned char * sig, size_t * slen, int (*)(void *, unsigned char *, size_t) f_rng, void * p_rng)'/>
<doc f='include/mbedtls/ecdsa.h' l='157'>/**
 * \brief           This function computes the ECDSA signature and writes it
 *                  to a buffer, serialized as defined in &lt;em&gt;RFC-4492:
 *                  Elliptic Curve Cryptography (ECC) Cipher Suites for
 *                  Transport Layer Security (TLS)&lt;/em&gt;.
 *
 * \warning         It is not thread-safe to use the same context in
 *                  multiple threads.
 *
 * \note            The deterministic version is used if
 *                  #MBEDTLS_ECDSA_DETERMINISTIC is defined. For more
 *                  information, see &lt;em&gt;RFC-6979: Deterministic Usage
 *                  of the Digital Signature Algorithm (DSA) and Elliptic
 *                  Curve Digital Signature Algorithm (ECDSA)&lt;/em&gt;.
 *
 * \param ctx       The ECDSA context.
 * \param md_alg    The message digest that was used to hash the message.
 * \param hash      The message hash.
 * \param hlen      The length of the hash.
 * \param sig       The buffer that holds the signature.
 * \param slen      The length of the signature written.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG parameter.
 *
 * \note            The \p sig buffer must be at least twice as large as the
 *                  size of the curve used, plus 9. For example, 73 Bytes if
 *                  a 256-bit curve is used. A buffer length of
 *                  #MBEDTLS_ECDSA_MAX_LEN is always safe.
 *
 * \note            If the bitlength of the message hash is larger than the
 *                  bitlength of the group order, then the hash is truncated as
 *                  defined in &lt;em&gt;Standards for Efficient Cryptography Group
 *                  (SECG): SEC1 Elliptic Curve Cryptography&lt;/em&gt;, section
 *                  4.1.3, step 5.
 *
 * \return          \c 0 on success,
 *                  or an \c MBEDTLS_ERR_ECP_XXX, \c MBEDTLS_ERR_MPI_XXX or
 *                  \c MBEDTLS_ERR_ASN1_XXX error code on failure.
 *
 * \see             ecp.h
 */</doc>
