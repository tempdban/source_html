<dec f='dpdk_18.05/lib/librte_rawdev/rte_rawdev.h' l='578' type='int rte_rawdev_firmware_load(uint16_t dev_id, rte_rawdev_obj_t firmware_image)'/>
<doc f='dpdk_18.05/lib/librte_rawdev/rte_rawdev.h' l='564'>/**
 * Load firmware on the device.
 * TODO: In future, methods like directly flashing from file too can be
 * supported.
 *
 * @param dev_id
 *   Raw device identifier
 * @param firmware_image
 *   Pointer to buffer containing image binary data
 * @return
 *   0 for successful load
 *  !0 for failure to load the provided image, or image incorrect.
 */</doc>
<use f='dpdk_18.05/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='311' u='c' c='test_rawdev_start_stop'/>
<def f='dpdk_18.05/lib/librte_rawdev/rte_rawdev.c' l='340' ll='351' type='int rte_rawdev_firmware_load(uint16_t dev_id, rte_rawdev_obj_t firmware_image)'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.h' l='578' type='int rte_rawdev_firmware_load(uint16_t dev_id, rte_rawdev_obj_t firmware_image)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.h' l='564'>/**
 * Load firmware on the device.
 * TODO: In future, methods like directly flashing from file too can be
 * supported.
 *
 * @param dev_id
 *   Raw device identifier
 * @param firmware_image
 *   Pointer to buffer containing image binary data
 * @return
 *   0 for successful load
 *  !0 for failure to load the provided image, or image incorrect.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='310' u='c' c='test_rawdev_start_stop'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.c' l='343' ll='354' type='int rte_rawdev_firmware_load(uint16_t dev_id, rte_rawdev_obj_t firmware_image)'/>
