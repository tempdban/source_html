<dec f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_atomic.h' l='690' type='int rte_atomic32_dec_and_test(rte_atomic32_t * v)'/>
<def f='dpdk_18.05/lib/librte_eal/common/include/arch/x86/rte_atomic.h' l='246' ll='257' type='int rte_atomic32_dec_and_test(rte_atomic32_t * v)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_atomic.h' l='679'>/**
 * Atomically decrement a 32-bit counter by one and test.
 *
 * Atomically decrements the atomic counter (v) by one and returns true if
 * the result is 0, or false in all other cases.
 *
 * @param v
 *   A pointer to the atomic counter.
 * @return
 *   True if the result after the decrement operation is 0; false otherwise.
 */</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_atomic.h' l='630' type='int rte_atomic32_dec_and_test(rte_atomic32_t * v)'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/arch/x86/rte_atomic.h' l='222' ll='233' type='int rte_atomic32_dec_and_test(rte_atomic32_t * v)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_atomic.h' l='619'>/**
 * Atomically decrement a 32-bit counter by one and test.
 *
 * Atomically decrements the atomic counter (v) by one and returns true if
 * the result is 0, or false in all other cases.
 *
 * @param v
 *   A pointer to the atomic counter.
 * @return
 *   True if the result after the decrement operation is 0; false otherwise.
 */</doc>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_atomic.h' l='630' type='int rte_atomic32_dec_and_test(rte_atomic32_t * v)'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_atomic.h' l='222' ll='233' type='int rte_atomic32_dec_and_test(rte_atomic32_t * v)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_atomic.h' l='619'>/**
 * Atomically decrement a 32-bit counter by one and test.
 *
 * Atomically decrements the atomic counter (v) by one and returns true if
 * the result is 0, or false in all other cases.
 *
 * @param v
 *   A pointer to the atomic counter.
 * @return
 *   True if the result after the decrement operation is 0; false otherwise.
 */</doc>
