<dec f='dpdk/lib/librte_eal/common/include/rte_alarm.h' l='70' type='int rte_eal_alarm_cancel(rte_eal_alarm_callback cb_fn, void * cb_arg)'/>
<doc f='dpdk/lib/librte_eal/common/include/rte_alarm.h' l='49'>/**
 * Function to cancel an alarm callback which has been registered before. If
 * used outside alarm callback it wait for all callbacks to finish execution.
 *
 * @param cb_fn
 *  alarm callback
 * @param cb_arg
 *  Pointer parameter to be passed to the callback function. To remove all
 *  copies of a given callback function, irrespective of parameter, (void *)-1
 *  can be used here.
 *
 * @return
 *    - value greater than 0 and rte_errno not changed - returned value is
 *      the number of canceled alarm callback functions
 *    - value greater or equal 0 and rte_errno set to EINPROGRESS, at least one
 *      alarm could not be canceled because cancellation was requested from alarm
 *      callback context. Returned value is the number of successfully canceled
 *      alarm callbacks
 *    -  0 and rte_errno set to ENOENT - no alarm found
 *    - -1 and rte_errno set to EINVAL - invalid parameter (NULL callback)
 */</doc>
<use f='dpdk/drivers/net/bonding/rte_eth_bond_8023ad.c' l='1182' u='c' c='bond_mode_8023ad_stop'/>
<use f='dpdk/drivers/net/bonding/rte_eth_bond_8023ad.c' l='1186' u='c' c='bond_mode_8023ad_stop'/>
<use f='dpdk/drivers/net/bonding/rte_eth_bond_pmd.c' l='1054' u='c' c='bond_tlb_disable'/>
<use f='dpdk/drivers/net/bonding/rte_eth_bond_pmd.c' l='2721' u='c' c='bond_ethdev_lsc_event_callback'/>
<use f='dpdk/drivers/net/failsafe/failsafe.c' l='91' u='c' c='failsafe_hotplug_alarm_cancel'/>
<use f='dpdk/drivers/net/vdev_netvsc/vdev_netvsc.c' l='712' u='c' c='vdev_netvsc_vdev_probe'/>
<use f='dpdk/drivers/net/vdev_netvsc/vdev_netvsc.c' l='764' u='c' c='vdev_netvsc_vdev_remove'/>
<def f='dpdk/lib/librte_eal/linuxapp/eal/eal_alarm.c' l='176' ll='242' type='int rte_eal_alarm_cancel(rte_eal_alarm_callback cb_fn, void * cb_arg)'/>
