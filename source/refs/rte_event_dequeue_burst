<def f='dpdk/lib/librte_eventdev/rte_eventdev.h' l='1558' ll='1587' type='uint16_t rte_event_dequeue_burst(uint8_t dev_id, uint8_t port_id, struct rte_event * ev, uint16_t nb_events, uint64_t timeout_ticks)'/>
<doc f='dpdk/lib/librte_eventdev/rte_eventdev.h' l='1492'>/**
 * Dequeue a burst of events objects or an event object from the event port
 * designated by its *event_port_id*, on an event device designated
 * by its *dev_id*.
 *
 * rte_event_dequeue_burst() does not dictate the specifics of scheduling
 * algorithm as each eventdev driver may have different criteria to schedule
 * an event. However, in general, from an application perspective scheduler may
 * use the following scheme to dispatch an event to the port.
 *
 * 1) Selection of event queue based on
 *   a) The list of event queues are linked to the event port.
 *   b) If the device has RTE_EVENT_DEV_CAP_QUEUE_QOS capability then event
 *   queue selection from list is based on event queue priority relative to
 *   other event queue supplied as *priority* in rte_event_queue_setup()
 *   c) If the device has RTE_EVENT_DEV_CAP_EVENT_QOS capability then event
 *   queue selection from the list is based on event priority supplied as
 *   *priority* in rte_event_enqueue_burst()
 * 2) Selection of event
 *   a) The number of flows available in selected event queue.
 *   b) Schedule type method associated with the event
 *
 * The *nb_events* parameter is the maximum number of event objects to dequeue
 * which are returned in the *ev* array of *rte_event* structure.
 *
 * The rte_event_dequeue_burst() function returns the number of events objects
 * it actually dequeued. A return value equal to *nb_events* means that all
 * event objects have been dequeued.
 *
 * The number of events dequeued is the number of scheduler contexts held by
 * this port. These contexts are automatically released in the next
 * rte_event_dequeue_burst() invocation if the port supports implicit
 * releases, or invoking rte_event_enqueue_burst() with RTE_EVENT_OP_RELEASE
 * operation can be used to release the contexts early.
 *
 * Event operations RTE_EVENT_OP_FORWARD and RTE_EVENT_OP_RELEASE must only be
 * enqueued to the same port that their associated events were dequeued from.
 *
 * @param dev_id
 *   The identifier of the device.
 * @param port_id
 *   The identifier of the event port.
 * @param[out] ev
 *   Points to an array of *nb_events* objects of type *rte_event* structure
 *   for output to be populated with the dequeued event objects.
 * @param nb_events
 *   The maximum number of event objects to dequeue, typically number of
 *   rte_event_port_dequeue_depth() available for this port.
 *
 * @param timeout_ticks
 *   - 0 no-wait, returns immediately if there is no event.
 *   - &gt;0 wait for the event, if the device is configured with
 *   RTE_EVENT_DEV_CFG_PER_DEQUEUE_TIMEOUT then this function will wait until
 *   at least one event is available or *timeout_ticks* time.
 *   if the device is not configured with RTE_EVENT_DEV_CFG_PER_DEQUEUE_TIMEOUT
 *   then this function will wait until the event available or
 *   *dequeue_timeout_ns* ns which was previously supplied to
 *   rte_event_dev_configure()
 *
 * @return
 * The number of event objects actually dequeued from the port. The return
 * value can be less than the value of the *nb_events* parameter when the
 * event port&apos;s queue is not full.
 *
 * @see rte_event_port_dequeue_depth()
 */</doc>
<use f='dpdk/app/test-eventdev/test_order_atq.c' l='28' u='c' c='order_atq_worker'/>
<use f='dpdk/app/test-eventdev/test_order_atq.c' l='60' u='c' c='order_atq_worker_burst'/>
<use f='dpdk/app/test-eventdev/test_order_queue.c' l='28' u='c' c='order_queue_worker'/>
<use f='dpdk/app/test-eventdev/test_order_queue.c' l='60' u='c' c='order_queue_worker_burst'/>
<use f='dpdk/app/test-eventdev/test_perf_atq.c' l='44' u='c' c='perf_atq_worker'/>
<use f='dpdk/app/test-eventdev/test_perf_atq.c' l='81' u='c' c='perf_atq_worker_burst'/>
<use f='dpdk/app/test-eventdev/test_perf_queue.c' l='46' u='c' c='perf_queue_worker'/>
<use f='dpdk/app/test-eventdev/test_perf_queue.c' l='82' u='c' c='perf_queue_worker_burst'/>
<use f='dpdk/app/test-eventdev/test_pipeline_atq.c' l='24' u='c' c='pipeline_atq_worker_single_stage_tx'/>
<use f='dpdk/app/test-eventdev/test_pipeline_atq.c' l='50' u='c' c='pipeline_atq_worker_single_stage_fwd'/>
<use f='dpdk/app/test-eventdev/test_pipeline_atq.c' l='72' u='c' c='pipeline_atq_worker_single_stage_burst_tx'/>
<use f='dpdk/app/test-eventdev/test_pipeline_atq.c' l='105' u='c' c='pipeline_atq_worker_single_stage_burst_fwd'/>
<use f='dpdk/app/test-eventdev/test_pipeline_atq.c' l='134' u='c' c='pipeline_atq_worker_multi_stage_tx'/>
<use f='dpdk/app/test-eventdev/test_pipeline_atq.c' l='169' u='c' c='pipeline_atq_worker_multi_stage_fwd'/>
<use f='dpdk/app/test-eventdev/test_pipeline_atq.c' l='199' u='c' c='pipeline_atq_worker_multi_stage_burst_tx'/>
<use f='dpdk/app/test-eventdev/test_pipeline_atq.c' l='242' u='c' c='pipeline_atq_worker_multi_stage_burst_fwd'/>
<use f='dpdk/app/test-eventdev/test_pipeline_common.c' l='18' u='c' c='pipeline_event_tx_burst_service_func'/>
<use f='dpdk/app/test-eventdev/test_pipeline_common.c' l='45' u='c' c='pipeline_event_tx_service_func'/>
<use f='dpdk/app/test-eventdev/test_pipeline_queue.c' l='24' u='c' c='pipeline_queue_worker_single_stage_tx'/>
<use f='dpdk/app/test-eventdev/test_pipeline_queue.c' l='51' u='c' c='pipeline_queue_worker_single_stage_fwd'/>
<use f='dpdk/app/test-eventdev/test_pipeline_queue.c' l='73' u='c' c='pipeline_queue_worker_single_stage_burst_tx'/>
<use f='dpdk/app/test-eventdev/test_pipeline_queue.c' l='108' u='c' c='pipeline_queue_worker_single_stage_burst_fwd'/>
<use f='dpdk/app/test-eventdev/test_pipeline_queue.c' l='137' u='c' c='pipeline_queue_worker_multi_stage_tx'/>
<use f='dpdk/app/test-eventdev/test_pipeline_queue.c' l='173' u='c' c='pipeline_queue_worker_multi_stage_fwd'/>
<use f='dpdk/app/test-eventdev/test_pipeline_queue.c' l='203' u='c' c='pipeline_queue_worker_multi_stage_burst_tx'/>
<use f='dpdk/app/test-eventdev/test_pipeline_queue.c' l='248' u='c' c='pipeline_queue_worker_multi_stage_burst_fwd'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='277' u='c' c='ordered_basic'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='306' u='c' c='ordered_basic'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='416' u='c' c='atomic_basic'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='457' u='c' c='atomic_basic'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='644' u='c' c='single_link_w_stats'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='670' u='c' c='single_link_w_stats'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='840' u='c' c='qid_basic'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='919' u='c' c='qid_basic'/>
<use f='dpdk/drivers/event/opdl/opdl_test.c' l='966' u='c' c='qid_basic'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='411' u='c' c='run_prio_packet_test'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='425' u='c' c='run_prio_packet_test'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='501' u='c' c='test_single_directed_packet'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='555' u='c' c='test_directed_forward_credits'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='738' u='c' c='burst_packets'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='753' u='c' c='burst_packets'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='1270' u='c' c='port_reconfig_credits'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='1887' u='c' c='qid_priorities'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='2067' u='c' c='load_balancing_history'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='2154' u='c' c='load_balancing_history'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='2327' u='c' c='single_packet'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='2468' u='c' c='inflight_counts'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='2504' u='c' c='inflight_counts'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='2631' u='c' c='parallel_basic'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='2654' u='c' c='parallel_basic'/>
<use f='dpdk/drivers/event/sw/sw_evdev_selftest.c' l='2827' u='c' c='worker_loopback_worker_fn'/>
<use f='dpdk/lib/librte_eventdev/rte_event_crypto_adapter.c' l='478' u='c' c='eca_crypto_adapter_enq_run'/>
