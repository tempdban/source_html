<def f='dpdk/lib/librte_ethdev/rte_flow_driver.h' l='63' ll='99'/>
<size>48</size>
<doc f='dpdk/lib/librte_ethdev/rte_flow_driver.h' l='27'>/**
 * Generic flow operations structure implemented and returned by PMDs.
 *
 * To implement this API, PMDs must handle the RTE_ETH_FILTER_GENERIC filter
 * type in their .filter_ctrl callback function (struct eth_dev_ops) as well
 * as the RTE_ETH_FILTER_GET filter operation.
 *
 * If successful, this operation must result in a pointer to a PMD-specific
 * struct rte_flow_ops written to the argument address as described below:
 *
 * \code
 *
 * // PMD filter_ctrl callback
 *
 * static const struct rte_flow_ops pmd_flow_ops = { ... };
 *
 * switch (filter_type) {
 * case RTE_ETH_FILTER_GENERIC:
 *     if (filter_op != RTE_ETH_FILTER_GET)
 *         return -EINVAL;
 *     *(const void **)arg = &amp;pmd_flow_ops;
 *     return 0;
 * }
 *
 * \endcode
 *
 * See also rte_flow_ops_get().
 *
 * These callback functions are not supposed to be used by applications
 * directly, which must rely on the API defined in rte_flow.h.
 *
 * Public-facing wrapper functions perform a few consistency checks so that
 * unimplemented (i.e. NULL) callbacks simply return -ENOTSUP. These
 * callbacks otherwise only differ by their first argument (with port ID
 * already resolved to a pointer to struct rte_eth_dev).
 */</doc>
<mbr r='rte_flow_ops::validate' o='0' t='int (*)(struct rte_eth_dev *, const struct rte_flow_attr *, const struct rte_flow_item *, const struct rte_flow_action *, struct rte_flow_error *)'/>
<mbr r='rte_flow_ops::create' o='64' t='struct rte_flow *(*)(struct rte_eth_dev *, const struct rte_flow_attr *, const struct rte_flow_item *, const struct rte_flow_action *, struct rte_flow_error *)'/>
<mbr r='rte_flow_ops::destroy' o='128' t='int (*)(struct rte_eth_dev *, struct rte_flow *, struct rte_flow_error *)'/>
<mbr r='rte_flow_ops::flush' o='192' t='int (*)(struct rte_eth_dev *, struct rte_flow_error *)'/>
<mbr r='rte_flow_ops::query' o='256' t='int (*)(struct rte_eth_dev *, struct rte_flow *, const struct rte_flow_action *, void *, struct rte_flow_error *)'/>
<mbr r='rte_flow_ops::isolate' o='320' t='int (*)(struct rte_eth_dev *, int, struct rte_flow_error *)'/>
