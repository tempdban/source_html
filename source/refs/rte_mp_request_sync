<dec f='dpdk/lib/librte_eal/common/include/rte_eal.h' l='329' type='int rte_mp_request_sync(struct rte_mp_msg * req, struct rte_mp_reply * reply, const struct timespec * ts)'/>
<doc f='dpdk/lib/librte_eal/common/include/rte_eal.h' l='303'>/**
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * Send a request to the peer process and expect a reply.
 *
 * This function sends a request message to the peer process, and will
 * block until receiving reply message from the peer process.
 *
 * @note The caller is responsible to free reply-&gt;replies.
 *
 * @param req
 *   The req argument contains the customized request message.
 *
 * @param reply
 *   The reply argument will be for storing all the replied messages;
 *   the caller is responsible for free reply-&gt;replies.
 *
 * @param ts
 *   The ts argument specifies how long we can wait for the peer(s) to reply.
 *
 * @return
 *  - On success, return 0.
 *  - On failure, return -1, and the reason will be stored in rte_errno.
 */</doc>
<use f='dpdk/drivers/bus/vdev/vdev.c' l='417' u='c' c='vdev_scan'/>
<def f='dpdk/lib/librte_eal/common/eal_common_proc.c' l='977' ll='1054' type='int rte_mp_request_sync(struct rte_mp_msg * req, struct rte_mp_reply * reply, const struct timespec * ts)'/>
<use f='dpdk/lib/librte_eal/common/malloc_mp.c' l='590' u='c' c='request_sync'/>
<use f='dpdk/lib/librte_eal/linuxapp/eal/eal_vfio.c' l='348' u='c' c='vfio_open_group_fd'/>
<use f='dpdk/lib/librte_eal/linuxapp/eal/eal_vfio.c' l='608' u='c' c='rte_vfio_clear_group'/>
<use f='dpdk/lib/librte_eal/linuxapp/eal/eal_vfio.c' l='1091' u='c' c='rte_vfio_get_container_fd'/>
<use f='dpdk/lib/librte_pdump/rte_pdump.c' l='522' u='c' c='pdump_prepare_client_request'/>
