<dec f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_common.h' l='161' type='s32 ixgbe_host_interface_command(struct ixgbe_hw * hw, u32 * buffer, u32 length, u32 timeout, bool return_data)'/>
<def f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_common.c' l='4593' ll='4670' type='s32 ixgbe_host_interface_command(struct ixgbe_hw * hw, u32 * buffer, u32 length, u32 timeout, bool return_data)'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_common.c' l='4713' u='c' c='ixgbe_set_fw_drv_ver_generic'/>
<doc f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_common.c' l='4575'>/**
 *  ixgbe_host_interface_command - Issue command to manageability block
 *  @hw: pointer to the HW structure
 *  @buffer: contains the command to write and where the return status will
 *   be placed
 *  @length: length of buffer, must be multiple of 4 bytes
 *  @timeout: time in ms to wait for command completion
 *  @return_data: read and return data from the buffer (true) or not (false)
 *   Needed because FW structures are big endian and decoding of
 *   these fields can be 8 bit or 16 bit based on command. Decoding
 *   is not easily understood without making a table of commands.
 *   So we will leave this up to the caller to read back the data
 *   in these cases.
 *
 *  Communicates with the manageability block. On success return IXGBE_SUCCESS
 *  else returns semaphore error when encountering an error acquiring
 *  semaphore or IXGBE_ERR_HOST_INTERFACE_COMMAND when command fails.
 **/</doc>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='420' u='c' c='ixgbe_fw_phy_activity'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='1232' u='c' c='ixgbe_get_phy_token'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='1270' u='c' c='ixgbe_put_phy_token'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='1307' u='c' c='ixgbe_write_iosf_sb_reg_x550a'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='1339' u='c' c='ixgbe_read_iosf_sb_reg_x550a'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='3265' u='c' c='ixgbe_write_ee_hostif_data_X550'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='3617' u='c' c='ixgbe_update_flash_X550'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='3752' u='c' c='ixgbe_disable_rx_x550'/>
<use f='dpdk_18.05/drivers/net/ixgbe/base/ixgbe_x550.c' l='4646' u='c' c='ixgbe_set_fw_drv_ver_x550'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_common.h' l='161' type='s32 ixgbe_host_interface_command(struct ixgbe_hw * hw, u32 * buffer, u32 length, u32 timeout, bool return_data)'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_common.c' l='4593' ll='4670' type='s32 ixgbe_host_interface_command(struct ixgbe_hw * hw, u32 * buffer, u32 length, u32 timeout, bool return_data)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_common.c' l='4713' u='c' c='ixgbe_set_fw_drv_ver_generic'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_common.c' l='4575'>/**
 *  ixgbe_host_interface_command - Issue command to manageability block
 *  @hw: pointer to the HW structure
 *  @buffer: contains the command to write and where the return status will
 *   be placed
 *  @length: length of buffer, must be multiple of 4 bytes
 *  @timeout: time in ms to wait for command completion
 *  @return_data: read and return data from the buffer (true) or not (false)
 *   Needed because FW structures are big endian and decoding of
 *   these fields can be 8 bit or 16 bit based on command. Decoding
 *   is not easily understood without making a table of commands.
 *   So we will leave this up to the caller to read back the data
 *   in these cases.
 *
 *  Communicates with the manageability block. On success return IXGBE_SUCCESS
 *  else returns semaphore error when encountering an error acquiring
 *  semaphore or IXGBE_ERR_HOST_INTERFACE_COMMAND when command fails.
 **/</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='420' u='c' c='ixgbe_fw_phy_activity'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='1232' u='c' c='ixgbe_get_phy_token'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='1270' u='c' c='ixgbe_put_phy_token'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='1307' u='c' c='ixgbe_write_iosf_sb_reg_x550a'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='1339' u='c' c='ixgbe_read_iosf_sb_reg_x550a'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='3265' u='c' c='ixgbe_write_ee_hostif_data_X550'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='3617' u='c' c='ixgbe_update_flash_X550'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='3752' u='c' c='ixgbe_disable_rx_x550'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/base/ixgbe_x550.c' l='4646' u='c' c='ixgbe_set_fw_drv_ver_x550'/>
