<dec f='dpdk_18.05/lib/librte_eal/common/include/rte_eal_interrupts.h' l='104' type='int rte_epoll_wait(int epfd, struct rte_epoll_event * events, int maxevents, int timeout)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/include/rte_eal_interrupts.h' l='87'>/**
 * It waits for events on the epoll instance.
 *
 * @param epfd
 *   Epoll instance fd on which the caller wait for events.
 * @param events
 *   Memory area contains the events that will be available for the caller.
 * @param maxevents
 *   Up to maxevents are returned, must greater than zero.
 * @param timeout
 *   Specifying a timeout of -1 causes a block indefinitely.
 *   Specifying a timeout equal to zero cause to return immediately.
 * @return
 *   - On success, returns the number of available event.
 *   - On failure, a negative value.
 */</doc>
<use f='dpdk_18.05/drivers/net/failsafe/failsafe_intr.c' l='70' u='c' c='fs_rx_event_proxy_routine'/>
<def f='dpdk_18.05/lib/librte_eal/linuxapp/eal/eal_interrupts.c' l='985' ll='1022' type='int rte_epoll_wait(int epfd, struct rte_epoll_event * events, int maxevents, int timeout)'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_eal_interrupts.h' l='103' type='int rte_epoll_wait(int epfd, struct rte_epoll_event * events, int maxevents, int timeout)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_eal_interrupts.h' l='86'>/**
 * It waits for events on the epoll instance.
 *
 * @param epfd
 *   Epoll instance fd on which the caller wait for events.
 * @param events
 *   Memory area contains the events that will be available for the caller.
 * @param maxevents
 *   Up to maxevents are returned, must greater than zero.
 * @param timeout
 *   Specifying a timeout of -1 causes a block indefinitely.
 *   Specifying a timeout equal to zero cause to return immediately.
 * @return
 *   - On success, returns the number of available event.
 *   - On failure, a negative value.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/failsafe/failsafe_intr.c' l='70' u='c' c='fs_rx_event_proxy_routine'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/linuxapp/eal/eal_interrupts.c' l='985' ll='1022' type='int rte_epoll_wait(int epfd, struct rte_epoll_event * events, int maxevents, int timeout)'/>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_eal_interrupts.h' l='103' type='int rte_epoll_wait(int epfd, struct rte_epoll_event * events, int maxevents, int timeout)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_eal_interrupts.h' l='86'>/**
 * It waits for events on the epoll instance.
 *
 * @param epfd
 *   Epoll instance fd on which the caller wait for events.
 * @param events
 *   Memory area contains the events that will be available for the caller.
 * @param maxevents
 *   Up to maxevents are returned, must greater than zero.
 * @param timeout
 *   Specifying a timeout of -1 causes a block indefinitely.
 *   Specifying a timeout equal to zero cause to return immediately.
 * @return
 *   - On success, returns the number of available event.
 *   - On failure, a negative value.
 */</doc>
