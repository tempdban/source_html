<dec f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_prefetch.h' l='52' type='void rte_prefetch_non_temporal(const volatile void * p)'/>
<def f='dpdk_18.05/lib/librte_eal/common/include/arch/x86/rte_prefetch.h' l='30' ll='33' type='void rte_prefetch_non_temporal(const volatile void * p)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/include/generic/rte_prefetch.h' l='42'>/**
 * Prefetch a cache line into all cache levels (non-temporal/transient version)
 *
 * The non-temporal prefetch is intended as a prefetch hint that processor will
 * use the prefetched data only once or short period, unlike the
 * rte_prefetch0() function which imply that prefetched data to use repeatedly.
 *
 * @param p
 *   Address to prefetch
 */</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_prefetch.h' l='52' type='void rte_prefetch_non_temporal(const volatile void * p)'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/arch/x86/rte_prefetch.h' l='30' ll='33' type='void rte_prefetch_non_temporal(const volatile void * p)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/generic/rte_prefetch.h' l='42'>/**
 * Prefetch a cache line into all cache levels (non-temporal/transient version)
 *
 * The non-temporal prefetch is intended as a prefetch hint that processor will
 * use the prefetched data only once or short period, unlike the
 * rte_prefetch0() function which imply that prefetched data to use repeatedly.
 *
 * @param p
 *   Address to prefetch
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/event/octeontx/ssovf_worker.h' l='31' u='c' c='ssovf_octeontx_wqe_to_pkt'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/sfc/efsys.h' l='105' u='c' c='prefetch_read_once'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/thunderx/nicvf_rxtx.c' l='413' u='c' c='nicvf_recv_pkts'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/thunderx/nicvf_rxtx.c' l='514' u='c' c='nicvf_recv_pkts_multiseg'/>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_prefetch.h' l='52' type='void rte_prefetch_non_temporal(const volatile void * p)'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_prefetch.h' l='30' ll='33' type='void rte_prefetch_non_temporal(const volatile void * p)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/generic/rte_prefetch.h' l='42'>/**
 * Prefetch a cache line into all cache levels (non-temporal/transient version)
 *
 * The non-temporal prefetch is intended as a prefetch hint that processor will
 * use the prefetched data only once or short period, unlike the
 * rte_prefetch0() function which imply that prefetched data to use repeatedly.
 *
 * @param p
 *   Address to prefetch
 */</doc>
