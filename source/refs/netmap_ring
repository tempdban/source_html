<def f='vpp_1804/src/vnet/devices/netmap/net_netmap.h' l='259' ll='288'/>
<size>256</size>
<doc f='vpp_1804/src/vnet/devices/netmap/net_netmap.h' l='218'>/*
 * struct netmap_ring
 *
 * Netmap representation of a TX or RX ring (also known as &quot;queue&quot;).
 * This is a queue implemented as a fixed-size circular array.
 * At the software level the important fields are: head, cur, tail.
 *
 * In TX rings:
 *
 *	head	first slot available for transmission.
 *	cur	wakeup point. select() and poll() will unblock
 *		when &apos;tail&apos; moves past &apos;cur&apos;
 *	tail	(readonly) first slot reserved to the kernel
 *
 *	[head .. tail-1] can be used for new packets to send;
 *	&apos;head&apos; and &apos;cur&apos; must be incremented as slots are filled
 *	    with new packets to be sent;
 *	&apos;cur&apos; can be moved further ahead if we need more space
 *	for new transmissions. XXX todo (2014-03-12)
 *
 * In RX rings:
 *
 *	head	first valid received packet
 *	cur	wakeup point. select() and poll() will unblock
 *		when &apos;tail&apos; moves past &apos;cur&apos;
 *	tail	(readonly) first slot reserved to the kernel
 *
 *	[head .. tail-1] contain received packets;
 *	&apos;head&apos; and &apos;cur&apos; must be incremented as slots are consumed
 *		and can be returned to the kernel;
 *	&apos;cur&apos; can be moved further ahead if we want to wait for
 *		new packets without returning the previous ones.
 *
 * DATA OWNERSHIP/LOCKING:
 *	The netmap_ring, and all slots and buffers in the range
 *	[head .. tail-1] are owned by the user program;
 *	the kernel only accesses them during a netmap system call
 *	and in the user thread context.
 *
 *	Other slots and buffers are reserved for use by the kernel
 */</doc>
<mbr r='netmap_ring::buf_ofs' o='0' t='const int64_t'/>
<mbr r='netmap_ring::num_slots' o='64' t='const uint32_t'/>
<mbr r='netmap_ring::nr_buf_size' o='96' t='const uint32_t'/>
<mbr r='netmap_ring::ringid' o='128' t='const uint16_t'/>
<mbr r='netmap_ring::dir' o='144' t='const uint16_t'/>
<mbr r='netmap_ring::head' o='160' t='uint32_t'/>
<mbr r='netmap_ring::cur' o='192' t='uint32_t'/>
<mbr r='netmap_ring::tail' o='224' t='uint32_t'/>
<mbr r='netmap_ring::flags' o='256' t='uint32_t'/>
<mbr r='netmap_ring::ts' o='320' t='struct timeval'/>
<mbr r='netmap_ring::sem' o='1024' t='uint8_t [128]'/>
<mbr r='netmap_ring::slot' o='2048' t='struct netmap_slot [0]'/>
