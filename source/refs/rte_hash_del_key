<dec f='dpdk_18.05/lib/librte_hash/rte_hash.h' l='222' type='int32_t rte_hash_del_key(const struct rte_hash * h, const void * key)'/>
<use f='dpdk_18.05/drivers/net/i40e/i40e_ethdev.c' l='7402' u='c' c='i40e_sw_tunnel_filter_del'/>
<use f='dpdk_18.05/drivers/net/i40e/i40e_ethdev.c' l='9684' u='c' c='i40e_sw_ethertype_filter_del'/>
<doc f='dpdk_18.05/lib/librte_hash/rte_hash.h' l='205'>/**
 * Remove a key from an existing hash table.
 * This operation is not multi-thread safe
 * and should only be called from one thread.
 *
 * @param h
 *   Hash table to remove the key from.
 * @param key
 *   Key to remove from the hash table.
 * @return
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if the key is not found.
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key, and is the same
 *     value that was returned when the key was added.
 */</doc>
<use f='dpdk_18.05/drivers/net/i40e/i40e_fdir.c' l='1444' u='c' c='i40e_sw_fdir_filter_del'/>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_ethdev.c' l='7710' u='c' c='ixgbe_remove_l2_tn_filter'/>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_fdir.c' l='1172' u='c' c='ixgbe_remove_fdir_filter'/>
<def f='dpdk_18.05/lib/librte_hash/rte_cuckoo_hash.c' l='879' ll='884' type='int32_t rte_hash_del_key(const struct rte_hash * h, const void * key)'/>
<use f='dpdk_18.05/lib/librte_table/rte_table_hash_cuckoo.c' l='215' u='c' c='rte_table_hash_cuckoo_entry_delete'/>
<use f='dpdk_18.05/lib/librte_vhost/vhost_crypto.c' l='417' u='c' c='vhost_crypto_close_sess'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_hash/rte_hash.h' l='222' type='int32_t rte_hash_del_key(const struct rte_hash * h, const void * key)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/enic/enic_clsf.c' l='307' u='c' c='enic_fdir_del_fltr'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/enic/enic_clsf.c' l='364' u='c' c='enic_fdir_add_fltr'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_hash/rte_hash.h' l='205'>/**
 * Remove a key from an existing hash table.
 * This operation is not multi-thread safe
 * and should only be called from one thread.
 *
 * @param h
 *   Hash table to remove the key from.
 * @param key
 *   Key to remove from the hash table.
 * @return
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if the key is not found.
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key, and is the same
 *     value that was returned when the key was added.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/i40e/i40e_ethdev.c' l='7209' u='c' c='i40e_sw_tunnel_filter_del'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/i40e/i40e_ethdev.c' l='9490' u='c' c='i40e_sw_ethertype_filter_del'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/i40e/i40e_fdir.c' l='1444' u='c' c='i40e_sw_fdir_filter_del'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/ixgbe_ethdev.c' l='7588' u='c' c='ixgbe_remove_l2_tn_filter'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/ixgbe_fdir.c' l='1172' u='c' c='ixgbe_remove_fdir_filter'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_hash/rte_cuckoo_hash.c' l='877' ll='882' type='int32_t rte_hash_del_key(const struct rte_hash * h, const void * key)'/>
