<dec f='dpdk_18.05/lib/librte_eal/common/include/rte_bus.h' l='300' type='struct rte_bus * rte_bus_find(const struct rte_bus * start, rte_bus_cmp_t cmp, const void * data)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/include/rte_bus.h' l='278'>/**
 * Bus iterator to find a particular bus.
 *
 * This function compares each registered bus to find one that matches
 * the data passed as parameter.
 *
 * If the comparison function returns zero this function will stop iterating
 * over any more buses. To continue a search the bus of a previous search can
 * be passed via the start parameter.
 *
 * @param start
 *	Starting point for the iteration.
 *
 * @param cmp
 *	Comparison function.
 *
 * @param data
 *	 Data to pass to comparison function.
 *
 * @return
 *	 A pointer to a rte_bus structure or NULL in case no bus matches
 */</doc>
<def f='dpdk_18.05/lib/librte_eal/common/eal_common_bus.c' l='147' ll='163' type='struct rte_bus * rte_bus_find(const struct rte_bus * start, rte_bus_cmp_t cmp, const void * data)'/>
<use f='dpdk_18.05/lib/librte_eal/common/eal_common_bus.c' l='185' u='c' c='rte_bus_find_by_device'/>
<use f='dpdk_18.05/lib/librte_eal/common/eal_common_bus.c' l='199' u='c' c='rte_bus_find_by_name'/>
<use f='dpdk_18.05/lib/librte_eal/common/eal_common_bus.c' l='220' u='c' c='rte_bus_find_by_device_name'/>
<use f='dpdk_18.05/lib/librte_eal/common/eal_common_devargs.c' l='86' u='c' c='rte_devargs_parse'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_bus.h' l='300' type='struct rte_bus * rte_bus_find(const struct rte_bus * start, rte_bus_cmp_t cmp, const void * data)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_bus.h' l='278'>/**
 * Bus iterator to find a particular bus.
 *
 * This function compares each registered bus to find one that matches
 * the data passed as parameter.
 *
 * If the comparison function returns zero this function will stop iterating
 * over any more buses. To continue a search the bus of a previous search can
 * be passed via the start parameter.
 *
 * @param start
 *	Starting point for the iteration.
 *
 * @param cmp
 *	Comparison function.
 *
 * @param data
 *	 Data to pass to comparison function.
 *
 * @return
 *	 A pointer to a rte_bus structure or NULL in case no bus matches
 */</doc>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_bus.c' l='146' ll='162' type='struct rte_bus * rte_bus_find(const struct rte_bus * start, rte_bus_cmp_t cmp, const void * data)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_bus.c' l='184' u='c' c='rte_bus_find_by_device'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_bus.c' l='198' u='c' c='rte_bus_find_by_name'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_bus.c' l='219' u='c' c='rte_bus_find_by_device_name'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_devargs.c' l='74' u='c' c='rte_eal_devargs_parse'/>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_bus.h' l='300' type='struct rte_bus * rte_bus_find(const struct rte_bus * start, rte_bus_cmp_t cmp, const void * data)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_bus.h' l='278'>/**
 * Bus iterator to find a particular bus.
 *
 * This function compares each registered bus to find one that matches
 * the data passed as parameter.
 *
 * If the comparison function returns zero this function will stop iterating
 * over any more buses. To continue a search the bus of a previous search can
 * be passed via the start parameter.
 *
 * @param start
 *	Starting point for the iteration.
 *
 * @param cmp
 *	Comparison function.
 *
 * @param data
 *	 Data to pass to comparison function.
 *
 * @return
 *	 A pointer to a rte_bus structure or NULL in case no bus matches
 */</doc>
