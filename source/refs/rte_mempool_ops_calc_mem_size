<dec f='dpdk/lib/librte_mempool/rte_mempool.h' l='759' type='ssize_t rte_mempool_ops_calc_mem_size(const struct rte_mempool * mp, uint32_t obj_num, uint32_t pg_shift, size_t * min_chunk_size, size_t * align)'/>
<doc f='dpdk/lib/librte_mempool/rte_mempool.h' l='740'>/**
 * @internal wrapper for mempool_ops calc_mem_size callback.
 * API to calculate size of memory required to store specified number of
 * object.
 *
 * @param[in] mp
 *   Pointer to the memory pool.
 * @param[in] obj_num
 *   Number of objects.
 * @param[in] pg_shift
 *   LOG2 of the physical pages size. If set to 0, ignore page boundaries.
 * @param[out] min_chunk_size
 *   Location for minimum size of the memory chunk which may be used to
 *   store memory pool objects.
 * @param[out] align
 *   Location for required memory chunk alignment.
 * @return
 *   Required memory size aligned at page boundary.
 */</doc>
<use f='dpdk/lib/librte_mempool/rte_mempool.c' l='629' u='c' c='rte_mempool_populate_default'/>
<use f='dpdk/lib/librte_mempool/rte_mempool.c' l='632' u='c' c='rte_mempool_populate_default'/>
<use f='dpdk/lib/librte_mempool/rte_mempool.c' l='666' u='c' c='rte_mempool_populate_default'/>
<use f='dpdk/lib/librte_mempool/rte_mempool.c' l='737' u='c' c='get_anon_size'/>
<def f='dpdk/lib/librte_mempool/rte_mempool_ops.c' l='103' ll='117' type='ssize_t rte_mempool_ops_calc_mem_size(const struct rte_mempool * mp, uint32_t obj_num, uint32_t pg_shift, size_t * min_chunk_size, size_t * align)'/>
<doc f='dpdk/lib/librte_mempool/rte_mempool_ops.c' l='102'>/* wrapper to notify new memory area to external mempool */</doc>
