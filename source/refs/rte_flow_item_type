<def f='dpdk_18.05/lib/librte_ethdev/rte_flow.h' l='115' ll='416'/>
<doc f='dpdk_18.05/lib/librte_ethdev/rte_flow.h' l='99'>/**
 * Matching pattern item types.
 *
 * Pattern items fall in two categories:
 *
 * - Matching protocol headers and packet data, usually associated with a
 *   specification structure. These must be stacked in the same order as the
 *   protocol layers to match inside packets, starting from the lowest.
 *
 * - Matching meta-data or affecting pattern processing, often without a
 *   specification structure. Since they do not match packet contents, their
 *   position in the list is usually not relevant.
 *
 * See the description of individual types for more information. Those
 * marked with [META] fall into the second category.
 */</doc>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ether/rte_flow.h' l='92' ll='326'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ether/rte_flow.h' l='74'>/**
 * Matching pattern item types.
 *
 * Pattern items fall in two categories:
 *
 * - Matching protocol headers and packet data (ANY, RAW, ETH, VLAN, IPV4,
 *   IPV6, ICMP, UDP, TCP, SCTP, VXLAN and so on), usually associated with a
 *   specification structure. These must be stacked in the same order as the
 *   protocol layers to match, starting from the lowest.
 *
 * - Matching meta-data or affecting pattern processing (END, VOID, INVERT,
 *   PF, VF, PORT and so on), often without a specification structure. Since
 *   they do not match packet contents, these can be specified anywhere
 *   within item lists without affecting others.
 *
 * See the description of individual types for more information. Those
 * marked with [META] fall into the second category.
 */</doc>
