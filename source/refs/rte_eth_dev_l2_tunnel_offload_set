<dec f='dpdk/lib/librte_ethdev/rte_ethdev.h' l='3653' type='int rte_eth_dev_l2_tunnel_offload_set(uint16_t port_id, struct rte_eth_l2_tunnel_conf * l2_tunnel, uint32_t mask, uint8_t en)'/>
<doc f='dpdk/lib/librte_ethdev/rte_ethdev.h' l='3628'>/**
 * Enable/disable l2 tunnel offload functions. Include,
 * 1, The ability of parsing a type of l2 tunnel of an Ethernet device.
 *    Filtering, forwarding and offloading this type of tunnel packets depend on
 *    this ability.
 * 2, Stripping the l2 tunnel tag.
 * 3, Insertion of the l2 tunnel tag.
 * 4, Forwarding the packets based on the l2 tunnel tag.
 *
 * @param port_id
 *   The port identifier of the Ethernet device.
 * @param l2_tunnel
 *   l2 tunnel parameters.
 * @param mask
 *   Indicate the offload function.
 * @param en
 *   Enable or disable this function.
 *
 * @return
 *   - (0) if successful.
 *   - (-ENODEV) if port identifier is invalid.
 *   - (-EIO) if device is removed.
 *   - (-ENOTSUP) if hardware doesn&apos;t support tunnel type.
 */</doc>
<use f='dpdk/app/test-pmd/cmdline.c' l='12371' u='c' c='cmd_config_l2_tunnel_en_dis_all_parsed'/>
<use f='dpdk/app/test-pmd/cmdline.c' l='12410' u='c' c='cmd_config_l2_tunnel_en_dis_specific_parsed'/>
<use f='dpdk/app/test-pmd/cmdline.c' l='12415' u='c' c='cmd_config_l2_tunnel_en_dis_specific_parsed'/>
<use f='dpdk/app/test-pmd/cmdline.c' l='12566' u='c' c='cmd_config_e_tag_insertion_en_parsed'/>
<use f='dpdk/app/test-pmd/cmdline.c' l='12588' u='c' c='cmd_config_e_tag_insertion_dis_parsed'/>
<use f='dpdk/app/test-pmd/cmdline.c' l='12647' u='c' c='cmd_config_e_tag_stripping_parsed'/>
<use f='dpdk/app/test-pmd/cmdline.c' l='12653' u='c' c='cmd_config_e_tag_stripping_parsed'/>
<use f='dpdk/app/test-pmd/cmdline.c' l='12691' u='c' c='cmd_config_e_tag_forwarding_parsed'/>
<use f='dpdk/app/test-pmd/cmdline.c' l='12697' u='c' c='cmd_config_e_tag_forwarding_parsed'/>
<def f='dpdk/lib/librte_ethdev/rte_ethdev.c' l='4197' ll='4227' type='int rte_eth_dev_l2_tunnel_offload_set(uint16_t port_id, struct rte_eth_l2_tunnel_conf * l2_tunnel, uint32_t mask, uint8_t en)'/>
