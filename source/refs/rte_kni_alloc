<dec f='dpdk_18.05/lib/librte_kni/rte_kni.h' l='111' type='struct rte_kni * rte_kni_alloc(struct rte_mempool * pktmbuf_pool, const struct rte_kni_conf * conf, struct rte_kni_ops * ops)'/>
<use f='dpdk_18.05/drivers/net/kni/rte_eth_kni.c' l='132' u='c' c='eth_kni_start'/>
<doc f='dpdk_18.05/lib/librte_kni/rte_kni.h' l='88'>/**
 * Allocate KNI interface according to the port id, mbuf size, mbuf pool,
 * configurations and callbacks for kernel requests.The KNI interface created
 * in the kernel space is the net interface the traditional Linux application
 * talking to.
 *
 * The rte_kni_alloc shall not be called before rte_kni_init() has been
 * called. rte_kni_alloc is thread safe.
 *
 * The mempool should have capacity of more than &quot;2 x KNI_FIFO_COUNT_MAX&quot;
 * elements for each KNI interface allocated.
 *
 * @param pktmbuf_pool
 *  The mempool for allocating mbufs for packets.
 * @param conf
 *  The pointer to the configurations of the KNI device.
 * @param ops
 *  The pointer to the callbacks for the KNI kernel requests.
 *
 * @return
 *  - The pointer to the context of a KNI interface.
 *  - NULL indicate error.
 */</doc>
<def f='dpdk_18.05/lib/librte_kni/rte_kni.c' l='290' ll='415' type='struct rte_kni * rte_kni_alloc(struct rte_mempool * pktmbuf_pool, const struct rte_kni_conf * conf, struct rte_kni_ops * ops)'/>
