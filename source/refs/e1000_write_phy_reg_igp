<dec f='dpdk_18.05/kernel/linux/kni/ethtool/igb/e1000_phy.h' l='59' type='s32 e1000_write_phy_reg_igp(struct e1000_hw * hw, u32 offset, u16 data)'/>
<use f='dpdk_18.05/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='201' u='r' c='e1000_init_phy_params_82575'/>
<def f='dpdk_18.05/kernel/linux/kni/ethtool/igb/e1000_phy.c' l='790' ll='793' type='s32 e1000_write_phy_reg_igp(struct e1000_hw * hw, u32 offset, u16 data)'/>
<doc f='dpdk_18.05/kernel/linux/kni/ethtool/igb/e1000_phy.c' l='781'>/**
 *  e1000_write_phy_reg_igp - Write igp PHY register
 *  @hw: pointer to the HW structure
 *  @offset: register offset to write to
 *  @data: data to write at register offset
 *
 *  Acquires semaphore then writes the data to PHY register
 *  at the offset.  Release any acquired semaphores before exiting.
 **/</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/base/e1000_phy.h' l='82' type='s32 e1000_write_phy_reg_igp(struct e1000_hw * hw, u32 offset, u16 data)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/base/e1000_82541.c' l='104' u='r' c='e1000_init_phy_params_82541'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/base/e1000_82571.c' l='126' u='r' c='e1000_init_phy_params_82571'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/base/e1000_82575.c' l='221' u='r' c='e1000_init_phy_params_82575'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/base/e1000_ich8lan.c' l='563' u='r' c='e1000_init_phy_params_ich8lan'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/base/e1000_phy.c' l='844' ll='847' type='s32 e1000_write_phy_reg_igp(struct e1000_hw * hw, u32 offset, u16 data)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/e1000/base/e1000_phy.c' l='835'>/**
 *  e1000_write_phy_reg_igp - Write igp PHY register
 *  @hw: pointer to the HW structure
 *  @offset: register offset to write to
 *  @data: data to write at register offset
 *
 *  Acquires semaphore then writes the data to PHY register
 *  at the offset.  Release any acquired semaphores before exiting.
 **/</doc>
