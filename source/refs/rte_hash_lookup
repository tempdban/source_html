<dec f='dpdk/lib/librte_hash/rte_hash.h' l='320' type='int32_t rte_hash_lookup(const struct rte_hash * h, const void * key)'/>
<use f='dpdk/drivers/net/ixgbe/ixgbe_ethdev.c' l='7672' u='c' c='ixgbe_l2_tn_filter_lookup'/>
<doc f='dpdk/lib/librte_hash/rte_hash.h' l='304'>/**
 * Find a key in the hash table.
 * This operation is multi-thread safe.
 *
 * @param h
 *   Hash table to look in.
 * @param key
 *   Key to find.
 * @return
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOENT if the key is not found.
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key, and is the same
 *     value that was returned when the key was added.
 */</doc>
<use f='dpdk/drivers/net/ixgbe/ixgbe_fdir.c' l='1135' u='c' c='ixgbe_fdir_filter_lookup'/>
<def f='dpdk/lib/librte_hash/rte_cuckoo_hash.c' l='758' ll='763' type='int32_t rte_hash_lookup(const struct rte_hash * h, const void * key)'/>
<use f='dpdk/lib/librte_table/rte_table_hash_cuckoo.c' l='171' u='c' c='rte_table_hash_cuckoo_entry_add'/>
<use f='dpdk/lib/librte_table/rte_table_hash_cuckoo.c' l='282' u='c' c='rte_table_hash_cuckoo_lookup'/>
