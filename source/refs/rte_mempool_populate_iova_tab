<dec f='dpdk_18.05/lib/librte_mempool/rte_mempool.h' l='1159' type='int rte_mempool_populate_iova_tab(struct rte_mempool * mp, char * vaddr, const rte_iova_t * iova, uint32_t pg_num, uint32_t pg_shift, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<def f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='437' ll='472' type='int rte_mempool_populate_iova_tab(struct rte_mempool * mp, char * vaddr, const rte_iova_t * iova, uint32_t pg_num, uint32_t pg_shift, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='479' u='c' c='rte_mempool_populate_phys_tab'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='1112' u='c' c='rte_mempool_xmem_create'/>
<doc f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='434'>/* Add objects in the pool, using a table of physical pages. Return the
 * number of objects added, or a negative value on error.
 */</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='911' type='int rte_mempool_populate_iova_tab(struct rte_mempool * mp, char * vaddr, const rte_iova_t * iova, uint32_t pg_num, uint32_t pg_shift, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='885'>/**
 * Add physical memory for objects in the pool at init
 *
 * Add a virtually contiguous memory chunk in the pool where objects can
 * be instantiated. The IO addresses corresponding to the virtual
 * area are described in iova[], pg_num, pg_shift.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param vaddr
 *   The virtual address of memory that should be used to store objects.
 * @param iova
 *   An array of IO addresses of each page composing the virtual area.
 * @param pg_num
 *   Number of elements in the iova array.
 * @param pg_shift
 *   LOG2 of the physical pages size.
 * @param free_cb
 *   The callback used to free this chunk when destroying the mempool.
 * @param opaque
 *   An opaque argument passed to free_cb.
 * @return
 *   The number of objects added on success.
 *   On error, the chunks are not added in the memory list of the
 *   mempool and a negative errno is returned.
 */</doc>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='430' ll='465' type='int rte_mempool_populate_iova_tab(struct rte_mempool * mp, char * vaddr, const rte_iova_t * iova, uint32_t pg_num, uint32_t pg_shift, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='472' u='c' c='rte_mempool_populate_phys_tab'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='991' u='c' c='rte_mempool_xmem_create'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='427'>/* Add objects in the pool, using a table of physical pages. Return the
 * number of objects added, or a negative value on error.
 */</doc>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='911' type='int rte_mempool_populate_iova_tab(struct rte_mempool * mp, char * vaddr, const rte_iova_t * iova, uint32_t pg_num, uint32_t pg_shift, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='885'>/**
 * Add physical memory for objects in the pool at init
 *
 * Add a virtually contiguous memory chunk in the pool where objects can
 * be instantiated. The IO addresses corresponding to the virtual
 * area are described in iova[], pg_num, pg_shift.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param vaddr
 *   The virtual address of memory that should be used to store objects.
 * @param iova
 *   An array of IO addresses of each page composing the virtual area.
 * @param pg_num
 *   Number of elements in the iova array.
 * @param pg_shift
 *   LOG2 of the physical pages size.
 * @param free_cb
 *   The callback used to free this chunk when destroying the mempool.
 * @param opaque
 *   An opaque argument passed to free_cb.
 * @return
 *   The number of objects added on success.
 *   On error, the chunks are not added in the memory list of the
 *   mempool and a negative errno is returned.
 */</doc>
