<dec f='dpdk_18.05/lib/librte_mempool/rte_mempool.h' l='1122' type='int rte_mempool_populate_iova(struct rte_mempool * mp, char * vaddr, rte_iova_t iova, size_t len, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<doc f='dpdk_18.05/lib/librte_mempool/rte_mempool.h' l='1095'>/**
 * Add physically contiguous memory for objects in the pool at init
 *
 * Add a virtually and physically contiguous memory chunk in the pool
 * where objects can be instantiated.
 *
 * If the given IO address is unknown (iova = RTE_BAD_IOVA),
 * the chunk doesn&apos;t need to be physically contiguous (only virtually),
 * and allocated objects may span two pages.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param vaddr
 *   The virtual address of memory that should be used to store objects.
 * @param iova
 *   The IO address
 * @param len
 *   The length of memory in bytes.
 * @param free_cb
 *   The callback used to free this chunk when destroying the mempool.
 * @param opaque
 *   An opaque argument passed to free_cb.
 * @return
 *   The number of objects added on success.
 *   On error, the chunk is not added in the memory list of the
 *   mempool and a negative errno is returned.
 */</doc>
<def f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='367' ll='424' type='int rte_mempool_populate_iova(struct rte_mempool * mp, char * vaddr, rte_iova_t iova, size_t len, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='431' u='c' c='rte_mempool_populate_phys'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='451' u='c' c='rte_mempool_populate_iova_tab'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='461' u='c' c='rte_mempool_populate_iova_tab'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='502' u='c' c='rte_mempool_populate_virt'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='525' u='c' c='rte_mempool_populate_virt'/>
<use f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='704' u='c' c='rte_mempool_populate_default'/>
<doc f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='363'>/* Add objects in the pool, using a physically contiguous memory
 * zone. Return the number of objects added, or a negative value
 * on error.
 */</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='876' type='int rte_mempool_populate_iova(struct rte_mempool * mp, char * vaddr, rte_iova_t iova, size_t len, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='849'>/**
 * Add physically contiguous memory for objects in the pool at init
 *
 * Add a virtually and physically contiguous memory chunk in the pool
 * where objects can be instantiated.
 *
 * If the given IO address is unknown (iova = RTE_BAD_IOVA),
 * the chunk doesn&apos;t need to be physically contiguous (only virtually),
 * and allocated objects may span two pages.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param vaddr
 *   The virtual address of memory that should be used to store objects.
 * @param iova
 *   The IO address
 * @param len
 *   The length of memory in bytes.
 * @param free_cb
 *   The callback used to free this chunk when destroying the mempool.
 * @param opaque
 *   An opaque argument passed to free_cb.
 * @return
 *   The number of objects added on success.
 *   On error, the chunk is not added in the memory list of the
 *   mempool and a negative errno is returned.
 */</doc>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='330' ll='417' type='int rte_mempool_populate_iova(struct rte_mempool * mp, char * vaddr, rte_iova_t iova, size_t len, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='424' u='c' c='rte_mempool_populate_phys'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='444' u='c' c='rte_mempool_populate_iova_tab'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='454' u='c' c='rte_mempool_populate_iova_tab'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='498' u='c' c='rte_mempool_populate_virt'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='521' u='c' c='rte_mempool_populate_virt'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='605' u='c' c='rte_mempool_populate_default'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='326'>/* Add objects in the pool, using a physically contiguous memory
 * zone. Return the number of objects added, or a negative value
 * on error.
 */</doc>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='876' type='int rte_mempool_populate_iova(struct rte_mempool * mp, char * vaddr, rte_iova_t iova, size_t len, rte_mempool_memchunk_free_cb_t * free_cb, void * opaque)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='849'>/**
 * Add physically contiguous memory for objects in the pool at init
 *
 * Add a virtually and physically contiguous memory chunk in the pool
 * where objects can be instantiated.
 *
 * If the given IO address is unknown (iova = RTE_BAD_IOVA),
 * the chunk doesn&apos;t need to be physically contiguous (only virtually),
 * and allocated objects may span two pages.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param vaddr
 *   The virtual address of memory that should be used to store objects.
 * @param iova
 *   The IO address
 * @param len
 *   The length of memory in bytes.
 * @param free_cb
 *   The callback used to free this chunk when destroying the mempool.
 * @param opaque
 *   An opaque argument passed to free_cb.
 * @return
 *   The number of objects added on success.
 *   On error, the chunk is not added in the memory list of the
 *   mempool and a negative errno is returned.
 */</doc>
