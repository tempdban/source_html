<def f='dpdk_18.05/lib/librte_hash/rte_hash_crc.h' l='494' ll='503' type='uint32_t rte_hash_crc_2byte(uint16_t data, uint32_t init_val)'/>
<use f='dpdk_18.05/lib/librte_hash/rte_hash_crc.h' l='587' u='c' c='rte_hash_crc'/>
<doc f='dpdk_18.05/lib/librte_hash/rte_hash_crc.h' l='482'>/**
 * Use single crc32 instruction to perform a hash on a 2 bytes value.
 * Fall back to software crc32 implementation in case SSE4.2 is
 * not supported
 *
 * @param data
 *   Data to perform hash on.
 * @param init_val
 *   Value to initialise hash generator.
 * @return
 *   32bit calculated hash value.
 */</doc>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_hash/rte_hash_crc.h' l='495' ll='504' type='uint32_t rte_hash_crc_2byte(uint16_t data, uint32_t init_val)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_hash/rte_hash_crc.h' l='588' u='c' c='rte_hash_crc'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_hash/rte_hash_crc.h' l='483'>/**
 * Use single crc32 instruction to perform a hash on a 2 bytes value.
 * Fall back to software crc32 implementation in case SSE4.2 is
 * not supported
 *
 * @param data
 *   Data to perform hash on.
 * @param init_val
 *   Value to initialise hash generator.
 * @return
 *   32bit calculated hash value.
 */</doc>
