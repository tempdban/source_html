<def f='vpp_1804/src/plugins/ioam/lib-pot/pot_util.h' l='54' ll='70'/>
<size>96</size>
<doc f='vpp_1804/src/plugins/ioam/lib-pot/pot_util.h' l='30'>/**
 * Usage:
 * 
 * On any node that participates in Proof of Transit:
 *
 * Step 1: Initialize this library by calling pot_init()
 * Step 2: Setup a proof of transit  profile that contains all the parameters needed to compute cumulative:
 *         Call these functions:
 *         pot_profile_find
 *         pot_profile_create
 *         pot_profile_set_bit_mask - To setup how large we want the numbers used in the computation and random number &lt;= 64 bits
 * Step 2a: For validator do this:
 *          pot_set_validator
 * Step 2b: On initial node enable the profile to be used:
 *          pot_profile_set_active / pot_profile_get_active will return the profile
 * Step 3a: At the initial node to generate Random number that will be read by all other nodes:
 *          pot_generate_random
 * Step 3b: At all nodes including initial and verifier call this to compute cumulative:
 *          pot_update_cumulative
 * Step 4: At the verifier:
 *         pot_validate
 * 
 */</doc>
<mbr r='pot_profile_::id' o='0' t='u8'/>
<mbr r='pot_profile_::valid' o='1' t='u8'/>
<mbr r='pot_profile_::in_use' o='2' t='u8'/>
<mbr r='pot_profile_::random' o='64' t='u64'/>
<mbr r='pot_profile_::validator' o='128' t='u8'/>
<mbr r='pot_profile_::secret_key' o='192' t='u64'/>
<mbr r='pot_profile_::secret_share' o='256' t='u64'/>
<mbr r='pot_profile_::prime' o='320' t='u64'/>
<mbr r='pot_profile_::lpc' o='384' t='u64'/>
<mbr r='pot_profile_::poly_pre_eval' o='448' t='u64'/>
<mbr r='pot_profile_::bit_mask' o='512' t='u64'/>
<mbr r='pot_profile_::limit' o='576' t='u64'/>
<mbr r='pot_profile_::primeinv' o='640' t='double'/>
<mbr r='pot_profile_::total_pkts_using_this_profile' o='704' t='u64'/>
