<def f='dpdk/lib/librte_ethdev/rte_ethdev.h' l='4258' ll='4279' type='uint16_t rte_eth_tx_buffer_flush(uint16_t port_id, uint16_t queue_id, struct rte_eth_dev_tx_buffer * buffer)'/>
<use f='dpdk/lib/librte_ethdev/rte_ethdev.h' l='4319' u='c' c='rte_eth_tx_buffer'/>
<doc f='dpdk/lib/librte_ethdev/rte_ethdev.h' l='4236'>/**
 * Send any packets queued up for transmission on a port and HW queue
 *
 * This causes an explicit flush of packets previously buffered via the
 * rte_eth_tx_buffer() function. It returns the number of packets successfully
 * sent to the NIC, and calls the error callback for any unsent packets. Unless
 * explicitly set up otherwise, the default callback simply frees the unsent
 * packets back to the owning mempool.
 *
 * @param port_id
 *   The port identifier of the Ethernet device.
 * @param queue_id
 *   The index of the transmit queue through which output packets must be
 *   sent.
 *   The value must be in the range [0, nb_tx_queue - 1] previously supplied
 *   to rte_eth_dev_configure().
 * @param buffer
 *   Buffer of packets to be transmit.
 * @return
 *   The number of packets successfully sent to the Ethernet device. The error
 *   callback is called for any packets which could not be sent.
 */</doc>
<use f='dpdk/app/test-eventdev/test_pipeline_common.c' l='22' u='c' c='pipeline_event_tx_burst_service_func'/>
<use f='dpdk/app/test-eventdev/test_pipeline_common.c' l='49' u='c' c='pipeline_event_tx_service_func'/>
