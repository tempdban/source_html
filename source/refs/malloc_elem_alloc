<dec f='dpdk_18.05/lib/librte_eal/common/malloc_elem.h' l='137' type='struct malloc_elem * malloc_elem_alloc(struct malloc_elem * elem, size_t size, unsigned int align, size_t bound, _Bool contig)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/malloc_elem.h' l='132'>/*
 * reserve a block of data in an existing malloc_elem. If the malloc_elem
 * is much larger than the data block requested, we split the element in two.
 */</doc>
<def f='dpdk_18.05/lib/librte_eal/common/malloc_elem.c' l='310' ll='361' type='struct malloc_elem * malloc_elem_alloc(struct malloc_elem * elem, size_t size, unsigned int align, size_t bound, _Bool contig)'/>
<doc f='dpdk_18.05/lib/librte_eal/common/malloc_elem.c' l='304'>/*
 * reserve a block of data in an existing malloc_elem. If the malloc_elem
 * is much larger than the data block requested, we split the element in two.
 * This function is only called from malloc_heap_alloc so parameter checking
 * is not done here, as it&apos;s done there previously.
 */</doc>
<use f='dpdk_18.05/lib/librte_eal/common/malloc_heap.c' l='168' u='c' c='heap_alloc'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/malloc_elem.h' l='133' type='struct malloc_elem * malloc_elem_alloc(struct malloc_elem * elem, size_t size, unsigned int align, size_t bound)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/malloc_elem.h' l='128'>/*
 * reserve a block of data in an existing malloc_elem. If the malloc_elem
 * is much larger than the data block requested, we split the element in two.
 */</doc>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/malloc_elem.c' l='177' ll='224' type='struct malloc_elem * malloc_elem_alloc(struct malloc_elem * elem, size_t size, unsigned int align, size_t bound)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/malloc_elem.c' l='171'>/*
 * reserve a block of data in an existing malloc_elem. If the malloc_elem
 * is much larger than the data block requested, we split the element in two.
 * This function is only called from malloc_heap_alloc so parameter checking
 * is not done here, as it&apos;s done there previously.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/malloc_heap.c' l='139' u='c' c='malloc_heap_alloc'/>
