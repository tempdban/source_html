<dec f='dpdk_18.05/lib/librte_timer/rte_timer.h' l='255' type='int rte_timer_stop(struct rte_timer * tim)'/>
<use f='dpdk_18.05/lib/librte_eventdev/rte_event_timer_adapter.c' l='756' u='c' c='sw_event_timer_adapter_service_func'/>
<doc f='dpdk_18.05/lib/librte_timer/rte_timer.h' l='232'>/**
 * Stop a timer.
 *
 * The rte_timer_stop() function stops the timer associated with the
 * timer handle *tim*. It may fail if the timer is currently running or
 * being configured.
 *
 * If the timer is pending or stopped (for instance, already expired),
 * the function will succeed. The timer handle tim must have been
 * initialized using rte_timer_init(), otherwise, undefined behavior
 * will occur.
 *
 * This function can be called safely from a timer callback. If it
 * succeeds, the timer is not referenced anymore by the timer library
 * and the timer structure can be freed (even in the callback
 * function).
 *
 * @param tim
 *   The timer handle.
 * @return
 *   - 0: Success; the timer is stopped.
 *   - (-1): The timer is in the RUNNING or CONFIG state.
 */</doc>
<def f='dpdk_18.05/lib/librte_timer/rte_timer.c' l='430' ll='462' type='int rte_timer_stop(struct rte_timer * tim)'/>
<use f='dpdk_18.05/lib/librte_timer/rte_timer.c' l='468' u='c' c='rte_timer_stop_sync'/>
<doc f='dpdk_18.05/lib/librte_timer/rte_timer.c' l='429'>/* Stop the timer associated with the timer handle tim */</doc>
