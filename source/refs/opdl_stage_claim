<dec f='dpdk_18.05/drivers/event/opdl/opdl_ring.h' l='311' type='uint32_t opdl_stage_claim(struct opdl_stage * s, void * entries, uint32_t num_entries, uint32_t * seq, _Bool block, _Bool atomic)'/>
<doc f='dpdk_18.05/drivers/event/opdl/opdl_ring.h' l='283'>/**
 * Before processing a batch of entries, a stage must first claim them to get
 * access. This function is threadsafe using same opdl_stage parameter if
 * the stage was created with threadsafe set to true, otherwise it is only
 * threadsafe with a different opdl_stage per thread. For performance
 * reasons, this function does not check input parameters.
 *
 * @param s
 *   The opdl_ring stage to read entries in.
 * @param entries
 *   An array of pointers to entries that will be filled in by this function.
 * @param num_entries
 *   The number of entries to attempt to claim for processing (and the size of
 *   the entries array).
 * @param seq
 *   If not NULL, this is set to the value of the internal stage sequence number
 *   associated with the first entry returned.
 * @param block
 *   If this is true, the function blocks until num_entries slots are available
 *   to process. If false, then the function claims as many entries as
 *   currently possible.
 *
 * @param atomic
 *   if this is true, the function will return event according to event flow id
 * @return
 *   The number of pointers to entries filled in to the entries array.
 */</doc>
<use f='dpdk_18.05/drivers/event/opdl/opdl_evdev_init.c' l='215' u='c' c='opdl_tx_dequeue_multi_inst'/>
<use f='dpdk_18.05/drivers/event/opdl/opdl_evdev_init.c' l='248' u='c' c='opdl_claim'/>
<def f='dpdk_18.05/drivers/event/opdl/opdl_ring.c' l='707' ll='717' type='uint32_t opdl_stage_claim(struct opdl_stage * s, void * entries, uint32_t num_entries, uint32_t * seq, _Bool block, _Bool atomic)'/>
