<dec f='dpdk_18.05/lib/librte_hash/rte_hash.h' l='183' type='int32_t rte_hash_add_key(const struct rte_hash * h, const void * key)'/>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_ethdev.c' l='7685' u='c' c='ixgbe_insert_l2_tn_filter'/>
<doc f='dpdk_18.05/lib/librte_hash/rte_hash.h' l='168'>/**
 * Add a key to an existing hash table. This operation is not multi-thread safe
 * and should only be called from one thread.
 *
 * @param h
 *   Hash table to add the key to.
 * @param key
 *   Key to add to the hash table.
 * @return
 *   - -EINVAL if the parameters are invalid.
 *   - -ENOSPC if there is no space in the hash for this key.
 *   - A positive value that can be used by the caller as an offset into an
 *     array of user data. This value is unique for this key.
 */</doc>
<use f='dpdk_18.05/drivers/net/ixgbe/ixgbe_fdir.c' l='1148' u='c' c='ixgbe_insert_fdir_filter'/>
<def f='dpdk_18.05/lib/librte_hash/rte_cuckoo_hash.c' l='659' ll='664' type='int32_t rte_hash_add_key(const struct rte_hash * h, const void * key)'/>
<use f='dpdk_18.05/lib/librte_table/rte_table_hash_cuckoo.c' l='187' u='c' c='rte_table_hash_cuckoo_entry_add'/>
