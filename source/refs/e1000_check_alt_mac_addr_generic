<dec f='dpdk/kernel/linux/kni/ethtool/igb/e1000_mac.h' l='59' type='s32 e1000_check_alt_mac_addr_generic(struct e1000_hw * hw)'/>
<use f='dpdk/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1435' u='c' c='e1000_reset_hw_82575'/>
<use f='dpdk/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='1973' u='c' c='e1000_read_mac_addr_82575'/>
<use f='dpdk/kernel/linux/kni/ethtool/igb/e1000_82575.c' l='2485' u='c' c='e1000_reset_hw_82580'/>
<def f='dpdk/kernel/linux/kni/ethtool/igb/e1000_mac.c' l='289' ll='353' type='s32 e1000_check_alt_mac_addr_generic(struct e1000_hw * hw)'/>
<doc f='dpdk/kernel/linux/kni/ethtool/igb/e1000_mac.c' l='277'>/**
 *  e1000_check_alt_mac_addr_generic - Check for alternate MAC addr
 *  @hw: pointer to the HW structure
 *
 *  Checks the nvm for an alternate MAC address.  An alternate MAC address
 *  can be setup by pre-boot software and must be treated like a permanent
 *  address and must override the actual permanent MAC address. If an
 *  alternate MAC address is found it is programmed into RAR0, replacing
 *  the permanent address that was installed into RAR0 by the Si on reset.
 *  This function will return SUCCESS unless it encounters an error while
 *  reading the EEPROM.
 **/</doc>
