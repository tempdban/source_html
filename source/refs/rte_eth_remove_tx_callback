<dec f='dpdk_18.05/lib/librte_ethdev/rte_ethdev.h' l='3312' type='int rte_eth_remove_tx_callback(uint16_t port_id, uint16_t queue_id, const struct rte_eth_rxtx_callback * user_cb)'/>
<doc f='dpdk_18.05/lib/librte_ethdev/rte_ethdev.h' l='3282'>/**
 * Remove a TX packet callback from a given port and queue.
 *
 * This function is used to removed callbacks that were added to a NIC port
 * queue using rte_eth_add_tx_callback().
 *
 * Note: the callback is removed from the callback list but it isn&apos;t freed
 * since the it may still be in use. The memory for the callback can be
 * subsequently freed back by the application by calling rte_free():
 *
 * - Immediately - if the port is stopped, or the user knows that no
 *   callbacks are in flight e.g. if called from the thread doing RX/TX
 *   on that queue.
 *
 * - After a short delay - where the delay is sufficient to allow any
 *   in-flight callbacks to complete.
 *
 * @param port_id
 *   The port identifier of the Ethernet device.
 * @param queue_id
 *   The queue on the Ethernet device from which the callback is to be removed.
 * @param user_cb
 *   User supplied callback created via rte_eth_add_tx_callback().
 *
 * @return
 *   - 0: Success. Callback was removed.
 *   - -ENOTSUP: Callback support is not available.
 *   - -EINVAL:  The port_id or the queue_id is out of range, or the callback
 *               is NULL or not found for the port/queue.
 */</doc>
<use f='dpdk_18.05/lib/librte_bpf/bpf_pkt.c' l='477' u='c' c='bpf_eth_unload'/>
<def f='dpdk_18.05/lib/librte_ethdev/rte_ethdev.c' l='3892' ll='3924' type='int rte_eth_remove_tx_callback(uint16_t port_id, uint16_t queue_id, const struct rte_eth_rxtx_callback * user_cb)'/>
<use f='dpdk_18.05/lib/librte_latencystats/rte_latencystats.c' l='283' u='c' c='rte_latencystats_uninit'/>
<use f='dpdk_18.05/lib/librte_pdump/rte_pdump.c' l='279' u='c' c='pdump_register_tx_callbacks'/>
