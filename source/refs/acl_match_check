<def f='dpdk/lib/librte_acl/acl_run.h' l='202' ll='234' type='uint64_t acl_match_check(uint64_t transition, int slot, const struct rte_acl_ctx * ctx, struct parms * parms, struct acl_flow_data * flows, resolve_priority_t resolve_priority)'/>
<use f='dpdk/lib/librte_acl/acl_run_sse.h' l='111' u='c' c='acl_process_matches'/>
<use f='dpdk/lib/librte_acl/acl_run_sse.h' l='113' u='c' c='acl_process_matches'/>
<use f='dpdk/lib/librte_acl/acl_run_avx2.h' l='115' u='c' c='acl_process_matches_avx2x8'/>
<use f='dpdk/lib/librte_acl/acl_run_avx2.h' l='117' u='c' c='acl_process_matches_avx2x8'/>
<doc f='dpdk/lib/librte_acl/acl_run.h' l='197'>/*
 * Detect matches. If a match node transition is found, then this trie
 * traversal is complete and fill the slot with the next trie
 * to be processed.
 */</doc>
<use f='dpdk/lib/librte_acl/acl_run_scalar.c' l='133' u='c' c='rte_acl_classify_scalar'/>
<use f='dpdk/lib/librte_acl/acl_run_scalar.c' l='135' u='c' c='rte_acl_classify_scalar'/>
<use f='dpdk/lib/librte_acl/acl_run_scalar.c' l='156' u='c' c='rte_acl_classify_scalar'/>
<use f='dpdk/lib/librte_acl/acl_run_scalar.c' l='158' u='c' c='rte_acl_classify_scalar'/>
