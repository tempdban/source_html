<dec f='dpdk_18.05/lib/librte_rawdev/rte_rawdev.h' l='115' type='int rte_rawdev_configure(uint16_t dev_id, struct rte_rawdev_info * dev_conf)'/>
<doc f='dpdk_18.05/lib/librte_rawdev/rte_rawdev.h' l='90'>/**
 * Configure a raw device.
 *
 * This function must be invoked first before any other function in the
 * API. This function can also be re-invoked when a device is in the
 * stopped state.
 *
 * The caller may use rte_rawdev_info_get() to get the capability of each
 * resources available for this raw device.
 *
 * @param dev_id
 *   The identifier of the device to configure.
 * @param dev_conf
 *   The raw device configuration structure encapsulated into rte_rawdev_info
 *   object.
 *   It is assumed that the opaque object has enough information which the
 *   driver/implementation can use to configure the device. It is also assumed
 *   that once the configuration is done, a `queue_id` type field can be used
 *   to refer to some arbitrary internal representation of a queue.
 *
 * @return
 *   - 0: Success, device configured.
 *   - &lt;0: Error code returned by the driver configuration function.
 */</doc>
<use f='dpdk_18.05/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='128' u='c' c='test_rawdev_configure'/>
<use f='dpdk_18.05/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='138' u='c' c='test_rawdev_configure'/>
<def f='dpdk_18.05/lib/librte_rawdev/rte_rawdev.c' l='105' ll='132' type='int rte_rawdev_configure(uint16_t dev_id, struct rte_rawdev_info * dev_conf)'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.h' l='115' type='int rte_rawdev_configure(uint16_t dev_id, struct rte_rawdev_info * dev_conf)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.h' l='90'>/**
 * Configure a raw device.
 *
 * This function must be invoked first before any other function in the
 * API. This function can also be re-invoked when a device is in the
 * stopped state.
 *
 * The caller may use rte_rawdev_info_get() to get the capability of each
 * resources available for this raw device.
 *
 * @param dev_id
 *   The identifier of the device to configure.
 * @param dev_conf
 *   The raw device configuration structure encapsulated into rte_rawdev_info
 *   object.
 *   It is assumed that the opaque object has enough information which the
 *   driver/implementation can use to configure the device. It is also assumed
 *   that once the configuration is done, a `queue_id` type field can be used
 *   to refer to some arbitrary internal representation of a queue.
 *
 * @return
 *   - 0: Success, device configured.
 *   - &lt;0: Error code returned by the driver configuration function.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='128' u='c' c='test_rawdev_configure'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='138' u='c' c='test_rawdev_configure'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.c' l='108' ll='135' type='int rte_rawdev_configure(uint16_t dev_id, struct rte_rawdev_info * dev_conf)'/>
