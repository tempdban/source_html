<dec f='dpdk_18.05/lib/librte_mempool/rte_mempool.h' l='1849' type='size_t rte_mempool_xmem_size(uint32_t elt_num, size_t total_elt_sz, uint32_t pg_shift, unsigned int flags)'/>
<def f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='258' ll='264' type='size_t rte_mempool_xmem_size(uint32_t elt_num, size_t total_elt_sz, uint32_t pg_shift, unsigned int flags)'/>
<doc f='dpdk_18.05/lib/librte_mempool/rte_mempool.c' l='255'>/*
 * Calculate maximum amount of memory required to store given number of objects.
 */</doc>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='1552' type='size_t rte_mempool_xmem_size(uint32_t elt_num, size_t total_elt_sz, uint32_t pg_shift, unsigned int flags)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='1529'>/**
 * Get the size of memory required to store mempool elements.
 *
 * Calculate the maximum amount of memory required to store given number
 * of objects. Assume that the memory buffer will be aligned at page
 * boundary.
 *
 * Note that if object size is bigger then page size, then it assumes
 * that pages are grouped in subsets of physically continuous pages big
 * enough to store at least one object.
 *
 * @param elt_num
 *   Number of elements.
 * @param total_elt_sz
 *   The size of each element, including header and trailer, as returned
 *   by rte_mempool_calc_obj_size().
 * @param pg_shift
 *   LOG2 of the physical pages size. If set to 0, ignore page boundaries.
 * @param flags
 *  The mempool flags.
 * @return
 *   Required memory size aligned at page boundary.
 */</doc>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='211' ll='236' type='size_t rte_mempool_xmem_size(uint32_t elt_num, size_t total_elt_sz, uint32_t pg_shift, unsigned int flags)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='578' u='c' c='rte_mempool_populate_default'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='636' u='c' c='get_anon_size'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.c' l='208'>/*
 * Calculate maximum amount of memory required to store given number of objects.
 */</doc>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='1552' type='size_t rte_mempool_xmem_size(uint32_t elt_num, size_t total_elt_sz, uint32_t pg_shift, unsigned int flags)'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='1529'>/**
 * Get the size of memory required to store mempool elements.
 *
 * Calculate the maximum amount of memory required to store given number
 * of objects. Assume that the memory buffer will be aligned at page
 * boundary.
 *
 * Note that if object size is bigger then page size, then it assumes
 * that pages are grouped in subsets of physically continuous pages big
 * enough to store at least one object.
 *
 * @param elt_num
 *   Number of elements.
 * @param total_elt_sz
 *   The size of each element, including header and trailer, as returned
 *   by rte_mempool_calc_obj_size().
 * @param pg_shift
 *   LOG2 of the physical pages size. If set to 0, ignore page boundaries.
 * @param flags
 *  The mempool flags.
 * @return
 *   Required memory size aligned at page boundary.
 */</doc>
