<def f='include/boost/system/error_code.hpp' l='310' ll='387'/>
<size>16</size>
<doc f='include/boost/system/error_code.hpp' l='302'>//  class error_code  ----------------------------------------------------//

    //  We want error_code to be a value type that can be copied without slicing
    //  and without requiring heap allocation, but we also want it to have
    //  polymorphic behavior based on the error category. This is achieved by
    //  abstract base class error_category supplying the polymorphic behavior,
    //  and error_code containing a pointer to an object of a type derived
    //  from error_category.</doc>
<fun r='_ZN5boost6system10error_codeC1Ev'/>
<fun r='_ZN5boost6system10error_codeC1EiRKNS0_14error_categoryE'/>
<fun r='_ZN5boost6system10error_codeC1ET_PNS_9enable_ifINS0_18is_error_code_enumIS2_EEvE4typeE'/>
<fun r='_ZN5boost6system10error_code6assignEiRKNS0_14error_categoryE'/>
<fun r='_ZN5boost6system10error_codeaSET_'/>
<fun r='_ZN5boost6system10error_code5clearEv'/>
<fun r='_ZNK5boost6system10error_code5valueEv'/>
<fun r='_ZNK5boost6system10error_code8categoryEv'/>
<fun r='_ZNK5boost6system10error_code23default_error_conditionEv'/>
<fun r='_ZNK5boost6system10error_code7messageEv'/>
<fun r='_ZN5boost6system10error_code21unspecified_bool_trueEv'/>
<fun r='_ZNK5boost6system10error_codecvPFvvEEv'/>
<fun r='_ZNK5boost6system10error_codentEv'/>
<mbr r='boost::system::error_code::m_val' o='0' t='int'/>
<mbr r='boost::system::error_code::m_cat' o='64' t='const boost::system::error_category *'/>
