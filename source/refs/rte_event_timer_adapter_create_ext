<dec f='dpdk_18.05/lib/librte_eventdev/rte_event_timer_adapter.h' l='269' type='struct rte_event_timer_adapter * rte_event_timer_adapter_create_ext(const struct rte_event_timer_adapter_conf * conf, rte_event_timer_adapter_port_conf_cb_t conf_cb, void * conf_arg)'/>
<doc f='dpdk_18.05/lib/librte_eventdev/rte_event_timer_adapter.h' l='241'>/**
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * Create a timer adapter with the supplied callback.
 *
 * This function can be used to have a more granular control over the timer
 * adapter creation.  If a built-in port is absent, then the function uses the
 * callback provided to create and get the port id to be used as a producer
 * port.
 *
 * @param conf
 *   The timer adapter configuration structure
 * @param conf_cb
 *   The port config callback function.
 * @param conf_arg
 *   Opaque pointer to the argument for the callback function
 *
 * @return
 *   A pointer to the new allocated event timer adapter on success.
 *   NULL on error with rte_errno set appropriately.
 *   Possible rte_errno values include:
 *   - ERANGE: timer_tick_ns is not in supported range.
 *   - ENOMEM: unable to allocate sufficient memory for adapter instances
 *   - EINVAL: invalid event device identifier specified in config
 *   - ENOSPC: maximum number of adapters already created
 */</doc>
<use f='dpdk_18.05/lib/librte_eventdev/rte_event_timer_adapter.c' l='123' u='c' c='rte_event_timer_adapter_create'/>
<def f='dpdk_18.05/lib/librte_eventdev/rte_event_timer_adapter.c' l='127' ll='236' type='struct rte_event_timer_adapter * rte_event_timer_adapter_create_ext(const struct rte_event_timer_adapter_conf * conf, rte_event_timer_adapter_port_conf_cb_t conf_cb, void * conf_arg)'/>
