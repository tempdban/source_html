<dec f='dpdk_18.05/lib/librte_member/rte_member.h' l='210' type='uint32_t'/>
<offset>128</offset>
<doc f='dpdk_18.05/lib/librte_member/rte_member.h' l='194'>/**
	 * For HT setsummary, num_keys equals to the number of entries of the
	 * table. When the number of keys inserted in the HT setsummary
	 * approaches this number, eviction could happen. For cache mode,
	 * keys could be evicted out of the table. For non-cache mode, keys will
	 * be evicted to other buckets like cuckoo hash. The table will also
	 * likely to become full before the number of inserted keys equal to the
	 * total number of entries.
	 *
	 * For vBF, num_keys equal to the expected number of keys that will
	 * be inserted into the vBF. The implementation assumes the keys are
	 * evenly distributed to each BF in vBF. This is used to calculate the
	 * number of bits we need for each BF. User does not specify the size of
	 * each BF directly because the optimal size depends on the num_keys
	 * and false positive rate.
	 */</doc>
<use f='dpdk_18.05/lib/librte_member/rte_member_ht.c' l='80' u='r' c='rte_member_create_ht'/>
<use f='dpdk_18.05/lib/librte_member/rte_member_vbf.c' l='35' u='r' c='rte_member_create_vbf'/>
<use f='dpdk_18.05/lib/librte_member/rte_member_vbf.c' l='44' u='r' c='rte_member_create_vbf'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_member/rte_member.h' l='210' type='uint32_t'/>
<offset>128</offset>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_member/rte_member.h' l='194'>/**
	 * For HT setsummary, num_keys equals to the number of entries of the
	 * table. When the number of keys inserted in the HT setsummary
	 * approaches this number, eviction could happen. For cache mode,
	 * keys could be evicted out of the table. For non-cache mode, keys will
	 * be evicted to other buckets like cuckoo hash. The table will also
	 * likely to become full before the number of inserted keys equal to the
	 * total number of entries.
	 *
	 * For vBF, num_keys equal to the expected number of keys that will
	 * be inserted into the vBF. The implementation assumes the keys are
	 * evenly distributed to each BF in vBF. This is used to calculate the
	 * number of bits we need for each BF. User does not specify the size of
	 * each BF directly because the optimal size depends on the num_keys
	 * and false positive rate.
	 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_member/rte_member_ht.c' l='80' u='r' c='rte_member_create_ht'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_member/rte_member_vbf.c' l='35' u='r' c='rte_member_create_vbf'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_member/rte_member_vbf.c' l='44' u='r' c='rte_member_create_vbf'/>
