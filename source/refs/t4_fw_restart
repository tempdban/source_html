<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/cxgbe/base/common.h' l='289' type='int t4_fw_restart(struct adapter * adap, unsigned int mbox, int reset)'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/cxgbe/base/t4_hw.c' l='3339' ll='3379' type='int t4_fw_restart(struct adapter * adap, unsigned int mbox, int reset)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/cxgbe/base/t4_hw.c' l='3317'>/**
 * t4_fw_restart - restart the firmware by taking the uP out of RESET
 * @adap: the adapter
 * @mbox: mailbox to use for the FW RESET command (if desired)
 * @reset: if we want to do a RESET to restart things
 *
 * Restart firmware previously halted by t4_fw_halt().  On successful
 * return the previous PF Master remains as the new PF Master and there
 * is no need to issue a new HELLO command, etc.
 *
 * We do this in two ways:
 *
 * 1. If we&apos;re dealing with newer firmware we&apos;ll simply want to take
 *    the chip&apos;s microprocessor out of RESET.  This will cause the
 *    firmware to start up from its start vector.  And then we&apos;ll loop
 *    until the firmware indicates it&apos;s started again (PCIE_FW.HALT
 *    reset to 0) or we timeout.
 *
 * 2. If we&apos;re dealing with older firmware then we&apos;ll need to RESET
 *    the chip since older firmware won&apos;t recognize the PCIE_FW.HALT
 *    flag and automatically RESET itself on startup.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/cxgbe/cxgbe_main.c' l='685' u='c' c='adap_init0'/>
