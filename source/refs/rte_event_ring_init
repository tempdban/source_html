<dec f='dpdk/lib/librte_eventdev/rte_event_ring.h' l='180' type='int rte_event_ring_init(struct rte_event_ring * r, const char * name, unsigned int count, unsigned int flags)'/>
<doc f='dpdk/lib/librte_eventdev/rte_event_ring.h' l='151'>/*
 * Initializes an already-allocated ring structure
 *
 * @param r
 *   pointer to the ring memory to be initialized
 * @param name
 *   name to be given to the ring
 * @param count
 *   the number of elements to be stored in the ring. If the flag
 *   ``RING_F_EXACT_SZ`` is not set, this must be a power of 2, and the actual
 *   usable space in the ring will be ``count - 1`` entries. If the flag
 *   ``RING_F_EXACT_SZ`` is set, the this can be any value up to the ring size
 *   limit - 1, and the usable space will be exactly that requested.
 * @param flags
 *   An OR of the following:
 *    - RING_F_SP_ENQ: If this flag is set, the default behavior when
 *      using ``rte_ring_enqueue()`` or ``rte_ring_enqueue_bulk()``
 *      is &quot;single-producer&quot;. Otherwise, it is &quot;multi-producers&quot;.
 *    - RING_F_SC_DEQ: If this flag is set, the default behavior when
 *      using ``rte_ring_dequeue()`` or ``rte_ring_dequeue_bulk()``
 *      is &quot;single-consumer&quot;. Otherwise, it is &quot;multi-consumers&quot;.
 *    - RING_F_EXACT_SZ: If this flag is set, the ``count`` parameter is to
 *      be taken as the exact usable size of the ring, and as such does not
 *      need to be a power of 2. The underlying ring memory should be a
 *      power-of-2 size greater than the count value.
 * @return
 *   0 on success, or a negative value on error.
 */</doc>
<def f='dpdk/lib/librte_eventdev/rte_event_ring.c' l='21' ll='31' type='int rte_event_ring_init(struct rte_event_ring * r, const char * name, unsigned int count, unsigned int flags)'/>
<use f='dpdk/lib/librte_eventdev/rte_event_ring.c' l='89' u='c' c='rte_event_ring_create'/>
