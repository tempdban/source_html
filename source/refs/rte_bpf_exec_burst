<dec f='dpdk_18.05/lib/librte_bpf/rte_bpf.h' l='169' type='uint32_t rte_bpf_exec_burst(const struct rte_bpf * bpf, void ** ctx, uint64_t * rc, uint32_t num)'/>
<doc f='dpdk_18.05/lib/librte_bpf/rte_bpf.h' l='154'>/**
 * Execute given BPF bytecode over a set of input contexts.
 *
 * @param bpf
 *   handle for the BPF code to execute.
 * @param ctx
 *   array of pointers to the input contexts.
 * @param rc
 *   array of return values (one per input).
 * @param num
 *   number of elements in ctx[] (and rc[]).
 * @return
 *   number of successfully processed inputs.
 */</doc>
<def f='dpdk_18.05/lib/librte_bpf/bpf_exec.c' l='427' ll='444' macro='1' type='uint32_t rte_bpf_exec_burst(const struct rte_bpf * bpf, void ** ctx, uint64_t * rc, uint32_t num)'/>
<use f='dpdk_18.05/lib/librte_bpf/bpf_exec.c' l='451' u='c' c='rte_bpf_exec'/>
<use f='dpdk_18.05/lib/librte_bpf/bpf_pkt.c' l='216' u='c' c='pkt_filter_vm'/>
<use f='dpdk_18.05/lib/librte_bpf/bpf_pkt.c' l='247' u='c' c='pkt_filter_mb_vm'/>
