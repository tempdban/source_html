<dec f='dpdk_18.05/lib/librte_pipeline/rte_pipeline.h' l='810' type='int rte_pipeline_ah_packet_hijack(struct rte_pipeline * p, uint64_t pkts_mask)'/>
<def f='dpdk_18.05/lib/librte_pipeline/rte_pipeline.c' l='1485' ll='1492' type='int rte_pipeline_ah_packet_hijack(struct rte_pipeline * p, uint64_t pkts_mask)'/>
<doc f='dpdk_18.05/lib/librte_pipeline/rte_pipeline.h' l='785'>/**
 * Action handler packet hijack
 *
 * This function can be called by any input/output port or table action handler
 * to hijack selected packets from the burst of packets read from one of the
 * pipeline input ports and currently processed by the pipeline. The hijacked
 * packets are removed from any further pipeline processing, with the action
 * handler now having the full ownership for these packets.
 *
 * The action handler can further send the hijacked packets out through any
 * pipeline output port by calling the rte_pipeline_ah_port_out_packet_insert()
 * function. The action handler can also drop these packets by calling the
 * rte_pktmbuf_free() function, although a better alternative is provided by
 * the action handler using the rte_pipeline_ah_packet_drop() function.
 *
 * @param p
 *   Handle to pipeline instance
 * @param pkts_mask
 *   64-bit bitmask specifying which of the packets handed over for processing
 *   to the action handler is to be hijacked by the action handler. When
 *   pkts_mask bit n is set, then element n of the pkts array (input argument to
 *   the action handler) is hijacked.
 * @return
 *   0 on success, error code otherwise
 */</doc>
<use f='dpdk_18.05/lib/librte_pipeline/rte_port_in_action.c' l='411' u='c' c='ah_filter_on_match'/>
<use f='dpdk_18.05/lib/librte_pipeline/rte_port_in_action.c' l='445' u='c' c='ah_filter_on_mismatch'/>
<use f='dpdk_18.05/lib/librte_pipeline/rte_port_in_action.c' l='466' u='c' c='ah_lb'/>
