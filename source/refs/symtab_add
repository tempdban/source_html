<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='99' type='void symtab_add(const char * symbol, int segment, int32_t offset)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='338' u='c' c='processmodule'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='358' u='c' c='processmodule'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='386' u='c' c='processmodule'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='489' ll='532' type='void symtab_add(const char * symbol, int segment, int32_t offset)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='472'>/*
 * symtab_add()
 *
 * inserts a symbol into the global symbol table, which associates symbol
 * names either with addresses, or a marker that the symbol hasn&apos;t been
 * resolved yet, or possibly that the symbol has been defined as
 * contained in a dynamic [load time/run time] linked library.
 *
 * segment = -1 =&gt; not yet defined
 * segment = -2 =&gt; defined as dll symbol
 *
 * If the symbol is already defined, and the new segment &gt;= 0, then
 * if the original segment was &lt; 0 the symbol is redefined, otherwise
 * a duplicate symbol warning is issued. If new segment == -1, this
 * routine won&apos;t change a previously existing symbol. It will change
 * to segment = -2 only if the segment was previously &lt; 0.
 */</doc>
