<dec f='dpdk/lib/librte_compressdev/rte_compressdev.h' l='391' type='uint16_t rte_compressdev_dequeue_burst(uint8_t dev_id, uint16_t qp_id, struct rte_comp_op ** ops, uint16_t nb_ops)'/>
<doc f='dpdk/lib/librte_compressdev/rte_compressdev.h' l='336'>/**
 *
 * Dequeue a burst of processed compression operations from a queue on the comp
 * device. The dequeued operation are stored in *rte_comp_op* structures
 * whose pointers are supplied in the *ops* array.
 *
 * The rte_compressdev_dequeue_burst() function returns the number of ops
 * actually dequeued, which is the number of *rte_comp_op* data structures
 * effectively supplied into the *ops* array.
 *
 * A return value equal to *nb_ops* indicates that the queue contained
 * at least *nb_ops* operations, and this is likely to signify that other
 * processed operations remain in the devices output queue. Applications
 * implementing a &quot;retrieve as many processed operations as possible&quot; policy
 * can check this specific case and keep invoking the
 * rte_compressdev_dequeue_burst() function until a value less than
 * *nb_ops* is returned.
 *
 * The rte_compressdev_dequeue_burst() function does not provide any error
 * notification to avoid the corresponding overhead.
 *
 * @note: operation ordering is not maintained within the queue pair.
 *
 * @note: In case op status = OUT_OF_SPACE_TERMINATED, op.consumed=0 and the
 * op must be resubmitted with the same input data and a larger output buffer.
 * op.produced is usually 0, but in decompression cases a PMD may return &gt; 0
 * and the application may find it useful to inspect that data.
 * This status is only returned on STATELESS ops.
 *
 * @note: In case op status = OUT_OF_SPACE_RECOVERABLE, op.produced can be used
 * and next op in stream should continue on from op.consumed+1 with a fresh
 * output buffer.
 * Consumed=0, produced=0 is an unusual but allowed case. There may be useful
 * state/history stored in the PMD, even though no output was produced yet.
 *
 *
 * @param dev_id
 *   Compress device identifier
 * @param qp_id
 *   The index of the queue pair from which to retrieve
 *   processed operations. The value must be in the range
 *   [0, nb_queue_pair - 1] previously supplied to
 *   rte_compressdev_configure()
 * @param ops
 *   The address of an array of pointers to
 *   *rte_comp_op* structures that must be
 *   large enough to store *nb_ops* pointers in it
 * @param nb_ops
 *   The maximum number of operations to dequeue
 * @return
 *   - The number of operations actually dequeued, which is the number
 *   of pointers to *rte_comp_op* structures effectively supplied to the
 *   *ops* array.
 */</doc>
<def f='dpdk/lib/librte_compressdev/rte_compressdev.c' l='577' ll='587' type='uint16_t rte_compressdev_dequeue_burst(uint8_t dev_id, uint16_t qp_id, struct rte_comp_op ** ops, uint16_t nb_ops)'/>
