<dec f='include/mbedtls/rsa.h' l='1086' type='int mbedtls_rsa_rsassa_pss_verify_ext(mbedtls_rsa_context * ctx, int (*)(void *, unsigned char *, size_t) f_rng, void * p_rng, int mode, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char * hash, mbedtls_md_type_t mgf1_hash_id, int expected_salt_len, const unsigned char * sig)'/>
<doc f='include/mbedtls/rsa.h' l='1057'>/**
 * \brief          This function performs a PKCS#1 v2.1 PSS verification
 *                 operation (RSASSA-PSS-VERIFY).
 *
 *                 The hash function for the MGF mask generating function
 *                 is that specified in \p mgf1_hash_id.
 *
 * \param ctx      The RSA public key context.
 * \param f_rng    The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG parameter.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param md_alg   The message-digest algorithm used to hash the original data.
 *                 Use #MBEDTLS_MD_NONE for signing raw data.
 * \param hashlen  The length of the message digest. Only used if \p md_alg is #MBEDTLS_MD_NONE.
 * \param hash     The buffer holding the message digest.
 * \param mgf1_hash_id The message digest used for mask generation.
 * \param expected_salt_len The length of the salt used in padding. Use
 *                 #MBEDTLS_RSA_SALT_LEN_ANY to accept any salt length.
 * \param sig      The buffer holding the ciphertext.
 *
 * \return         \c 0 if the verify operation was successful,
 *                 or an \c MBEDTLS_ERR_RSA_XXX error code
 *                 on failure.
 *
 * \note           The \p sig buffer must be as large as the size
 *                 of \p ctx-&gt;N. For example, 128 Bytes if RSA-1024 is used.
 *
 * \note           The \p hash_id in the RSA context is ignored.
 */</doc>
