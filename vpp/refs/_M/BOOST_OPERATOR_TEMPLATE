<dec f='include/boost/operators.hpp' l='787'/>
<use f='include/boost/operators.hpp' l='833' u='c'/>
<use f='include/boost/operators.hpp' l='834' u='c'/>
<use f='include/boost/operators.hpp' l='835' u='c'/>
<use f='include/boost/operators.hpp' l='836' u='c'/>
<use f='include/boost/operators.hpp' l='837' u='c'/>
<use f='include/boost/operators.hpp' l='839' u='c'/>
<use f='include/boost/operators.hpp' l='841' u='c'/>
<use f='include/boost/operators.hpp' l='843' u='c'/>
<use f='include/boost/operators.hpp' l='844' u='c'/>
<use f='include/boost/operators.hpp' l='845' u='c'/>
<use f='include/boost/operators.hpp' l='853' u='c'/>
<use f='include/boost/operators.hpp' l='854' u='c'/>
<use f='include/boost/operators.hpp' l='855' u='c'/>
<use f='include/boost/operators.hpp' l='856' u='c'/>
<use f='include/boost/operators.hpp' l='858' u='c'/>
<use f='include/boost/operators.hpp' l='859' u='c'/>
<use f='include/boost/operators.hpp' l='860' u='c'/>
<use f='include/boost/operators.hpp' l='861' u='c'/>
<use f='include/boost/operators.hpp' l='862' u='c'/>
<use f='include/boost/operators.hpp' l='863' u='c'/>
<use f='include/boost/operators.hpp' l='864' u='c'/>
<use f='include/boost/operators.hpp' l='866' u='c'/>
<use f='include/boost/operators.hpp' l='867' u='c'/>
<use f='include/boost/operators.hpp' l='868' u='c'/>
<use f='include/boost/operators.hpp' l='869' u='c'/>
<use f='include/boost/operators.hpp' l='870' u='c'/>
<use f='include/boost/operators.hpp' l='871' u='c'/>
<use f='include/boost/operators.hpp' l='872' u='c'/>
<use f='include/boost/operators.hpp' l='873' u='c'/>
<use f='include/boost/operators.hpp' l='874' u='c'/>
<use f='include/boost/operators.hpp' l='881' u='w'/>
<doc f='include/boost/operators.hpp' l='773'>// BOOST_OPERATOR_TEMPLATE(template_name) defines template_name&lt;&gt; such that it
// can be used for specifying both 1-argument and 2-argument forms. Requires the
// existence of two previously defined class templates named &apos;&lt;template_name&gt;1&apos;
// and &apos;&lt;template_name&gt;2&apos; which must implement the corresponding 1- and 2-
// argument forms.
//
// The template type parameter O == is_chained_base&lt;U&gt;::value is used to
// distinguish whether the 2nd argument to &lt;template_name&gt; is being used for
// base class chaining from another boost operator template or is describing a
// 2nd operand type. O == true_t only when U is actually an another operator
// template from the library. Partial specialization is used to select an
// implementation in terms of either &apos;&lt;template_name&gt;1&apos; or &apos;&lt;template_name&gt;2&apos;.
//</doc>
