<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/avf/base/avf_prototype.h' l='136' type='enum avf_status_code avf_aq_rx_ctl_write_register(struct avf_hw * hw, u32 reg_addr, u32 reg_val, struct avf_asq_cmd_details * cmd_details)'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/avf/base/avf_common.c' l='1022' ll='1039' type='enum avf_status_code avf_aq_rx_ctl_write_register(struct avf_hw * hw, u32 reg_addr, u32 reg_val, struct avf_asq_cmd_details * cmd_details)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/avf/base/avf_common.c' l='1058' u='c' c='avf_write_rx_ctl'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/avf/base/avf_common.c' l='1012'>/**
 * avf_aq_rx_ctl_write_register
 * @hw: pointer to the hw struct
 * @reg_addr: register address
 * @reg_val: register value
 * @cmd_details: pointer to command details structure or NULL
 *
 * Use the firmware to write to an Rx control register,
 * especially useful if the Rx unit is under heavy pressure
 **/</doc>
