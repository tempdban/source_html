<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ring/rte_ring.h' l='607' ll='613' type='unsigned int rte_ring_dequeue_bulk(struct rte_ring * r, void ** obj_table, unsigned int n, unsigned int * available)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ring/rte_ring.h' l='673' u='c' c='rte_ring_dequeue'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_ring/rte_ring.h' l='588'>/**
 * Dequeue several objects from a ring.
 *
 * This function calls the multi-consumers or the single-consumer
 * version, depending on the default behaviour that was specified at
 * ring creation time (see flags).
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects) that will be filled.
 * @param n
 *   The number of objects to dequeue from the ring to the obj_table.
 * @param available
 *   If non-NULL, returns the number of remaining ring entries after the
 *   dequeue has finished.
 * @return
 *   The number of objects dequeued, either 0 or n
 */</doc>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_ring.h' l='607' ll='613' type='unsigned int rte_ring_dequeue_bulk(struct rte_ring * r, void ** obj_table, unsigned int n, unsigned int * available)'/>
<use f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_ring.h' l='673' u='c' c='rte_ring_dequeue'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_ring.h' l='588'>/**
 * Dequeue several objects from a ring.
 *
 * This function calls the multi-consumers or the single-consumer
 * version, depending on the default behaviour that was specified at
 * ring creation time (see flags).
 *
 * @param r
 *   A pointer to the ring structure.
 * @param obj_table
 *   A pointer to a table of void * pointers (objects) that will be filled.
 * @param n
 *   The number of objects to dequeue from the ring to the obj_table.
 * @param available
 *   If non-NULL, returns the number of remaining ring entries after the
 *   dequeue has finished.
 * @return
 *   The number of objects dequeued, either 0 or n
 */</doc>
