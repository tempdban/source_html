<dec f='vpp_1804/src/vpp-api/vom/acl_ethertype.hpp' l='218' type='const std::shared_ptr&lt;interface&gt;'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='75' u='w' c='_ZN3VOM3ACL13acl_ethertypeC1ERKNS_9interfaceERKSt8multisetINS0_16ethertype_rule_tESt4lessIS6_ESaIS6_EE'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='82' u='w' c='_ZN3VOM3ACL13acl_ethertypeC1ERKS1_'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='82' u='r' c='_ZN3VOM3ACL13acl_ethertypeC1ERKS1_'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='93' u='m' c='_ZN3VOM3ACL13acl_ethertypeD1Ev'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='100' u='m' c='_ZN3VOM3ACL13acl_ethertype5sweepEv'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='108' u='m' c='_ZNK3VOM3ACL13acl_ethertype3keyEv'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='114' u='m' c='_ZNK3VOM3ACL13acl_ethertypeeqERKS1_'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='114' u='m' c='_ZNK3VOM3ACL13acl_ethertypeeqERKS1_'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='134' u='m' c='_ZN3VOM3ACL13acl_ethertype6replayEv'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='142' u='m' c='_ZNK3VOM3ACL13acl_ethertype9to_stringEv'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='161' u='m' c='_ZN3VOM3ACL13acl_ethertype6updateERKS1_'/>
<use f='vpp_1804/src/vpp-api/vom/acl_ethertype.cpp' l='170' u='m' c='_ZN3VOM3ACL13acl_ethertype11find_or_addERKS1_'/>
<offset>64</offset>
<doc f='vpp_1804/src/vpp-api/vom/acl_ethertype.hpp' l='213'>/**
   * A reference counting pointer to the interface on which acl ethertype
   * resides. By holding the reference here, we can guarantee that
   * this object will outlive the interface
   */</doc>
