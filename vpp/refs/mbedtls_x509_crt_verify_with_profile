<dec f='include/mbedtls/x509_crt.h' l='348' type='int mbedtls_x509_crt_verify_with_profile(mbedtls_x509_crt * crt, mbedtls_x509_crt * trust_ca, mbedtls_x509_crl * ca_crl, const mbedtls_x509_crt_profile * profile, const char * cn, uint32_t * flags, int (*)(void *, mbedtls_x509_crt *, int, uint32_t *) f_vrfy, void * p_vrfy)'/>
<doc f='include/mbedtls/x509_crt.h' l='321'>/**
 * \brief          Verify the certificate signature according to profile
 *
 * \note           Same as \c mbedtls_x509_crt_verify(), but with explicit
 *                 security profile.
 *
 * \note           The restrictions on keys (RSA minimum size, allowed curves
 *                 for ECDSA) apply to all certificates: trusted root,
 *                 intermediate CAs if any, and end entity certificate.
 *
 * \param crt      a certificate (chain) to be verified
 * \param trust_ca the list of trusted CAs
 * \param ca_crl   the list of CRLs for trusted CAs
 * \param profile  security profile for verification
 * \param cn       expected Common Name (can be set to
 *                 NULL if the CN must not be verified)
 * \param flags    result of the verification
 * \param f_vrfy   verification function
 * \param p_vrfy   verification parameter
 *
 * \return         0 if successful or MBEDTLS_ERR_X509_CERT_VERIFY_FAILED
 *                 in which case *flags will have one or more
 *                 MBEDTLS_X509_BADCERT_XXX or MBEDTLS_X509_BADCRL_XXX flags
 *                 set,
 *                 or another error in case of a fatal error encountered
 *                 during the verification process.
 */</doc>
