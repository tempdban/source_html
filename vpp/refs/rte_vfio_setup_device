<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_vfio.h' l='56' type='int rte_vfio_setup_device(const char * sysfs_base, const char * dev_addr, int * vfio_dev_fd, struct vfio_device_info * device_info)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_vfio.h' l='31'>/**
 * Setup vfio_cfg for the device identified by its address.
 * It discovers the configured I/O MMU groups or sets a new one for the device.
 * If a new groups is assigned, the DMA mapping is performed.
 *
 * This function is only relevant to linux and will return
 * an error on BSD.
 *
 * @param sysfs_base
 *   sysfs path prefix.
 *
 * @param dev_addr
 *   device location.
 *
 * @param vfio_dev_fd
 *   VFIO fd.
 *
 * @param device_info
 *   Device information.
 *
 * @return
 *   0 on success.
 *   &lt;0 on failure.
 *   &gt;1 if the device cannot be managed this way.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/bus/pci/linux/pci_vfio.c' l='438' u='c' c='pci_vfio_map_resource_primary'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/bus/pci/linux/pci_vfio.c' l='554' u='c' c='pci_vfio_map_resource_secondary'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/linuxapp/eal/eal_vfio.c' l='257' ll='387' type='int rte_vfio_setup_device(const char * sysfs_base, const char * dev_addr, int * vfio_dev_fd, struct vfio_device_info * device_info)'/>
