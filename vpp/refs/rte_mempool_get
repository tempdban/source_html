<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='1362' ll='1366' type='int rte_mempool_get(struct rte_mempool * mp, void ** obj_p)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mbuf/rte_mbuf.h' l='879' u='c' c='rte_mbuf_raw_alloc'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='1342'>/**
 * Get one object from the mempool.
 *
 * This function calls the multi-consumers or the single-consumer
 * version, depending on the default behavior that was specified at
 * mempool creation (see flags).
 *
 * If cache is enabled, objects will be retrieved first from cache,
 * subsequently from the common pool. Note that it can return -ENOENT when
 * the local cache and common pool are empty, even if cache from other
 * lcores are full.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param obj_p
 *   A pointer to a void * pointer (object) that will be filled.
 * @return
 *   - 0: Success; objects taken.
 *   - -ENOENT: Not enough entries in the mempool; no object is retrieved.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/app/test-eventdev/test_perf_common.c' l='57' u='c' c='perf_producer'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/aesni_gcm/aesni_gcm_pmd.c' l='137' u='c' c='aesni_gcm_get_session'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/aesni_gcm/aesni_gcm_pmd.c' l='140' u='c' c='aesni_gcm_get_session'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/aesni_gcm/aesni_gcm_pmd_ops.c' l='291' u='c' c='aesni_gcm_pmd_session_configure'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/aesni_mb/rte_aesni_mb_pmd.c' l='454' u='c' c='get_session'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/aesni_mb/rte_aesni_mb_pmd.c' l='457' u='c' c='get_session'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/aesni_mb/rte_aesni_mb_pmd_ops.c' l='538' u='c' c='aesni_mb_pmd_session_configure'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/null/null_crypto_pmd.c' l='87' u='c' c='get_session'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/null/null_crypto_pmd.c' l='90' u='c' c='get_session'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/null/null_crypto_pmd_ops.c' l='287' u='c' c='null_crypto_pmd_session_configure'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/qat/qat_crypto.c' l='472' u='c' c='qat_crypto_sym_configure_session'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/crypto/qat/qat_qp.c' l='198' u='c' c='qat_crypto_sym_qp_setup'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/net/ixgbe/ixgbe_ipsec.c' l='358' u='c' c='ixgbe_crypto_create_session'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_cryptodev/rte_cryptodev.c' l='1097' u='c' c='rte_cryptodev_sym_session_create'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_security/rte_security.c' l='52' u='c' c='rte_security_session_create'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_vhost/iotlb.c' l='99' u='c' c='vhost_user_iotlb_pending_insert'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_vhost/iotlb.c' l='106' u='c' c='vhost_user_iotlb_pending_insert'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_vhost/iotlb.c' l='192' u='c' c='vhost_user_iotlb_cache_insert'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_vhost/iotlb.c' l='199' u='c' c='vhost_user_iotlb_cache_insert'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='1362' ll='1366' type='int rte_mempool_get(struct rte_mempool * mp, void ** obj_p)'/>
<use f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mbuf.h' l='879' u='c' c='rte_mbuf_raw_alloc'/>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='1342'>/**
 * Get one object from the mempool.
 *
 * This function calls the multi-consumers or the single-consumer
 * version, depending on the default behavior that was specified at
 * mempool creation (see flags).
 *
 * If cache is enabled, objects will be retrieved first from cache,
 * subsequently from the common pool. Note that it can return -ENOENT when
 * the local cache and common pool are empty, even if cache from other
 * lcores are full.
 *
 * @param mp
 *   A pointer to the mempool structure.
 * @param obj_p
 *   A pointer to a void * pointer (object) that will be filled.
 * @return
 *   - 0: Success; objects taken.
 *   - -ENOENT: Not enough entries in the mempool; no object is retrieved.
 */</doc>
