<dec f='vpp_1804/src/vppinfra/maplog.h' l='115' type='int clib_maplog_process(char * file_basename, void * fp_arg)'/>
<def f='vpp_1804/src/vppinfra/maplog.c' l='383' ll='488' type='int clib_maplog_process(char * file_basename, void * fp_arg)'/>
<doc f='vpp_1804/src/vppinfra/maplog.c' l='366'>/**
 * @brief Process a complete maplog
 *
 * Reads the maplog header. Map and process all log segments in order.
 * Calls the callback function once per file with a record count.
 *
 * Note: if the file header isn&apos;t updated by calling
 * clib_maplog_close(), it will appear to have an infinite
 * number of records in an infinite number of files.
 *
 * So long as the callback function understands that possibility
 * - by simply ignoring NULL records - the scheme still
 * works...
 *
 * @param [in] file_basename Same basename supplied to clib_maplog_init
 * @param [in] fp_arg Callback function pointer
 */</doc>
