<dec f='vpp_1804/src/vppinfra/vec.h' l='99' type='void * vec_resize_allocate_memory(void * v, word length_increment, uword data_bytes, uword header_bytes, uword data_align)'/>
<use f='vpp_1804/src/vppinfra/vec.h' l='142' u='c' c='_vec_resize'/>
<doc f='vpp_1804/src/vppinfra/vec.h' l='90'>/** \brief Low-level resize allocation function, usually not called directly

    @param v pointer to a vector
    @param length_increment length increment in elements
    @param data_bytes requested size in bytes
    @param header_bytes header size in bytes (may be zero)
    @param data_align alignment (may be zero)
    @return v_prime pointer to resized vector, may or may not equal v
*/</doc>
<def f='vpp_1804/src/vppinfra/vec.c' l='43' ll='106' type='void * vec_resize_allocate_memory(void * v, word length_increment, uword data_bytes, uword header_bytes, uword data_align)'/>
<doc f='vpp_1804/src/vppinfra/vec.c' l='41'>/* Vector resize operator.  Called as needed by various macros such as
   vec_add1() when we need to allocate memory. */</doc>
