<dec f='vpp_1804/src/vnet/adj/adj_mcast.h' l='93' type='void adj_mcast_midchain_update_rewrite(adj_index_t adj_index, adj_midchain_fixup_t fixup, const void * fixup_data, adj_flags_t flags, u8 * rewrite, u8 offset, u32 mask)'/>
<doc f='vpp_1804/src/vnet/adj/adj_mcast.h' l='72'>/**
 * @brief
 *  Update the rewrite string for an existing adjacecny and
 *  Convert the adjacency into a midchain
 *
 * @param
 *  The index of the adj to update
 *
 * @param fixup
 *  The function that will be invoked at paket switch time to &apos;fixup&apos;
 *  the rewrite applied with necessary per-packet info (i.e. length, checksums).
 * @param fixup_data
 *  Context data set by the caller that is provided as an argument in the
 *  fixup function.
 *
 * @param flags
 *  Flags controlling the adjacency behaviour
 *
 * @param
 *  The new rewrite
 */</doc>
<def f='vpp_1804/src/vnet/adj/adj_mcast.c' l='139' ll='184' type='void adj_mcast_midchain_update_rewrite(adj_index_t adj_index, adj_midchain_fixup_t fixup, const void * fixup_data, adj_flags_t flags, u8 * rewrite, u8 offset, u32 mask)'/>
<doc f='vpp_1804/src/vnet/adj/adj_mcast.c' l='132'>/**
 * adj_mcast_midchain_update_rewrite
 *
 * Update the adjacency&apos;s rewrite string. A NULL string implies the
 * rewirte is reset (i.e. when ARP/ND etnry is gone).
 * NB: the adj being updated may be handling traffic in the DP.
 */</doc>
<use f='vpp_1804/src/vnet/mpls/mpls_tunnel.c' l='412' u='c' c='mpls_tunnel_update_adj'/>
<use f='vpp_1804/src/plugins/pppoe/pppoe.c' l='199' u='c' c='pppoe_update_adj'/>
