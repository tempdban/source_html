<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/malloc_heap.h' l='27' type='void * malloc_heap_alloc(struct malloc_heap * heap, const char * type, size_t size, unsigned int flags, size_t align, size_t bound)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_memzone.c' l='190' u='c' c='memzone_reserve_aligned_thread_unsafe'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_memzone.c' l='199' u='c' c='memzone_reserve_aligned_thread_unsafe'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/malloc_heap.c' l='125' ll='146' type='void * malloc_heap_alloc(struct malloc_heap * heap, const char * type, size_t size, unsigned int flags, size_t align, size_t bound)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/malloc_heap.c' l='119'>/*
 * Main function to allocate a block of memory from the heap.
 * It locks the free list, scans it, and adds a new memseg if the
 * scan fails. Once the new memseg is added, it re-scans and should return
 * the new element after releasing the lock.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/rte_malloc.c' l='62' u='c' c='rte_malloc_socket'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/rte_malloc.c' l='73' u='c' c='rte_malloc_socket'/>
