<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.h' l='342' type='int rte_rawdev_get_attr(uint16_t dev_id, const char * attr_name, uint64_t * attr_value)'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.h' l='322'>/**
 * Get an attribute value from implementation.
 * Attribute is an opaque handle agreed upon between application and PMD.
 *
 * Implementations are expected to maintain an array of attribute-value pairs
 * based on application calls. Memory management for this structure is
 * shared responsibility of implementation and application.
 *
 * @param dev_id
 *   The identifier of the device to configure.
 * @param attr_name
 *   Opaque object representing an attribute in implementation.
 * @param attr_value [out]
 *   Opaque response to the attribute value. In case of error, this remains
 *   untouched. This is double pointer of void type.
 * @return
 *   0 for success
 *  !0 Error; attr_value remains untouched in case of error.
 */</doc>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='280' u='c' c='test_rawdev_attr_set_get'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/drivers/raw/skeleton_rawdev/skeleton_rawdev_test.c' l='286' u='c' c='test_rawdev_attr_set_get'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_rawdev/rte_rawdev.c' l='178' ll='190' type='int rte_rawdev_get_attr(uint16_t dev_id, const char * attr_name, uint64_t * attr_value)'/>
