<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='96' type='void processmodule(const char * filename, struct modulenode * mod)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='225' u='c' c='loadmodule'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='237' ll='422' type='void processmodule(const char * filename, struct modulenode * mod)'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='678' u='c' c='search_libraries'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='92'>/* ==========================================================================
 * Function prototypes of private utility functions
 */</doc>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/nasm-2.13.01/rdoff/ldrdf.c' l='228'>/*
 * processmodule()
 *
 * step through each segment, determine what exactly we&apos;re doing with
 * it, and if we intend to keep it, determine (a) which segment to
 * put it in and (b) whereabouts in that segment it will end up.
 * (b) is fairly easy, because we&apos;re now keeping track of how big each
 * segment in our output file is...
 */</doc>
