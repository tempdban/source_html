<dec f='include/mbedtls/ssl.h' l='1131' type='void mbedtls_ssl_set_bio(mbedtls_ssl_context * ssl, void * p_bio, mbedtls_ssl_send_t * f_send, mbedtls_ssl_recv_t * f_recv, mbedtls_ssl_recv_timeout_t * f_recv_timeout)'/>
<use f='vpp_1804/src/plugins/tlsmbedtls/tls_mbedtls.c' l='242' u='c' c='mbedtls_ctx_init_client'/>
<use f='vpp_1804/src/plugins/tlsmbedtls/tls_mbedtls.c' l='341' u='c' c='mbedtls_ctx_init_server'/>
<doc f='include/mbedtls/ssl.h' l='1101'>/**
 * \brief          Set the underlying BIO callbacks for write, read and
 *                 read-with-timeout.
 *
 * \param ssl      SSL context
 * \param p_bio    parameter (context) shared by BIO callbacks
 * \param f_send   write callback
 * \param f_recv   read callback
 * \param f_recv_timeout blocking read callback with timeout.
 *
 * \note           One of f_recv or f_recv_timeout can be NULL, in which case
 *                 the other is used. If both are non-NULL, f_recv_timeout is
 *                 used and f_recv is ignored (as if it were NULL).
 *
 * \note           The two most common use cases are:
 *                 - non-blocking I/O, f_recv != NULL, f_recv_timeout == NULL
 *                 - blocking I/O, f_recv == NULL, f_recv_timout != NULL
 *
 * \note           For DTLS, you need to provide either a non-NULL
 *                 f_recv_timeout callback, or a f_recv that doesn&apos;t block.
 *
 * \note           See the documentations of \c mbedtls_ssl_sent_t,
 *                 \c mbedtls_ssl_recv_t and \c mbedtls_ssl_recv_timeout_t for
 *                 the conventions those callbacks must follow.
 *
 * \note           On some platforms, net_sockets.c provides
 *                 \c mbedtls_net_send(), \c mbedtls_net_recv() and
 *                 \c mbedtls_net_recv_timeout() that are suitable to be used
 *                 here.
 */</doc>
