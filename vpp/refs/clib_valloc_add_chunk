<dec f='vpp_1804/src/vppinfra/valloc.h' l='54' type='void clib_valloc_add_chunk(clib_valloc_main_t * vam, clib_valloc_chunk_t * template)'/>
<def f='vpp_1804/src/vppinfra/valloc.c' l='32' ll='121' type='void clib_valloc_add_chunk(clib_valloc_main_t * vam, clib_valloc_chunk_t * template)'/>
<use f='vpp_1804/src/vppinfra/valloc.c' l='141' u='c' c='clib_valloc_init'/>
<doc f='vpp_1804/src/vppinfra/valloc.c' l='22'>/** Add a chunk of memory to a virtual allocation arena
    @param vam - clib_valloc_main_t * pointer to the allocation arena
    @param template - clib_valloc_chunk_t * pointer to a template chunk which
    describes the virtual address range to add

    @note only the baseva and size member of the template chunk are significant
    It&apos;s perfectly OK for the new chunk to be discontinuous with previous
    chunks, the chunk fusion algorithm won&apos;t merge them.
 */</doc>
