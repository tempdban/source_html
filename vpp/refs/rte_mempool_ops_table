<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='431' ll='438'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='441' type='struct rte_mempool_ops_table'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='457' u='m' c='rte_mempool_get_ops'/>
<size>2112</size>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='422'>/**
 * Structure storing the table of registered ops structs, each of which contain
 * the function pointers for the mempool ops functions.
 * Each process has its own storage for this ops struct array so that
 * the mempools can be shared across primary and secondary processes.
 * The indices used to access the array are valid across processes, whereas
 * any function pointers stored directly in the mempool struct would not be.
 * This results in us simply having &quot;ops_index&quot; in the mempool struct.
 */</doc>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool.h' l='440'>/** Array of registered ops structs. */</doc>
<mbr r='rte_mempool_ops_table::sl' o='0' t='rte_spinlock_t'/>
<mbr r='rte_mempool_ops_table::num_ops' o='32' t='uint32_t'/>
<mbr r='rte_mempool_ops_table::ops' o='512' t='struct rte_mempool_ops [16]'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='14' ll='17' type='struct rte_mempool_ops_table'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='26' u='m' c='rte_mempool_register_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='28' u='m' c='rte_mempool_register_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='30' u='m' c='rte_mempool_register_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='38' u='m' c='rte_mempool_register_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='45' u='m' c='rte_mempool_register_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='52' u='m' c='rte_mempool_register_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='53' u='m' c='rte_mempool_register_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='63' u='m' c='rte_mempool_register_ops'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='138' u='m' c='rte_mempool_set_ops_byname'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='140' u='m' c='rte_mempool_set_ops_byname'/>
<use f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='141' u='m' c='rte_mempool_set_ops_byname'/>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_mempool/rte_mempool_ops.c' l='13'>/* indirect jump table to support external memory pools. */</doc>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='431' ll='438'/>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='441' type='struct rte_mempool_ops_table'/>
<use f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='457' u='m' c='rte_mempool_get_ops'/>
<size>2112</size>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='422'>/**
 * Structure storing the table of registered ops structs, each of which contain
 * the function pointers for the mempool ops functions.
 * Each process has its own storage for this ops struct array so that
 * the mempools can be shared across primary and secondary processes.
 * The indices used to access the array are valid across processes, whereas
 * any function pointers stored directly in the mempool struct would not be.
 * This results in us simply having &quot;ops_index&quot; in the mempool struct.
 */</doc>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_mempool.h' l='440'>/** Array of registered ops structs. */</doc>
<mbr r='rte_mempool_ops_table::sl' o='0' t='rte_spinlock_t'/>
<mbr r='rte_mempool_ops_table::num_ops' o='32' t='uint32_t'/>
<mbr r='rte_mempool_ops_table::ops' o='512' t='struct rte_mempool_ops [16]'/>
<use f='vpp_1804/src/plugins/dpdk/device/init.c' l='138' u='m' c='get_ops_by_name'/>
<use f='vpp_1804/src/plugins/dpdk/device/init.c' l='140' u='m' c='get_ops_by_name'/>
<use f='vpp_1804/src/plugins/dpdk/device/init.c' l='141' u='m' c='get_ops_by_name'/>
