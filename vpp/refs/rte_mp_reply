<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_eal.h' l='218' ll='222'/>
<dec f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_eal.h' l='340' type='int rte_mp_reply(struct rte_mp_msg * msg, const char * peer)'/>
<size>16</size>
<doc f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/include/rte_eal.h' l='320'>/**
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * Send a reply to the peer process.
 *
 * This function will send a reply message in response to a request message
 * received previously.
 *
 * @param msg
 *   The msg argument contains the customized message.
 *
 * @param peer
 *   The peer argument is the pointer to the peer socket path.
 *
 * @return
 *  - On success, return 0.
 *  - On failure, return -1, and the reason will be stored in rte_errno.
 */</doc>
<mbr r='rte_mp_reply::nb_sent' o='0' t='int'/>
<mbr r='rte_mp_reply::nb_received' o='32' t='int'/>
<mbr r='rte_mp_reply::msgs' o='64' t='struct rte_mp_msg *'/>
<def f='vpp_1804/build-root/build-vpp_debug-native/dpdk/dpdk-stable-18.02.1/lib/librte_eal/common/eal_common_proc.c' l='668' ll='684' type='int rte_mp_reply(struct rte_mp_msg * msg, const char * peer)'/>
<def f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_eal.h' l='218' ll='222'/>
<dec f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_eal.h' l='340' type='int rte_mp_reply(struct rte_mp_msg * msg, const char * peer)'/>
<size>16</size>
<doc f='vpp_1804/build-root/install-vpp_debug-native/dpdk/include/dpdk/rte_eal.h' l='320'>/**
 * @warning
 * @b EXPERIMENTAL: this API may change without prior notice
 *
 * Send a reply to the peer process.
 *
 * This function will send a reply message in response to a request message
 * received previously.
 *
 * @param msg
 *   The msg argument contains the customized message.
 *
 * @param peer
 *   The peer argument is the pointer to the peer socket path.
 *
 * @return
 *  - On success, return 0.
 *  - On failure, return -1, and the reason will be stored in rte_errno.
 */</doc>
<mbr r='rte_mp_reply::nb_sent' o='0' t='int'/>
<mbr r='rte_mp_reply::nb_received' o='32' t='int'/>
<mbr r='rte_mp_reply::msgs' o='64' t='struct rte_mp_msg *'/>
